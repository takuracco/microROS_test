
uros_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017de4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  08017fe8  08017fe8  00018fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d5c  08018d5c  0001a210  2**0
                  CONTENTS
  4 .ARM          00000008  08018d5c  08018d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d64  08018d64  0001a210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018d64  08018d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018d6c  08018d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08018d70  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000124e8  20000210  08018f80  0001a210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200126f8  08018f80  0001a6f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027390  00000000  00000000  0001a23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d4f  00000000  00000000  000415ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00047320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f4  00000000  00000000  00049118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ea5  00000000  00000000  0004a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002877a  00000000  00000000  0007b6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114bb5  00000000  00000000  000a3e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b89e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089d4  00000000  00000000  001b8a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001c142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000210 	.word	0x20000210
 800021c:	00000000 	.word	0x00000000
 8000220:	08017fcc 	.word	0x08017fcc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000214 	.word	0x20000214
 800023c:	08017fcc 	.word	0x08017fcc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ac:	f00a ff8a 	bl	800b5c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006b8:	f000 f990 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 8094 	bne.w	80007f2 <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d020      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 80006d0:	2208      	movs	r2, #8
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d017      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f023 0307 	bic.w	r3, r3, #7
 80006e8:	3308      	adds	r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00d      	beq.n	8000712 <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fa:	b672      	cpsid	i
 80006fc:	f383 8811 	msr	BASEPRI, r3
 8000700:	f3bf 8f6f 	isb	sy
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	b662      	cpsie	i
 800070a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7fd      	b.n	800070e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d06c      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
 8000718:	4b45      	ldr	r3, [pc, #276]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d867      	bhi.n	80007f2 <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000724:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000726:	4b43      	ldr	r3, [pc, #268]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800072c:	e004      	b.n	8000738 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d903      	bls.n	800074a <pvPortMallocMicroROS+0xaa>
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	429a      	cmp	r2, r3
 8000752:	d04e      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	4413      	add	r3, r2
 800075c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	2308      	movs	r3, #8
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d922      	bls.n	80007bc <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00d      	beq.n	80007a4 <pvPortMallocMicroROS+0x104>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	b672      	cpsid	i
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	b662      	cpsie	i
 800079c:	613b      	str	r3, [r7, #16]
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007b6:	69b8      	ldr	r0, [r7, #24]
 80007b8:	f000 f972 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d203      	bcs.n	80007de <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	431a      	orrs	r2, r3
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f2:	f00a fef5 	bl	800b5e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00d      	beq.n	800081c <pvPortMallocMicroROS+0x17c>
	__asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000804:	b672      	cpsid	i
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	b662      	cpsie	i
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20003e34 	.word	0x20003e34
 800082c:	20003e40 	.word	0x20003e40
 8000830:	20003e38 	.word	0x20003e38
 8000834:	20003e2c 	.word	0x20003e2c
 8000838:	20003e3c 	.word	0x20003e3c

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04e      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <vPortFreeMicroROS+0x4a>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	b672      	cpsid	i
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	b662      	cpsie	i
 800087e:	60fb      	str	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00d      	beq.n	80008aa <vPortFreeMicroROS+0x6e>
	__asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000892:	b672      	cpsid	i
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	b662      	cpsie	i
 80008a2:	60bb      	str	r3, [r7, #8]
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f00a fe78 	bl	800b5c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f00a fe7a 	bl	800b5e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003e40 	.word	0x20003e40
 80008f8:	20003e38 	.word	0x20003e38

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20003e40 	.word	0x20003e40

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f00a fe3f 	bl	800b5c4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feaa 	bl	80006a0 <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f016 fccc 	bl	8017316 <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5c 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f00a fe2c 	bl	800b5e0 <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f00a fe12 	bl	800b5c4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe78 	bl	80006a0 <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f00a fe08 	bl	800b5e0 <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	2000022c 	.word	0x2000022c
 8000a8c:	20003e2c 	.word	0x20003e2c
 8000a90:	20003e34 	.word	0x20003e34
 8000a94:	20003e3c 	.word	0x20003e3c
 8000a98:	20003e38 	.word	0x20003e38
 8000a9c:	20003e40 	.word	0x20003e40

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003e2c 	.word	0x20003e2c
 8000b50:	20003e34 	.word	0x20003e34

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f860 	bl	8001c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 f879 	bl	8001c74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f858 	bl	8001c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f871 	bl	8001c74 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	@ (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f004 fd9a 	bl	80056f0 <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003e44 	.word	0x20003e44

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f004 fdcb 	bl	8005778 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f004 fcf0 	bl	80055f8 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f009 fc4e 	bl	800a4c0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f009 fc1b 	bl	800a4c0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	@ (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004648 	.word	0x20004648
 8000cec:	20004644 	.word	0x20004644
 8000cf0:	20003e44 	.word	0x20003e44

08000cf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <MX_FREERTOS_Init+0x18>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_FREERTOS_Init+0x1c>)
 8000cfe:	f009 fb39 	bl	800a374 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a03      	ldr	r2, [pc, #12]	@ (8000d14 <MX_FREERTOS_Init+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08018110 	.word	0x08018110
 8000d10:	08000d19 	.word	0x08000d19
 8000d14:	200046ac 	.word	0x200046ac

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b098      	sub	sp, #96	@ 0x60
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	61f8      	str	r0, [r7, #28]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d20:	f00c f8e4 	bl	800ceec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  rmw_uros_set_custom_transport(
 8000d24:	4b47      	ldr	r3, [pc, #284]	@ (8000e44 <StartDefaultTask+0x12c>)
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	4b47      	ldr	r3, [pc, #284]	@ (8000e48 <StartDefaultTask+0x130>)
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4b47      	ldr	r3, [pc, #284]	@ (8000e4c <StartDefaultTask+0x134>)
 8000d2e:	4a48      	ldr	r2, [pc, #288]	@ (8000e50 <StartDefaultTask+0x138>)
 8000d30:	4948      	ldr	r1, [pc, #288]	@ (8000e54 <StartDefaultTask+0x13c>)
 8000d32:	2001      	movs	r0, #1
 8000d34:	f00d fca2 	bl	800e67c <rmw_uros_set_custom_transport>
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read
  );

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00d f9bd 	bl	800e0bc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000d42:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <StartDefaultTask+0x140>)
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d46:	4b45      	ldr	r3, [pc, #276]	@ (8000e5c <StartDefaultTask+0x144>)
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d4a:	4b45      	ldr	r3, [pc, #276]	@ (8000e60 <StartDefaultTask+0x148>)
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d4e:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <StartDefaultTask+0x14c>)
 8000d50:	643b      	str	r3, [r7, #64]	@ 0x40

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00d f9be 	bl	800e0d8 <rcutils_set_default_allocator>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <StartDefaultTask+0x58>
    printf("Error on default allocators (line %d)\n", __LINE__);
 8000d68:	21a8      	movs	r1, #168	@ 0xa8
 8000d6a:	483f      	ldr	r0, [pc, #252]	@ (8000e68 <StartDefaultTask+0x150>)
 8000d6c:	f016 f8b4 	bl	8016ed8 <iprintf>
  }

  // ここからmicro-ROSのセットアップ
  allocator = rcl_get_default_allocator();
 8000d70:	4c3e      	ldr	r4, [pc, #248]	@ (8000e6c <StartDefaultTask+0x154>)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00d f9cd 	bl	800e114 <rcutils_get_default_allocator>
 8000d7a:	4625      	mov	r5, r4
 8000d7c:	463c      	mov	r4, r7
 8000d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	602b      	str	r3, [r5, #0]
  node = rcl_get_zero_initialized_node();
 8000d86:	4c3a      	ldr	r4, [pc, #232]	@ (8000e70 <StartDefaultTask+0x158>)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f00c fe2c 	bl	800d9e8 <rcl_get_zero_initialized_node>
 8000d90:	4622      	mov	r2, r4
 8000d92:	463b      	mov	r3, r7
 8000d94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d98:	e882 0003 	stmia.w	r2, {r0, r1}
  //初期化設定の作成
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8000d9c:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <StartDefaultTask+0x154>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	4834      	ldr	r0, [pc, #208]	@ (8000e74 <StartDefaultTask+0x15c>)
 8000da4:	f00d f8bc 	bl	800df20 <rclc_support_init>
 8000da8:	6578      	str	r0, [r7, #84]	@ 0x54
 8000daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <StartDefaultTask+0xa2>
 8000db0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000db2:	21af      	movs	r1, #175	@ 0xaf
 8000db4:	4830      	ldr	r0, [pc, #192]	@ (8000e78 <StartDefaultTask+0x160>)
 8000db6:	f016 f88f 	bl	8016ed8 <iprintf>
  //ノードの作成
  RCCHECK(rclc_node_init_default(&node, "f7_node", "", &support));
 8000dba:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <StartDefaultTask+0x15c>)
 8000dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e7c <StartDefaultTask+0x164>)
 8000dbe:	4930      	ldr	r1, [pc, #192]	@ (8000e80 <StartDefaultTask+0x168>)
 8000dc0:	482b      	ldr	r0, [pc, #172]	@ (8000e70 <StartDefaultTask+0x158>)
 8000dc2:	f00d f8f7 	bl	800dfb4 <rclc_node_init_default>
 8000dc6:	6538      	str	r0, [r7, #80]	@ 0x50
 8000dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d004      	beq.n	8000dd8 <StartDefaultTask+0xc0>
 8000dce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000dd0:	21b1      	movs	r1, #177	@ 0xb1
 8000dd2:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <StartDefaultTask+0x160>)
 8000dd4:	f016 f880 	bl	8016ed8 <iprintf>
  //publisherの作成
  RCCHECK(rclc_publisher_init_default(
 8000dd8:	f00e fb34 	bl	800f444 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <StartDefaultTask+0x16c>)
 8000de0:	4923      	ldr	r1, [pc, #140]	@ (8000e70 <StartDefaultTask+0x158>)
 8000de2:	4829      	ldr	r0, [pc, #164]	@ (8000e88 <StartDefaultTask+0x170>)
 8000de4:	f00d f928 	bl	800e038 <rclc_publisher_init_default>
 8000de8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8000dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <StartDefaultTask+0xe2>
 8000df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000df2:	21b3      	movs	r1, #179	@ 0xb3
 8000df4:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <StartDefaultTask+0x160>)
 8000df6:	f016 f86f 	bl	8016ed8 <iprintf>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "/from_f767zi"));

  //配列データを扱うときの処理
  rosidl_runtime_c__String__init(&msg);
 8000dfa:	4824      	ldr	r0, [pc, #144]	@ (8000e8c <StartDefaultTask+0x174>)
 8000dfc:	f00e fa90 	bl	800f320 <rosidl_runtime_c__String__init>
  char hello[] = "Hello world from f7";
 8000e00:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <StartDefaultTask+0x178>)
 8000e02:	f107 0420 	add.w	r4, r7, #32
 8000e06:	461d      	mov	r5, r3
 8000e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	6023      	str	r3, [r4, #0]
  rosidl_runtime_c__String__assignn(&msg.data, hello, sizeof(hello));
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	2214      	movs	r2, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <StartDefaultTask+0x174>)
 8000e1a:	f00e fadf 	bl	800f3dc <rosidl_runtime_c__String__assignn>
  /* Infinite loop */
  for(;;)
  {
	 RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
 8000e1e:	2200      	movs	r2, #0
 8000e20:	491a      	ldr	r1, [pc, #104]	@ (8000e8c <StartDefaultTask+0x174>)
 8000e22:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <StartDefaultTask+0x170>)
 8000e24:	f00d f858 	bl	800ded8 <rcl_publish>
 8000e28:	64b8      	str	r0, [r7, #72]	@ 0x48
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <StartDefaultTask+0x122>
 8000e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e32:	21c0      	movs	r1, #192	@ 0xc0
 8000e34:	4817      	ldr	r0, [pc, #92]	@ (8000e94 <StartDefaultTask+0x17c>)
 8000e36:	f016 f84f 	bl	8016ed8 <iprintf>
	 osDelay(500);
 8000e3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3e:	f009 fb3f 	bl	800a4c0 <osDelay>
	 RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
 8000e42:	e7ec      	b.n	8000e1e <StartDefaultTask+0x106>
 8000e44:	08000c4d 	.word	0x08000c4d
 8000e48:	08000bed 	.word	0x08000bed
 8000e4c:	08000bcd 	.word	0x08000bcd
 8000e50:	08000ba1 	.word	0x08000ba1
 8000e54:	20007648 	.word	0x20007648
 8000e58:	0800118d 	.word	0x0800118d
 8000e5c:	080011d1 	.word	0x080011d1
 8000e60:	08001209 	.word	0x08001209
 8000e64:	08001275 	.word	0x08001275
 8000e68:	08017ff4 	.word	0x08017ff4
 8000e6c:	20004650 	.word	0x20004650
 8000e70:	20004698 	.word	0x20004698
 8000e74:	20004664 	.word	0x20004664
 8000e78:	0801801c 	.word	0x0801801c
 8000e7c:	08018048 	.word	0x08018048
 8000e80:	0801804c 	.word	0x0801804c
 8000e84:	08018054 	.word	0x08018054
 8000e88:	2000464c 	.word	0x2000464c
 8000e8c:	200046a0 	.word	0x200046a0
 8000e90:	08018090 	.word	0x08018090
 8000e94:	08018064 	.word	0x08018064

08000e98 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b68      	ldr	r3, [pc, #416]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a67      	ldr	r2, [pc, #412]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b65      	ldr	r3, [pc, #404]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	4b62      	ldr	r3, [pc, #392]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a61      	ldr	r2, [pc, #388]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b59      	ldr	r3, [pc, #356]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b56      	ldr	r3, [pc, #344]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a55      	ldr	r2, [pc, #340]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	4b50      	ldr	r3, [pc, #320]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a4f      	ldr	r2, [pc, #316]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f26:	4b4a      	ldr	r3, [pc, #296]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a49      	ldr	r2, [pc, #292]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b47      	ldr	r3, [pc, #284]	@ (8001050 <MX_GPIO_Init+0x1b8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f44:	4843      	ldr	r0, [pc, #268]	@ (8001054 <MX_GPIO_Init+0x1bc>)
 8000f46:	f001 fc65 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	@ 0x40
 8000f4e:	4842      	ldr	r0, [pc, #264]	@ (8001058 <MX_GPIO_Init+0x1c0>)
 8000f50:	f001 fc60 	bl	8002814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	483c      	ldr	r0, [pc, #240]	@ (800105c <MX_GPIO_Init+0x1c4>)
 8000f6c:	f001 faa6 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f70:	2332      	movs	r3, #50	@ 0x32
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4834      	ldr	r0, [pc, #208]	@ (800105c <MX_GPIO_Init+0x1c4>)
 8000f8c:	f001 fa96 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f90:	2386      	movs	r3, #134	@ 0x86
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa0:	230b      	movs	r3, #11
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482d      	ldr	r0, [pc, #180]	@ (8001060 <MX_GPIO_Init+0x1c8>)
 8000fac:	f001 fa86 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fb0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4822      	ldr	r0, [pc, #136]	@ (8001054 <MX_GPIO_Init+0x1bc>)
 8000fca:	f001 fa77 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481a      	ldr	r0, [pc, #104]	@ (8001054 <MX_GPIO_Init+0x1bc>)
 8000fec:	f001 fa66 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	@ (8001058 <MX_GPIO_Init+0x1c0>)
 8001008:	f001 fa58 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480e      	ldr	r0, [pc, #56]	@ (8001058 <MX_GPIO_Init+0x1c0>)
 8001020:	f001 fa4c 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001024:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_GPIO_Init+0x1c0>)
 8001042:	f001 fa3b 	bl	80024bc <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	40021800 	.word	0x40021800
 800105c:	40020800 	.word	0x40020800
 8001060:	40020000 	.word	0x40020000

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fcdf 	bl	8001a2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f80e 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f7ff ff12 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001074:	f7ff fd6e 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001078:	f000 fbae 	bl	80017d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800107c:	f009 f910 	bl	800a2a0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001080:	f7ff fe38 	bl	8000cf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001084:	f009 f940 	bl	800a308 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <main+0x24>

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	@ 0x50
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	2234      	movs	r2, #52	@ 0x34
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f016 f872 	bl	8017184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <SystemClock_Config+0xc8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	4a27      	ldr	r2, [pc, #156]	@ (8001154 <SystemClock_Config+0xc8>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80010bc:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <SystemClock_Config+0xc8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <SystemClock_Config+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <SystemClock_Config+0xcc>)
 80010ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80010f8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80010fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001102:	2308      	movs	r3, #8
 8001104:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fe22 	bl	8003d58 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800111a:	f000 f831 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001130:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001134:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2105      	movs	r1, #5
 800113c:	4618      	mov	r0, r3
 800113e:	f003 f8b9 	bl	80042b4 <HAL_RCC_ClockConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001148:	f000 f81a 	bl	8001180 <Error_Handler>
  }
}
 800114c:	bf00      	nop
 800114e:	3750      	adds	r7, #80	@ 0x50
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116e:	f000 fc69 	bl	8001a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010000 	.word	0x40010000

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <microros_allocate+0x3c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <microros_allocate+0x3c>)
 80011a4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <microros_allocate+0x40>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <microros_allocate+0x40>)
 80011b4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fa72 	bl	80006a0 <pvPortMallocMicroROS>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200075ec 	.word	0x200075ec
 80011cc:	200075f0 	.word	0x200075f0

080011d0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fb8b 	bl	80008fc <getBlockSize>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <microros_deallocate+0x34>)
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <microros_deallocate+0x34>)
 80011f2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fb21 	bl	800083c <vPortFreeMicroROS>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200075f0 	.word	0x200075f0

08001208 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <microros_reallocate+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <microros_reallocate+0x64>)
 8001222:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <microros_reallocate+0x68>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	461a      	mov	r2, r3
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <microros_reallocate+0x68>)
 8001232:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d104      	bne.n	8001244 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff fa30 	bl	80006a0 <pvPortMallocMicroROS>
 8001240:	4603      	mov	r3, r0
 8001242:	e00e      	b.n	8001262 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff fb59 	bl	80008fc <getBlockSize>
 800124a:	4603      	mov	r3, r0
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <microros_reallocate+0x68>)
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <microros_reallocate+0x68>)
 8001256:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fb6c 	bl	8000938 <pvPortReallocMicroROS>
 8001260:	4603      	mov	r3, r0
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200075ec 	.word	0x200075ec
 8001270:	200075f0 	.word	0x200075f0

08001274 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <microros_zero_allocate+0x48>)
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	461a      	mov	r2, r3
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <microros_zero_allocate+0x48>)
 8001292:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <microros_zero_allocate+0x4c>)
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <microros_zero_allocate+0x4c>)
 80012a6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fb71 	bl	8000992 <pvPortCallocMicroROS>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200075ec 	.word	0x200075ec
 80012c0:	200075f0 	.word	0x200075f0
 80012c4:	00000000 	.word	0x00000000

080012c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80012c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80012da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012de:	a320      	add	r3, pc, #128	@ (adr r3, 8001360 <UTILS_NanosecondsToTimespec+0x98>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f814 	bl	8000310 <__aeabi_ldivmod>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80012f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001360 <UTILS_NanosecondsToTimespec+0x98>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7ff f808 	bl	8000310 <__aeabi_ldivmod>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	da20      	bge.n	800134e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <UTILS_NanosecondsToTimespec+0x90>)
 8001312:	fb82 1203 	smull	r1, r2, r2, r3
 8001316:	1712      	asrs	r2, r2, #28
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	6979      	ldr	r1, [r7, #20]
 8001328:	17c8      	asrs	r0, r1, #31
 800132a:	460c      	mov	r4, r1
 800132c:	4605      	mov	r5, r0
 800132e:	ebb2 0804 	subs.w	r8, r2, r4
 8001332:	eb63 0905 	sbc.w	r9, r3, r5
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4906      	ldr	r1, [pc, #24]	@ (800135c <UTILS_NanosecondsToTimespec+0x94>)
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	441a      	add	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	609a      	str	r2, [r3, #8]
    }
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001358:	44b82fa1 	.word	0x44b82fa1
 800135c:	3b9aca00 	.word	0x3b9aca00
 8001360:	3b9aca00 	.word	0x3b9aca00
 8001364:	00000000 	.word	0x00000000

08001368 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800136c:	b08e      	sub	sp, #56	@ 0x38
 800136e:	af00      	add	r7, sp, #0
 8001370:	6278      	str	r0, [r7, #36]	@ 0x24
 8001372:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001374:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001378:	2300      	movs	r3, #0
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800138a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138e:	4618      	mov	r0, r3
 8001390:	f00a fbae 	bl	800baf0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	17da      	asrs	r2, r3, #31
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	61fa      	str	r2, [r7, #28]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	69b9      	ldr	r1, [r7, #24]
 80013a6:	000b      	movs	r3, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b0:	2200      	movs	r2, #0
 80013b2:	461c      	mov	r4, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013ba:	1911      	adds	r1, r2, r4
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	416b      	adcs	r3, r5
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80013ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	f04f 0400 	mov.w	r4, #0
 80013d6:	f04f 0500 	mov.w	r5, #0
 80013da:	015d      	lsls	r5, r3, #5
 80013dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80013e0:	0154      	lsls	r4, r2, #5
 80013e2:	4622      	mov	r2, r4
 80013e4:	462b      	mov	r3, r5
 80013e6:	ebb2 0800 	subs.w	r8, r2, r0
 80013ea:	eb63 0901 	sbc.w	r9, r3, r1
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80013fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80013fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001402:	4690      	mov	r8, r2
 8001404:	4699      	mov	r9, r3
 8001406:	eb18 0a00 	adds.w	sl, r8, r0
 800140a:	eb49 0b01 	adc.w	fp, r9, r1
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800141a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800141e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001422:	ebb2 040a 	subs.w	r4, r2, sl
 8001426:	603c      	str	r4, [r7, #0]
 8001428:	eb63 030b 	sbc.w	r3, r3, fp
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001432:	4623      	mov	r3, r4
 8001434:	181b      	adds	r3, r3, r0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	462b      	mov	r3, r5
 800143a:	eb41 0303 	adc.w	r3, r1, r3
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	6a3a      	ldr	r2, [r7, #32]
 8001442:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001446:	f7ff ff3f 	bl	80012c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800144a:	2300      	movs	r3, #0
 800144c:	4618      	mov	r0, r3
 800144e:	3738      	adds	r7, #56	@ 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	210f      	movs	r1, #15
 8001492:	f06f 0001 	mvn.w	r0, #1
 8001496:	f000 fbd1 	bl	8001c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_InitTick+0xd0>)
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001578 <HAL_InitTick+0xd0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_InitTick+0xd0>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014d0:	f107 020c 	add.w	r2, r7, #12
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 f910 	bl	8004700 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80014e0:	f003 f8fa 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80014e4:	4603      	mov	r3, r0
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	4a23      	ldr	r2, [pc, #140]	@ (800157c <HAL_InitTick+0xd4>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	3b01      	subs	r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <HAL_InitTick+0xd8>)
 80014fa:	4a22      	ldr	r2, [pc, #136]	@ (8001584 <HAL_InitTick+0xdc>)
 80014fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_InitTick+0xd8>)
 8001500:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001504:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_InitTick+0xd8>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800150c:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_InitTick+0xd8>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_InitTick+0xd8>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_InitTick+0xd8>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800151e:	4818      	ldr	r0, [pc, #96]	@ (8001580 <HAL_InitTick+0xd8>)
 8001520:	f003 fd48 	bl	8004fb4 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800152a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11b      	bne.n	800156a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001532:	4813      	ldr	r0, [pc, #76]	@ (8001580 <HAL_InitTick+0xd8>)
 8001534:	f003 fda0 	bl	8005078 <HAL_TIM_Base_Start_IT>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800153e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001542:	2b00      	cmp	r3, #0
 8001544:	d111      	bne.n	800156a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001546:	2019      	movs	r0, #25
 8001548:	f000 fb94 	bl	8001c74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b0f      	cmp	r3, #15
 8001550:	d808      	bhi.n	8001564 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001552:	2200      	movs	r2, #0
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	2019      	movs	r0, #25
 8001558:	f000 fb70 	bl	8001c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_InitTick+0xe0>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e002      	b.n	800156a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800156a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800156e:	4618      	mov	r0, r3
 8001570:	3730      	adds	r7, #48	@ 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	431bde83 	.word	0x431bde83
 8001580:	200075f4 	.word	0x200075f4
 8001584:	40010000 	.word	0x40010000
 8001588:	20000008 	.word	0x20000008

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <DMA1_Stream1_IRQHandler+0x10>)
 80015ca:	f000 fd01 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200076d0 	.word	0x200076d0

080015d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <DMA1_Stream3_IRQHandler+0x10>)
 80015de:	f000 fcf7 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20007730 	.word	0x20007730

080015ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015f2:	f003 fdb9 	bl	8005168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200075f4 	.word	0x200075f4

08001600 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <USART3_IRQHandler+0x10>)
 8001606:	f004 f949 	bl	800589c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20007648 	.word	0x20007648

08001614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OTG_FS_IRQHandler+0x10>)
 800161a:	f001 fa4c 	bl	8002ab6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000d5bc 	.word	0x2000d5bc

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_kill>:

int _kill(int pid, int sig)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001642:	f015 fe33 	bl	80172ac <__errno>
 8001646:	4603      	mov	r3, r0
 8001648:	2216      	movs	r2, #22
 800164a:	601a      	str	r2, [r3, #0]
  return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_exit>:

void _exit (int status)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001660:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_kill>
  while (1) {}    /* Make sure we hang here */
 800166a:	bf00      	nop
 800166c:	e7fd      	b.n	800166a <_exit+0x12>

0800166e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e00a      	b.n	8001696 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001680:	f3af 8000 	nop.w
 8001684:	4601      	mov	r1, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	60ba      	str	r2, [r7, #8]
 800168c:	b2ca      	uxtb	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbf0      	blt.n	8001680 <_read+0x12>
  }

  return len;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e009      	b.n	80016ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbf1      	blt.n	80016ba <_write+0x12>
  }
  return len;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_close>:

int _close(int file)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001708:	605a      	str	r2, [r3, #4]
  return 0;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_isatty>:

int _isatty(int file)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f015 fd98 	bl	80172ac <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20080000 	.word	0x20080000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20007644 	.word	0x20007644
 80017b0:	200126f8 	.word	0x200126f8

080017b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_USART3_UART_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 800181c:	f003 fe9e 	bl	800555c <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001826:	f7ff fcab 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20007648 	.word	0x20007648
 8001834:	40004800 	.word	0x40004800

08001838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0ae      	sub	sp, #184	@ 0xb8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2290      	movs	r2, #144	@ 0x90
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f015 fc93 	bl	8017184 <memset>
  if(uartHandle->Instance==USART3)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a56      	ldr	r2, [pc, #344]	@ (80019bc <HAL_UART_MspInit+0x184>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f040 80a4 	bne.w	80019b2 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4618      	mov	r0, r3
 800187a:	f002 ff73 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001884:	f7ff fc7c 	bl	8001180 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a4c      	ldr	r2, [pc, #304]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 800188e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a0:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a4:	4a46      	ldr	r2, [pc, #280]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ac:	4b44      	ldr	r3, [pc, #272]	@ (80019c0 <HAL_UART_MspInit+0x188>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d2:	2307      	movs	r3, #7
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018dc:	4619      	mov	r1, r3
 80018de:	4839      	ldr	r0, [pc, #228]	@ (80019c4 <HAL_UART_MspInit+0x18c>)
 80018e0:	f000 fdec 	bl	80024bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80018e4:	4b38      	ldr	r3, [pc, #224]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 80018e6:	4a39      	ldr	r2, [pc, #228]	@ (80019cc <HAL_UART_MspInit+0x194>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 80018ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f2:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f8:	4b33      	ldr	r3, [pc, #204]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018fe:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 8001900:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001904:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001906:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 8001914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001918:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800191a:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 800191c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001920:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001928:	4827      	ldr	r0, [pc, #156]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 800192a:	f000 f9b1 	bl	8001c90 <HAL_DMA_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001934:	f7ff fc24 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 800193c:	675a      	str	r2, [r3, #116]	@ 0x74
 800193e:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <HAL_UART_MspInit+0x190>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001944:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <HAL_UART_MspInit+0x19c>)
 8001948:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800194c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001950:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001952:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001954:	2240      	movs	r2, #64	@ 0x40
 8001956:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001960:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001964:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800197a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800197e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001986:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 8001988:	f000 f982 	bl	8001c90 <HAL_DMA_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001992:	f7ff fbf5 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800199a:	671a      	str	r2, [r3, #112]	@ 0x70
 800199c:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <HAL_UART_MspInit+0x198>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2105      	movs	r1, #5
 80019a6:	2027      	movs	r0, #39	@ 0x27
 80019a8:	f000 f948 	bl	8001c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ac:	2027      	movs	r0, #39	@ 0x27
 80019ae:	f000 f961 	bl	8001c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019b2:	bf00      	nop
 80019b4:	37b8      	adds	r7, #184	@ 0xb8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40004800 	.word	0x40004800
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	200076d0 	.word	0x200076d0
 80019cc:	40026028 	.word	0x40026028
 80019d0:	20007730 	.word	0x20007730
 80019d4:	40026058 	.word	0x40026058

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019dc:	f7ff feea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f015 fc57 	bl	80172b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff fb2b 	bl	8001064 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001a1c:	08018d70 	.word	0x08018d70
  ldr r2, =_sbss
 8001a20:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001a24:	200126f8 	.word	0x200126f8

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>

08001a2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f8f9 	bl	8001c26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a34:	200f      	movs	r0, #15
 8001a36:	f7ff fd37 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3a:	f7ff fd0d 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	20007790 	.word	0x20007790

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20007790 	.word	0x20007790

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff ffee 	bl	8001a6c <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x40>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <__NVIC_SetPriorityGrouping+0x40>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	05fa0000 	.word	0x05fa0000

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4907      	ldr	r1, [pc, #28]	@ (8001b68 <__NVIC_EnableIRQ+0x38>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff4c 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4e:	f7ff ff61 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	6978      	ldr	r0, [r7, #20]
 8001c5a:	f7ff ffb1 	bl	8001bc0 <NVIC_EncodePriority>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff80 	bl	8001b6c <__NVIC_SetPriority>
}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff54 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff fee6 	bl	8001a6c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e099      	b.n	8001de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ccc:	e00f      	b.n	8001cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cce:	f7ff fecd 	bl	8001a6c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d908      	bls.n	8001cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e078      	b.n	8001de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e8      	bne.n	8001cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_DMA_Init+0x158>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d107      	bne.n	8001d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	4313      	orrs	r3, r2
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d117      	bne.n	8001db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fb15 	bl	80023c4 <DMA_CheckFifoParam>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dae:	2301      	movs	r3, #1
 8001db0:	e016      	b.n	8001de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 facc 	bl	8002358 <DMA_CalcBaseAndBitshift>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	223f      	movs	r2, #63	@ 0x3f
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	e010803f 	.word	0xe010803f

08001dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_DMA_Start_IT+0x26>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e048      	b.n	8001ea4 <HAL_DMA_Start_IT+0xb8>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d137      	bne.n	8001e96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fa5e 	bl	80022fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e44:	223f      	movs	r2, #63	@ 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0216 	orr.w	r2, r2, #22
 8001e5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0208 	orr.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e005      	b.n	8001ea2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eba:	f7ff fdd7 	bl	8001a6c <HAL_GetTick>
 8001ebe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d008      	beq.n	8001ede <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e052      	b.n	8001f84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001efc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_Abort+0x62>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2e:	e013      	b.n	8001f58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f30:	f7ff fd9c 	bl	8001a6c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d90c      	bls.n	8001f58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e015      	b.n	8001f84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e4      	bne.n	8001f30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	223f      	movs	r2, #63	@ 0x3f
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	@ 0x80
 8001fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00c      	b.n	8001fc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2205      	movs	r2, #5
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8002218 <HAL_DMA_IRQHandler+0x248>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800221c <HAL_DMA_IRQHandler+0x24c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2208      	movs	r2, #8
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2204      	movs	r2, #4
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	2210      	movs	r2, #16
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d043      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03c      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	2210      	movs	r2, #16
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d018      	beq.n	8002112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e01f      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e016      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0208 	bic.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	2220      	movs	r2, #32
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808f 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8087 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2220      	movs	r2, #32
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d136      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0216 	bic.w	r2, r2, #22
 8002188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_DMA_IRQHandler+0x1da>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	223f      	movs	r2, #63	@ 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d07e      	beq.n	80022dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
        }
        return;
 80021e6:	e079      	b.n	80022dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e02c      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
 8002216:	bf00      	nop
 8002218:	20000004 	.word	0x20000004
 800221c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e01e      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0210 	bic.w	r2, r2, #16
 800224e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d022      	beq.n	80022ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2205      	movs	r2, #5
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d307      	bcc.n	80022b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f2      	bne.n	800229c <HAL_DMA_IRQHandler+0x2cc>
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x30e>
        return;
 80022dc:	bf00      	nop
    }
  }
}
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b40      	cmp	r3, #64	@ 0x40
 8002328:	d108      	bne.n	800233c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800233a:	e007      	b.n	800234c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3b10      	subs	r3, #16
 8002368:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <DMA_CalcBaseAndBitshift+0x60>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002372:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <DMA_CalcBaseAndBitshift+0x64>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d908      	bls.n	8002398 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <DMA_CalcBaseAndBitshift+0x68>)
 800238e:	4013      	ands	r3, r2
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	@ 0x58
 8002396:	e006      	b.n	80023a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <DMA_CalcBaseAndBitshift+0x68>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	0801814c 	.word	0x0801814c
 80023c0:	fffffc00 	.word	0xfffffc00

080023c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11f      	bne.n	800241e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d856      	bhi.n	8002492 <DMA_CheckFifoParam+0xce>
 80023e4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ec <DMA_CheckFifoParam+0x28>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	0800240f 	.word	0x0800240f
 80023f4:	080023fd 	.word	0x080023fd
 80023f8:	08002493 	.word	0x08002493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d046      	beq.n	8002496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240c:	e043      	b.n	8002496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002416:	d140      	bne.n	800249a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241c:	e03d      	b.n	800249a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002426:	d121      	bne.n	800246c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d837      	bhi.n	800249e <DMA_CheckFifoParam+0xda>
 800242e:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <DMA_CheckFifoParam+0x70>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002445 	.word	0x08002445
 8002438:	0800244b 	.word	0x0800244b
 800243c:	08002445 	.word	0x08002445
 8002440:	0800245d 	.word	0x0800245d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e030      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d025      	beq.n	80024a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245a:	e022      	b.n	80024a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002464:	d11f      	bne.n	80024a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800246a:	e01c      	b.n	80024a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d903      	bls.n	800247a <DMA_CheckFifoParam+0xb6>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d003      	beq.n	8002480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002478:	e018      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      break;
 800247e:	e015      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e00b      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 8002492:	bf00      	nop
 8002494:	e00a      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e008      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e006      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e004      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e002      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;   
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
    }
  } 
  
  return status; 
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e175      	b.n	80027c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8164 	bne.w	80027c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x56>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80be 	beq.w	80027c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b66      	ldr	r3, [pc, #408]	@ (80027e0 <HAL_GPIO_Init+0x324>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	4a65      	ldr	r2, [pc, #404]	@ (80027e0 <HAL_GPIO_Init+0x324>)
 800264c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002650:	6453      	str	r3, [r2, #68]	@ 0x44
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_GPIO_Init+0x324>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800265e:	4a61      	ldr	r2, [pc, #388]	@ (80027e4 <HAL_GPIO_Init+0x328>)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	3302      	adds	r3, #2
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a58      	ldr	r2, [pc, #352]	@ (80027e8 <HAL_GPIO_Init+0x32c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d037      	beq.n	80026fa <HAL_GPIO_Init+0x23e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a57      	ldr	r2, [pc, #348]	@ (80027ec <HAL_GPIO_Init+0x330>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d031      	beq.n	80026f6 <HAL_GPIO_Init+0x23a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_GPIO_Init+0x334>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <HAL_GPIO_Init+0x236>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a55      	ldr	r2, [pc, #340]	@ (80027f4 <HAL_GPIO_Init+0x338>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d025      	beq.n	80026ee <HAL_GPIO_Init+0x232>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a54      	ldr	r2, [pc, #336]	@ (80027f8 <HAL_GPIO_Init+0x33c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <HAL_GPIO_Init+0x22e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a53      	ldr	r2, [pc, #332]	@ (80027fc <HAL_GPIO_Init+0x340>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d019      	beq.n	80026e6 <HAL_GPIO_Init+0x22a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	@ (8002800 <HAL_GPIO_Init+0x344>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	@ (8002804 <HAL_GPIO_Init+0x348>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_GPIO_Init+0x222>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	@ (8002808 <HAL_GPIO_Init+0x34c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x21e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	@ (800280c <HAL_GPIO_Init+0x350>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_GPIO_Init+0x21a>
 80026d2:	2309      	movs	r3, #9
 80026d4:	e012      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026d6:	230a      	movs	r3, #10
 80026d8:	e010      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026da:	2308      	movs	r3, #8
 80026dc:	e00e      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00c      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e00a      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x240>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800270c:	4935      	ldr	r1, [pc, #212]	@ (80027e4 <HAL_GPIO_Init+0x328>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_GPIO_Init+0x354>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a34      	ldr	r2, [pc, #208]	@ (8002810 <HAL_GPIO_Init+0x354>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b32      	ldr	r3, [pc, #200]	@ (8002810 <HAL_GPIO_Init+0x354>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <HAL_GPIO_Init+0x354>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <HAL_GPIO_Init+0x354>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_GPIO_Init+0x354>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_GPIO_Init+0x354>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_GPIO_Init+0x354>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f ae86 	bls.w	80024dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	@ 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40021400 	.word	0x40021400
 8002800:	40021800 	.word	0x40021800
 8002804:	40021c00 	.word	0x40021c00
 8002808:	40022000 	.word	0x40022000
 800280c:	40022400 	.word	0x40022400
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
 8002820:	4613      	mov	r3, r2
 8002822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002830:	e003      	b.n	800283a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af02      	add	r7, sp, #8
 800284c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e108      	b.n	8002a6a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f00a fd2c 	bl	800d2d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002886:	d102      	bne.n	800288e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fb11 	bl	8006eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7c1a      	ldrb	r2, [r3, #16]
 80028a0:	f88d 2000 	strb.w	r2, [sp]
 80028a4:	3304      	adds	r3, #4
 80028a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a8:	f004 f9fa 	bl	8006ca0 <USB_CoreInit>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0d5      	b.n	8002a6a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fb09 	bl	8006edc <USB_SetCurrentMode>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0c6      	b.n	8002a6a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e04a      	b.n	8002978 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3315      	adds	r3, #21
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3314      	adds	r3, #20
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	b298      	uxth	r0, r3
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	332e      	adds	r3, #46	@ 0x2e
 800291e:	4602      	mov	r2, r0
 8002920:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	3318      	adds	r3, #24
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	331c      	adds	r3, #28
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3320      	adds	r3, #32
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	3301      	adds	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	791b      	ldrb	r3, [r3, #4]
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	429a      	cmp	r2, r3
 8002980:	d3af      	bcc.n	80028e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e044      	b.n	8002a12 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	791b      	ldrb	r3, [r3, #4]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3b5      	bcc.n	8002988 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7c1a      	ldrb	r2, [r3, #16]
 8002a24:	f88d 2000 	strb.w	r2, [sp]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2c:	f004 faa2 	bl	8006f74 <USB_DevInit>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e013      	b.n	8002a6a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7b1b      	ldrb	r3, [r3, #12]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f001 f959 	bl	8003d10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fae1 	bl	800802a <USB_DevDisconnect>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_PCD_Start+0x16>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e012      	b.n	8002aae <HAL_PCD_Start+0x3c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 f9ff 	bl	8006e98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 faa2 	bl	8007fe8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ab6:	b590      	push	{r4, r7, lr}
 8002ab8:	b08d      	sub	sp, #52	@ 0x34
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 fb60 	bl	8008192 <USB_GetMode>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f040 84b9 	bne.w	800344c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 fac4 	bl	800806c <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 84af 	beq.w	800344a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 fab1 	bl	800806c <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d107      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f002 0202 	and.w	r2, r2, #2
 8002b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f005 fa9f 	bl	800806c <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d161      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0210 	bic.w	r2, r2, #16
 8002b46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d124      	bne.n	8002bbe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d035      	beq.n	8002bec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	6a38      	ldr	r0, [r7, #32]
 8002b94:	f005 f8d6 	bl	8007d44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba4:	441a      	add	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	441a      	add	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	615a      	str	r2, [r3, #20]
 8002bbc:	e016      	b.n	8002bec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	0c5b      	lsrs	r3, r3, #17
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d110      	bne.n	8002bec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6a38      	ldr	r0, [r7, #32]
 8002bd6:	f005 f8b5 	bl	8007d44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be6:	441a      	add	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0210 	orr.w	r2, r2, #16
 8002bfa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f005 fa33 	bl	800806c <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c10:	f040 80a7 	bne.w	8002d62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 fa38 	bl	8008092 <USB_ReadDevAllOutEpInterrupt>
 8002c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c24:	e099      	b.n	8002d5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 808e 	beq.w	8002d4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f005 fa5c 	bl	80080fa <USB_ReadDevOutEPInterrupt>
 8002c42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fece 	bl	8003a04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2308      	movs	r3, #8
 8002c82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 ffa4 	bl	8003bd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d030      	beq.n	8002d14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b80      	cmp	r3, #128	@ 0x80
 8002cbc:	d109      	bne.n	8002cd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	78db      	ldrb	r3, [r3, #3]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d108      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f00a fc29 	bl	800d554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2302      	movs	r3, #2
 8002d12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	3301      	adds	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f af62 	bne.w	8002c26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f005 f980 	bl	800806c <USB_ReadInterrupts>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d76:	f040 80db 	bne.w	8002f30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f005 f9a1 	bl	80080c6 <USB_ReadDevAllInEpInterrupt>
 8002d84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d8a:	e0cd      	b.n	8002f28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 80c2 	beq.w	8002f1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f005 f9c7 	bl	8008136 <USB_ReadDevInEPInterrupt>
 8002da8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d057      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	2201      	movs	r2, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de4:	461a      	mov	r2, r3
 8002de6:	2301      	movs	r3, #1
 8002de8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	799b      	ldrb	r3, [r3, #6]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d132      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3320      	adds	r3, #32
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4403      	add	r3, r0
 8002e12:	331c      	adds	r3, #28
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4419      	add	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	3320      	adds	r3, #32
 8002e28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d113      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x3a2>
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3324      	adds	r3, #36	@ 0x24
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e50:	461a      	mov	r2, r3
 8002e52:	2101      	movs	r1, #1
 8002e54:	f005 f9d0 	bl	80081f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f00a faf3 	bl	800d44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e96:	461a      	mov	r2, r3
 8002e98:	2310      	movs	r3, #16
 8002e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2340      	movs	r3, #64	@ 0x40
 8002eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d023      	beq.n	8002f0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec4:	6a38      	ldr	r0, [r7, #32]
 8002ec6:	f004 f9b3 	bl	8007230 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3304      	adds	r3, #4
 8002edc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	78db      	ldrb	r3, [r3, #3]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d108      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f00a fb40 	bl	800d578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f04:	461a      	mov	r2, r3
 8002f06:	2302      	movs	r3, #2
 8002f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fce8 	bl	80038ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	3301      	adds	r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f47f af2e 	bne.w	8002d8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f005 f899 	bl	800806c <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f44:	d122      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f00a fcba 	bl	800d8e8 <HAL_PCDEx_LPM_Callback>
 8002f74:	e002      	b.n	8002f7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f00a fade 	bl	800d538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f005 f86b 	bl	800806c <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa0:	d112      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f00a fa9a 	bl	800d4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 f84d 	bl	800806c <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fdc:	d121      	bne.n	8003022 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002fec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003012:	2101      	movs	r1, #1
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f00a fc67 	bl	800d8e8 <HAL_PCDEx_LPM_Callback>
 800301a:	e002      	b.n	8003022 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f00a fa65 	bl	800d4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f005 f820 	bl	800806c <USB_ReadInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003036:	f040 80b7 	bne.w	80031a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2110      	movs	r1, #16
 8003054:	4618      	mov	r0, r3
 8003056:	f004 f8eb 	bl	8007230 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305e:	e046      	b.n	80030ee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003072:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	440a      	add	r2, r1
 800308a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800308e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003092:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ea:	3301      	adds	r3, #1
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d3b2      	bcc.n	8003060 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003108:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800310c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7bdb      	ldrb	r3, [r3, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003126:	f043 030b 	orr.w	r3, r3, #11
 800312a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800313c:	f043 030b 	orr.w	r3, r3, #11
 8003140:	6453      	str	r3, [r2, #68]	@ 0x44
 8003142:	e015      	b.n	8003170 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003152:	4619      	mov	r1, r3
 8003154:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003158:	4313      	orrs	r3, r2
 800315a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316a:	f043 030b 	orr.w	r3, r3, #11
 800316e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800317e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003182:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003192:	461a      	mov	r2, r3
 8003194:	f005 f830 	bl	80081f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80031a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 ff5d 	bl	800806c <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031bc:	d123      	bne.n	8003206 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 fff4 	bl	80081b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 f8a8 	bl	8007322 <USB_GetDevSpeed>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681c      	ldr	r4, [r3, #0]
 80031de:	f001 fa5b 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80031e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031e8:	461a      	mov	r2, r3
 80031ea:	4620      	mov	r0, r4
 80031ec:	f003 fdb2 	bl	8006d54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f00a f952 	bl	800d49a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f004 ff2e 	bl	800806c <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d10a      	bne.n	8003230 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f00a f92f 	bl	800d47e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f002 0208 	and.w	r2, r2, #8
 800322e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 ff19 	bl	800806c <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003240:	2b80      	cmp	r3, #128	@ 0x80
 8003242:	d123      	bne.n	800328c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
 8003254:	e014      	b.n	8003280 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fb08 	bl	800388a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	3301      	adds	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	461a      	mov	r2, r3
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	4293      	cmp	r3, r2
 800328a:	d3e4      	bcc.n	8003256 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f004 feeb 	bl	800806c <USB_ReadInterrupts>
 8003296:	4603      	mov	r3, r0
 8003298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032a0:	d13c      	bne.n	800331c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a2:	2301      	movs	r3, #1
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a6:	e02b      	b.n	8003300 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	3318      	adds	r3, #24
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d115      	bne.n	80032fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da12      	bge.n	80032fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3317      	adds	r3, #23
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fac8 	bl	800388a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	4293      	cmp	r3, r2
 800330a:	d3cd      	bcc.n	80032a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800331a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fea3 	bl	800806c <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800332c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003330:	d156      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
 8003336:	e045      	b.n	80033c4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d12e      	bne.n	80033be <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003360:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	da2b      	bge.n	80033be <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003372:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003376:	429a      	cmp	r2, r3
 8003378:	d121      	bne.n	80033be <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ba:	6053      	str	r3, [r2, #4]
            break;
 80033bc:	e008      	b.n	80033d0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d3b3      	bcc.n	8003338 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80033de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fe41 	bl	800806c <USB_ReadInterrupts>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d10a      	bne.n	800340c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f00a f8d0 	bl	800d59c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800340a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fe2b 	bl	800806c <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b04      	cmp	r3, #4
 800341e:	d115      	bne.n	800344c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f00a f8c0 	bl	800d5b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e000      	b.n	800344c <HAL_PCD_IRQHandler+0x996>
      return;
 800344a:	bf00      	nop
    }
  }
}
 800344c:	3734      	adds	r7, #52	@ 0x34
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}

08003452 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_PCD_SetAddress+0x1a>
 8003468:	2302      	movs	r3, #2
 800346a:	e012      	b.n	8003492 <HAL_PCD_SetAddress+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fd8a 	bl	8007f9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	461a      	mov	r2, r3
 80034a8:	4603      	mov	r3, r0
 80034aa:	70fb      	strb	r3, [r7, #3]
 80034ac:	460b      	mov	r3, r1
 80034ae:	803b      	strh	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0f      	bge.n	80034e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3310      	adds	r3, #16
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
 80034de:	e00f      	b.n	8003500 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800350c:	883a      	ldrh	r2, [r7, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	78ba      	ldrb	r2, [r7, #2]
 8003516:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d102      	bne.n	8003536 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_PCD_EP_Open+0xaa>
 8003540:	2302      	movs	r3, #2
 8003542:	e00e      	b.n	8003562 <HAL_PCD_EP_Open+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	4618      	mov	r0, r3
 8003554:	f003 ff0a 	bl	800736c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003560:	7afb      	ldrb	r3, [r7, #11]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da0f      	bge.n	800359e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	3310      	adds	r3, #16
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	705a      	strb	r2, [r3, #1]
 800359c:	e00f      	b.n	80035be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_EP_Close+0x6e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e00e      	b.n	80035f6 <HAL_PCD_EP_Close+0x8c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f003 ff48 	bl	800747c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	460b      	mov	r3, r1
 800360c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	799b      	ldrb	r3, [r3, #6]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	799b      	ldrb	r3, [r3, #6]
 8003662:	461a      	mov	r2, r3
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	f003 ffe5 	bl	8007634 <USB_EPStartXfer>

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	460b      	mov	r3, r1
 80036b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	f003 020f 	and.w	r2, r3, #15
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	3310      	adds	r3, #16
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2201      	movs	r2, #1
 80036e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	799b      	ldrb	r3, [r3, #6]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d102      	bne.n	80036fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	799b      	ldrb	r3, [r3, #6]
 8003706:	461a      	mov	r2, r3
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	f003 ff93 	bl	8007634 <USB_EPStartXfer>

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	7912      	ldrb	r2, [r2, #4]
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e04f      	b.n	80037d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373a:	2b00      	cmp	r3, #0
 800373c:	da0f      	bge.n	800375e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	3310      	adds	r3, #16
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	3304      	adds	r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	705a      	strb	r2, [r3, #1]
 800375c:	e00d      	b.n	800377a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_EP_SetStall+0x82>
 8003796:	2302      	movs	r3, #2
 8003798:	e01d      	b.n	80037d6 <HAL_PCD_EP_SetStall+0xbe>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fb23 	bl	8007df4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7999      	ldrb	r1, [r3, #6]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037c6:	461a      	mov	r2, r3
 80037c8:	f004 fd16 	bl	80081f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	7912      	ldrb	r2, [r2, #4]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e042      	b.n	8003882 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003800:	2b00      	cmp	r3, #0
 8003802:	da0f      	bge.n	8003824 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3310      	adds	r3, #16
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	705a      	strb	r2, [r3, #1]
 8003822:	e00f      	b.n	8003844 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_EP_ClrStall+0x86>
 8003860:	2302      	movs	r3, #2
 8003862:	e00e      	b.n	8003882 <HAL_PCD_EP_ClrStall+0xa4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 fb2c 	bl	8007ed0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0c      	bge.n	80038b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3310      	adds	r3, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e00c      	b.n	80038d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	4618      	mov	r0, r3
 80038da:	f004 f94b 	bl	8007b74 <USB_EPStopXfer>
 80038de:	4603      	mov	r3, r0
 80038e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038e2:	7afb      	ldrb	r3, [r7, #11]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	@ 0x28
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	3310      	adds	r3, #16
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d901      	bls.n	8003924 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e06b      	b.n	80039fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	429a      	cmp	r2, r3
 8003938:	d902      	bls.n	8003940 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	3303      	adds	r3, #3
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003948:	e02a      	b.n	80039a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d902      	bls.n	8003966 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3303      	adds	r3, #3
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4603      	mov	r3, r0
 8003982:	6978      	ldr	r0, [r7, #20]
 8003984:	f004 f9a0 	bl	8007cc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	441a      	add	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d809      	bhi.n	80039ca <PCD_WriteEmptyTxFifo+0xde>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039be:	429a      	cmp	r2, r3
 80039c0:	d203      	bcs.n	80039ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1bf      	bne.n	800394a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d811      	bhi.n	80039fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	2201      	movs	r2, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	6939      	ldr	r1, [r7, #16]
 80039f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039f6:	4013      	ands	r3, r2
 80039f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	333c      	adds	r3, #60	@ 0x3c
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	799b      	ldrb	r3, [r3, #6]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d17b      	bne.n	8003b32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4a61      	ldr	r2, [pc, #388]	@ (8003bcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	f240 80b9 	bls.w	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80b3 	beq.w	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6c:	6093      	str	r3, [r2, #8]
 8003a6e:	e0a7      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a86:	461a      	mov	r2, r3
 8003a88:	2320      	movs	r3, #32
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	e098      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f040 8093 	bne.w	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003bcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d90f      	bls.n	8003ac2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003abe:	6093      	str	r3, [r2, #8]
 8003ac0:	e07e      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	0159      	lsls	r1, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d114      	bne.n	8003b24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f004 fb72 	bl	80081f8 <USB_EP0_OutStart>
 8003b14:	e006      	b.n	8003b24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f009 fc72 	bl	800d414 <HAL_PCD_DataOutStageCallback>
 8003b30:	e046      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a26      	ldr	r2, [pc, #152]	@ (8003bd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d124      	bne.n	8003b84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	6093      	str	r3, [r2, #8]
 8003b58:	e032      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	2320      	movs	r3, #32
 8003b74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f009 fc49 	bl	800d414 <HAL_PCD_DataOutStageCallback>
 8003b82:	e01d      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d114      	bne.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bac:	461a      	mov	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	f004 fb22 	bl	80081f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f009 fc2a 	bl	800d414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	4f54300a 	.word	0x4f54300a
 8003bd0:	4f54310a 	.word	0x4f54310a

08003bd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	333c      	adds	r3, #60	@ 0x3c
 8003bec:	3304      	adds	r3, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a15      	ldr	r2, [pc, #84]	@ (8003c5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d90e      	bls.n	8003c28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f009 fbe1 	bl	800d3f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	@ (8003c5c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d90c      	bls.n	8003c50 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	799b      	ldrb	r3, [r3, #6]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	f004 fad4 	bl	80081f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	4f54300a 	.word	0x4f54300a

08003c60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d107      	bne.n	8003c8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c7e:	883b      	ldrh	r3, [r7, #0]
 8003c80:	0419      	lsls	r1, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c8c:	e028      	b.n	8003ce0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e00d      	b.n	8003cbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	3340      	adds	r3, #64	@ 0x40
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3ec      	bcc.n	8003ca2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cc8:	883b      	ldrh	r3, [r7, #0]
 8003cca:	0418      	lsls	r0, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	4302      	orrs	r2, r0
 8003cd8:	3340      	adds	r3, #64	@ 0x40
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d3e:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	10000003 	.word	0x10000003

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e29b      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8087 	beq.w	8003e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d7c:	4b96      	ldr	r3, [pc, #600]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d00c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d88:	4b93      	ldr	r3, [pc, #588]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d112      	bne.n	8003dba <HAL_RCC_OscConfig+0x62>
 8003d94:	4b90      	ldr	r3, [pc, #576]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003da0:	d10b      	bne.n	8003dba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d06c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x130>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d168      	bne.n	8003e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e275      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x7a>
 8003dc4:	4b84      	ldr	r3, [pc, #528]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a83      	ldr	r2, [pc, #524]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	e02e      	b.n	8003e30 <HAL_RCC_OscConfig+0xd8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x9c>
 8003dda:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b7c      	ldr	r3, [pc, #496]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7b      	ldr	r2, [pc, #492]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003dec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e01d      	b.n	8003e30 <HAL_RCC_OscConfig+0xd8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0xc0>
 8003dfe:	4b76      	ldr	r3, [pc, #472]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a75      	ldr	r2, [pc, #468]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b73      	ldr	r3, [pc, #460]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a72      	ldr	r2, [pc, #456]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e00b      	b.n	8003e30 <HAL_RCC_OscConfig+0xd8>
 8003e18:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b6c      	ldr	r3, [pc, #432]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fe18 	bl	8001a6c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fd fe14 	bl	8001a6c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e229      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b61      	ldr	r3, [pc, #388]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0xe8>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fe04 	bl	8001a6c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fd fe00 	bl	8001a6c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e215      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	4b57      	ldr	r3, [pc, #348]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x110>
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d069      	beq.n	8003f6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e96:	4b50      	ldr	r3, [pc, #320]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d11c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x190>
 8003eae:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d116      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x17a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e1e9      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed2:	4b41      	ldr	r3, [pc, #260]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	493d      	ldr	r1, [pc, #244]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	e040      	b.n	8003f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d023      	beq.n	8003f38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef0:	4b39      	ldr	r3, [pc, #228]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a38      	ldr	r2, [pc, #224]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fdb6 	bl	8001a6c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd fdb2 	bl	8001a6c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e1c7      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b30      	ldr	r3, [pc, #192]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4929      	ldr	r1, [pc, #164]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
 8003f36:	e018      	b.n	8003f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f38:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fd92 	bl	8001a6c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fd8e 	bl	8001a6c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1a3      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d038      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d019      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b16      	ldr	r3, [pc, #88]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f82:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fd6f 	bl	8001a6c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fd fd6b 	bl	8001a6c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e180      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x23a>
 8003fb0:	e01a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb2:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbe:	f7fd fd55 	bl	8001a6c <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7fd fd51 	bl	8001a6c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d903      	bls.n	8003fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e166      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
 8003fd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b92      	ldr	r3, [pc, #584]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ee      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a4 	beq.w	800413e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b8c      	ldr	r3, [pc, #560]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	4b89      	ldr	r3, [pc, #548]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	4a88      	ldr	r2, [pc, #544]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	@ 0x40
 800400e:	4b86      	ldr	r3, [pc, #536]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401e:	4b83      	ldr	r3, [pc, #524]	@ (800422c <HAL_RCC_OscConfig+0x4d4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d118      	bne.n	800405c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800402a:	4b80      	ldr	r3, [pc, #512]	@ (800422c <HAL_RCC_OscConfig+0x4d4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a7f      	ldr	r2, [pc, #508]	@ (800422c <HAL_RCC_OscConfig+0x4d4>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004036:	f7fd fd19 	bl	8001a6c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403e:	f7fd fd15 	bl	8001a6c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	@ 0x64
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e12a      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004050:	4b76      	ldr	r3, [pc, #472]	@ (800422c <HAL_RCC_OscConfig+0x4d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x31a>
 8004064:	4b70      	ldr	r3, [pc, #448]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	4a6f      	ldr	r2, [pc, #444]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004070:	e02d      	b.n	80040ce <HAL_RCC_OscConfig+0x376>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x33c>
 800407a:	4b6b      	ldr	r3, [pc, #428]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	4a6a      	ldr	r2, [pc, #424]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	@ 0x70
 8004086:	4b68      	ldr	r3, [pc, #416]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a67      	ldr	r2, [pc, #412]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800408c:	f023 0304 	bic.w	r3, r3, #4
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
 8004092:	e01c      	b.n	80040ce <HAL_RCC_OscConfig+0x376>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_OscConfig+0x35e>
 800409c:	4b62      	ldr	r3, [pc, #392]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4a61      	ldr	r2, [pc, #388]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a8:	4b5f      	ldr	r3, [pc, #380]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b4:	e00b      	b.n	80040ce <HAL_RCC_OscConfig+0x376>
 80040b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c2:	4b59      	ldr	r3, [pc, #356]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	4a58      	ldr	r2, [pc, #352]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d015      	beq.n	8004102 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fd fcc9 	bl	8001a6c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd fcc5 	bl	8001a6c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0d8      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <HAL_RCC_OscConfig+0x386>
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd fcb3 	bl	8001a6c <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fcaf 	bl	8001a6c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0c2      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	4b41      	ldr	r3, [pc, #260]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ee      	bne.n	800410a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b3d      	ldr	r3, [pc, #244]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	4a3c      	ldr	r2, [pc, #240]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800413c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80ae 	beq.w	80042a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004148:	4b37      	ldr	r3, [pc, #220]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d06d      	beq.n	8004230 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d14b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b32      	ldr	r3, [pc, #200]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a31      	ldr	r2, [pc, #196]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fc80 	bl	8001a6c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fc7c 	bl	8001a6c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e091      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	491b      	ldr	r1, [pc, #108]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a18      	ldr	r2, [pc, #96]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fc4e 	bl	8001a6c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fd fc4a 	bl	8001a6c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e05f      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x47c>
 80041f2:	e057      	b.n	80042a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 80041fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fc34 	bl	8001a6c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd fc30 	bl	8001a6c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e045      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b03      	ldr	r3, [pc, #12]	@ (8004228 <HAL_RCC_OscConfig+0x4d0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x4b0>
 8004226:	e03d      	b.n	80042a4 <HAL_RCC_OscConfig+0x54c>
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004230:	4b1f      	ldr	r3, [pc, #124]	@ (80042b0 <HAL_RCC_OscConfig+0x558>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d030      	beq.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d129      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d122      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004266:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004268:	4293      	cmp	r3, r2
 800426a:	d119      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	3b01      	subs	r3, #1
 800427a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d10f      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0d0      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b67      	ldr	r3, [pc, #412]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	4965      	ldr	r1, [pc, #404]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0b8      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004314:	4b59      	ldr	r3, [pc, #356]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a58      	ldr	r2, [pc, #352]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800431a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800431e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800432c:	4b53      	ldr	r3, [pc, #332]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a52      	ldr	r2, [pc, #328]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b50      	ldr	r3, [pc, #320]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	494d      	ldr	r1, [pc, #308]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d040      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b47      	ldr	r3, [pc, #284]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d115      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07f      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004376:	4b41      	ldr	r3, [pc, #260]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e073      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06b      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004396:	4b39      	ldr	r3, [pc, #228]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f023 0203 	bic.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4936      	ldr	r1, [pc, #216]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a8:	f7fd fb60 	bl	8001a6c <HAL_GetTick>
 80043ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fd fb5c 	bl	8001a6c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e053      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c6:	4b2d      	ldr	r3, [pc, #180]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 020c 	and.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d1eb      	bne.n	80043b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043d8:	4b27      	ldr	r3, [pc, #156]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d210      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 020f 	bic.w	r2, r3, #15
 80043ee:	4922      	ldr	r1, [pc, #136]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b20      	ldr	r3, [pc, #128]	@ (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4916      	ldr	r1, [pc, #88]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004432:	4b12      	ldr	r3, [pc, #72]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	490e      	ldr	r1, [pc, #56]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004446:	f000 f821 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800444a:	4602      	mov	r2, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCC_ClockConfig+0x1c8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	490a      	ldr	r1, [pc, #40]	@ (8004480 <HAL_RCC_ClockConfig+0x1cc>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	fa22 f303 	lsr.w	r3, r2, r3
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <HAL_RCC_ClockConfig+0x1d0>)
 8004460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <HAL_RCC_ClockConfig+0x1d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fd f81e 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023c00 	.word	0x40023c00
 800447c:	40023800 	.word	0x40023800
 8004480:	08018134 	.word	0x08018134
 8004484:	20000004 	.word	0x20000004
 8004488:	20000008 	.word	0x20000008

0800448c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b094      	sub	sp, #80	@ 0x50
 8004492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	647b      	str	r3, [r7, #68]	@ 0x44
 8004498:	2300      	movs	r3, #0
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449c:	2300      	movs	r3, #0
 800449e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044a4:	4b79      	ldr	r3, [pc, #484]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d00d      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x40>
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	f200 80e1 	bhi.w	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044be:	e0db      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c0:	4b73      	ldr	r3, [pc, #460]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 80044c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044c4:	e0db      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c6:	4b73      	ldr	r3, [pc, #460]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x208>)
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ca:	e0d8      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044cc:	4b6f      	ldr	r3, [pc, #444]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044d6:	4b6d      	ldr	r3, [pc, #436]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b6a      	ldr	r3, [pc, #424]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f6:	2300      	movs	r3, #0
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4621      	mov	r1, r4
 8004518:	1a51      	subs	r1, r2, r1
 800451a:	6139      	str	r1, [r7, #16]
 800451c:	4629      	mov	r1, r5
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004530:	4659      	mov	r1, fp
 8004532:	018b      	lsls	r3, r1, #6
 8004534:	4651      	mov	r1, sl
 8004536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453a:	4651      	mov	r1, sl
 800453c:	018a      	lsls	r2, r1, #6
 800453e:	4651      	mov	r1, sl
 8004540:	ebb2 0801 	subs.w	r8, r2, r1
 8004544:	4659      	mov	r1, fp
 8004546:	eb63 0901 	sbc.w	r9, r3, r1
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800455a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800455e:	4690      	mov	r8, r2
 8004560:	4699      	mov	r9, r3
 8004562:	4623      	mov	r3, r4
 8004564:	eb18 0303 	adds.w	r3, r8, r3
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	462b      	mov	r3, r5
 800456c:	eb49 0303 	adc.w	r3, r9, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800457e:	4629      	mov	r1, r5
 8004580:	024b      	lsls	r3, r1, #9
 8004582:	4621      	mov	r1, r4
 8004584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004588:	4621      	mov	r1, r4
 800458a:	024a      	lsls	r2, r1, #9
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800459c:	f7fb ff08 	bl	80003b0 <__aeabi_uldivmod>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4613      	mov	r3, r2
 80045a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a8:	e058      	b.n	800465c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045aa:	4b38      	ldr	r3, [pc, #224]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	2200      	movs	r2, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	4611      	mov	r1, r2
 80045b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0159      	lsls	r1, r3, #5
 80045d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d6:	0150      	lsls	r0, r2, #5
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4641      	mov	r1, r8
 80045de:	ebb2 0a01 	subs.w	sl, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004600:	eb63 050b 	sbc.w	r5, r3, fp
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	00eb      	lsls	r3, r5, #3
 800460e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004612:	00e2      	lsls	r2, r4, #3
 8004614:	4614      	mov	r4, r2
 8004616:	461d      	mov	r5, r3
 8004618:	4643      	mov	r3, r8
 800461a:	18e3      	adds	r3, r4, r3
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	464b      	mov	r3, r9
 8004620:	eb45 0303 	adc.w	r3, r5, r3
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004632:	4629      	mov	r1, r5
 8004634:	028b      	lsls	r3, r1, #10
 8004636:	4621      	mov	r1, r4
 8004638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800463c:	4621      	mov	r1, r4
 800463e:	028a      	lsls	r2, r1, #10
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004646:	2200      	movs	r2, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	61fa      	str	r2, [r7, #28]
 800464c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004650:	f7fb feae 	bl	80003b0 <__aeabi_uldivmod>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4613      	mov	r3, r2
 800465a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <HAL_RCC_GetSysClockFreq+0x200>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	3301      	adds	r3, #1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800466c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800466e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_RCC_GetSysClockFreq+0x204>)
 800467a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004680:	4618      	mov	r0, r3
 8004682:	3750      	adds	r7, #80	@ 0x50
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800
 8004690:	00f42400 	.word	0x00f42400
 8004694:	007a1200 	.word	0x007a1200

08004698 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800469c:	4b03      	ldr	r3, [pc, #12]	@ (80046ac <HAL_RCC_GetHCLKFreq+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff0 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	@ (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	08018144 	.word	0x08018144

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffdc 	bl	8004698 <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	0b5b      	lsrs	r3, r3, #13
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	@ (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	08018144 	.word	0x08018144

08004700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	220f      	movs	r2, #15
 800470e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_GetClockConfig+0x5c>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0203 	and.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <HAL_RCC_GetClockConfig+0x5c>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <HAL_RCC_GetClockConfig+0x5c>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004734:	4b09      	ldr	r3, [pc, #36]	@ (800475c <HAL_RCC_GetClockConfig+0x5c>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004742:	4b07      	ldr	r3, [pc, #28]	@ (8004760 <HAL_RCC_GetClockConfig+0x60>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	40023c00 	.word	0x40023c00

08004764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d012      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800478c:	4b69      	ldr	r3, [pc, #420]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a68      	ldr	r2, [pc, #416]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004796:	6093      	str	r3, [r2, #8]
 8004798:	4b66      	ldr	r3, [pc, #408]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a0:	4964      	ldr	r1, [pc, #400]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d017      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047be:	4b5d      	ldr	r3, [pc, #372]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047cc:	4959      	ldr	r1, [pc, #356]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047dc:	d101      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004800:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	494a      	ldr	r1, [pc, #296]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004818:	d101      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004836:	2301      	movs	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 808b 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b3a      	ldr	r3, [pc, #232]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	4a39      	ldr	r2, [pc, #228]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	@ 0x40
 8004854:	4b37      	ldr	r3, [pc, #220]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004860:	4b35      	ldr	r3, [pc, #212]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a34      	ldr	r2, [pc, #208]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486c:	f7fd f8fe 	bl	8001a6c <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004874:	f7fd f8fa 	bl	8001a6c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	@ 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e38f      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004886:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004892:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d035      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d02e      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b0:	4b20      	ldr	r3, [pc, #128]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80048d2:	4a18      	ldr	r2, [pc, #96]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048d8:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d114      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd f8c2 	bl	8001a6c <HAL_GetTick>
 80048e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fd f8be 	bl	8001a6c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e351      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ee      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004916:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800491a:	d111      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800491c:	4b05      	ldr	r3, [pc, #20]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004928:	4b04      	ldr	r3, [pc, #16]	@ (800493c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800492a:	400b      	ands	r3, r1
 800492c:	4901      	ldr	r1, [pc, #4]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
 8004932:	e00b      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004934:	40023800 	.word	0x40023800
 8004938:	40007000 	.word	0x40007000
 800493c:	0ffffcff 	.word	0x0ffffcff
 8004940:	4bac      	ldr	r3, [pc, #688]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4aab      	ldr	r2, [pc, #684]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004946:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800494a:	6093      	str	r3, [r2, #8]
 800494c:	4ba9      	ldr	r3, [pc, #676]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	49a6      	ldr	r1, [pc, #664]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495a:	4313      	orrs	r3, r2
 800495c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800496a:	4ba2      	ldr	r3, [pc, #648]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004970:	4aa0      	ldr	r2, [pc, #640]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004976:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800497a:	4b9e      	ldr	r3, [pc, #632]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	499b      	ldr	r1, [pc, #620]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004998:	4b96      	ldr	r3, [pc, #600]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049a6:	4993      	ldr	r1, [pc, #588]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ba:	4b8e      	ldr	r3, [pc, #568]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c8:	498a      	ldr	r1, [pc, #552]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049dc:	4b85      	ldr	r3, [pc, #532]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ea:	4982      	ldr	r1, [pc, #520]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049fe:	4b7d      	ldr	r3, [pc, #500]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4979      	ldr	r1, [pc, #484]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a20:	4b74      	ldr	r3, [pc, #464]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f023 0203 	bic.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	4971      	ldr	r1, [pc, #452]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a42:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	f023 020c 	bic.w	r2, r3, #12
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a50:	4968      	ldr	r1, [pc, #416]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a64:	4b63      	ldr	r3, [pc, #396]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	4960      	ldr	r1, [pc, #384]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a86:	4b5b      	ldr	r3, [pc, #364]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a94:	4957      	ldr	r1, [pc, #348]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa8:	4b52      	ldr	r3, [pc, #328]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	494f      	ldr	r1, [pc, #316]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004aca:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	4946      	ldr	r1, [pc, #280]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004aec:	4b41      	ldr	r3, [pc, #260]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	493e      	ldr	r1, [pc, #248]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b0e:	4b39      	ldr	r3, [pc, #228]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1c:	4935      	ldr	r1, [pc, #212]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b30:	4b30      	ldr	r3, [pc, #192]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b3e:	492d      	ldr	r1, [pc, #180]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b52:	4b28      	ldr	r3, [pc, #160]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b60:	4924      	ldr	r1, [pc, #144]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b92:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b98:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba0:	4914      	ldr	r1, [pc, #80]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	490b      	ldr	r1, [pc, #44]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00f      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004be8:	4902      	ldr	r1, [pc, #8]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c04:	4b8a      	ldr	r3, [pc, #552]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	4986      	ldr	r1, [pc, #536]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c28:	4b81      	ldr	r3, [pc, #516]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c38:	497d      	ldr	r1, [pc, #500]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d006      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80d6 	beq.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c54:	4b76      	ldr	r3, [pc, #472]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a75      	ldr	r2, [pc, #468]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c60:	f7fc ff04 	bl	8001a6c <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c68:	f7fc ff00 	bl	8001a6c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	@ 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e195      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d021      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11d      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c9a:	4b65      	ldr	r3, [pc, #404]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ca8:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	019a      	lsls	r2, r3, #6
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	4958      	ldr	r1, [pc, #352]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d00:	d129      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d10:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	0f1b      	lsrs	r3, r3, #28
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	019a      	lsls	r2, r3, #6
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	431a      	orrs	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	071b      	lsls	r3, r3, #28
 8004d36:	493e      	ldr	r1, [pc, #248]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d44:	f023 021f 	bic.w	r2, r3, #31
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4938      	ldr	r1, [pc, #224]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01d      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d62:	4b33      	ldr	r3, [pc, #204]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d68:	0e1b      	lsrs	r3, r3, #24
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d70:	4b2f      	ldr	r3, [pc, #188]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d76:	0f1b      	lsrs	r3, r3, #28
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4926      	ldr	r1, [pc, #152]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	019a      	lsls	r2, r3, #6
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	491a      	ldr	r1, [pc, #104]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dce:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fc fe47 	bl	8001a6c <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004de2:	f7fc fe43 	bl	8001a6c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b64      	cmp	r3, #100	@ 0x64
 8004dee:	d901      	bls.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0d8      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004df4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 80ce 	bne.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e08:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a08      	ldr	r2, [pc, #32]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fc fe2a 	bl	8001a6c <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e1c:	f7fc fe26 	bl	8001a6c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d904      	bls.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0bb      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e34:	4b5e      	ldr	r3, [pc, #376]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e40:	d0ec      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02e      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d12a      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e6a:	4b51      	ldr	r3, [pc, #324]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e78:	4b4d      	ldr	r3, [pc, #308]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	0f1b      	lsrs	r3, r3, #28
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	019a      	lsls	r2, r3, #6
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	4944      	ldr	r1, [pc, #272]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ea6:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	493d      	ldr	r1, [pc, #244]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d022      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ed4:	d11d      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ed6:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	0e1b      	lsrs	r3, r3, #24
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ee4:	4b32      	ldr	r3, [pc, #200]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	0f1b      	lsrs	r3, r3, #28
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	019a      	lsls	r2, r3, #6
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	431a      	orrs	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	061b      	lsls	r3, r3, #24
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	4929      	ldr	r1, [pc, #164]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d028      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f2c:	4b20      	ldr	r3, [pc, #128]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	019a      	lsls	r2, r3, #6
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	431a      	orrs	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	071b      	lsls	r3, r3, #28
 8004f52:	4917      	ldr	r1, [pc, #92]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	4911      	ldr	r1, [pc, #68]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f70:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fc fd76 	bl	8001a6c <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f84:	f7fc fd72 	bl	8001a6c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e007      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa2:	d1ef      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f841 	bl	8005062 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f000 f9e8 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e054      	b.n	800513a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a26      	ldr	r2, [pc, #152]	@ (8005148 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d022      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ba:	d01d      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	@ (800514c <HAL_TIM_Base_Start_IT+0xd4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d018      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	@ (8005150 <HAL_TIM_Base_Start_IT+0xd8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_TIM_Base_Start_IT+0xdc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_TIM_Base_Start_IT+0xe0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_TIM_Base_Start_IT+0xe4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x80>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_TIM_Base_Start_IT+0xe8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d115      	bne.n	8005124 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <HAL_TIM_Base_Start_IT+0xec>)
 8005100:	4013      	ands	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b06      	cmp	r3, #6
 8005108:	d015      	beq.n	8005136 <HAL_TIM_Base_Start_IT+0xbe>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005110:	d011      	beq.n	8005136 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	e008      	b.n	8005136 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e000      	b.n	8005138 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40010400 	.word	0x40010400
 800515c:	40014000 	.word	0x40014000
 8005160:	40001800 	.word	0x40001800
 8005164:	00010007 	.word	0x00010007

08005168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8e9 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8db 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8ec 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0204 	mvn.w	r2, #4
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8c3 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8b5 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8c6 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f89d 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f88f 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f8a0 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	d020      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2208      	movs	r2, #8
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f877 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f869 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f87a 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0201 	mvn.w	r2, #1
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fb ff44 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f919 	bl	8005534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f911 	bl	8005548 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f834 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00c      	beq.n	800536e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0220 	mvn.w	r2, #32
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8d9 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a43      	ldr	r2, [pc, #268]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a42      	ldr	r2, [pc, #264]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a41      	ldr	r2, [pc, #260]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a40      	ldr	r2, [pc, #256]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a32      	ldr	r2, [pc, #200]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a31      	ldr	r2, [pc, #196]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a30      	ldr	r2, [pc, #192]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2e      	ldr	r2, [pc, #184]	@ (8005508 <TIM_Base_SetConfig+0x140>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2d      	ldr	r2, [pc, #180]	@ (800550c <TIM_Base_SetConfig+0x144>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2c      	ldr	r2, [pc, #176]	@ (8005510 <TIM_Base_SetConfig+0x148>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2b      	ldr	r2, [pc, #172]	@ (8005514 <TIM_Base_SetConfig+0x14c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2a      	ldr	r2, [pc, #168]	@ (8005518 <TIM_Base_SetConfig+0x150>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a29      	ldr	r2, [pc, #164]	@ (800551c <TIM_Base_SetConfig+0x154>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a10      	ldr	r2, [pc, #64]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d105      	bne.n	80054e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]
  }
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40001800 	.word	0x40001800
 8005518:	40001c00 	.word	0x40001c00
 800551c:	40002000 	.word	0x40002000

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e040      	b.n	80055f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc f95a 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	@ 0x24
 8005588:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 ff0e 	bl	80063c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fca7 	bl	8005efc <UART_SetConfig>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e01b      	b.n	80055f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 ff8d 	bl	8006508 <UART_CheckIdleState>
 80055ee:	4603      	mov	r3, r0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	@ 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800560a:	2b20      	cmp	r3, #32
 800560c:	d165      	bne.n	80056da <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_UART_Transmit_DMA+0x22>
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e05e      	b.n	80056dc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2221      	movs	r2, #33	@ 0x21
 8005640:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	2b00      	cmp	r3, #0
 8005648:	d027      	beq.n	800569a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	4a25      	ldr	r2, [pc, #148]	@ (80056e4 <HAL_UART_Transmit_DMA+0xec>)
 8005650:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005656:	4a24      	ldr	r2, [pc, #144]	@ (80056e8 <HAL_UART_Transmit_DMA+0xf0>)
 8005658:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565e:	4a23      	ldr	r2, [pc, #140]	@ (80056ec <HAL_UART_Transmit_DMA+0xf4>)
 8005660:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	2200      	movs	r2, #0
 8005668:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005672:	4619      	mov	r1, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3328      	adds	r3, #40	@ 0x28
 800567a:	461a      	mov	r2, r3
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	f7fc fbb5 	bl	8001dec <HAL_DMA_Start_IT>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2210      	movs	r2, #16
 800568c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e020      	b.n	80056dc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2240      	movs	r2, #64	@ 0x40
 80056a0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c2:	623a      	str	r2, [r7, #32]
 80056c4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	@ 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	08006989 	.word	0x08006989
 80056e8:	08006a1f 	.word	0x08006a1f
 80056ec:	08006ba1 	.word	0x08006ba1

080056f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005704:	2b20      	cmp	r3, #32
 8005706:	d132      	bne.n	800576e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_UART_Receive_DMA+0x24>
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e02b      	b.n	8005770 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d018      	beq.n	800575e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	613b      	str	r3, [r7, #16]
   return(result);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	69f9      	ldr	r1, [r7, #28]
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	61bb      	str	r3, [r7, #24]
   return(result);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e6      	bne.n	800572c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	461a      	mov	r2, r3
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 ffe5 	bl	8006734 <UART_Start_Receive_DMA>
 800576a:	4603      	mov	r3, r0
 800576c:	e000      	b.n	8005770 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
  }
}
 8005770:	4618      	mov	r0, r3
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b090      	sub	sp, #64	@ 0x40
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800578c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005798:	2b80      	cmp	r3, #128	@ 0x80
 800579a:	d139      	bne.n	8005810 <HAL_UART_DMAStop+0x98>
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	2b21      	cmp	r3, #33	@ 0x21
 80057a0:	d136      	bne.n	8005810 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fc fb62 	bl	8001eac <HAL_DMA_Abort>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc fd76 	bl	80022e4 <HAL_DMA_GetError>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d105      	bne.n	800580a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2210      	movs	r2, #16
 8005802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e044      	b.n	8005894 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 f832 	bl	8006874 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581a:	2b40      	cmp	r3, #64	@ 0x40
 800581c:	d139      	bne.n	8005892 <HAL_UART_DMAStop+0x11a>
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	2b22      	cmp	r3, #34	@ 0x22
 8005822:	d136      	bne.n	8005892 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60bb      	str	r3, [r7, #8]
   return(result);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005844:	61ba      	str	r2, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	613b      	str	r3, [r7, #16]
   return(result);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005864:	4618      	mov	r0, r3
 8005866:	f7fc fb21 	bl	8001eac <HAL_DMA_Abort>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005874:	4618      	mov	r0, r3
 8005876:	f7fc fd35 	bl	80022e4 <HAL_DMA_GetError>
 800587a:	4603      	mov	r3, r0
 800587c:	2b20      	cmp	r3, #32
 800587e:	d105      	bne.n	800588c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2210      	movs	r2, #16
 8005884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e003      	b.n	8005894 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 f817 	bl	80068c0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3740      	adds	r7, #64	@ 0x40
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b0ba      	sub	sp, #232	@ 0xe8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058ca:	4013      	ands	r3, r2
 80058cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d115      	bne.n	8005904 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00f      	beq.n	8005904 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 82ac 	beq.w	8005e52 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
      }
      return;
 8005902:	e2a6      	b.n	8005e52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8117 	beq.w	8005b3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800591a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800591e:	4b85      	ldr	r3, [pc, #532]	@ (8005b34 <HAL_UART_IRQHandler+0x298>)
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 810a 	beq.w	8005b3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d011      	beq.n	8005958 <HAL_UART_IRQHandler+0xbc>
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2201      	movs	r2, #1
 8005946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594e:	f043 0201 	orr.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d011      	beq.n	8005988 <HAL_UART_IRQHandler+0xec>
 8005964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2202      	movs	r2, #2
 8005976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d011      	beq.n	80059b8 <HAL_UART_IRQHandler+0x11c>
 8005994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2204      	movs	r2, #4
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2208      	movs	r2, #8
 80059e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ea:	f043 0208 	orr.w	r2, r3, #8
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <HAL_UART_IRQHandler+0x18a>
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8212 	beq.w	8005e56 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b40      	cmp	r3, #64	@ 0x40
 8005a70:	d005      	beq.n	8005a7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d04f      	beq.n	8005b1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 ff1e 	bl	80068c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8e:	2b40      	cmp	r3, #64	@ 0x40
 8005a90:	d141      	bne.n	8005b16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005abe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005aca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ad6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1d9      	bne.n	8005a92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d013      	beq.n	8005b0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aea:	4a13      	ldr	r2, [pc, #76]	@ (8005b38 <HAL_UART_IRQHandler+0x29c>)
 8005aec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fc fa4a 	bl	8001f8c <HAL_DMA_Abort_IT>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d017      	beq.n	8005b2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e00f      	b.n	8005b2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f9d4 	bl	8005ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	e00b      	b.n	8005b2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f9d0 	bl	8005ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	e007      	b.n	8005b2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9cc 	bl	8005ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b2c:	e193      	b.n	8005e56 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2e:	bf00      	nop
    return;
 8005b30:	e191      	b.n	8005e56 <HAL_UART_IRQHandler+0x5ba>
 8005b32:	bf00      	nop
 8005b34:	04000120 	.word	0x04000120
 8005b38:	08006c1f 	.word	0x08006c1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	f040 814c 	bne.w	8005dde <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8145 	beq.w	8005dde <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 813e 	beq.w	8005dde <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2210      	movs	r2, #16
 8005b68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	f040 80b6 	bne.w	8005ce6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8165 	beq.w	8005e5a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	f080 815d 	bcs.w	8005e5a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb4:	f000 8086 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005be2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005be6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1da      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e1      	bne.n	8005c02 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e3      	bne.n	8005c3e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c94:	f023 0310 	bic.w	r3, r3, #16
 8005c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ca8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e4      	bne.n	8005c84 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fc f8f4 	bl	8001eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8f6 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ce4:	e0b9      	b.n	8005e5a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80ab 	beq.w	8005e5e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80a6 	beq.w	8005e5e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e4      	bne.n	8005d12 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	623b      	str	r3, [r7, #32]
   return(result);
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e3      	bne.n	8005d48 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0310 	bic.w	r3, r3, #16
 8005da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69b9      	ldr	r1, [r7, #24]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e4      	bne.n	8005d94 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f87a 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ddc:	e03f      	b.n	8005e5e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00e      	beq.n	8005e08 <HAL_UART_IRQHandler+0x56c>
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005dfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f871 	bl	8005ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e06:	e02d      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01c      	beq.n	8005e62 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
    }
    return;
 8005e30:	e017      	b.n	8005e62 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d012      	beq.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
 8005e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fefd 	bl	8006c4a <UART_EndTransmit_IT>
    return;
 8005e50:	e008      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e52:	bf00      	nop
 8005e54:	e006      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e56:	bf00      	nop
 8005e58:	e004      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e5a:	bf00      	nop
 8005e5c:	e002      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e62:	bf00      	nop
  }

}
 8005e64:	37e8      	adds	r7, #232	@ 0xe8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4ba6      	ldr	r3, [pc, #664]	@ (80061c0 <UART_SetConfig+0x2c4>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a94      	ldr	r2, [pc, #592]	@ (80061c4 <UART_SetConfig+0x2c8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d120      	bne.n	8005fba <UART_SetConfig+0xbe>
 8005f78:	4b93      	ldr	r3, [pc, #588]	@ (80061c8 <UART_SetConfig+0x2cc>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d816      	bhi.n	8005fb4 <UART_SetConfig+0xb8>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <UART_SetConfig+0x90>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fa3 	.word	0x08005fa3
 8005f98:	08005faf 	.word	0x08005faf
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e150      	b.n	8006244 <UART_SetConfig+0x348>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e14d      	b.n	8006244 <UART_SetConfig+0x348>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e14a      	b.n	8006244 <UART_SetConfig+0x348>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e147      	b.n	8006244 <UART_SetConfig+0x348>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e144      	b.n	8006244 <UART_SetConfig+0x348>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a83      	ldr	r2, [pc, #524]	@ (80061cc <UART_SetConfig+0x2d0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d132      	bne.n	800602a <UART_SetConfig+0x12e>
 8005fc4:	4b80      	ldr	r3, [pc, #512]	@ (80061c8 <UART_SetConfig+0x2cc>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b0c      	cmp	r3, #12
 8005fd0:	d828      	bhi.n	8006024 <UART_SetConfig+0x128>
 8005fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0xdc>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	0800600d 	.word	0x0800600d
 8005fdc:	08006025 	.word	0x08006025
 8005fe0:	08006025 	.word	0x08006025
 8005fe4:	08006025 	.word	0x08006025
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006025 	.word	0x08006025
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	08006025 	.word	0x08006025
 8005ff8:	08006013 	.word	0x08006013
 8005ffc:	08006025 	.word	0x08006025
 8006000:	08006025 	.word	0x08006025
 8006004:	08006025 	.word	0x08006025
 8006008:	0800601f 	.word	0x0800601f
 800600c:	2300      	movs	r3, #0
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e118      	b.n	8006244 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e115      	b.n	8006244 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e112      	b.n	8006244 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e10f      	b.n	8006244 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e10c      	b.n	8006244 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a68      	ldr	r2, [pc, #416]	@ (80061d0 <UART_SetConfig+0x2d4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d120      	bne.n	8006076 <UART_SetConfig+0x17a>
 8006034:	4b64      	ldr	r3, [pc, #400]	@ (80061c8 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800603e:	2b30      	cmp	r3, #48	@ 0x30
 8006040:	d013      	beq.n	800606a <UART_SetConfig+0x16e>
 8006042:	2b30      	cmp	r3, #48	@ 0x30
 8006044:	d814      	bhi.n	8006070 <UART_SetConfig+0x174>
 8006046:	2b20      	cmp	r3, #32
 8006048:	d009      	beq.n	800605e <UART_SetConfig+0x162>
 800604a:	2b20      	cmp	r3, #32
 800604c:	d810      	bhi.n	8006070 <UART_SetConfig+0x174>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <UART_SetConfig+0x15c>
 8006052:	2b10      	cmp	r3, #16
 8006054:	d006      	beq.n	8006064 <UART_SetConfig+0x168>
 8006056:	e00b      	b.n	8006070 <UART_SetConfig+0x174>
 8006058:	2300      	movs	r3, #0
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e0f2      	b.n	8006244 <UART_SetConfig+0x348>
 800605e:	2302      	movs	r3, #2
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e0ef      	b.n	8006244 <UART_SetConfig+0x348>
 8006064:	2304      	movs	r3, #4
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e0ec      	b.n	8006244 <UART_SetConfig+0x348>
 800606a:	2308      	movs	r3, #8
 800606c:	77fb      	strb	r3, [r7, #31]
 800606e:	e0e9      	b.n	8006244 <UART_SetConfig+0x348>
 8006070:	2310      	movs	r3, #16
 8006072:	77fb      	strb	r3, [r7, #31]
 8006074:	e0e6      	b.n	8006244 <UART_SetConfig+0x348>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a56      	ldr	r2, [pc, #344]	@ (80061d4 <UART_SetConfig+0x2d8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d120      	bne.n	80060c2 <UART_SetConfig+0x1c6>
 8006080:	4b51      	ldr	r3, [pc, #324]	@ (80061c8 <UART_SetConfig+0x2cc>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006086:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800608a:	2bc0      	cmp	r3, #192	@ 0xc0
 800608c:	d013      	beq.n	80060b6 <UART_SetConfig+0x1ba>
 800608e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006090:	d814      	bhi.n	80060bc <UART_SetConfig+0x1c0>
 8006092:	2b80      	cmp	r3, #128	@ 0x80
 8006094:	d009      	beq.n	80060aa <UART_SetConfig+0x1ae>
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d810      	bhi.n	80060bc <UART_SetConfig+0x1c0>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <UART_SetConfig+0x1a8>
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	d006      	beq.n	80060b0 <UART_SetConfig+0x1b4>
 80060a2:	e00b      	b.n	80060bc <UART_SetConfig+0x1c0>
 80060a4:	2300      	movs	r3, #0
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e0cc      	b.n	8006244 <UART_SetConfig+0x348>
 80060aa:	2302      	movs	r3, #2
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e0c9      	b.n	8006244 <UART_SetConfig+0x348>
 80060b0:	2304      	movs	r3, #4
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e0c6      	b.n	8006244 <UART_SetConfig+0x348>
 80060b6:	2308      	movs	r3, #8
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e0c3      	b.n	8006244 <UART_SetConfig+0x348>
 80060bc:	2310      	movs	r3, #16
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e0c0      	b.n	8006244 <UART_SetConfig+0x348>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a44      	ldr	r2, [pc, #272]	@ (80061d8 <UART_SetConfig+0x2dc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d125      	bne.n	8006118 <UART_SetConfig+0x21c>
 80060cc:	4b3e      	ldr	r3, [pc, #248]	@ (80061c8 <UART_SetConfig+0x2cc>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060da:	d017      	beq.n	800610c <UART_SetConfig+0x210>
 80060dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e0:	d817      	bhi.n	8006112 <UART_SetConfig+0x216>
 80060e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e6:	d00b      	beq.n	8006100 <UART_SetConfig+0x204>
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ec:	d811      	bhi.n	8006112 <UART_SetConfig+0x216>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <UART_SetConfig+0x1fe>
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f6:	d006      	beq.n	8006106 <UART_SetConfig+0x20a>
 80060f8:	e00b      	b.n	8006112 <UART_SetConfig+0x216>
 80060fa:	2300      	movs	r3, #0
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e0a1      	b.n	8006244 <UART_SetConfig+0x348>
 8006100:	2302      	movs	r3, #2
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e09e      	b.n	8006244 <UART_SetConfig+0x348>
 8006106:	2304      	movs	r3, #4
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e09b      	b.n	8006244 <UART_SetConfig+0x348>
 800610c:	2308      	movs	r3, #8
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e098      	b.n	8006244 <UART_SetConfig+0x348>
 8006112:	2310      	movs	r3, #16
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e095      	b.n	8006244 <UART_SetConfig+0x348>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2f      	ldr	r2, [pc, #188]	@ (80061dc <UART_SetConfig+0x2e0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d125      	bne.n	800616e <UART_SetConfig+0x272>
 8006122:	4b29      	ldr	r3, [pc, #164]	@ (80061c8 <UART_SetConfig+0x2cc>)
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006128:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800612c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006130:	d017      	beq.n	8006162 <UART_SetConfig+0x266>
 8006132:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006136:	d817      	bhi.n	8006168 <UART_SetConfig+0x26c>
 8006138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800613c:	d00b      	beq.n	8006156 <UART_SetConfig+0x25a>
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006142:	d811      	bhi.n	8006168 <UART_SetConfig+0x26c>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <UART_SetConfig+0x254>
 8006148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614c:	d006      	beq.n	800615c <UART_SetConfig+0x260>
 800614e:	e00b      	b.n	8006168 <UART_SetConfig+0x26c>
 8006150:	2301      	movs	r3, #1
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e076      	b.n	8006244 <UART_SetConfig+0x348>
 8006156:	2302      	movs	r3, #2
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e073      	b.n	8006244 <UART_SetConfig+0x348>
 800615c:	2304      	movs	r3, #4
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	e070      	b.n	8006244 <UART_SetConfig+0x348>
 8006162:	2308      	movs	r3, #8
 8006164:	77fb      	strb	r3, [r7, #31]
 8006166:	e06d      	b.n	8006244 <UART_SetConfig+0x348>
 8006168:	2310      	movs	r3, #16
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e06a      	b.n	8006244 <UART_SetConfig+0x348>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1b      	ldr	r2, [pc, #108]	@ (80061e0 <UART_SetConfig+0x2e4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d138      	bne.n	80061ea <UART_SetConfig+0x2ee>
 8006178:	4b13      	ldr	r3, [pc, #76]	@ (80061c8 <UART_SetConfig+0x2cc>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006186:	d017      	beq.n	80061b8 <UART_SetConfig+0x2bc>
 8006188:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800618c:	d82a      	bhi.n	80061e4 <UART_SetConfig+0x2e8>
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	d00b      	beq.n	80061ac <UART_SetConfig+0x2b0>
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006198:	d824      	bhi.n	80061e4 <UART_SetConfig+0x2e8>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <UART_SetConfig+0x2aa>
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a2:	d006      	beq.n	80061b2 <UART_SetConfig+0x2b6>
 80061a4:	e01e      	b.n	80061e4 <UART_SetConfig+0x2e8>
 80061a6:	2300      	movs	r3, #0
 80061a8:	77fb      	strb	r3, [r7, #31]
 80061aa:	e04b      	b.n	8006244 <UART_SetConfig+0x348>
 80061ac:	2302      	movs	r3, #2
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e048      	b.n	8006244 <UART_SetConfig+0x348>
 80061b2:	2304      	movs	r3, #4
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e045      	b.n	8006244 <UART_SetConfig+0x348>
 80061b8:	2308      	movs	r3, #8
 80061ba:	77fb      	strb	r3, [r7, #31]
 80061bc:	e042      	b.n	8006244 <UART_SetConfig+0x348>
 80061be:	bf00      	nop
 80061c0:	efff69f3 	.word	0xefff69f3
 80061c4:	40011000 	.word	0x40011000
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40004400 	.word	0x40004400
 80061d0:	40004800 	.word	0x40004800
 80061d4:	40004c00 	.word	0x40004c00
 80061d8:	40005000 	.word	0x40005000
 80061dc:	40011400 	.word	0x40011400
 80061e0:	40007800 	.word	0x40007800
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e02c      	b.n	8006244 <UART_SetConfig+0x348>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a72      	ldr	r2, [pc, #456]	@ (80063b8 <UART_SetConfig+0x4bc>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d125      	bne.n	8006240 <UART_SetConfig+0x344>
 80061f4:	4b71      	ldr	r3, [pc, #452]	@ (80063bc <UART_SetConfig+0x4c0>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80061fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006202:	d017      	beq.n	8006234 <UART_SetConfig+0x338>
 8006204:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006208:	d817      	bhi.n	800623a <UART_SetConfig+0x33e>
 800620a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620e:	d00b      	beq.n	8006228 <UART_SetConfig+0x32c>
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006214:	d811      	bhi.n	800623a <UART_SetConfig+0x33e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <UART_SetConfig+0x326>
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800621e:	d006      	beq.n	800622e <UART_SetConfig+0x332>
 8006220:	e00b      	b.n	800623a <UART_SetConfig+0x33e>
 8006222:	2300      	movs	r3, #0
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e00d      	b.n	8006244 <UART_SetConfig+0x348>
 8006228:	2302      	movs	r3, #2
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e00a      	b.n	8006244 <UART_SetConfig+0x348>
 800622e:	2304      	movs	r3, #4
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e007      	b.n	8006244 <UART_SetConfig+0x348>
 8006234:	2308      	movs	r3, #8
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e004      	b.n	8006244 <UART_SetConfig+0x348>
 800623a:	2310      	movs	r3, #16
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e001      	b.n	8006244 <UART_SetConfig+0x348>
 8006240:	2310      	movs	r3, #16
 8006242:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624c:	d15b      	bne.n	8006306 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800624e:	7ffb      	ldrb	r3, [r7, #31]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d828      	bhi.n	80062a6 <UART_SetConfig+0x3aa>
 8006254:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x360>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006297 	.word	0x08006297
 8006270:	080062a7 	.word	0x080062a7
 8006274:	080062a7 	.word	0x080062a7
 8006278:	080062a7 	.word	0x080062a7
 800627c:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fe fa16 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8006284:	61b8      	str	r0, [r7, #24]
        break;
 8006286:	e013      	b.n	80062b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7fe fa26 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 800628c:	61b8      	str	r0, [r7, #24]
        break;
 800628e:	e00f      	b.n	80062b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b4b      	ldr	r3, [pc, #300]	@ (80063c0 <UART_SetConfig+0x4c4>)
 8006292:	61bb      	str	r3, [r7, #24]
        break;
 8006294:	e00c      	b.n	80062b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fe f8f9 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800629a:	61b8      	str	r0, [r7, #24]
        break;
 800629c:	e008      	b.n	80062b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a2:	61bb      	str	r3, [r7, #24]
        break;
 80062a4:	e004      	b.n	80062b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	77bb      	strb	r3, [r7, #30]
        break;
 80062ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d074      	beq.n	80063a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	005a      	lsls	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d916      	bls.n	8006300 <UART_SetConfig+0x404>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d8:	d212      	bcs.n	8006300 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f023 030f 	bic.w	r3, r3, #15
 80062e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	89fb      	ldrh	r3, [r7, #14]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	89fa      	ldrh	r2, [r7, #14]
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e04f      	b.n	80063a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	77bb      	strb	r3, [r7, #30]
 8006304:	e04c      	b.n	80063a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006306:	7ffb      	ldrb	r3, [r7, #31]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d828      	bhi.n	800635e <UART_SetConfig+0x462>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <UART_SetConfig+0x418>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006339 	.word	0x08006339
 8006318:	08006341 	.word	0x08006341
 800631c:	08006349 	.word	0x08006349
 8006320:	0800635f 	.word	0x0800635f
 8006324:	0800634f 	.word	0x0800634f
 8006328:	0800635f 	.word	0x0800635f
 800632c:	0800635f 	.word	0x0800635f
 8006330:	0800635f 	.word	0x0800635f
 8006334:	08006357 	.word	0x08006357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006338:	f7fe f9ba 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 800633c:	61b8      	str	r0, [r7, #24]
        break;
 800633e:	e013      	b.n	8006368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006340:	f7fe f9ca 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 8006344:	61b8      	str	r0, [r7, #24]
        break;
 8006346:	e00f      	b.n	8006368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006348:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <UART_SetConfig+0x4c4>)
 800634a:	61bb      	str	r3, [r7, #24]
        break;
 800634c:	e00c      	b.n	8006368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634e:	f7fe f89d 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8006352:	61b8      	str	r0, [r7, #24]
        break;
 8006354:	e008      	b.n	8006368 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800635a:	61bb      	str	r3, [r7, #24]
        break;
 800635c:	e004      	b.n	8006368 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	77bb      	strb	r3, [r7, #30]
        break;
 8006366:	bf00      	nop
    }

    if (pclk != 0U)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	085a      	lsrs	r2, r3, #1
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	441a      	add	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d909      	bls.n	800639c <UART_SetConfig+0x4a0>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800638e:	d205      	bcs.n	800639c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	e001      	b.n	80063a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40007c00 	.word	0x40007c00
 80063bc:	40023800 	.word	0x40023800
 80063c0:	00f42400 	.word	0x00f42400

080063c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00a      	beq.n	80063ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01a      	beq.n	80064da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c2:	d10a      	bne.n	80064da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b098      	sub	sp, #96	@ 0x60
 800650c:	af02      	add	r7, sp, #8
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006518:	f7fb faa8 	bl	8001a6c <HAL_GetTick>
 800651c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d12e      	bne.n	800658a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f88c 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d021      	beq.n	800658a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655a:	653b      	str	r3, [r7, #80]	@ 0x50
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006564:	647b      	str	r3, [r7, #68]	@ 0x44
 8006566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800656a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e6      	bne.n	8006546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e062      	b.n	8006650 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b04      	cmp	r3, #4
 8006596:	d149      	bne.n	800662c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f856 	bl	8006658 <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d03c      	beq.n	800662c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	623b      	str	r3, [r7, #32]
   return(result);
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	61fa      	str	r2, [r7, #28]
 8006606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	69b9      	ldr	r1, [r7, #24]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	617b      	str	r3, [r7, #20]
   return(result);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e011      	b.n	8006650 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3758      	adds	r7, #88	@ 0x58
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4613      	mov	r3, r2
 8006666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	e04f      	b.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006670:	d04b      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006672:	f7fb f9fb 	bl	8001a6c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <UART_WaitOnFlagUntilTimeout+0x30>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e04e      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d037      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d034      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d031      	beq.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d110      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2208      	movs	r2, #8
 80066ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f8ff 	bl	80068c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2208      	movs	r2, #8
 80066c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e029      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e4:	d111      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f8e5 	bl	80068c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00f      	b.n	800672a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d0a0      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b096      	sub	sp, #88	@ 0x58
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	88fa      	ldrh	r2, [r7, #6]
 800674c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2222      	movs	r2, #34	@ 0x22
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006764:	2b00      	cmp	r3, #0
 8006766:	d028      	beq.n	80067ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676c:	4a3e      	ldr	r2, [pc, #248]	@ (8006868 <UART_Start_Receive_DMA+0x134>)
 800676e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006774:	4a3d      	ldr	r2, [pc, #244]	@ (800686c <UART_Start_Receive_DMA+0x138>)
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800677c:	4a3c      	ldr	r2, [pc, #240]	@ (8006870 <UART_Start_Receive_DMA+0x13c>)
 800677e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006784:	2200      	movs	r2, #0
 8006786:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3324      	adds	r3, #36	@ 0x24
 8006792:	4619      	mov	r1, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	461a      	mov	r2, r3
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	f7fb fb26 	bl	8001dec <HAL_DMA_Start_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2210      	movs	r2, #16
 80067aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e051      	b.n	800685e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d018      	beq.n	80067f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80067ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e6      	bne.n	80067c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3308      	adds	r3, #8
 80067fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	653b      	str	r3, [r7, #80]	@ 0x50
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006814:	637a      	str	r2, [r7, #52]	@ 0x34
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800681a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	613b      	str	r3, [r7, #16]
   return(result);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3308      	adds	r3, #8
 8006846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006848:	623a      	str	r2, [r7, #32]
 800684a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	69f9      	ldr	r1, [r7, #28]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	61bb      	str	r3, [r7, #24]
   return(result);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e5      	bne.n	8006828 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3758      	adds	r7, #88	@ 0x58
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	08006a3b 	.word	0x08006a3b
 800686c:	08006b63 	.word	0x08006b63
 8006870:	08006ba1 	.word	0x08006ba1

08006874 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	@ 0x24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	60bb      	str	r3, [r7, #8]
   return(result);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6979      	ldr	r1, [r7, #20]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	613b      	str	r3, [r7, #16]
   return(result);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068b4:	bf00      	nop
 80068b6:	3724      	adds	r7, #36	@ 0x24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b095      	sub	sp, #84	@ 0x54
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80068e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e6      	bne.n	80068c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	61fb      	str	r3, [r7, #28]
   return(result);
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800691a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800691c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006932:	2b01      	cmp	r3, #1
 8006934:	d118      	bne.n	8006968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	60bb      	str	r3, [r7, #8]
   return(result);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f023 0310 	bic.w	r3, r3, #16
 800694a:	647b      	str	r3, [r7, #68]	@ 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6979      	ldr	r1, [r7, #20]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e6      	bne.n	8006936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800697c:	bf00      	nop
 800697e:	3754      	adds	r7, #84	@ 0x54
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b090      	sub	sp, #64	@ 0x40
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800699e:	d037      	beq.n	8006a10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	623b      	str	r3, [r7, #32]
   return(result);
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e5      	bne.n	80069a8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	69b9      	ldr	r1, [r7, #24]
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	617b      	str	r3, [r7, #20]
   return(result);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a0e:	e002      	b.n	8006a16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006a10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a12:	f7ff fa2b 	bl	8005e6c <HAL_UART_TxCpltCallback>
}
 8006a16:	bf00      	nop
 8006a18:	3740      	adds	r7, #64	@ 0x40
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff fa27 	bl	8005e80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b09c      	sub	sp, #112	@ 0x70
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a50:	d071      	beq.n	8006b36 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e6      	bne.n	8006a5a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006aac:	647a      	str	r2, [r7, #68]	@ 0x44
 8006aae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ae0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d118      	bne.n	8006b36 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f023 0310 	bic.w	r3, r3, #16
 8006b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	69b9      	ldr	r1, [r7, #24]
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e6      	bne.n	8006b04 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b38:	2200      	movs	r2, #0
 8006b3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d107      	bne.n	8006b54 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b4e:	f7ff f9bf 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b52:	e002      	b.n	8006b5a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006b54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b56:	f7ff f99d 	bl	8005e94 <HAL_UART_RxCpltCallback>
}
 8006b5a:	bf00      	nop
 8006b5c:	3770      	adds	r7, #112	@ 0x70
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d109      	bne.n	8006b92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff f9a0 	bl	8005ed0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b90:	e002      	b.n	8006b98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff f988 	bl	8005ea8 <HAL_UART_RxHalfCpltCallback>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc6:	2b80      	cmp	r3, #128	@ 0x80
 8006bc8:	d109      	bne.n	8006bde <UART_DMAError+0x3e>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b21      	cmp	r3, #33	@ 0x21
 8006bce:	d106      	bne.n	8006bde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006bd8:	6978      	ldr	r0, [r7, #20]
 8006bda:	f7ff fe4b 	bl	8006874 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	d109      	bne.n	8006c00 <UART_DMAError+0x60>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b22      	cmp	r3, #34	@ 0x22
 8006bf0:	d106      	bne.n	8006c00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7ff fe60 	bl	80068c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c10:	6978      	ldr	r0, [r7, #20]
 8006c12:	f7ff f953 	bl	8005ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff f93d 	bl	8005ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f8eb 	bl	8005e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c96:	bf00      	nop
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	f107 001c 	add.w	r0, r7, #28
 8006cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cb2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d121      	bne.n	8006cfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	4b21      	ldr	r3, [pc, #132]	@ (8006d50 <USB_CoreInit+0xb0>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d105      	bne.n	8006cf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fade 	bl	80082b4 <USB_CoreReset>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e010      	b.n	8006d20 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fad2 	bl	80082b4 <USB_CoreReset>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d20:	7fbb      	ldrb	r3, [r7, #30]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d10b      	bne.n	8006d3e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f043 0206 	orr.w	r2, r3, #6
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f043 0220 	orr.w	r2, r3, #32
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4a:	b004      	add	sp, #16
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	ffbdffbf 	.word	0xffbdffbf

08006d54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d165      	bne.n	8006e34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a41      	ldr	r2, [pc, #260]	@ (8006e70 <USB_SetTurnaroundTime+0x11c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d906      	bls.n	8006d7e <USB_SetTurnaroundTime+0x2a>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a40      	ldr	r2, [pc, #256]	@ (8006e74 <USB_SetTurnaroundTime+0x120>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d202      	bcs.n	8006d7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d78:	230f      	movs	r3, #15
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e062      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4a3c      	ldr	r2, [pc, #240]	@ (8006e74 <USB_SetTurnaroundTime+0x120>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d306      	bcc.n	8006d94 <USB_SetTurnaroundTime+0x40>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4a3b      	ldr	r2, [pc, #236]	@ (8006e78 <USB_SetTurnaroundTime+0x124>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d202      	bcs.n	8006d94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d8e:	230e      	movs	r3, #14
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e057      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4a38      	ldr	r2, [pc, #224]	@ (8006e78 <USB_SetTurnaroundTime+0x124>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d306      	bcc.n	8006daa <USB_SetTurnaroundTime+0x56>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4a37      	ldr	r2, [pc, #220]	@ (8006e7c <USB_SetTurnaroundTime+0x128>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d202      	bcs.n	8006daa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006da4:	230d      	movs	r3, #13
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e04c      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4a33      	ldr	r2, [pc, #204]	@ (8006e7c <USB_SetTurnaroundTime+0x128>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d306      	bcc.n	8006dc0 <USB_SetTurnaroundTime+0x6c>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4a32      	ldr	r2, [pc, #200]	@ (8006e80 <USB_SetTurnaroundTime+0x12c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d802      	bhi.n	8006dc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dba:	230c      	movs	r3, #12
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	e041      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e80 <USB_SetTurnaroundTime+0x12c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d906      	bls.n	8006dd6 <USB_SetTurnaroundTime+0x82>
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a2e      	ldr	r2, [pc, #184]	@ (8006e84 <USB_SetTurnaroundTime+0x130>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d802      	bhi.n	8006dd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006dd0:	230b      	movs	r3, #11
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	e036      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <USB_SetTurnaroundTime+0x130>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d906      	bls.n	8006dec <USB_SetTurnaroundTime+0x98>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4a29      	ldr	r2, [pc, #164]	@ (8006e88 <USB_SetTurnaroundTime+0x134>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d802      	bhi.n	8006dec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006de6:	230a      	movs	r3, #10
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	e02b      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a26      	ldr	r2, [pc, #152]	@ (8006e88 <USB_SetTurnaroundTime+0x134>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d906      	bls.n	8006e02 <USB_SetTurnaroundTime+0xae>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4a25      	ldr	r2, [pc, #148]	@ (8006e8c <USB_SetTurnaroundTime+0x138>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d202      	bcs.n	8006e02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006dfc:	2309      	movs	r3, #9
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e020      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4a21      	ldr	r2, [pc, #132]	@ (8006e8c <USB_SetTurnaroundTime+0x138>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d306      	bcc.n	8006e18 <USB_SetTurnaroundTime+0xc4>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	@ (8006e90 <USB_SetTurnaroundTime+0x13c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d802      	bhi.n	8006e18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e12:	2308      	movs	r3, #8
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	e015      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <USB_SetTurnaroundTime+0x13c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d906      	bls.n	8006e2e <USB_SetTurnaroundTime+0xda>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4a1c      	ldr	r2, [pc, #112]	@ (8006e94 <USB_SetTurnaroundTime+0x140>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d202      	bcs.n	8006e2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e28:	2307      	movs	r3, #7
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e00a      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e2e:	2306      	movs	r3, #6
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e007      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e3a:	2309      	movs	r3, #9
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e001      	b.n	8006e44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e40:	2309      	movs	r3, #9
 8006e42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	029b      	lsls	r3, r3, #10
 8006e58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	00d8acbf 	.word	0x00d8acbf
 8006e74:	00e4e1c0 	.word	0x00e4e1c0
 8006e78:	00f42400 	.word	0x00f42400
 8006e7c:	01067380 	.word	0x01067380
 8006e80:	011a499f 	.word	0x011a499f
 8006e84:	01312cff 	.word	0x01312cff
 8006e88:	014ca43f 	.word	0x014ca43f
 8006e8c:	016e3600 	.word	0x016e3600
 8006e90:	01a6ab1f 	.word	0x01a6ab1f
 8006e94:	01e84800 	.word	0x01e84800

08006e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f043 0201 	orr.w	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 0201 	bic.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d115      	bne.n	8006f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f0a:	200a      	movs	r0, #10
 8006f0c:	f7fa fdba 	bl	8001a84 <HAL_Delay>
      ms += 10U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	330a      	adds	r3, #10
 8006f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 f93b 	bl	8008192 <USB_GetMode>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d01e      	beq.n	8006f60 <USB_SetCurrentMode+0x84>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f26:	d9f0      	bls.n	8006f0a <USB_SetCurrentMode+0x2e>
 8006f28:	e01a      	b.n	8006f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d115      	bne.n	8006f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f3c:	200a      	movs	r0, #10
 8006f3e:	f7fa fda1 	bl	8001a84 <HAL_Delay>
      ms += 10U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	330a      	adds	r3, #10
 8006f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f922 	bl	8008192 <USB_GetMode>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <USB_SetCurrentMode+0x84>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f58:	d9f0      	bls.n	8006f3c <USB_SetCurrentMode+0x60>
 8006f5a:	e001      	b.n	8006f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e005      	b.n	8006f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f64:	d101      	bne.n	8006f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f74:	b084      	sub	sp, #16
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	e009      	b.n	8006fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3340      	adds	r3, #64	@ 0x40
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b0e      	cmp	r3, #14
 8006fac:	d9f2      	bls.n	8006f94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d11c      	bne.n	8006ff0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc4:	f043 0302 	orr.w	r3, r3, #2
 8006fc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e005      	b.n	8006ffc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007002:	461a      	mov	r2, r3
 8007004:	2300      	movs	r3, #0
 8007006:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007008:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10d      	bne.n	800702c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f968 	bl	80072f0 <USB_SetDevSpeed>
 8007020:	e008      	b.n	8007034 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007022:	2101      	movs	r1, #1
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f963 	bl	80072f0 <USB_SetDevSpeed>
 800702a:	e003      	b.n	8007034 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800702c:	2103      	movs	r1, #3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f95e 	bl	80072f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007034:	2110      	movs	r1, #16
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f8fa 	bl	8007230 <USB_FlushTxFifo>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f924 	bl	8007294 <USB_FlushRxFifo>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705c:	461a      	mov	r2, r3
 800705e:	2300      	movs	r3, #0
 8007060:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007068:	461a      	mov	r2, r3
 800706a:	2300      	movs	r3, #0
 800706c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007074:	461a      	mov	r2, r3
 8007076:	2300      	movs	r3, #0
 8007078:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	e043      	b.n	8007108 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007096:	d118      	bne.n	80070ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070aa:	461a      	mov	r2, r3
 80070ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e013      	b.n	80070dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c0:	461a      	mov	r2, r3
 80070c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	e008      	b.n	80070dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d6:	461a      	mov	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fa:	461a      	mov	r2, r3
 80070fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800710c:	461a      	mov	r2, r3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4293      	cmp	r3, r2
 8007112:	d3b5      	bcc.n	8007080 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	e043      	b.n	80071a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800712c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007130:	d118      	bne.n	8007164 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	461a      	mov	r2, r3
 8007146:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e013      	b.n	8007176 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e008      	b.n	8007176 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007170:	461a      	mov	r2, r3
 8007172:	2300      	movs	r3, #0
 8007174:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007182:	461a      	mov	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	461a      	mov	r2, r3
 8007196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800719a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	3301      	adds	r3, #1
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d3b5      	bcc.n	800711a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f043 0210 	orr.w	r2, r3, #16
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <USB_DevInit+0x2b4>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f043 0208 	orr.w	r2, r3, #8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007204:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007208:	2b01      	cmp	r3, #1
 800720a:	d105      	bne.n	8007218 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	4b06      	ldr	r3, [pc, #24]	@ (800722c <USB_DevInit+0x2b8>)
 8007212:	4313      	orrs	r3, r2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007224:	b004      	add	sp, #16
 8007226:	4770      	bx	lr
 8007228:	803c3800 	.word	0x803c3800
 800722c:	40000004 	.word	0x40000004

08007230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724a:	d901      	bls.n	8007250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e01b      	b.n	8007288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	daf2      	bge.n	800723e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	019b      	lsls	r3, r3, #6
 8007260:	f043 0220 	orr.w	r2, r3, #32
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007274:	d901      	bls.n	800727a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d0f0      	beq.n	8007268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ac:	d901      	bls.n	80072b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e018      	b.n	80072e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	daf2      	bge.n	80072a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2210      	movs	r2, #16
 80072c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072d0:	d901      	bls.n	80072d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e006      	b.n	80072e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	2b10      	cmp	r3, #16
 80072e0:	d0f0      	beq.n	80072c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007310:	4313      	orrs	r3, r2
 8007312:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b087      	sub	sp, #28
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
 8007346:	e00a      	b.n	800735e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d002      	beq.n	8007354 <USB_GetDevSpeed+0x32>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d102      	bne.n	800735a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007354:	2302      	movs	r3, #2
 8007356:	75fb      	strb	r3, [r7, #23]
 8007358:	e001      	b.n	800735e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800735a:	230f      	movs	r3, #15
 800735c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007360:	4618      	mov	r0, r3
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d139      	bne.n	80073fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	68f9      	ldr	r1, [r7, #12]
 80073a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a6:	4313      	orrs	r3, r2
 80073a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d153      	bne.n	8007468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	059b      	lsls	r3, r3, #22
 80073e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	0159      	lsls	r1, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f2:	4619      	mov	r1, r3
 80073f4:	4b20      	ldr	r3, [pc, #128]	@ (8007478 <USB_ActivateEndpoint+0x10c>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
 80073fa:	e035      	b.n	8007468 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800741a:	4313      	orrs	r3, r2
 800741c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d119      	bne.n	8007468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007450:	430b      	orrs	r3, r1
 8007452:	431a      	orrs	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	0159      	lsls	r1, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	440b      	add	r3, r1
 800745c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007460:	4619      	mov	r1, r3
 8007462:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <USB_ActivateEndpoint+0x10c>)
 8007464:	4313      	orrs	r3, r2
 8007466:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	10008000 	.word	0x10008000

0800747c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d161      	bne.n	800755c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ae:	d11f      	bne.n	80074f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	2101      	movs	r1, #1
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	43db      	mvns	r3, r3
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007510:	4013      	ands	r3, r2
 8007512:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	2101      	movs	r1, #1
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	b29b      	uxth	r3, r3
 800752c:	43db      	mvns	r3, r3
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007534:	4013      	ands	r3, r2
 8007536:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	0159      	lsls	r1, r3, #5
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	440b      	add	r3, r1
 800754e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007552:	4619      	mov	r1, r3
 8007554:	4b35      	ldr	r3, [pc, #212]	@ (800762c <USB_DeactivateEndpoint+0x1b0>)
 8007556:	4013      	ands	r3, r2
 8007558:	600b      	str	r3, [r1, #0]
 800755a:	e060      	b.n	800761e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800756e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007572:	d11f      	bne.n	80075b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800758e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007592:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	2101      	movs	r1, #1
 80075c6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	43db      	mvns	r3, r3
 80075ce:	68f9      	ldr	r1, [r7, #12]
 80075d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075d4:	4013      	ands	r3, r2
 80075d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075de:	69da      	ldr	r2, [r3, #28]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	2101      	movs	r1, #1
 80075ea:	fa01 f303 	lsl.w	r3, r1, r3
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	43db      	mvns	r3, r3
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075f8:	4013      	ands	r3, r2
 80075fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	0159      	lsls	r1, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	440b      	add	r3, r1
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	4619      	mov	r1, r3
 8007618:	4b05      	ldr	r3, [pc, #20]	@ (8007630 <USB_DeactivateEndpoint+0x1b4>)
 800761a:	4013      	ands	r3, r2
 800761c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	ec337800 	.word	0xec337800
 8007630:	eff37800 	.word	0xeff37800

08007634 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	@ 0x28
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b01      	cmp	r3, #1
 8007652:	f040 8181 	bne.w	8007958 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d132      	bne.n	80076c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	0159      	lsls	r1, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	440b      	add	r3, r1
 8007674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007678:	4619      	mov	r1, r3
 800767a:	4ba5      	ldr	r3, [pc, #660]	@ (8007910 <USB_EPStartXfer+0x2dc>)
 800767c:	4013      	ands	r3, r2
 800767e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800769a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800769e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	0159      	lsls	r1, r3, #5
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	440b      	add	r3, r1
 80076b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ba:	4619      	mov	r1, r3
 80076bc:	4b95      	ldr	r3, [pc, #596]	@ (8007914 <USB_EPStartXfer+0x2e0>)
 80076be:	4013      	ands	r3, r2
 80076c0:	610b      	str	r3, [r1, #16]
 80076c2:	e092      	b.n	80077ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	0159      	lsls	r1, r3, #5
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	440b      	add	r3, r1
 80076da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076de:	4619      	mov	r1, r3
 80076e0:	4b8c      	ldr	r3, [pc, #560]	@ (8007914 <USB_EPStartXfer+0x2e0>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	0159      	lsls	r1, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	440b      	add	r3, r1
 80076fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007700:	4619      	mov	r1, r3
 8007702:	4b83      	ldr	r3, [pc, #524]	@ (8007910 <USB_EPStartXfer+0x2dc>)
 8007704:	4013      	ands	r3, r2
 8007706:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d11a      	bne.n	8007744 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	429a      	cmp	r2, r3
 8007718:	d903      	bls.n	8007722 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007740:	6113      	str	r3, [r2, #16]
 8007742:	e01b      	b.n	800777c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007750:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6919      	ldr	r1, [r3, #16]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	440b      	add	r3, r1
 800775c:	1e59      	subs	r1, r3, #1
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	fbb1 f3f3 	udiv	r3, r1, r3
 8007766:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007768:	4b6b      	ldr	r3, [pc, #428]	@ (8007918 <USB_EPStartXfer+0x2e4>)
 800776a:	400b      	ands	r3, r1
 800776c:	69b9      	ldr	r1, [r7, #24]
 800776e:	0148      	lsls	r0, r1, #5
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	4401      	add	r1, r0
 8007774:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007778:	4313      	orrs	r3, r2
 800777a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007792:	69b9      	ldr	r1, [r7, #24]
 8007794:	0148      	lsls	r0, r1, #5
 8007796:	69f9      	ldr	r1, [r7, #28]
 8007798:	4401      	add	r1, r0
 800779a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800779e:	4313      	orrs	r3, r2
 80077a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	791b      	ldrb	r3, [r3, #4]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d11f      	bne.n	80077ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80077c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d14b      	bne.n	8007888 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007804:	461a      	mov	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	791b      	ldrb	r3, [r3, #4]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d128      	bne.n	8007866 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800783e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	e00f      	b.n	8007866 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007864:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007880:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e16a      	b.n	8007b5e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	791b      	ldrb	r3, [r3, #4]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d015      	beq.n	80078dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8152 	beq.w	8007b5e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	2101      	movs	r1, #1
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	69f9      	ldr	r1, [r7, #28]
 80078d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d6:	4313      	orrs	r3, r2
 80078d8:	634b      	str	r3, [r1, #52]	@ 0x34
 80078da:	e140      	b.n	8007b5e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d117      	bne.n	800791c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	69fa      	ldr	r2, [r7, #28]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e016      	b.n	800793c <USB_EPStartXfer+0x308>
 800790e:	bf00      	nop
 8007910:	e007ffff 	.word	0xe007ffff
 8007914:	fff80000 	.word	0xfff80000
 8007918:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800793a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	68d9      	ldr	r1, [r3, #12]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	b298      	uxth	r0, r3
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4603      	mov	r3, r0
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 f9b9 	bl	8007cc8 <USB_WritePacket>
 8007956:	e102      	b.n	8007b5e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	0159      	lsls	r1, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	440b      	add	r3, r1
 800796e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007972:	4619      	mov	r1, r3
 8007974:	4b7c      	ldr	r3, [pc, #496]	@ (8007b68 <USB_EPStartXfer+0x534>)
 8007976:	4013      	ands	r3, r2
 8007978:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	0159      	lsls	r1, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	440b      	add	r3, r1
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	4619      	mov	r1, r3
 8007996:	4b75      	ldr	r3, [pc, #468]	@ (8007b6c <USB_EPStartXfer+0x538>)
 8007998:	4013      	ands	r3, r2
 800799a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d12f      	bne.n	8007a02 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079d0:	69b9      	ldr	r1, [r7, #24]
 80079d2:	0148      	lsls	r0, r1, #5
 80079d4:	69f9      	ldr	r1, [r7, #28]
 80079d6:	4401      	add	r1, r0
 80079d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079dc:	4313      	orrs	r3, r2
 80079de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	0151      	lsls	r1, r2, #5
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	440a      	add	r2, r1
 80079f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079fe:	6113      	str	r3, [r2, #16]
 8007a00:	e05f      	b.n	8007ac2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d123      	bne.n	8007a52 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	0148      	lsls	r0, r1, #5
 8007a24:	69f9      	ldr	r1, [r7, #28]
 8007a26:	4401      	add	r1, r0
 8007a28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a4e:	6113      	str	r3, [r2, #16]
 8007a50:	e037      	b.n	8007ac2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	1e5a      	subs	r2, r3, #1
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	8afa      	ldrh	r2, [r7, #22]
 8007a6e:	fb03 f202 	mul.w	r2, r3, r2
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	04d9      	lsls	r1, r3, #19
 8007a88:	4b39      	ldr	r3, [pc, #228]	@ (8007b70 <USB_EPStartXfer+0x53c>)
 8007a8a:	400b      	ands	r3, r1
 8007a8c:	69b9      	ldr	r1, [r7, #24]
 8007a8e:	0148      	lsls	r0, r1, #5
 8007a90:	69f9      	ldr	r1, [r7, #28]
 8007a92:	4401      	add	r1, r0
 8007a94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ab2:	69b9      	ldr	r1, [r7, #24]
 8007ab4:	0148      	lsls	r0, r1, #5
 8007ab6:	69f9      	ldr	r1, [r7, #28]
 8007ab8:	4401      	add	r1, r0
 8007aba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10d      	bne.n	8007ae4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	68d9      	ldr	r1, [r3, #12]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae0:	460a      	mov	r2, r1
 8007ae2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d128      	bne.n	8007b3e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d110      	bne.n	8007b1e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e00f      	b.n	8007b3e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	0151      	lsls	r1, r2, #5
 8007b50:	69fa      	ldr	r2, [r7, #28]
 8007b52:	440a      	add	r2, r1
 8007b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	fff80000 	.word	0xfff80000
 8007b6c:	e007ffff 	.word	0xe007ffff
 8007b70:	1ff80000 	.word	0x1ff80000

08007b74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d14a      	bne.n	8007c28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007baa:	f040 8086 	bne.w	8007cba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	7812      	ldrb	r2, [r2, #0]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d902      	bls.n	8007c0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
          break;
 8007c0a:	e056      	b.n	8007cba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c24:	d0e7      	beq.n	8007bf6 <USB_EPStopXfer+0x82>
 8007c26:	e048      	b.n	8007cba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c40:	d13b      	bne.n	8007cba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	7812      	ldrb	r2, [r2, #0]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d902      	bls.n	8007ca0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9e:	e00c      	b.n	8007cba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cb8:	d0e7      	beq.n	8007c8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	@ 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	71fb      	strb	r3, [r7, #7]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d123      	bne.n	8007d36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007cee:	88bb      	ldrh	r3, [r7, #4]
 8007cf0:	3303      	adds	r3, #3
 8007cf2:	089b      	lsrs	r3, r3, #2
 8007cf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e018      	b.n	8007d2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	031a      	lsls	r2, r3, #12
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d08:	461a      	mov	r2, r3
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3301      	adds	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61bb      	str	r3, [r7, #24]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3e2      	bcc.n	8007cfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3724      	adds	r7, #36	@ 0x24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b08b      	sub	sp, #44	@ 0x2c
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	089b      	lsrs	r3, r3, #2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	e014      	b.n	8007d9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	3301      	adds	r3, #1
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	3301      	adds	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	3301      	adds	r3, #1
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	3301      	adds	r3, #1
 8007d98:	623b      	str	r3, [r7, #32]
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d3e6      	bcc.n	8007d70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007da2:	8bfb      	ldrh	r3, [r7, #30]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01e      	beq.n	8007de6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007db2:	461a      	mov	r2, r3
 8007db4:	f107 0310 	add.w	r3, r7, #16
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	701a      	strb	r2, [r3, #0]
      i++;
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007dda:	8bfb      	ldrh	r3, [r7, #30]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007de0:	8bfb      	ldrh	r3, [r7, #30]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1ea      	bne.n	8007dbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	372c      	adds	r7, #44	@ 0x2c
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d12c      	bne.n	8007e6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	db12      	blt.n	8007e48 <USB_EPSetStall+0x54>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00f      	beq.n	8007e48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e02b      	b.n	8007ec2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db12      	blt.n	8007ea2 <USB_EPSetStall+0xae>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00f      	beq.n	8007ea2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ea0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ec0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d128      	bne.n	8007f3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d003      	beq.n	8007f1c <USB_EPClearStall+0x4c>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	791b      	ldrb	r3, [r3, #4]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d138      	bne.n	8007f8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	e027      	b.n	8007f8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d003      	beq.n	8007f6e <USB_EPClearStall+0x9e>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d10f      	bne.n	8007f8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008016:	f023 0302 	bic.w	r3, r3, #2
 800801a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008058:	f043 0302 	orr.w	r3, r3, #2
 800805c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4013      	ands	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008084:	68fb      	ldr	r3, [r7, #12]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	4013      	ands	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	0c1b      	lsrs	r3, r3, #16
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	4013      	ands	r3, r2
 80080e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	b29b      	uxth	r3, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	460b      	mov	r3, r1
 8008104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4013      	ands	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008128:	68bb      	ldr	r3, [r7, #8]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008136:	b480      	push	{r7}
 8008138:	b087      	sub	sp, #28
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008158:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	01db      	lsls	r3, r3, #7
 8008168:	b2db      	uxtb	r3, r3
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4013      	ands	r3, r2
 8008182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008184:	68bb      	ldr	r3, [r7, #8]
}
 8008186:	4618      	mov	r0, r3
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f003 0301 	and.w	r3, r3, #1
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ca:	4619      	mov	r1, r3
 80081cc:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <USB_ActivateSetup+0x44>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	fffff800 	.word	0xfffff800

080081f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	460b      	mov	r3, r1
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	333c      	adds	r3, #60	@ 0x3c
 800820e:	3304      	adds	r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4a26      	ldr	r2, [pc, #152]	@ (80082b0 <USB_EP0_OutStart+0xb8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d90a      	bls.n	8008232 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800822c:	d101      	bne.n	8008232 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	e037      	b.n	80082a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800824c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008260:	f043 0318 	orr.w	r3, r3, #24
 8008264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008274:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008278:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800827a:	7afb      	ldrb	r3, [r7, #11]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d10f      	bne.n	80082a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800829a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800829e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	4f54300a 	.word	0x4f54300a

080082b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082cc:	d901      	bls.n	80082d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e01b      	b.n	800830a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	daf2      	bge.n	80082c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f043 0201 	orr.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3301      	adds	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082f6:	d901      	bls.n	80082fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e006      	b.n	800830a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b01      	cmp	r3, #1
 8008306:	d0f0      	beq.n	80082ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008324:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008328:	f00e fae2 	bl	80168f0 <malloc>
 800832c:	4603      	mov	r3, r0
 800832e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32b0      	adds	r2, #176	@ 0xb0
 8008340:	2100      	movs	r1, #0
 8008342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008346:	2302      	movs	r3, #2
 8008348:	e0d4      	b.n	80084f4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800834a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800834e:	2100      	movs	r1, #0
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f00e ff17 	bl	8017184 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	32b0      	adds	r2, #176	@ 0xb0
 8008360:	68f9      	ldr	r1, [r7, #12]
 8008362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32b0      	adds	r2, #176	@ 0xb0
 8008370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1b      	ldrb	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d138      	bne.n	80083f4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008382:	4b5e      	ldr	r3, [pc, #376]	@ (80084fc <USBD_CDC_Init+0x1e4>)
 8008384:	7819      	ldrb	r1, [r3, #0]
 8008386:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800838a:	2202      	movs	r2, #2
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f005 f988 	bl	800d6a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008392:	4b5a      	ldr	r3, [pc, #360]	@ (80084fc <USBD_CDC_Init+0x1e4>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	f003 020f 	and.w	r2, r3, #15
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	3324      	adds	r3, #36	@ 0x24
 80083a8:	2201      	movs	r2, #1
 80083aa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ac:	4b54      	ldr	r3, [pc, #336]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 80083ae:	7819      	ldrb	r1, [r3, #0]
 80083b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083b4:	2202      	movs	r2, #2
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f005 f973 	bl	800d6a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083bc:	4b50      	ldr	r3, [pc, #320]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083d4:	2201      	movs	r2, #1
 80083d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80083d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008504 <USBD_CDC_Init+0x1ec>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3326      	adds	r3, #38	@ 0x26
 80083ee:	2210      	movs	r2, #16
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	e035      	b.n	8008460 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083f4:	4b41      	ldr	r3, [pc, #260]	@ (80084fc <USBD_CDC_Init+0x1e4>)
 80083f6:	7819      	ldrb	r1, [r3, #0]
 80083f8:	2340      	movs	r3, #64	@ 0x40
 80083fa:	2202      	movs	r2, #2
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f005 f950 	bl	800d6a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008402:	4b3e      	ldr	r3, [pc, #248]	@ (80084fc <USBD_CDC_Init+0x1e4>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3324      	adds	r3, #36	@ 0x24
 8008418:	2201      	movs	r2, #1
 800841a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800841c:	4b38      	ldr	r3, [pc, #224]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 800841e:	7819      	ldrb	r1, [r3, #0]
 8008420:	2340      	movs	r3, #64	@ 0x40
 8008422:	2202      	movs	r2, #2
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f005 f93c 	bl	800d6a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800842a:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008442:	2201      	movs	r2, #1
 8008444:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008446:	4b2f      	ldr	r3, [pc, #188]	@ (8008504 <USBD_CDC_Init+0x1ec>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	f003 020f 	and.w	r2, r3, #15
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	3326      	adds	r3, #38	@ 0x26
 800845c:	2210      	movs	r2, #16
 800845e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008460:	4b28      	ldr	r3, [pc, #160]	@ (8008504 <USBD_CDC_Init+0x1ec>)
 8008462:	7819      	ldrb	r1, [r3, #0]
 8008464:	2308      	movs	r3, #8
 8008466:	2203      	movs	r2, #3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f005 f91a 	bl	800d6a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800846e:	4b25      	ldr	r3, [pc, #148]	@ (8008504 <USBD_CDC_Init+0x1ec>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f003 020f 	and.w	r2, r3, #15
 8008476:	6879      	ldr	r1, [r7, #4]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	3324      	adds	r3, #36	@ 0x24
 8008484:	2201      	movs	r2, #1
 8008486:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	33b0      	adds	r3, #176	@ 0xb0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80084be:	2302      	movs	r3, #2
 80084c0:	e018      	b.n	80084f4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7c1b      	ldrb	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 80084cc:	7819      	ldrb	r1, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f005 f9d1 	bl	800d880 <USBD_LL_PrepareReceive>
 80084de:	e008      	b.n	80084f2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084e0:	4b07      	ldr	r3, [pc, #28]	@ (8008500 <USBD_CDC_Init+0x1e8>)
 80084e2:	7819      	ldrb	r1, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084ea:	2340      	movs	r3, #64	@ 0x40
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f005 f9c7 	bl	800d880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000097 	.word	0x20000097
 8008500:	20000098 	.word	0x20000098
 8008504:	20000099 	.word	0x20000099

08008508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008514:	4b3a      	ldr	r3, [pc, #232]	@ (8008600 <USBD_CDC_DeInit+0xf8>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f005 f8e7 	bl	800d6ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008520:	4b37      	ldr	r3, [pc, #220]	@ (8008600 <USBD_CDC_DeInit+0xf8>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	f003 020f 	and.w	r2, r3, #15
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	3324      	adds	r3, #36	@ 0x24
 8008536:	2200      	movs	r2, #0
 8008538:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800853a:	4b32      	ldr	r3, [pc, #200]	@ (8008604 <USBD_CDC_DeInit+0xfc>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f005 f8d4 	bl	800d6ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008546:	4b2f      	ldr	r3, [pc, #188]	@ (8008604 <USBD_CDC_DeInit+0xfc>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800855e:	2200      	movs	r2, #0
 8008560:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008562:	4b29      	ldr	r3, [pc, #164]	@ (8008608 <USBD_CDC_DeInit+0x100>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f005 f8c0 	bl	800d6ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800856e:	4b26      	ldr	r3, [pc, #152]	@ (8008608 <USBD_CDC_DeInit+0x100>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	440b      	add	r3, r1
 8008582:	3324      	adds	r3, #36	@ 0x24
 8008584:	2200      	movs	r2, #0
 8008586:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008588:	4b1f      	ldr	r3, [pc, #124]	@ (8008608 <USBD_CDC_DeInit+0x100>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	3326      	adds	r3, #38	@ 0x26
 800859e:	2200      	movs	r2, #0
 80085a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	32b0      	adds	r2, #176	@ 0xb0
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01f      	beq.n	80085f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	33b0      	adds	r3, #176	@ 0xb0
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	32b0      	adds	r2, #176	@ 0xb0
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f00e f992 	bl	8016900 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32b0      	adds	r2, #176	@ 0xb0
 80085e6:	2100      	movs	r1, #0
 80085e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000097 	.word	0x20000097
 8008604:	20000098 	.word	0x20000098
 8008608:	20000099 	.word	0x20000099

0800860c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	32b0      	adds	r2, #176	@ 0xb0
 8008620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008624:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008638:	2303      	movs	r3, #3
 800863a:	e0bf      	b.n	80087bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008644:	2b00      	cmp	r3, #0
 8008646:	d050      	beq.n	80086ea <USBD_CDC_Setup+0xde>
 8008648:	2b20      	cmp	r3, #32
 800864a:	f040 80af 	bne.w	80087ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d03a      	beq.n	80086cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	b25b      	sxtb	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	da1b      	bge.n	8008698 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	33b0      	adds	r3, #176	@ 0xb0
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008676:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	88d2      	ldrh	r2, [r2, #6]
 800867c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b07      	cmp	r3, #7
 8008684:	bf28      	it	cs
 8008686:	2307      	movcs	r3, #7
 8008688:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	89fa      	ldrh	r2, [r7, #14]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 fd7d 	bl	800a190 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008696:	e090      	b.n	80087ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785a      	ldrb	r2, [r3, #1]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	88db      	ldrh	r3, [r3, #6]
 80086a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80086a8:	d803      	bhi.n	80086b2 <USBD_CDC_Setup+0xa6>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	88db      	ldrh	r3, [r3, #6]
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	e000      	b.n	80086b4 <USBD_CDC_Setup+0xa8>
 80086b2:	2240      	movs	r2, #64	@ 0x40
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80086ba:	6939      	ldr	r1, [r7, #16]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80086c2:	461a      	mov	r2, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fd8f 	bl	800a1e8 <USBD_CtlPrepareRx>
      break;
 80086ca:	e076      	b.n	80087ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	33b0      	adds	r3, #176	@ 0xb0
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	7850      	ldrb	r0, [r2, #1]
 80086e2:	2200      	movs	r2, #0
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	4798      	blx	r3
      break;
 80086e8:	e067      	b.n	80087ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b0b      	cmp	r3, #11
 80086f0:	d851      	bhi.n	8008796 <USBD_CDC_Setup+0x18a>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <USBD_CDC_Setup+0xec>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008729 	.word	0x08008729
 80086fc:	080087a5 	.word	0x080087a5
 8008700:	08008797 	.word	0x08008797
 8008704:	08008797 	.word	0x08008797
 8008708:	08008797 	.word	0x08008797
 800870c:	08008797 	.word	0x08008797
 8008710:	08008797 	.word	0x08008797
 8008714:	08008797 	.word	0x08008797
 8008718:	08008797 	.word	0x08008797
 800871c:	08008797 	.word	0x08008797
 8008720:	08008753 	.word	0x08008753
 8008724:	0800877d 	.word	0x0800877d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b03      	cmp	r3, #3
 8008732:	d107      	bne.n	8008744 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008734:	f107 030a 	add.w	r3, r7, #10
 8008738:	2202      	movs	r2, #2
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fd27 	bl	800a190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008742:	e032      	b.n	80087aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fca5 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	75fb      	strb	r3, [r7, #23]
          break;
 8008750:	e02b      	b.n	80087aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b03      	cmp	r3, #3
 800875c:	d107      	bne.n	800876e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800875e:	f107 030d 	add.w	r3, r7, #13
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fd12 	bl	800a190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800876c:	e01d      	b.n	80087aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fc90 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008776:	2303      	movs	r3, #3
 8008778:	75fb      	strb	r3, [r7, #23]
          break;
 800877a:	e016      	b.n	80087aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d00f      	beq.n	80087a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fc83 	bl	800a096 <USBD_CtlError>
            ret = USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008794:	e008      	b.n	80087a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fc7c 	bl	800a096 <USBD_CtlError>
          ret = USBD_FAIL;
 800879e:	2303      	movs	r3, #3
 80087a0:	75fb      	strb	r3, [r7, #23]
          break;
 80087a2:	e002      	b.n	80087aa <USBD_CDC_Setup+0x19e>
          break;
 80087a4:	bf00      	nop
 80087a6:	e008      	b.n	80087ba <USBD_CDC_Setup+0x1ae>
          break;
 80087a8:	bf00      	nop
      }
      break;
 80087aa:	e006      	b.n	80087ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fc71 	bl	800a096 <USBD_CtlError>
      ret = USBD_FAIL;
 80087b4:	2303      	movs	r3, #3
 80087b6:	75fb      	strb	r3, [r7, #23]
      break;
 80087b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	32b0      	adds	r2, #176	@ 0xb0
 80087e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e065      	b.n	80088ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	32b0      	adds	r2, #176	@ 0xb0
 80087f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3318      	adds	r3, #24
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d02f      	beq.n	8008878 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	f003 020f 	and.w	r2, r3, #15
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	3318      	adds	r3, #24
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	f003 010f 	and.w	r1, r3, #15
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	460b      	mov	r3, r1
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	440b      	add	r3, r1
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4403      	add	r3, r0
 8008840:	331c      	adds	r3, #28
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	fbb2 f1f3 	udiv	r1, r2, r3
 8008848:	fb01 f303 	mul.w	r3, r1, r3
 800884c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800884e:	2b00      	cmp	r3, #0
 8008850:	d112      	bne.n	8008878 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	f003 020f 	and.w	r2, r3, #15
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	3318      	adds	r3, #24
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800886a:	78f9      	ldrb	r1, [r7, #3]
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f004 ffe4 	bl	800d83e <USBD_LL_Transmit>
 8008876:	e01f      	b.n	80088b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	33b0      	adds	r3, #176	@ 0xb0
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d010      	beq.n	80088b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	33b0      	adds	r3, #176	@ 0xb0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	32b0      	adds	r2, #176	@ 0xb0
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32b0      	adds	r2, #176	@ 0xb0
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e01a      	b.n	800892a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f004 ffe2 	bl	800d8c2 <USBD_LL_GetRxDataSize>
 80088fe:	4602      	mov	r2, r0
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	33b0      	adds	r3, #176	@ 0xb0
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008924:	4611      	mov	r1, r2
 8008926:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	32b0      	adds	r2, #176	@ 0xb0
 8008944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	e024      	b.n	800899e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	33b0      	adds	r3, #176	@ 0xb0
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d019      	beq.n	800899c <USBD_CDC_EP0_RxReady+0x6a>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800896e:	2bff      	cmp	r3, #255	@ 0xff
 8008970:	d014      	beq.n	800899c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	33b0      	adds	r3, #176	@ 0xb0
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800898a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008992:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	22ff      	movs	r2, #255	@ 0xff
 8008998:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089b0:	2182      	movs	r1, #130	@ 0x82
 80089b2:	4818      	ldr	r0, [pc, #96]	@ (8008a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089b4:	f000 fd0f 	bl	80093d6 <USBD_GetEpDesc>
 80089b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ba:	2101      	movs	r1, #1
 80089bc:	4815      	ldr	r0, [pc, #84]	@ (8008a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089be:	f000 fd0a 	bl	80093d6 <USBD_GetEpDesc>
 80089c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089c4:	2181      	movs	r1, #129	@ 0x81
 80089c6:	4813      	ldr	r0, [pc, #76]	@ (8008a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089c8:	f000 fd05 	bl	80093d6 <USBD_GetEpDesc>
 80089cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2210      	movs	r2, #16
 80089d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d006      	beq.n	80089ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089e8:	711a      	strb	r2, [r3, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d006      	beq.n	8008a02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089fc:	711a      	strb	r2, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2243      	movs	r2, #67	@ 0x43
 8008a06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a08:	4b02      	ldr	r3, [pc, #8]	@ (8008a14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000054 	.word	0x20000054

08008a18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a20:	2182      	movs	r1, #130	@ 0x82
 8008a22:	4818      	ldr	r0, [pc, #96]	@ (8008a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a24:	f000 fcd7 	bl	80093d6 <USBD_GetEpDesc>
 8008a28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4815      	ldr	r0, [pc, #84]	@ (8008a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a2e:	f000 fcd2 	bl	80093d6 <USBD_GetEpDesc>
 8008a32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a34:	2181      	movs	r1, #129	@ 0x81
 8008a36:	4813      	ldr	r0, [pc, #76]	@ (8008a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a38:	f000 fccd 	bl	80093d6 <USBD_GetEpDesc>
 8008a3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2210      	movs	r2, #16
 8008a48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2200      	movs	r2, #0
 8008a54:	711a      	strb	r2, [r3, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f042 0202 	orr.w	r2, r2, #2
 8008a5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d006      	beq.n	8008a72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	711a      	strb	r2, [r3, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f042 0202 	orr.w	r2, r2, #2
 8008a70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2243      	movs	r2, #67	@ 0x43
 8008a76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a78:	4b02      	ldr	r3, [pc, #8]	@ (8008a84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000054 	.word	0x20000054

08008a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a90:	2182      	movs	r1, #130	@ 0x82
 8008a92:	4818      	ldr	r0, [pc, #96]	@ (8008af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a94:	f000 fc9f 	bl	80093d6 <USBD_GetEpDesc>
 8008a98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	4815      	ldr	r0, [pc, #84]	@ (8008af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a9e:	f000 fc9a 	bl	80093d6 <USBD_GetEpDesc>
 8008aa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008aa4:	2181      	movs	r1, #129	@ 0x81
 8008aa6:	4813      	ldr	r0, [pc, #76]	@ (8008af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008aa8:	f000 fc95 	bl	80093d6 <USBD_GetEpDesc>
 8008aac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ac8:	711a      	strb	r2, [r3, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008adc:	711a      	strb	r2, [r3, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2243      	movs	r2, #67	@ 0x43
 8008ae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ae8:	4b02      	ldr	r3, [pc, #8]	@ (8008af4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000054 	.word	0x20000054

08008af8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	220a      	movs	r2, #10
 8008b04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	@ (8008b14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000010 	.word	0x20000010

08008b18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e009      	b.n	8008b40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	33b0      	adds	r3, #176	@ 0xb0
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	32b0      	adds	r2, #176	@ 0xb0
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e008      	b.n	8008b84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32b0      	adds	r2, #176	@ 0xb0
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e004      	b.n	8008bbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
	...

08008bcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	32b0      	adds	r2, #176	@ 0xb0
 8008bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32b0      	adds	r2, #176	@ 0xb0
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e018      	b.n	8008c2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7c1b      	ldrb	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c02:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <USBD_CDC_ReceivePacket+0x68>)
 8008c04:	7819      	ldrb	r1, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f004 fe35 	bl	800d880 <USBD_LL_PrepareReceive>
 8008c16:	e008      	b.n	8008c2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c18:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <USBD_CDC_ReceivePacket+0x68>)
 8008c1a:	7819      	ldrb	r1, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c22:	2340      	movs	r3, #64	@ 0x40
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f004 fe2b 	bl	800d880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000098 	.word	0x20000098

08008c38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e01f      	b.n	8008c90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	79fa      	ldrb	r2, [r7, #7]
 8008c82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f004 fca5 	bl	800d5d4 <USBD_LL_Init>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e025      	b.n	8008cfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32ae      	adds	r2, #174	@ 0xae
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00f      	beq.n	8008cec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	32ae      	adds	r2, #174	@ 0xae
 8008cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cdc:	f107 020e 	add.w	r2, r7, #14
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f004 fcad 	bl	800d66c <USBD_LL_Start>
 8008d12:	4603      	mov	r3, r0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	78fa      	ldrb	r2, [r7, #3]
 8008d56:	4611      	mov	r1, r2
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	4798      	blx	r3
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 f936 	bl	800a022 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dd2:	f003 031f 	and.w	r3, r3, #31
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d01a      	beq.n	8008e10 <USBD_LL_SetupStage+0x72>
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d822      	bhi.n	8008e24 <USBD_LL_SetupStage+0x86>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <USBD_LL_SetupStage+0x4a>
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d00a      	beq.n	8008dfc <USBD_LL_SetupStage+0x5e>
 8008de6:	e01d      	b.n	8008e24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fb63 	bl	80094bc <USBD_StdDevReq>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dfa:	e020      	b.n	8008e3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fbcb 	bl	80095a0 <USBD_StdItfReq>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0e:	e016      	b.n	8008e3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fc2d 	bl	8009678 <USBD_StdEPReq>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73fb      	strb	r3, [r7, #15]
      break;
 8008e22:	e00c      	b.n	8008e3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f004 fc7a 	bl	800d72c <USBD_LL_StallEP>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	bf00      	nop
  }

  return ret;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	460b      	mov	r3, r1
 8008e52:	607a      	str	r2, [r7, #4]
 8008e54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e5a:	7afb      	ldrb	r3, [r7, #11]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d16e      	bne.n	8008f3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	f040 8098 	bne.w	8008fa4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d913      	bls.n	8008ea8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	689a      	ldr	r2, [r3, #8]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	1ad2      	subs	r2, r2, r3
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	4293      	cmp	r3, r2
 8008e98:	bf28      	it	cs
 8008e9a:	4613      	movcs	r3, r2
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f001 f9be 	bl	800a222 <USBD_CtlContinueRx>
 8008ea6:	e07d      	b.n	8008fa4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d014      	beq.n	8008ee0 <USBD_LL_DataOutStage+0x98>
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d81d      	bhi.n	8008ef6 <USBD_LL_DataOutStage+0xae>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <USBD_LL_DataOutStage+0x7c>
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d003      	beq.n	8008eca <USBD_LL_DataOutStage+0x82>
 8008ec2:	e018      	b.n	8008ef6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ec8:	e018      	b.n	8008efc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fa64 	bl	80093a2 <USBD_CoreFindIF>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ede:	e00d      	b.n	8008efc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	4619      	mov	r1, r3
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fa66 	bl	80093bc <USBD_CoreFindEP>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ef4:	e002      	b.n	8008efc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8008efa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008efc:	7dbb      	ldrb	r3, [r7, #22]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d119      	bne.n	8008f36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d113      	bne.n	8008f36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f0e:	7dba      	ldrb	r2, [r7, #22]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	32ae      	adds	r2, #174	@ 0xae
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f1e:	7dba      	ldrb	r2, [r7, #22]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f26:	7dba      	ldrb	r2, [r7, #22]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	32ae      	adds	r2, #174	@ 0xae
 8008f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f001 f984 	bl	800a244 <USBD_CtlSendStatus>
 8008f3c:	e032      	b.n	8008fa4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	4619      	mov	r1, r3
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fa37 	bl	80093bc <USBD_CoreFindEP>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f52:	7dbb      	ldrb	r3, [r7, #22]
 8008f54:	2bff      	cmp	r3, #255	@ 0xff
 8008f56:	d025      	beq.n	8008fa4 <USBD_LL_DataOutStage+0x15c>
 8008f58:	7dbb      	ldrb	r3, [r7, #22]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d122      	bne.n	8008fa4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d117      	bne.n	8008f9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f6a:	7dba      	ldrb	r2, [r7, #22]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	32ae      	adds	r2, #174	@ 0xae
 8008f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00f      	beq.n	8008f9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f7a:	7dba      	ldrb	r2, [r7, #22]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f82:	7dba      	ldrb	r2, [r7, #22]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	32ae      	adds	r2, #174	@ 0xae
 8008f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	7afa      	ldrb	r2, [r7, #11]
 8008f90:	4611      	mov	r1, r2
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	e000      	b.n	8008fa6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d16f      	bne.n	80090a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d15a      	bne.n	8009088 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d914      	bls.n	8009008 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	1ad2      	subs	r2, r2, r3
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f001 f8e6 	bl	800a1c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f004 fc3d 	bl	800d880 <USBD_LL_PrepareReceive>
 8009006:	e03f      	b.n	8009088 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	429a      	cmp	r2, r3
 8009012:	d11c      	bne.n	800904e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800901c:	429a      	cmp	r2, r3
 800901e:	d316      	bcc.n	800904e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800902a:	429a      	cmp	r2, r3
 800902c:	d20f      	bcs.n	800904e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f001 f8c7 	bl	800a1c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009040:	2300      	movs	r3, #0
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f004 fc1a 	bl	800d880 <USBD_LL_PrepareReceive>
 800904c:	e01c      	b.n	8009088 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b03      	cmp	r3, #3
 8009058:	d10f      	bne.n	800907a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800907a:	2180      	movs	r1, #128	@ 0x80
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f004 fb55 	bl	800d72c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 f8f1 	bl	800a26a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d03a      	beq.n	8009108 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f7ff fe42 	bl	8008d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090a0:	e032      	b.n	8009108 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090a2:	7afb      	ldrb	r3, [r7, #11]
 80090a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f985 	bl	80093bc <USBD_CoreFindEP>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	2bff      	cmp	r3, #255	@ 0xff
 80090ba:	d025      	beq.n	8009108 <USBD_LL_DataInStage+0x15a>
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d122      	bne.n	8009108 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d11c      	bne.n	8009108 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090ce:	7dfa      	ldrb	r2, [r7, #23]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	32ae      	adds	r2, #174	@ 0xae
 80090d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d014      	beq.n	8009108 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090de:	7dfa      	ldrb	r2, [r7, #23]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090e6:	7dfa      	ldrb	r2, [r7, #23]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	32ae      	adds	r2, #174	@ 0xae
 80090ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	7afa      	ldrb	r2, [r7, #11]
 80090f4:	4611      	mov	r1, r2
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	4798      	blx	r3
 80090fa:	4603      	mov	r3, r0
 80090fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090fe:	7dbb      	ldrb	r3, [r7, #22]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009104:	7dbb      	ldrb	r3, [r7, #22]
 8009106:	e000      	b.n	800910a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d014      	beq.n	8009178 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00e      	beq.n	8009178 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6852      	ldr	r2, [r2, #4]
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	4611      	mov	r1, r2
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009174:	2303      	movs	r3, #3
 8009176:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009178:	2340      	movs	r3, #64	@ 0x40
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f004 fa8f 	bl	800d6a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2240      	movs	r2, #64	@ 0x40
 8009190:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009194:	2340      	movs	r3, #64	@ 0x40
 8009196:	2200      	movs	r2, #0
 8009198:	2180      	movs	r1, #128	@ 0x80
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f004 fa81 	bl	800d6a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2240      	movs	r2, #64	@ 0x40
 80091aa:	621a      	str	r2, [r3, #32]

  return ret;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d006      	beq.n	80091f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2204      	movs	r2, #4
 80091fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b04      	cmp	r3, #4
 8009220:	d106      	bne.n	8009230 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009228:	b2da      	uxtb	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b03      	cmp	r3, #3
 8009250:	d110      	bne.n	8009274 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	32ae      	adds	r2, #174	@ 0xae
 8009294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800929c:	2303      	movs	r3, #3
 800929e:	e01c      	b.n	80092da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d115      	bne.n	80092d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32ae      	adds	r2, #174	@ 0xae
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	32ae      	adds	r2, #174	@ 0xae
 80092ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	32ae      	adds	r2, #174	@ 0xae
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	e01c      	b.n	800933e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b03      	cmp	r3, #3
 800930e:	d115      	bne.n	800933c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	@ 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32ae      	adds	r2, #174	@ 0xae
 800932e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009334:	78fa      	ldrb	r2, [r7, #3]
 8009336:	4611      	mov	r1, r2
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00e      	beq.n	8009398 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6852      	ldr	r2, [r2, #4]
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	4611      	mov	r1, r2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d91f      	bls.n	800943c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009402:	e013      	b.n	800942c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009404:	f107 030a 	add.w	r3, r7, #10
 8009408:	4619      	mov	r1, r3
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f000 f81b 	bl	8009446 <USBD_GetNextDesc>
 8009410:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b05      	cmp	r3, #5
 8009418:	d108      	bne.n	800942c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	789b      	ldrb	r3, [r3, #2]
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	429a      	cmp	r2, r3
 8009426:	d008      	beq.n	800943a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	885b      	ldrh	r3, [r3, #2]
 8009430:	b29a      	uxth	r2, r3
 8009432:	897b      	ldrh	r3, [r7, #10]
 8009434:	429a      	cmp	r2, r3
 8009436:	d8e5      	bhi.n	8009404 <USBD_GetEpDesc+0x2e>
 8009438:	e000      	b.n	800943c <USBD_GetEpDesc+0x66>
          break;
 800943a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800943c:	693b      	ldr	r3, [r7, #16]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	4413      	add	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800947e:	b480      	push	{r7}
 8009480:	b087      	sub	sp, #28
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	3301      	adds	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800949c:	8a3b      	ldrh	r3, [r7, #16]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	b21a      	sxth	r2, r3
 80094a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	b21b      	sxth	r3, r3
 80094aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094ac:	89fb      	ldrh	r3, [r7, #14]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094d2:	2b40      	cmp	r3, #64	@ 0x40
 80094d4:	d005      	beq.n	80094e2 <USBD_StdDevReq+0x26>
 80094d6:	2b40      	cmp	r3, #64	@ 0x40
 80094d8:	d857      	bhi.n	800958a <USBD_StdDevReq+0xce>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00f      	beq.n	80094fe <USBD_StdDevReq+0x42>
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d153      	bne.n	800958a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	32ae      	adds	r2, #174	@ 0xae
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]
      break;
 80094fc:	e04a      	b.n	8009594 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	2b09      	cmp	r3, #9
 8009504:	d83b      	bhi.n	800957e <USBD_StdDevReq+0xc2>
 8009506:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <USBD_StdDevReq+0x50>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009561 	.word	0x08009561
 8009510:	08009575 	.word	0x08009575
 8009514:	0800957f 	.word	0x0800957f
 8009518:	0800956b 	.word	0x0800956b
 800951c:	0800957f 	.word	0x0800957f
 8009520:	0800953f 	.word	0x0800953f
 8009524:	08009535 	.word	0x08009535
 8009528:	0800957f 	.word	0x0800957f
 800952c:	08009557 	.word	0x08009557
 8009530:	08009549 	.word	0x08009549
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa3c 	bl	80099b4 <USBD_GetDescriptor>
          break;
 800953c:	e024      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fbcb 	bl	8009cdc <USBD_SetAddress>
          break;
 8009546:	e01f      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc0a 	bl	8009d64 <USBD_SetConfig>
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]
          break;
 8009554:	e018      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fcad 	bl	8009eb8 <USBD_GetConfig>
          break;
 800955e:	e013      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fcde 	bl	8009f24 <USBD_GetStatus>
          break;
 8009568:	e00e      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fd0d 	bl	8009f8c <USBD_SetFeature>
          break;
 8009572:	e009      	b.n	8009588 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fd31 	bl	8009fde <USBD_ClrFeature>
          break;
 800957c:	e004      	b.n	8009588 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fd88 	bl	800a096 <USBD_CtlError>
          break;
 8009586:	bf00      	nop
      }
      break;
 8009588:	e004      	b.n	8009594 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fd82 	bl	800a096 <USBD_CtlError>
      break;
 8009592:	bf00      	nop
  }

  return ret;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop

080095a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095b6:	2b40      	cmp	r3, #64	@ 0x40
 80095b8:	d005      	beq.n	80095c6 <USBD_StdItfReq+0x26>
 80095ba:	2b40      	cmp	r3, #64	@ 0x40
 80095bc:	d852      	bhi.n	8009664 <USBD_StdItfReq+0xc4>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <USBD_StdItfReq+0x26>
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d14e      	bne.n	8009664 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d840      	bhi.n	8009656 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	889b      	ldrh	r3, [r3, #4]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d836      	bhi.n	800964c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	889b      	ldrh	r3, [r3, #4]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff fedb 	bl	80093a2 <USBD_CoreFindIF>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2bff      	cmp	r3, #255	@ 0xff
 80095f4:	d01d      	beq.n	8009632 <USBD_StdItfReq+0x92>
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d11a      	bne.n	8009632 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095fc:	7bba      	ldrb	r2, [r7, #14]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	32ae      	adds	r2, #174	@ 0xae
 8009602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00f      	beq.n	800962c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800960c:	7bba      	ldrb	r2, [r7, #14]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009614:	7bba      	ldrb	r2, [r7, #14]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32ae      	adds	r2, #174	@ 0xae
 800961a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800962a:	e004      	b.n	8009636 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800962c:	2303      	movs	r3, #3
 800962e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009630:	e001      	b.n	8009636 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009632:	2303      	movs	r3, #3
 8009634:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	88db      	ldrh	r3, [r3, #6]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d110      	bne.n	8009660 <USBD_StdItfReq+0xc0>
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10d      	bne.n	8009660 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fdfd 	bl	800a244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800964a:	e009      	b.n	8009660 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fd21 	bl	800a096 <USBD_CtlError>
          break;
 8009654:	e004      	b.n	8009660 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fd1c 	bl	800a096 <USBD_CtlError>
          break;
 800965e:	e000      	b.n	8009662 <USBD_StdItfReq+0xc2>
          break;
 8009660:	bf00      	nop
      }
      break;
 8009662:	e004      	b.n	800966e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fd15 	bl	800a096 <USBD_CtlError>
      break;
 800966c:	bf00      	nop
  }

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	889b      	ldrh	r3, [r3, #4]
 800968a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009694:	2b40      	cmp	r3, #64	@ 0x40
 8009696:	d007      	beq.n	80096a8 <USBD_StdEPReq+0x30>
 8009698:	2b40      	cmp	r3, #64	@ 0x40
 800969a:	f200 817f 	bhi.w	800999c <USBD_StdEPReq+0x324>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d02a      	beq.n	80096f8 <USBD_StdEPReq+0x80>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	f040 817a 	bne.w	800999c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fe85 	bl	80093bc <USBD_CoreFindEP>
 80096b2:	4603      	mov	r3, r0
 80096b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096b6:	7b7b      	ldrb	r3, [r7, #13]
 80096b8:	2bff      	cmp	r3, #255	@ 0xff
 80096ba:	f000 8174 	beq.w	80099a6 <USBD_StdEPReq+0x32e>
 80096be:	7b7b      	ldrb	r3, [r7, #13]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f040 8170 	bne.w	80099a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096c6:	7b7a      	ldrb	r2, [r7, #13]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096ce:	7b7a      	ldrb	r2, [r7, #13]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	32ae      	adds	r2, #174	@ 0xae
 80096d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8163 	beq.w	80099a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096e0:	7b7a      	ldrb	r2, [r7, #13]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	32ae      	adds	r2, #174	@ 0xae
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096f6:	e156      	b.n	80099a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d008      	beq.n	8009712 <USBD_StdEPReq+0x9a>
 8009700:	2b03      	cmp	r3, #3
 8009702:	f300 8145 	bgt.w	8009990 <USBD_StdEPReq+0x318>
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 809b 	beq.w	8009842 <USBD_StdEPReq+0x1ca>
 800970c:	2b01      	cmp	r3, #1
 800970e:	d03c      	beq.n	800978a <USBD_StdEPReq+0x112>
 8009710:	e13e      	b.n	8009990 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d002      	beq.n	8009724 <USBD_StdEPReq+0xac>
 800971e:	2b03      	cmp	r3, #3
 8009720:	d016      	beq.n	8009750 <USBD_StdEPReq+0xd8>
 8009722:	e02c      	b.n	800977e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <USBD_StdEPReq+0xce>
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b80      	cmp	r3, #128	@ 0x80
 800972e:	d00a      	beq.n	8009746 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f003 fff9 	bl	800d72c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800973a:	2180      	movs	r1, #128	@ 0x80
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f003 fff5 	bl	800d72c <USBD_LL_StallEP>
 8009742:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009744:	e020      	b.n	8009788 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fca4 	bl	800a096 <USBD_CtlError>
              break;
 800974e:	e01b      	b.n	8009788 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10e      	bne.n	8009776 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00b      	beq.n	8009776 <USBD_StdEPReq+0xfe>
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b80      	cmp	r3, #128	@ 0x80
 8009762:	d008      	beq.n	8009776 <USBD_StdEPReq+0xfe>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	88db      	ldrh	r3, [r3, #6]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f003 ffdb 	bl	800d72c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fd64 	bl	800a244 <USBD_CtlSendStatus>

              break;
 800977c:	e004      	b.n	8009788 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fc88 	bl	800a096 <USBD_CtlError>
              break;
 8009786:	bf00      	nop
          }
          break;
 8009788:	e107      	b.n	800999a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d002      	beq.n	800979c <USBD_StdEPReq+0x124>
 8009796:	2b03      	cmp	r3, #3
 8009798:	d016      	beq.n	80097c8 <USBD_StdEPReq+0x150>
 800979a:	e04b      	b.n	8009834 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00d      	beq.n	80097be <USBD_StdEPReq+0x146>
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b80      	cmp	r3, #128	@ 0x80
 80097a6:	d00a      	beq.n	80097be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f003 ffbd 	bl	800d72c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097b2:	2180      	movs	r1, #128	@ 0x80
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f003 ffb9 	bl	800d72c <USBD_LL_StallEP>
 80097ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097bc:	e040      	b.n	8009840 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc68 	bl	800a096 <USBD_CtlError>
              break;
 80097c6:	e03b      	b.n	8009840 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	885b      	ldrh	r3, [r3, #2]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d136      	bne.n	800983e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f003 ffc3 	bl	800d76a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fd2d 	bl	800a244 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fde4 	bl	80093bc <USBD_CoreFindEP>
 80097f4:	4603      	mov	r3, r0
 80097f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097f8:	7b7b      	ldrb	r3, [r7, #13]
 80097fa:	2bff      	cmp	r3, #255	@ 0xff
 80097fc:	d01f      	beq.n	800983e <USBD_StdEPReq+0x1c6>
 80097fe:	7b7b      	ldrb	r3, [r7, #13]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d11c      	bne.n	800983e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009804:	7b7a      	ldrb	r2, [r7, #13]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800980c:	7b7a      	ldrb	r2, [r7, #13]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32ae      	adds	r2, #174	@ 0xae
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d010      	beq.n	800983e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800981c:	7b7a      	ldrb	r2, [r7, #13]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	32ae      	adds	r2, #174	@ 0xae
 8009822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009832:	e004      	b.n	800983e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fc2d 	bl	800a096 <USBD_CtlError>
              break;
 800983c:	e000      	b.n	8009840 <USBD_StdEPReq+0x1c8>
              break;
 800983e:	bf00      	nop
          }
          break;
 8009840:	e0ab      	b.n	800999a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b02      	cmp	r3, #2
 800984c:	d002      	beq.n	8009854 <USBD_StdEPReq+0x1dc>
 800984e:	2b03      	cmp	r3, #3
 8009850:	d032      	beq.n	80098b8 <USBD_StdEPReq+0x240>
 8009852:	e097      	b.n	8009984 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d007      	beq.n	800986a <USBD_StdEPReq+0x1f2>
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b80      	cmp	r3, #128	@ 0x80
 800985e:	d004      	beq.n	800986a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fc17 	bl	800a096 <USBD_CtlError>
                break;
 8009868:	e091      	b.n	800998e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800986a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800986e:	2b00      	cmp	r3, #0
 8009870:	da0b      	bge.n	800988a <USBD_StdEPReq+0x212>
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009878:	4613      	mov	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	3310      	adds	r3, #16
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	3304      	adds	r3, #4
 8009888:	e00b      	b.n	80098a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	4413      	add	r3, r2
 80098a0:	3304      	adds	r3, #4
 80098a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2202      	movs	r2, #2
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fc6d 	bl	800a190 <USBD_CtlSendData>
              break;
 80098b6:	e06a      	b.n	800998e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	da11      	bge.n	80098e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
 80098c2:	f003 020f 	and.w	r2, r3, #15
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	3324      	adds	r3, #36	@ 0x24
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d117      	bne.n	800990a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fbda 	bl	800a096 <USBD_CtlError>
                  break;
 80098e2:	e054      	b.n	800998e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d104      	bne.n	800990a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fbc7 	bl	800a096 <USBD_CtlError>
                  break;
 8009908:	e041      	b.n	800998e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800990a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800990e:	2b00      	cmp	r3, #0
 8009910:	da0b      	bge.n	800992a <USBD_StdEPReq+0x2b2>
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	3310      	adds	r3, #16
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	4413      	add	r3, r2
 8009926:	3304      	adds	r3, #4
 8009928:	e00b      	b.n	8009942 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009930:	4613      	mov	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	4413      	add	r3, r2
 8009940:	3304      	adds	r3, #4
 8009942:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <USBD_StdEPReq+0x2d8>
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b80      	cmp	r3, #128	@ 0x80
 800994e:	d103      	bne.n	8009958 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	e00e      	b.n	8009976 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f003 ff23 	bl	800d7a8 <USBD_LL_IsStallEP>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2201      	movs	r2, #1
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e002      	b.n	8009976 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2202      	movs	r2, #2
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc07 	bl	800a190 <USBD_CtlSendData>
              break;
 8009982:	e004      	b.n	800998e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fb85 	bl	800a096 <USBD_CtlError>
              break;
 800998c:	bf00      	nop
          }
          break;
 800998e:	e004      	b.n	800999a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fb7f 	bl	800a096 <USBD_CtlError>
          break;
 8009998:	bf00      	nop
      }
      break;
 800999a:	e005      	b.n	80099a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fb79 	bl	800a096 <USBD_CtlError>
      break;
 80099a4:	e000      	b.n	80099a8 <USBD_StdEPReq+0x330>
      break;
 80099a6:	bf00      	nop
  }

  return ret;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	885b      	ldrh	r3, [r3, #2]
 80099ce:	0a1b      	lsrs	r3, r3, #8
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	2b0e      	cmp	r3, #14
 80099d6:	f200 8152 	bhi.w	8009c7e <USBD_GetDescriptor+0x2ca>
 80099da:	a201      	add	r2, pc, #4	@ (adr r2, 80099e0 <USBD_GetDescriptor+0x2c>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009a51 	.word	0x08009a51
 80099e4:	08009a69 	.word	0x08009a69
 80099e8:	08009aa9 	.word	0x08009aa9
 80099ec:	08009c7f 	.word	0x08009c7f
 80099f0:	08009c7f 	.word	0x08009c7f
 80099f4:	08009c1f 	.word	0x08009c1f
 80099f8:	08009c4b 	.word	0x08009c4b
 80099fc:	08009c7f 	.word	0x08009c7f
 8009a00:	08009c7f 	.word	0x08009c7f
 8009a04:	08009c7f 	.word	0x08009c7f
 8009a08:	08009c7f 	.word	0x08009c7f
 8009a0c:	08009c7f 	.word	0x08009c7f
 8009a10:	08009c7f 	.word	0x08009c7f
 8009a14:	08009c7f 	.word	0x08009c7f
 8009a18:	08009a1d 	.word	0x08009a1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a3e:	e126      	b.n	8009c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fb27 	bl	800a096 <USBD_CtlError>
        err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4e:	e11e      	b.n	8009c8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	7c12      	ldrb	r2, [r2, #16]
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	4610      	mov	r0, r2
 8009a62:	4798      	blx	r3
 8009a64:	60f8      	str	r0, [r7, #12]
      break;
 8009a66:	e112      	b.n	8009c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7c1b      	ldrb	r3, [r3, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10d      	bne.n	8009a8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	f107 0208 	add.w	r2, r7, #8
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
 8009a80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	2202      	movs	r2, #2
 8009a88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a8a:	e100      	b.n	8009c8e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a94:	f107 0208 	add.w	r2, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	701a      	strb	r2, [r3, #0]
      break;
 8009aa6:	e0f2      	b.n	8009c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	885b      	ldrh	r3, [r3, #2]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	f200 80ac 	bhi.w	8009c0c <USBD_GetDescriptor+0x258>
 8009ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <USBD_GetDescriptor+0x108>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009b09 	.word	0x08009b09
 8009ac4:	08009b3d 	.word	0x08009b3d
 8009ac8:	08009b71 	.word	0x08009b71
 8009acc:	08009ba5 	.word	0x08009ba5
 8009ad0:	08009bd9 	.word	0x08009bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e091      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 facb 	bl	800a096 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e089      	b.n	8009c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7c12      	ldrb	r2, [r2, #16]
 8009b20:	f107 0108 	add.w	r1, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2a:	e077      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fab1 	bl	800a096 <USBD_CtlError>
            err++;
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	3301      	adds	r3, #1
 8009b38:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3a:	e06f      	b.n	8009c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7c12      	ldrb	r2, [r2, #16]
 8009b54:	f107 0108 	add.w	r1, r7, #8
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5e:	e05d      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa97 	bl	800a096 <USBD_CtlError>
            err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6e:	e055      	b.n	8009c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b92:	e043      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa7d 	bl	800a096 <USBD_CtlError>
            err++;
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba2:	e03b      	b.n	8009c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc6:	e029      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa63 	bl	800a096 <USBD_CtlError>
            err++;
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd6:	e021      	b.n	8009c1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	7c12      	ldrb	r2, [r2, #16]
 8009bf0:	f107 0108 	add.w	r1, r7, #8
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bfa:	e00f      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa49 	bl	800a096 <USBD_CtlError>
            err++;
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	3301      	adds	r3, #1
 8009c08:	72fb      	strb	r3, [r7, #11]
          break;
 8009c0a:	e007      	b.n	8009c1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa41 	bl	800a096 <USBD_CtlError>
          err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c1a:	bf00      	nop
      }
      break;
 8009c1c:	e037      	b.n	8009c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7c1b      	ldrb	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d109      	bne.n	8009c3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c2e:	f107 0208 	add.w	r2, r7, #8
 8009c32:	4610      	mov	r0, r2
 8009c34:	4798      	blx	r3
 8009c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c38:	e029      	b.n	8009c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa2a 	bl	800a096 <USBD_CtlError>
        err++;
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	3301      	adds	r3, #1
 8009c46:	72fb      	strb	r3, [r7, #11]
      break;
 8009c48:	e021      	b.n	8009c8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7c1b      	ldrb	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5a:	f107 0208 	add.w	r2, r7, #8
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4798      	blx	r3
 8009c62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	2207      	movs	r2, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c6c:	e00f      	b.n	8009c8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa10 	bl	800a096 <USBD_CtlError>
        err++;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c7c:	e007      	b.n	8009c8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa08 	bl	800a096 <USBD_CtlError>
      err++;
 8009c86:	7afb      	ldrb	r3, [r7, #11]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c8c:	bf00      	nop
  }

  if (err != 0U)
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d11e      	bne.n	8009cd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d016      	beq.n	8009cca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c9c:	893b      	ldrh	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00e      	beq.n	8009cc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	88da      	ldrh	r2, [r3, #6]
 8009ca6:	893b      	ldrh	r3, [r7, #8]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	bf28      	it	cs
 8009cac:	4613      	movcs	r3, r2
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cb2:	893b      	ldrh	r3, [r7, #8]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fa69 	bl	800a190 <USBD_CtlSendData>
 8009cbe:	e009      	b.n	8009cd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9e7 	bl	800a096 <USBD_CtlError>
 8009cc8:	e004      	b.n	8009cd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 faba 	bl	800a244 <USBD_CtlSendStatus>
 8009cd0:	e000      	b.n	8009cd4 <USBD_GetDescriptor+0x320>
    return;
 8009cd2:	bf00      	nop
  }
}
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop

08009cdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	889b      	ldrh	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d131      	bne.n	8009d52 <USBD_SetAddress+0x76>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	88db      	ldrh	r3, [r3, #6]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d12d      	bne.n	8009d52 <USBD_SetAddress+0x76>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	885b      	ldrh	r3, [r3, #2]
 8009cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cfc:	d829      	bhi.n	8009d52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d104      	bne.n	8009d20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9bc 	bl	800a096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1e:	e01d      	b.n	8009d5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7bfa      	ldrb	r2, [r7, #15]
 8009d24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f003 fd67 	bl	800d800 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa86 	bl	800a244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d004      	beq.n	8009d48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2202      	movs	r2, #2
 8009d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d46:	e009      	b.n	8009d5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d50:	e004      	b.n	8009d5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f99e 	bl	800a096 <USBD_CtlError>
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	885b      	ldrh	r3, [r3, #2]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	4b4e      	ldr	r3, [pc, #312]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009d7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d905      	bls.n	8009d90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f985 	bl	800a096 <USBD_CtlError>
    return USBD_FAIL;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e08c      	b.n	8009eaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d002      	beq.n	8009da2 <USBD_SetConfig+0x3e>
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d029      	beq.n	8009df4 <USBD_SetConfig+0x90>
 8009da0:	e075      	b.n	8009e8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009da2:	4b44      	ldr	r3, [pc, #272]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d020      	beq.n	8009dec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009daa:	4b42      	ldr	r3, [pc, #264]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009db4:	4b3f      	ldr	r3, [pc, #252]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fe ffb9 	bl	8008d32 <USBD_SetClassConfig>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d008      	beq.n	8009ddc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f962 	bl	800a096 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009dda:	e065      	b.n	8009ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fa31 	bl	800a244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2203      	movs	r2, #3
 8009de6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dea:	e05d      	b.n	8009ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fa29 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009df2:	e059      	b.n	8009ea8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009df4:	4b2f      	ldr	r3, [pc, #188]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d112      	bne.n	8009e22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009e04:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e0e:	4b29      	ldr	r3, [pc, #164]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7fe ffa8 	bl	8008d6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa12 	bl	800a244 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e20:	e042      	b.n	8009ea8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e22:	4b24      	ldr	r3, [pc, #144]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d02a      	beq.n	8009e86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe ff96 	bl	8008d6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e48:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fe ff6f 	bl	8008d32 <USBD_SetClassConfig>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00f      	beq.n	8009e7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f918 	bl	800a096 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fe ff7b 	bl	8008d6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e7c:	e014      	b.n	8009ea8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9e0 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009e84:	e010      	b.n	8009ea8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f9dc 	bl	800a244 <USBD_CtlSendStatus>
      break;
 8009e8c:	e00c      	b.n	8009ea8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f900 	bl	800a096 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e96:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <USBD_SetConfig+0x150>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe ff64 	bl	8008d6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea6:	bf00      	nop
  }

  return ret;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20007794 	.word	0x20007794

08009eb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	88db      	ldrh	r3, [r3, #6]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d004      	beq.n	8009ed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f8e2 	bl	800a096 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ed2:	e023      	b.n	8009f1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	dc02      	bgt.n	8009ee6 <USBD_GetConfig+0x2e>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dc03      	bgt.n	8009eec <USBD_GetConfig+0x34>
 8009ee4:	e015      	b.n	8009f12 <USBD_GetConfig+0x5a>
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d00b      	beq.n	8009f02 <USBD_GetConfig+0x4a>
 8009eea:	e012      	b.n	8009f12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f948 	bl	800a190 <USBD_CtlSendData>
        break;
 8009f00:	e00c      	b.n	8009f1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3304      	adds	r3, #4
 8009f06:	2201      	movs	r2, #1
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f940 	bl	800a190 <USBD_CtlSendData>
        break;
 8009f10:	e004      	b.n	8009f1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f8be 	bl	800a096 <USBD_CtlError>
        break;
 8009f1a:	bf00      	nop
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	3b01      	subs	r3, #1
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d81e      	bhi.n	8009f7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	88db      	ldrh	r3, [r3, #6]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d004      	beq.n	8009f4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f8a5 	bl	800a096 <USBD_CtlError>
        break;
 8009f4c:	e01a      	b.n	8009f84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d005      	beq.n	8009f6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	f043 0202 	orr.w	r2, r3, #2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	2202      	movs	r2, #2
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f90c 	bl	800a190 <USBD_CtlSendData>
      break;
 8009f78:	e004      	b.n	8009f84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f88a 	bl	800a096 <USBD_CtlError>
      break;
 8009f82:	bf00      	nop
  }
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	885b      	ldrh	r3, [r3, #2]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d107      	bne.n	8009fae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f94c 	bl	800a244 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fac:	e013      	b.n	8009fd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d10b      	bne.n	8009fce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	889b      	ldrh	r3, [r3, #4]
 8009fba:	0a1b      	lsrs	r3, r3, #8
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f93c 	bl	800a244 <USBD_CtlSendStatus>
}
 8009fcc:	e003      	b.n	8009fd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f860 	bl	800a096 <USBD_CtlError>
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d80b      	bhi.n	800a00e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d10c      	bne.n	800a018 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f91c 	bl	800a244 <USBD_CtlSendStatus>
      }
      break;
 800a00c:	e004      	b.n	800a018 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f840 	bl	800a096 <USBD_CtlError>
      break;
 800a016:	e000      	b.n	800a01a <USBD_ClrFeature+0x3c>
      break;
 800a018:	bf00      	nop
  }
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3301      	adds	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	781a      	ldrb	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f7ff fa16 	bl	800947e <SWAPBYTE>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff fa09 	bl	800947e <SWAPBYTE>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff f9fc 	bl	800947e <SWAPBYTE>
 800a086:	4603      	mov	r3, r0
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	80da      	strh	r2, [r3, #6]
}
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0a0:	2180      	movs	r1, #128	@ 0x80
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f003 fb42 	bl	800d72c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f003 fb3e 	bl	800d72c <USBD_LL_StallEP>
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d042      	beq.n	800a154 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a0d2:	6938      	ldr	r0, [r7, #16]
 800a0d4:	f000 f842 	bl	800a15c <USBD_GetLen>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	3301      	adds	r3, #1
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e2:	d808      	bhi.n	800a0f6 <USBD_GetString+0x3e>
 800a0e4:	6938      	ldr	r0, [r7, #16]
 800a0e6:	f000 f839 	bl	800a15c <USBD_GetLen>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	e001      	b.n	800a0fa <USBD_GetString+0x42>
 800a0f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4413      	add	r3, r2
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	701a      	strb	r2, [r3, #0]
  idx++;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	3301      	adds	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	4413      	add	r3, r2
 800a116:	2203      	movs	r2, #3
 800a118:	701a      	strb	r2, [r3, #0]
  idx++;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	3301      	adds	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a120:	e013      	b.n	800a14a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	4413      	add	r3, r2
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3301      	adds	r3, #1
 800a132:	613b      	str	r3, [r7, #16]
    idx++;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	3301      	adds	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	4413      	add	r3, r2
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
    idx++;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	3301      	adds	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e7      	bne.n	800a122 <USBD_GetString+0x6a>
 800a152:	e000      	b.n	800a156 <USBD_GetString+0x9e>
    return;
 800a154:	bf00      	nop
  }
}
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a16c:	e005      	b.n	800a17a <USBD_GetLen+0x1e>
  {
    len++;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	3301      	adds	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3301      	adds	r3, #1
 800a178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f5      	bne.n	800a16e <USBD_GetLen+0x12>
  }

  return len;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f003 fb41 	bl	800d83e <USBD_LL_Transmit>

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f003 fb30 	bl	800d83e <USBD_LL_Transmit>

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	2100      	movs	r1, #0
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f003 fb34 	bl	800d880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	2100      	movs	r1, #0
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f003 fb23 	bl	800d880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2204      	movs	r2, #4
 800a250:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a254:	2300      	movs	r3, #0
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f003 faef 	bl	800d83e <USBD_LL_Transmit>

  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2205      	movs	r2, #5
 800a276:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a27a:	2300      	movs	r3, #0
 800a27c:	2200      	movs	r2, #0
 800a27e:	2100      	movs	r1, #0
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f003 fafd 	bl	800d880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a294:	bf00      	nop
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
	...

0800a2a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a6:	f3ef 8305 	mrs	r3, IPSR
 800a2aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10f      	bne.n	800a2d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b6:	607b      	str	r3, [r7, #4]
  return(result);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d105      	bne.n	800a2ca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2be:	f3ef 8311 	mrs	r3, BASEPRI
 800a2c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <osKernelInitialize+0x3a>
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <osKernelInitialize+0x64>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d103      	bne.n	800a2da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a2d2:	f06f 0305 	mvn.w	r3, #5
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	e00c      	b.n	800a2f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2da:	4b0a      	ldr	r3, [pc, #40]	@ (800a304 <osKernelInitialize+0x64>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2e2:	4b08      	ldr	r3, [pc, #32]	@ (800a304 <osKernelInitialize+0x64>)
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	e002      	b.n	800a2f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20007798 	.word	0x20007798

0800a308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a30e:	f3ef 8305 	mrs	r3, IPSR
 800a312:	60bb      	str	r3, [r7, #8]
  return(result);
 800a314:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10f      	bne.n	800a33a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31a:	f3ef 8310 	mrs	r3, PRIMASK
 800a31e:	607b      	str	r3, [r7, #4]
  return(result);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a326:	f3ef 8311 	mrs	r3, BASEPRI
 800a32a:	603b      	str	r3, [r7, #0]
  return(result);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d007      	beq.n	800a342 <osKernelStart+0x3a>
 800a332:	4b0f      	ldr	r3, [pc, #60]	@ (800a370 <osKernelStart+0x68>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d103      	bne.n	800a342 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a33a:	f06f 0305 	mvn.w	r3, #5
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	e010      	b.n	800a364 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a342:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <osKernelStart+0x68>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d109      	bne.n	800a35e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a34a:	f7ff ffa1 	bl	800a290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a34e:	4b08      	ldr	r3, [pc, #32]	@ (800a370 <osKernelStart+0x68>)
 800a350:	2202      	movs	r2, #2
 800a352:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a354:	f001 f8ca 	bl	800b4ec <vTaskStartScheduler>
      stat = osOK;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	e002      	b.n	800a364 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a35e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a362:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a364:	68fb      	ldr	r3, [r7, #12]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20007798 	.word	0x20007798

0800a374 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a374:	b580      	push	{r7, lr}
 800a376:	b090      	sub	sp, #64	@ 0x40
 800a378:	af04      	add	r7, sp, #16
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a380:	2300      	movs	r3, #0
 800a382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a384:	f3ef 8305 	mrs	r3, IPSR
 800a388:	61fb      	str	r3, [r7, #28]
  return(result);
 800a38a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 808f 	bne.w	800a4b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a392:	f3ef 8310 	mrs	r3, PRIMASK
 800a396:	61bb      	str	r3, [r7, #24]
  return(result);
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a39e:	f3ef 8311 	mrs	r3, BASEPRI
 800a3a2:	617b      	str	r3, [r7, #20]
  return(result);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <osThreadNew+0x3e>
 800a3aa:	4b44      	ldr	r3, [pc, #272]	@ (800a4bc <osThreadNew+0x148>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d07e      	beq.n	800a4b0 <osThreadNew+0x13c>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d07b      	beq.n	800a4b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a3b8:	2380      	movs	r3, #128	@ 0x80
 800a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a3bc:	2318      	movs	r3, #24
 800a3be:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d045      	beq.n	800a45c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <osThreadNew+0x6a>
        name = attr->name;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d008      	beq.n	800a404 <osThreadNew+0x90>
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	2b38      	cmp	r3, #56	@ 0x38
 800a3f6:	d805      	bhi.n	800a404 <osThreadNew+0x90>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <osThreadNew+0x94>
        return (NULL);
 800a404:	2300      	movs	r3, #0
 800a406:	e054      	b.n	800a4b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	089b      	lsrs	r3, r3, #2
 800a416:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00e      	beq.n	800a43e <osThreadNew+0xca>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b5b      	cmp	r3, #91	@ 0x5b
 800a426:	d90a      	bls.n	800a43e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <osThreadNew+0xca>
        mem = 1;
 800a438:	2301      	movs	r3, #1
 800a43a:	623b      	str	r3, [r7, #32]
 800a43c:	e010      	b.n	800a460 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10c      	bne.n	800a460 <osThreadNew+0xec>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <osThreadNew+0xec>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d104      	bne.n	800a460 <osThreadNew+0xec>
          mem = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	623b      	str	r3, [r7, #32]
 800a45a:	e001      	b.n	800a460 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d110      	bne.n	800a488 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a46e:	9202      	str	r2, [sp, #8]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a47a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 fe4f 	bl	800b120 <xTaskCreateStatic>
 800a482:	4603      	mov	r3, r0
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	e013      	b.n	800a4b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d110      	bne.n	800a4b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a490:	b29a      	uxth	r2, r3
 800a492:	f107 0310 	add.w	r3, r7, #16
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fea3 	bl	800b1ec <xTaskCreate>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d001      	beq.n	800a4b0 <osThreadNew+0x13c>
          hTask = NULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a4b0:	693b      	ldr	r3, [r7, #16]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3730      	adds	r7, #48	@ 0x30
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20007798 	.word	0x20007798

0800a4c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4c8:	f3ef 8305 	mrs	r3, IPSR
 800a4cc:	613b      	str	r3, [r7, #16]
  return(result);
 800a4ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10f      	bne.n	800a4f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d105      	bne.n	800a4ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4e0:	f3ef 8311 	mrs	r3, BASEPRI
 800a4e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <osDelay+0x3c>
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <osDelay+0x58>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d103      	bne.n	800a4fc <osDelay+0x3c>
    stat = osErrorISR;
 800a4f4:	f06f 0305 	mvn.w	r3, #5
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	e007      	b.n	800a50c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 ffb8 	bl	800b47c <vTaskDelay>
    }
  }

  return (stat);
 800a50c:	697b      	ldr	r3, [r7, #20]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20007798 	.word	0x20007798

0800a51c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a07      	ldr	r2, [pc, #28]	@ (800a548 <vApplicationGetIdleTaskMemory+0x2c>)
 800a52c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	4a06      	ldr	r2, [pc, #24]	@ (800a54c <vApplicationGetIdleTaskMemory+0x30>)
 800a532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2280      	movs	r2, #128	@ 0x80
 800a538:	601a      	str	r2, [r3, #0]
}
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	2000779c 	.word	0x2000779c
 800a54c:	200077f8 	.word	0x200077f8

0800a550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4a07      	ldr	r2, [pc, #28]	@ (800a57c <vApplicationGetTimerTaskMemory+0x2c>)
 800a560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4a06      	ldr	r2, [pc, #24]	@ (800a580 <vApplicationGetTimerTaskMemory+0x30>)
 800a566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a56e:	601a      	str	r2, [r3, #0]
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200079f8 	.word	0x200079f8
 800a580:	20007a54 	.word	0x20007a54

0800a584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f103 0208 	add.w	r2, r3, #8
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a59c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f103 0208 	add.w	r2, r3, #8
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f103 0208 	add.w	r2, r3, #8
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5d2:	bf00      	nop
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
 800a5e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	601a      	str	r2, [r3, #0]
}
 800a61a:	bf00      	nop
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a63c:	d103      	bne.n	800a646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e00c      	b.n	800a660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3308      	adds	r3, #8
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e002      	b.n	800a654 <vListInsert+0x2e>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d2f6      	bcs.n	800a64e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
}
 800a68c:	bf00      	nop
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	6892      	ldr	r2, [r2, #8]
 800a6ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	6852      	ldr	r2, [r2, #4]
 800a6b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d103      	bne.n	800a6cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689a      	ldr	r2, [r3, #8]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	1e5a      	subs	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10d      	bne.n	800a71c <xQueueGenericReset+0x30>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a704:	b672      	cpsid	i
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	b662      	cpsie	i
 800a714:	60bb      	str	r3, [r7, #8]
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	e7fd      	b.n	800a718 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a71c:	f002 f8ce 	bl	800c8bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a728:	68f9      	ldr	r1, [r7, #12]
 800a72a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a72c:	fb01 f303 	mul.w	r3, r1, r3
 800a730:	441a      	add	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74c:	3b01      	subs	r3, #1
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a752:	fb01 f303 	mul.w	r3, r1, r3
 800a756:	441a      	add	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	22ff      	movs	r2, #255	@ 0xff
 800a760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	22ff      	movs	r2, #255	@ 0xff
 800a768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d114      	bne.n	800a79c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01a      	beq.n	800a7b0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3310      	adds	r3, #16
 800a77e:	4618      	mov	r0, r3
 800a780:	f001 f950 	bl	800ba24 <xTaskRemoveFromEventList>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a78a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <xQueueGenericReset+0xd4>)
 800a78c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	e009      	b.n	800a7b0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3310      	adds	r3, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff feef 	bl	800a584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3324      	adds	r3, #36	@ 0x24
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff feea 	bl	800a584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7b0:	f002 f8ba 	bl	800c928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7b4:	2301      	movs	r3, #1
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	e000ed04 	.word	0xe000ed04

0800a7c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08e      	sub	sp, #56	@ 0x38
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10d      	bne.n	800a7f4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	b672      	cpsid	i
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	b662      	cpsie	i
 800a7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7ee:	bf00      	nop
 800a7f0:	bf00      	nop
 800a7f2:	e7fd      	b.n	800a7f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10d      	bne.n	800a816 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fe:	b672      	cpsid	i
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	b662      	cpsie	i
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <xQueueGenericCreateStatic+0x5e>
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <xQueueGenericCreateStatic+0x62>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <xQueueGenericCreateStatic+0x64>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10d      	bne.n	800a848 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a830:	b672      	cpsid	i
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	b662      	cpsie	i
 800a840:	623b      	str	r3, [r7, #32]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d102      	bne.n	800a854 <xQueueGenericCreateStatic+0x90>
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <xQueueGenericCreateStatic+0x94>
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <xQueueGenericCreateStatic+0x96>
 800a858:	2300      	movs	r3, #0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10d      	bne.n	800a87a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	b672      	cpsid	i
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	b662      	cpsie	i
 800a872:	61fb      	str	r3, [r7, #28]
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop
 800a878:	e7fd      	b.n	800a876 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a87a:	2350      	movs	r3, #80	@ 0x50
 800a87c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b50      	cmp	r3, #80	@ 0x50
 800a882:	d00d      	beq.n	800a8a0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	b672      	cpsid	i
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	b662      	cpsie	i
 800a898:	61bb      	str	r3, [r7, #24]
}
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	e7fd      	b.n	800a89c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00d      	beq.n	800a8c8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f805 	bl	800a8d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	@ 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
 800a8de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d103      	bne.n	800a8ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e002      	b.n	800a8f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a900:	2101      	movs	r1, #1
 800a902:	69b8      	ldr	r0, [r7, #24]
 800a904:	f7ff fef2 	bl	800a6ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08e      	sub	sp, #56	@ 0x38
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a926:	2300      	movs	r3, #0
 800a928:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10d      	bne.n	800a950 <xQueueGenericSend+0x38>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a938:	b672      	cpsid	i
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	b662      	cpsie	i
 800a948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a94a:	bf00      	nop
 800a94c:	bf00      	nop
 800a94e:	e7fd      	b.n	800a94c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d103      	bne.n	800a95e <xQueueGenericSend+0x46>
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <xQueueGenericSend+0x4a>
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <xQueueGenericSend+0x4c>
 800a962:	2300      	movs	r3, #0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <xQueueGenericSend+0x6c>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	b672      	cpsid	i
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	b662      	cpsie	i
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	e7fd      	b.n	800a980 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d103      	bne.n	800a992 <xQueueGenericSend+0x7a>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <xQueueGenericSend+0x7e>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <xQueueGenericSend+0x80>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10d      	bne.n	800a9b8 <xQueueGenericSend+0xa0>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a0:	b672      	cpsid	i
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	b662      	cpsie	i
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9b8:	f001 fa26 	bl	800be08 <xTaskGetSchedulerState>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <xQueueGenericSend+0xb0>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <xQueueGenericSend+0xb4>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <xQueueGenericSend+0xb6>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10d      	bne.n	800a9ee <xQueueGenericSend+0xd6>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d6:	b672      	cpsid	i
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	b662      	cpsie	i
 800a9e6:	61fb      	str	r3, [r7, #28]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9ee:	f001 ff65 	bl	800c8bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d302      	bcc.n	800aa04 <xQueueGenericSend+0xec>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d129      	bne.n	800aa58 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa0a:	f000 fa1b 	bl	800ae44 <prvCopyDataToQueue>
 800aa0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d010      	beq.n	800aa3a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1a:	3324      	adds	r3, #36	@ 0x24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 f801 	bl	800ba24 <xTaskRemoveFromEventList>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d013      	beq.n	800aa50 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa28:	4b3f      	ldr	r3, [pc, #252]	@ (800ab28 <xQueueGenericSend+0x210>)
 800aa2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	e00a      	b.n	800aa50 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d007      	beq.n	800aa50 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa40:	4b39      	ldr	r3, [pc, #228]	@ (800ab28 <xQueueGenericSend+0x210>)
 800aa42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa50:	f001 ff6a 	bl	800c928 <vPortExitCritical>
				return pdPASS;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e063      	b.n	800ab20 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa5e:	f001 ff63 	bl	800c928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	e05c      	b.n	800ab20 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa6c:	f107 0314 	add.w	r3, r7, #20
 800aa70:	4618      	mov	r0, r3
 800aa72:	f001 f867 	bl	800bb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa76:	2301      	movs	r3, #1
 800aa78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa7a:	f001 ff55 	bl	800c928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa7e:	f000 fda1 	bl	800b5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa82:	f001 ff1b 	bl	800c8bc <vPortEnterCritical>
 800aa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa92:	d103      	bne.n	800aa9c <xQueueGenericSend+0x184>
 800aa94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa8:	d103      	bne.n	800aab2 <xQueueGenericSend+0x19a>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aab2:	f001 ff39 	bl	800c928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aab6:	1d3a      	adds	r2, r7, #4
 800aab8:	f107 0314 	add.w	r3, r7, #20
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 f856 	bl	800bb70 <xTaskCheckForTimeOut>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d124      	bne.n	800ab14 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aaca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aacc:	f000 fab2 	bl	800b034 <prvIsQueueFull>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d018      	beq.n	800ab08 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	3310      	adds	r3, #16
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	4611      	mov	r1, r2
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 ff4a 	bl	800b978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aae6:	f000 fa3d 	bl	800af64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aaea:	f000 fd79 	bl	800b5e0 <xTaskResumeAll>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f47f af7c 	bne.w	800a9ee <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800aaf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ab28 <xQueueGenericSend+0x210>)
 800aaf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	e772      	b.n	800a9ee <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0a:	f000 fa2b 	bl	800af64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab0e:	f000 fd67 	bl	800b5e0 <xTaskResumeAll>
 800ab12:	e76c      	b.n	800a9ee <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab16:	f000 fa25 	bl	800af64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab1a:	f000 fd61 	bl	800b5e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3738      	adds	r7, #56	@ 0x38
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08e      	sub	sp, #56	@ 0x38
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10d      	bne.n	800ab60 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	b672      	cpsid	i
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	b662      	cpsie	i
 800ab58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	e7fd      	b.n	800ab5c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <xQueueGenericSendFromISR+0x42>
 800ab66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <xQueueGenericSendFromISR+0x46>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <xQueueGenericSendFromISR+0x48>
 800ab72:	2300      	movs	r3, #0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10d      	bne.n	800ab94 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7c:	b672      	cpsid	i
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	b662      	cpsie	i
 800ab8c:	623b      	str	r3, [r7, #32]
}
 800ab8e:	bf00      	nop
 800ab90:	bf00      	nop
 800ab92:	e7fd      	b.n	800ab90 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b02      	cmp	r3, #2
 800ab98:	d103      	bne.n	800aba2 <xQueueGenericSendFromISR+0x76>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d101      	bne.n	800aba6 <xQueueGenericSendFromISR+0x7a>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e000      	b.n	800aba8 <xQueueGenericSendFromISR+0x7c>
 800aba6:	2300      	movs	r3, #0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	b672      	cpsid	i
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	b662      	cpsie	i
 800abc0:	61fb      	str	r3, [r7, #28]
}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	e7fd      	b.n	800abc4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abc8:	f001 ff60 	bl	800ca8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abcc:	f3ef 8211 	mrs	r2, BASEPRI
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	b672      	cpsid	i
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	b662      	cpsie	i
 800abe4:	61ba      	str	r2, [r7, #24]
 800abe6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abe8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d302      	bcc.n	800abfe <xQueueGenericSendFromISR+0xd2>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d12c      	bne.n	800ac58 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	68b9      	ldr	r1, [r7, #8]
 800ac0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac0e:	f000 f919 	bl	800ae44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac12:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ac16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac1a:	d112      	bne.n	800ac42 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d016      	beq.n	800ac52 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	3324      	adds	r3, #36	@ 0x24
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f000 fefb 	bl	800ba24 <xTaskRemoveFromEventList>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00e      	beq.n	800ac52 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00b      	beq.n	800ac52 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e007      	b.n	800ac52 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	3301      	adds	r3, #1
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	b25a      	sxtb	r2, r3
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac52:	2301      	movs	r3, #1
 800ac54:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800ac56:	e001      	b.n	800ac5c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3738      	adds	r7, #56	@ 0x38
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b08c      	sub	sp, #48	@ 0x30
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10d      	bne.n	800acaa <xQueueReceive+0x36>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	b672      	cpsid	i
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	b662      	cpsie	i
 800aca2:	623b      	str	r3, [r7, #32]
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
 800aca8:	e7fd      	b.n	800aca6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <xQueueReceive+0x44>
 800acb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <xQueueReceive+0x48>
 800acb8:	2301      	movs	r3, #1
 800acba:	e000      	b.n	800acbe <xQueueReceive+0x4a>
 800acbc:	2300      	movs	r3, #0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10d      	bne.n	800acde <xQueueReceive+0x6a>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc6:	b672      	cpsid	i
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	b662      	cpsie	i
 800acd6:	61fb      	str	r3, [r7, #28]
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	e7fd      	b.n	800acda <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acde:	f001 f893 	bl	800be08 <xTaskGetSchedulerState>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <xQueueReceive+0x7a>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <xQueueReceive+0x7e>
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <xQueueReceive+0x80>
 800acf2:	2300      	movs	r3, #0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10d      	bne.n	800ad14 <xQueueReceive+0xa0>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	b672      	cpsid	i
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	b662      	cpsie	i
 800ad0c:	61bb      	str	r3, [r7, #24]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad14:	f001 fdd2 	bl	800c8bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01f      	beq.n	800ad64 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad28:	f000 f8f6 	bl	800af18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	1e5a      	subs	r2, r3, #1
 800ad30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00f      	beq.n	800ad5c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	3310      	adds	r3, #16
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 fe6f 	bl	800ba24 <xTaskRemoveFromEventList>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d007      	beq.n	800ad5c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae40 <xQueueReceive+0x1cc>)
 800ad4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad5c:	f001 fde4 	bl	800c928 <vPortExitCritical>
				return pdPASS;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e069      	b.n	800ae38 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d103      	bne.n	800ad72 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad6a:	f001 fddd 	bl	800c928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e062      	b.n	800ae38 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad78:	f107 0310 	add.w	r3, r7, #16
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fee1 	bl	800bb44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad82:	2301      	movs	r3, #1
 800ad84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad86:	f001 fdcf 	bl	800c928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad8a:	f000 fc1b 	bl	800b5c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad8e:	f001 fd95 	bl	800c8bc <vPortEnterCritical>
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad98:	b25b      	sxtb	r3, r3
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad9e:	d103      	bne.n	800ada8 <xQueueReceive+0x134>
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adae:	b25b      	sxtb	r3, r3
 800adb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adb4:	d103      	bne.n	800adbe <xQueueReceive+0x14a>
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adbe:	f001 fdb3 	bl	800c928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adc2:	1d3a      	adds	r2, r7, #4
 800adc4:	f107 0310 	add.w	r3, r7, #16
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 fed0 	bl	800bb70 <xTaskCheckForTimeOut>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d123      	bne.n	800ae1e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add8:	f000 f916 	bl	800b008 <prvIsQueueEmpty>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d017      	beq.n	800ae12 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	3324      	adds	r3, #36	@ 0x24
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4611      	mov	r1, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fdc4 	bl	800b978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf2:	f000 f8b7 	bl	800af64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adf6:	f000 fbf3 	bl	800b5e0 <xTaskResumeAll>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d189      	bne.n	800ad14 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800ae00:	4b0f      	ldr	r3, [pc, #60]	@ (800ae40 <xQueueReceive+0x1cc>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	e780      	b.n	800ad14 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae14:	f000 f8a6 	bl	800af64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae18:	f000 fbe2 	bl	800b5e0 <xTaskResumeAll>
 800ae1c:	e77a      	b.n	800ad14 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae20:	f000 f8a0 	bl	800af64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae24:	f000 fbdc 	bl	800b5e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae2a:	f000 f8ed 	bl	800b008 <prvIsQueueEmpty>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f43f af6f 	beq.w	800ad14 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3730      	adds	r7, #48	@ 0x30
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10d      	bne.n	800ae7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d14d      	bne.n	800af06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 ffe8 	bl	800be44 <xTaskPriorityDisinherit>
 800ae74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	609a      	str	r2, [r3, #8]
 800ae7c:	e043      	b.n	800af06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d119      	bne.n	800aeb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6858      	ldr	r0, [r3, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	f00c fa41 	bl	8017316 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9c:	441a      	add	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d32b      	bcc.n	800af06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	605a      	str	r2, [r3, #4]
 800aeb6:	e026      	b.n	800af06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68d8      	ldr	r0, [r3, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec0:	461a      	mov	r2, r3
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	f00c fa27 	bl	8017316 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed0:	425b      	negs	r3, r3
 800aed2:	441a      	add	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d207      	bcs.n	800aef4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeec:	425b      	negs	r3, r3
 800aeee:	441a      	add	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d105      	bne.n	800af06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3b01      	subs	r3, #1
 800af04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af0e:	697b      	ldr	r3, [r7, #20]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d018      	beq.n	800af5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af32:	441a      	add	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	429a      	cmp	r2, r3
 800af42:	d303      	bcc.n	800af4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68d9      	ldr	r1, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af54:	461a      	mov	r2, r3
 800af56:	6838      	ldr	r0, [r7, #0]
 800af58:	f00c f9dd 	bl	8017316 <memcpy>
	}
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af6c:	f001 fca6 	bl	800c8bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af78:	e011      	b.n	800af9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d012      	beq.n	800afa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3324      	adds	r3, #36	@ 0x24
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fd4c 	bl	800ba24 <xTaskRemoveFromEventList>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af92:	f000 fe55 	bl	800bc40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	3b01      	subs	r3, #1
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	dce9      	bgt.n	800af7a <prvUnlockQueue+0x16>
 800afa6:	e000      	b.n	800afaa <prvUnlockQueue+0x46>
					break;
 800afa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	22ff      	movs	r2, #255	@ 0xff
 800afae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afb2:	f001 fcb9 	bl	800c928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afb6:	f001 fc81 	bl	800c8bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afc2:	e011      	b.n	800afe8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d012      	beq.n	800aff2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3310      	adds	r3, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 fd27 	bl	800ba24 <xTaskRemoveFromEventList>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afdc:	f000 fe30 	bl	800bc40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dce9      	bgt.n	800afc4 <prvUnlockQueue+0x60>
 800aff0:	e000      	b.n	800aff4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aff2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	22ff      	movs	r2, #255	@ 0xff
 800aff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800affc:	f001 fc94 	bl	800c928 <vPortExitCritical>
}
 800b000:	bf00      	nop
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b010:	f001 fc54 	bl	800c8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e001      	b.n	800b026 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b026:	f001 fc7f 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b03c:	f001 fc3e 	bl	800c8bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b048:	429a      	cmp	r2, r3
 800b04a:	d102      	bne.n	800b052 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b056:	f001 fc67 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
 800b072:	e014      	b.n	800b09e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b074:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b4 <vQueueAddToRegistry+0x50>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10b      	bne.n	800b098 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b080:	490c      	ldr	r1, [pc, #48]	@ (800b0b4 <vQueueAddToRegistry+0x50>)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b08a:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b4 <vQueueAddToRegistry+0x50>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4413      	add	r3, r2
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b096:	e006      	b.n	800b0a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	d9e7      	bls.n	800b074 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20007e54 	.word	0x20007e54

0800b0b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0c8:	f001 fbf8 	bl	800c8bc <vPortEnterCritical>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0d2:	b25b      	sxtb	r3, r3
 800b0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d8:	d103      	bne.n	800b0e2 <vQueueWaitForMessageRestricted+0x2a>
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ee:	d103      	bne.n	800b0f8 <vQueueWaitForMessageRestricted+0x40>
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0f8:	f001 fc16 	bl	800c928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3324      	adds	r3, #36	@ 0x24
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 fc5b 	bl	800b9c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	f7ff ff26 	bl	800af64 <prvUnlockQueue>
	}
 800b118:	bf00      	nop
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	@ 0x38
 800b124:	af04      	add	r7, sp, #16
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10d      	bne.n	800b150 <xTaskCreateStatic+0x30>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b138:	b672      	cpsid	i
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	b662      	cpsie	i
 800b148:	623b      	str	r3, [r7, #32]
}
 800b14a:	bf00      	nop
 800b14c:	bf00      	nop
 800b14e:	e7fd      	b.n	800b14c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <xTaskCreateStatic+0x52>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15a:	b672      	cpsid	i
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	b662      	cpsie	i
 800b16a:	61fb      	str	r3, [r7, #28]
}
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	e7fd      	b.n	800b16e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b172:	235c      	movs	r3, #92	@ 0x5c
 800b174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	2b5c      	cmp	r3, #92	@ 0x5c
 800b17a:	d00d      	beq.n	800b198 <xTaskCreateStatic+0x78>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b180:	b672      	cpsid	i
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	b662      	cpsie	i
 800b190:	61bb      	str	r3, [r7, #24]
}
 800b192:	bf00      	nop
 800b194:	bf00      	nop
 800b196:	e7fd      	b.n	800b194 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b198:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01e      	beq.n	800b1de <xTaskCreateStatic+0xbe>
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01b      	beq.n	800b1de <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9303      	str	r3, [sp, #12]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 f850 	bl	800b276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1d8:	f000 f8e0 	bl	800b39c <prvAddNewTaskToReadyList>
 800b1dc:	e001      	b.n	800b1e2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1e2:	697b      	ldr	r3, [r7, #20]
	}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3728      	adds	r7, #40	@ 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08c      	sub	sp, #48	@ 0x30
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4618      	mov	r0, r3
 800b202:	f001 fc89 	bl	800cb18 <pvPortMalloc>
 800b206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00e      	beq.n	800b22c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b20e:	205c      	movs	r0, #92	@ 0x5c
 800b210:	f001 fc82 	bl	800cb18 <pvPortMalloc>
 800b214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	631a      	str	r2, [r3, #48]	@ 0x30
 800b222:	e005      	b.n	800b230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b224:	6978      	ldr	r0, [r7, #20]
 800b226:	f001 fd45 	bl	800ccb4 <vPortFree>
 800b22a:	e001      	b.n	800b230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d017      	beq.n	800b266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	2300      	movs	r3, #0
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f80e 	bl	800b276 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b25a:	69f8      	ldr	r0, [r7, #28]
 800b25c:	f000 f89e 	bl	800b39c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b260:	2301      	movs	r3, #1
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e002      	b.n	800b26c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b26a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b26c:	69bb      	ldr	r3, [r7, #24]
	}
 800b26e:	4618      	mov	r0, r3
 800b270:	3720      	adds	r7, #32
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b088      	sub	sp, #32
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b286:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	461a      	mov	r2, r3
 800b28e:	21a5      	movs	r1, #165	@ 0xa5
 800b290:	f00b ff78 	bl	8017184 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b29e:	440b      	add	r3, r1
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	4413      	add	r3, r2
 800b2a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	f023 0307 	bic.w	r3, r3, #7
 800b2ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00d      	beq.n	800b2d4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2bc:	b672      	cpsid	i
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	b662      	cpsie	i
 800b2cc:	617b      	str	r3, [r7, #20]
}
 800b2ce:	bf00      	nop
 800b2d0:	bf00      	nop
 800b2d2:	e7fd      	b.n	800b2d0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d01f      	beq.n	800b31a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61fb      	str	r3, [r7, #28]
 800b2de:	e012      	b.n	800b306 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	3334      	adds	r3, #52	@ 0x34
 800b2f0:	460a      	mov	r2, r1
 800b2f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	3301      	adds	r3, #1
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	2b0f      	cmp	r3, #15
 800b30a:	d9e9      	bls.n	800b2e0 <prvInitialiseNewTask+0x6a>
 800b30c:	e000      	b.n	800b310 <prvInitialiseNewTask+0x9a>
			{
				break;
 800b30e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b318:	e003      	b.n	800b322 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	2b37      	cmp	r3, #55	@ 0x37
 800b326:	d901      	bls.n	800b32c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b328:	2337      	movs	r3, #55	@ 0x37
 800b32a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b330:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b336:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	3304      	adds	r3, #4
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff f93e 	bl	800a5c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	3318      	adds	r3, #24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff f939 	bl	800a5c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b366:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	2200      	movs	r2, #0
 800b36c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	68f9      	ldr	r1, [r7, #12]
 800b37a:	69b8      	ldr	r0, [r7, #24]
 800b37c:	f001 f992 	bl	800c6a4 <pxPortInitialiseStack>
 800b380:	4602      	mov	r2, r0
 800b382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b384:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b392:	bf00      	nop
 800b394:	3720      	adds	r7, #32
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3a4:	f001 fa8a 	bl	800c8bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	@ (800b460 <prvAddNewTaskToReadyList+0xc4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	4a2c      	ldr	r2, [pc, #176]	@ (800b460 <prvAddNewTaskToReadyList+0xc4>)
 800b3b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b464 <prvAddNewTaskToReadyList+0xc8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b464 <prvAddNewTaskToReadyList+0xc8>)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3c0:	4b27      	ldr	r3, [pc, #156]	@ (800b460 <prvAddNewTaskToReadyList+0xc4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d110      	bne.n	800b3ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3c8:	f000 fc5e 	bl	800bc88 <prvInitialiseTaskLists>
 800b3cc:	e00d      	b.n	800b3ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3ce:	4b26      	ldr	r3, [pc, #152]	@ (800b468 <prvAddNewTaskToReadyList+0xcc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3d6:	4b23      	ldr	r3, [pc, #140]	@ (800b464 <prvAddNewTaskToReadyList+0xc8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d802      	bhi.n	800b3ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3e4:	4a1f      	ldr	r2, [pc, #124]	@ (800b464 <prvAddNewTaskToReadyList+0xc8>)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ea:	4b20      	ldr	r3, [pc, #128]	@ (800b46c <prvAddNewTaskToReadyList+0xd0>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	4a1e      	ldr	r2, [pc, #120]	@ (800b46c <prvAddNewTaskToReadyList+0xd0>)
 800b3f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b46c <prvAddNewTaskToReadyList+0xd0>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b400:	4b1b      	ldr	r3, [pc, #108]	@ (800b470 <prvAddNewTaskToReadyList+0xd4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d903      	bls.n	800b410 <prvAddNewTaskToReadyList+0x74>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	4a18      	ldr	r2, [pc, #96]	@ (800b470 <prvAddNewTaskToReadyList+0xd4>)
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b414:	4613      	mov	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4a15      	ldr	r2, [pc, #84]	@ (800b474 <prvAddNewTaskToReadyList+0xd8>)
 800b41e:	441a      	add	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	4619      	mov	r1, r3
 800b426:	4610      	mov	r0, r2
 800b428:	f7ff f8d9 	bl	800a5de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b42c:	f001 fa7c 	bl	800c928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b430:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <prvAddNewTaskToReadyList+0xcc>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00e      	beq.n	800b456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b438:	4b0a      	ldr	r3, [pc, #40]	@ (800b464 <prvAddNewTaskToReadyList+0xc8>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b442:	429a      	cmp	r2, r3
 800b444:	d207      	bcs.n	800b456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b446:	4b0c      	ldr	r3, [pc, #48]	@ (800b478 <prvAddNewTaskToReadyList+0xdc>)
 800b448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b456:	bf00      	nop
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20008368 	.word	0x20008368
 800b464:	20007e94 	.word	0x20007e94
 800b468:	20008374 	.word	0x20008374
 800b46c:	20008384 	.word	0x20008384
 800b470:	20008370 	.word	0x20008370
 800b474:	20007e98 	.word	0x20007e98
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01a      	beq.n	800b4c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b48e:	4b15      	ldr	r3, [pc, #84]	@ (800b4e4 <vTaskDelay+0x68>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00d      	beq.n	800b4b2 <vTaskDelay+0x36>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	b672      	cpsid	i
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	b662      	cpsie	i
 800b4aa:	60bb      	str	r3, [r7, #8]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b4b2:	f000 f887 	bl	800b5c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fd37 	bl	800bf2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4be:	f000 f88f 	bl	800b5e0 <xTaskResumeAll>
 800b4c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d107      	bne.n	800b4da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b4ca:	4b07      	ldr	r3, [pc, #28]	@ (800b4e8 <vTaskDelay+0x6c>)
 800b4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4da:	bf00      	nop
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20008390 	.word	0x20008390
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08a      	sub	sp, #40	@ 0x28
 800b4f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4fa:	463a      	mov	r2, r7
 800b4fc:	1d39      	adds	r1, r7, #4
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff f80a 	bl	800a51c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	9202      	str	r2, [sp, #8]
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	2300      	movs	r3, #0
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	460a      	mov	r2, r1
 800b51a:	4924      	ldr	r1, [pc, #144]	@ (800b5ac <vTaskStartScheduler+0xc0>)
 800b51c:	4824      	ldr	r0, [pc, #144]	@ (800b5b0 <vTaskStartScheduler+0xc4>)
 800b51e:	f7ff fdff 	bl	800b120 <xTaskCreateStatic>
 800b522:	4603      	mov	r3, r0
 800b524:	4a23      	ldr	r2, [pc, #140]	@ (800b5b4 <vTaskStartScheduler+0xc8>)
 800b526:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b528:	4b22      	ldr	r3, [pc, #136]	@ (800b5b4 <vTaskStartScheduler+0xc8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b530:	2301      	movs	r3, #1
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	e001      	b.n	800b53a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d102      	bne.n	800b546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b540:	f000 fd48 	bl	800bfd4 <xTimerCreateTimerTask>
 800b544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d118      	bne.n	800b57e <vTaskStartScheduler+0x92>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	b672      	cpsid	i
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	b662      	cpsie	i
 800b560:	613b      	str	r3, [r7, #16]
}
 800b562:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b564:	4b14      	ldr	r3, [pc, #80]	@ (800b5b8 <vTaskStartScheduler+0xcc>)
 800b566:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b56a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b56c:	4b13      	ldr	r3, [pc, #76]	@ (800b5bc <vTaskStartScheduler+0xd0>)
 800b56e:	2201      	movs	r2, #1
 800b570:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b572:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <vTaskStartScheduler+0xd4>)
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b578:	f001 f922 	bl	800c7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b57c:	e011      	b.n	800b5a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b584:	d10d      	bne.n	800b5a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58a:	b672      	cpsid	i
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	b662      	cpsie	i
 800b59a:	60fb      	str	r3, [r7, #12]
}
 800b59c:	bf00      	nop
 800b59e:	bf00      	nop
 800b5a0:	e7fd      	b.n	800b59e <vTaskStartScheduler+0xb2>
}
 800b5a2:	bf00      	nop
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	080180a4 	.word	0x080180a4
 800b5b0:	0800bc59 	.word	0x0800bc59
 800b5b4:	2000838c 	.word	0x2000838c
 800b5b8:	20008388 	.word	0x20008388
 800b5bc:	20008374 	.word	0x20008374
 800b5c0:	2000836c 	.word	0x2000836c

0800b5c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5c8:	4b04      	ldr	r3, [pc, #16]	@ (800b5dc <vTaskSuspendAll+0x18>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4a03      	ldr	r2, [pc, #12]	@ (800b5dc <vTaskSuspendAll+0x18>)
 800b5d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b5d2:	bf00      	nop
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	20008390 	.word	0x20008390

0800b5e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ee:	4b43      	ldr	r3, [pc, #268]	@ (800b6fc <xTaskResumeAll+0x11c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10d      	bne.n	800b612 <xTaskResumeAll+0x32>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fa:	b672      	cpsid	i
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	b662      	cpsie	i
 800b60a:	603b      	str	r3, [r7, #0]
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	e7fd      	b.n	800b60e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b612:	f001 f953 	bl	800c8bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b616:	4b39      	ldr	r3, [pc, #228]	@ (800b6fc <xTaskResumeAll+0x11c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a37      	ldr	r2, [pc, #220]	@ (800b6fc <xTaskResumeAll+0x11c>)
 800b61e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b620:	4b36      	ldr	r3, [pc, #216]	@ (800b6fc <xTaskResumeAll+0x11c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d162      	bne.n	800b6ee <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b628:	4b35      	ldr	r3, [pc, #212]	@ (800b700 <xTaskResumeAll+0x120>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d05e      	beq.n	800b6ee <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b630:	e02f      	b.n	800b692 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b632:	4b34      	ldr	r3, [pc, #208]	@ (800b704 <xTaskResumeAll+0x124>)
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3318      	adds	r3, #24
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff f82a 	bl	800a698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff f825 	bl	800a698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b652:	4b2d      	ldr	r3, [pc, #180]	@ (800b708 <xTaskResumeAll+0x128>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	429a      	cmp	r2, r3
 800b658:	d903      	bls.n	800b662 <xTaskResumeAll+0x82>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65e:	4a2a      	ldr	r2, [pc, #168]	@ (800b708 <xTaskResumeAll+0x128>)
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4a27      	ldr	r2, [pc, #156]	@ (800b70c <xTaskResumeAll+0x12c>)
 800b670:	441a      	add	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3304      	adds	r3, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f7fe ffb0 	bl	800a5de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b682:	4b23      	ldr	r3, [pc, #140]	@ (800b710 <xTaskResumeAll+0x130>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b688:	429a      	cmp	r2, r3
 800b68a:	d302      	bcc.n	800b692 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800b68c:	4b21      	ldr	r3, [pc, #132]	@ (800b714 <xTaskResumeAll+0x134>)
 800b68e:	2201      	movs	r2, #1
 800b690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b692:	4b1c      	ldr	r3, [pc, #112]	@ (800b704 <xTaskResumeAll+0x124>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1cb      	bne.n	800b632 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6a0:	f000 fb92 	bl	800bdc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b718 <xTaskResumeAll+0x138>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d010      	beq.n	800b6d2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6b0:	f000 f846 	bl	800b740 <xTaskIncrementTick>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800b6ba:	4b16      	ldr	r3, [pc, #88]	@ (800b714 <xTaskResumeAll+0x134>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1f1      	bne.n	800b6b0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800b6cc:	4b12      	ldr	r3, [pc, #72]	@ (800b718 <xTaskResumeAll+0x138>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6d2:	4b10      	ldr	r3, [pc, #64]	@ (800b714 <xTaskResumeAll+0x134>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d009      	beq.n	800b6ee <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6de:	4b0f      	ldr	r3, [pc, #60]	@ (800b71c <xTaskResumeAll+0x13c>)
 800b6e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6ee:	f001 f91b 	bl	800c928 <vPortExitCritical>

	return xAlreadyYielded;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20008390 	.word	0x20008390
 800b700:	20008368 	.word	0x20008368
 800b704:	20008328 	.word	0x20008328
 800b708:	20008370 	.word	0x20008370
 800b70c:	20007e98 	.word	0x20007e98
 800b710:	20007e94 	.word	0x20007e94
 800b714:	2000837c 	.word	0x2000837c
 800b718:	20008378 	.word	0x20008378
 800b71c:	e000ed04 	.word	0xe000ed04

0800b720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b726:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <xTaskGetTickCount+0x1c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b72c:	687b      	ldr	r3, [r7, #4]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	2000836c 	.word	0x2000836c

0800b740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b74a:	4b50      	ldr	r3, [pc, #320]	@ (800b88c <xTaskIncrementTick+0x14c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f040 808c 	bne.w	800b86c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b754:	4b4e      	ldr	r3, [pc, #312]	@ (800b890 <xTaskIncrementTick+0x150>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b75c:	4a4c      	ldr	r2, [pc, #304]	@ (800b890 <xTaskIncrementTick+0x150>)
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d123      	bne.n	800b7b0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b768:	4b4a      	ldr	r3, [pc, #296]	@ (800b894 <xTaskIncrementTick+0x154>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00d      	beq.n	800b78e <xTaskIncrementTick+0x4e>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	603b      	str	r3, [r7, #0]
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	e7fd      	b.n	800b78a <xTaskIncrementTick+0x4a>
 800b78e:	4b41      	ldr	r3, [pc, #260]	@ (800b894 <xTaskIncrementTick+0x154>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	4b40      	ldr	r3, [pc, #256]	@ (800b898 <xTaskIncrementTick+0x158>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a3e      	ldr	r2, [pc, #248]	@ (800b894 <xTaskIncrementTick+0x154>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	4a3e      	ldr	r2, [pc, #248]	@ (800b898 <xTaskIncrementTick+0x158>)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	4b3e      	ldr	r3, [pc, #248]	@ (800b89c <xTaskIncrementTick+0x15c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	4a3c      	ldr	r2, [pc, #240]	@ (800b89c <xTaskIncrementTick+0x15c>)
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	f000 fb0c 	bl	800bdc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b8a0 <xTaskIncrementTick+0x160>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d349      	bcc.n	800b84e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ba:	4b36      	ldr	r3, [pc, #216]	@ (800b894 <xTaskIncrementTick+0x154>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d104      	bne.n	800b7ce <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7c4:	4b36      	ldr	r3, [pc, #216]	@ (800b8a0 <xTaskIncrementTick+0x160>)
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7ca:	601a      	str	r2, [r3, #0]
					break;
 800b7cc:	e03f      	b.n	800b84e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ce:	4b31      	ldr	r3, [pc, #196]	@ (800b894 <xTaskIncrementTick+0x154>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d203      	bcs.n	800b7ee <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7e6:	4a2e      	ldr	r2, [pc, #184]	@ (800b8a0 <xTaskIncrementTick+0x160>)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7ec:	e02f      	b.n	800b84e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe ff50 	bl	800a698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d004      	beq.n	800b80a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	3318      	adds	r3, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe ff47 	bl	800a698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80e:	4b25      	ldr	r3, [pc, #148]	@ (800b8a4 <xTaskIncrementTick+0x164>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d903      	bls.n	800b81e <xTaskIncrementTick+0xde>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	4a22      	ldr	r2, [pc, #136]	@ (800b8a4 <xTaskIncrementTick+0x164>)
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4a1f      	ldr	r2, [pc, #124]	@ (800b8a8 <xTaskIncrementTick+0x168>)
 800b82c:	441a      	add	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f7fe fed2 	bl	800a5de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83e:	4b1b      	ldr	r3, [pc, #108]	@ (800b8ac <xTaskIncrementTick+0x16c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	429a      	cmp	r2, r3
 800b846:	d3b8      	bcc.n	800b7ba <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b84c:	e7b5      	b.n	800b7ba <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b84e:	4b17      	ldr	r3, [pc, #92]	@ (800b8ac <xTaskIncrementTick+0x16c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b854:	4914      	ldr	r1, [pc, #80]	@ (800b8a8 <xTaskIncrementTick+0x168>)
 800b856:	4613      	mov	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	440b      	add	r3, r1
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d907      	bls.n	800b876 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b866:	2301      	movs	r3, #1
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	e004      	b.n	800b876 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b86c:	4b10      	ldr	r3, [pc, #64]	@ (800b8b0 <xTaskIncrementTick+0x170>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	4a0f      	ldr	r2, [pc, #60]	@ (800b8b0 <xTaskIncrementTick+0x170>)
 800b874:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b876:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <xTaskIncrementTick+0x174>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b882:	697b      	ldr	r3, [r7, #20]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3718      	adds	r7, #24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20008390 	.word	0x20008390
 800b890:	2000836c 	.word	0x2000836c
 800b894:	20008320 	.word	0x20008320
 800b898:	20008324 	.word	0x20008324
 800b89c:	20008380 	.word	0x20008380
 800b8a0:	20008388 	.word	0x20008388
 800b8a4:	20008370 	.word	0x20008370
 800b8a8:	20007e98 	.word	0x20007e98
 800b8ac:	20007e94 	.word	0x20007e94
 800b8b0:	20008378 	.word	0x20008378
 800b8b4:	2000837c 	.word	0x2000837c

0800b8b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8be:	4b29      	ldr	r3, [pc, #164]	@ (800b964 <vTaskSwitchContext+0xac>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8c6:	4b28      	ldr	r3, [pc, #160]	@ (800b968 <vTaskSwitchContext+0xb0>)
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8cc:	e044      	b.n	800b958 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b8ce:	4b26      	ldr	r3, [pc, #152]	@ (800b968 <vTaskSwitchContext+0xb0>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d4:	4b25      	ldr	r3, [pc, #148]	@ (800b96c <vTaskSwitchContext+0xb4>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e013      	b.n	800b904 <vTaskSwitchContext+0x4c>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10d      	bne.n	800b8fe <vTaskSwitchContext+0x46>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e6:	b672      	cpsid	i
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	b662      	cpsie	i
 800b8f6:	607b      	str	r3, [r7, #4]
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	e7fd      	b.n	800b8fa <vTaskSwitchContext+0x42>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3b01      	subs	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	491a      	ldr	r1, [pc, #104]	@ (800b970 <vTaskSwitchContext+0xb8>)
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	440b      	add	r3, r1
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0e1      	beq.n	800b8dc <vTaskSwitchContext+0x24>
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4613      	mov	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4a13      	ldr	r2, [pc, #76]	@ (800b970 <vTaskSwitchContext+0xb8>)
 800b924:	4413      	add	r3, r2
 800b926:	60bb      	str	r3, [r7, #8]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	605a      	str	r2, [r3, #4]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3308      	adds	r3, #8
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d104      	bne.n	800b948 <vTaskSwitchContext+0x90>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	605a      	str	r2, [r3, #4]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	4a09      	ldr	r2, [pc, #36]	@ (800b974 <vTaskSwitchContext+0xbc>)
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	4a06      	ldr	r2, [pc, #24]	@ (800b96c <vTaskSwitchContext+0xb4>)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6013      	str	r3, [r2, #0]
}
 800b958:	bf00      	nop
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	20008390 	.word	0x20008390
 800b968:	2000837c 	.word	0x2000837c
 800b96c:	20008370 	.word	0x20008370
 800b970:	20007e98 	.word	0x20007e98
 800b974:	20007e94 	.word	0x20007e94

0800b978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10d      	bne.n	800b9a4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	b672      	cpsid	i
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	b662      	cpsie	i
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9a4:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <vTaskPlaceOnEventList+0x4c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3318      	adds	r3, #24
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fe fe3a 	bl	800a626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	6838      	ldr	r0, [r7, #0]
 800b9b6:	f000 fab9 	bl	800bf2c <prvAddCurrentTaskToDelayedList>
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20007e94 	.word	0x20007e94

0800b9c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10d      	bne.n	800b9f6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	617b      	str	r3, [r7, #20]
}
 800b9f0:	bf00      	nop
 800b9f2:	bf00      	nop
 800b9f4:	e7fd      	b.n	800b9f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba20 <vTaskPlaceOnEventListRestricted+0x58>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3318      	adds	r3, #24
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7fe fded 	bl	800a5de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800ba0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	68b8      	ldr	r0, [r7, #8]
 800ba14:	f000 fa8a 	bl	800bf2c <prvAddCurrentTaskToDelayedList>
	}
 800ba18:	bf00      	nop
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20007e94 	.word	0x20007e94

0800ba24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10d      	bne.n	800ba56 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3e:	b672      	cpsid	i
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	b662      	cpsie	i
 800ba4e:	60fb      	str	r3, [r7, #12]
}
 800ba50:	bf00      	nop
 800ba52:	bf00      	nop
 800ba54:	e7fd      	b.n	800ba52 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3318      	adds	r3, #24
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fe fe1c 	bl	800a698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba60:	4b1d      	ldr	r3, [pc, #116]	@ (800bad8 <xTaskRemoveFromEventList+0xb4>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11d      	bne.n	800baa4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe fe13 	bl	800a698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba76:	4b19      	ldr	r3, [pc, #100]	@ (800badc <xTaskRemoveFromEventList+0xb8>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d903      	bls.n	800ba86 <xTaskRemoveFromEventList+0x62>
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba82:	4a16      	ldr	r2, [pc, #88]	@ (800badc <xTaskRemoveFromEventList+0xb8>)
 800ba84:	6013      	str	r3, [r2, #0]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4a13      	ldr	r2, [pc, #76]	@ (800bae0 <xTaskRemoveFromEventList+0xbc>)
 800ba94:	441a      	add	r2, r3
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f7fe fd9e 	bl	800a5de <vListInsertEnd>
 800baa2:	e005      	b.n	800bab0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	3318      	adds	r3, #24
 800baa8:	4619      	mov	r1, r3
 800baaa:	480e      	ldr	r0, [pc, #56]	@ (800bae4 <xTaskRemoveFromEventList+0xc0>)
 800baac:	f7fe fd97 	bl	800a5de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab4:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <xTaskRemoveFromEventList+0xc4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baba:	429a      	cmp	r2, r3
 800babc:	d905      	bls.n	800baca <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800babe:	2301      	movs	r3, #1
 800bac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bac2:	4b0a      	ldr	r3, [pc, #40]	@ (800baec <xTaskRemoveFromEventList+0xc8>)
 800bac4:	2201      	movs	r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	e001      	b.n	800bace <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bace:	697b      	ldr	r3, [r7, #20]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	20008390 	.word	0x20008390
 800badc:	20008370 	.word	0x20008370
 800bae0:	20007e98 	.word	0x20007e98
 800bae4:	20008328 	.word	0x20008328
 800bae8:	20007e94 	.word	0x20007e94
 800baec:	2000837c 	.word	0x2000837c

0800baf0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10d      	bne.n	800bb1a <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb02:	b672      	cpsid	i
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	b662      	cpsie	i
 800bb12:	60fb      	str	r3, [r7, #12]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800bb1a:	f000 fecf 	bl	800c8bc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb1e:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <vTaskSetTimeOutState+0x4c>)
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bb26:	4b06      	ldr	r3, [pc, #24]	@ (800bb40 <vTaskSetTimeOutState+0x50>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bb2e:	f000 fefb 	bl	800c928 <vPortExitCritical>
}
 800bb32:	bf00      	nop
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20008380 	.word	0x20008380
 800bb40:	2000836c 	.word	0x2000836c

0800bb44 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <vTaskInternalSetTimeOutState+0x24>)
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb54:	4b05      	ldr	r3, [pc, #20]	@ (800bb6c <vTaskInternalSetTimeOutState+0x28>)
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	605a      	str	r2, [r3, #4]
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	20008380 	.word	0x20008380
 800bb6c:	2000836c 	.word	0x2000836c

0800bb70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10d      	bne.n	800bb9c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	613b      	str	r3, [r7, #16]
}
 800bb96:	bf00      	nop
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10d      	bne.n	800bbbe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	b672      	cpsid	i
 800bba8:	f383 8811 	msr	BASEPRI, r3
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f3bf 8f4f 	dsb	sy
 800bbb4:	b662      	cpsie	i
 800bbb6:	60fb      	str	r3, [r7, #12]
}
 800bbb8:	bf00      	nop
 800bbba:	bf00      	nop
 800bbbc:	e7fd      	b.n	800bbba <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800bbbe:	f000 fe7d 	bl	800c8bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbc2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc38 <xTaskCheckForTimeOut+0xc8>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbda:	d102      	bne.n	800bbe2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	61fb      	str	r3, [r7, #28]
 800bbe0:	e023      	b.n	800bc2a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	4b15      	ldr	r3, [pc, #84]	@ (800bc3c <xTaskCheckForTimeOut+0xcc>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d007      	beq.n	800bbfe <xTaskCheckForTimeOut+0x8e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d302      	bcc.n	800bbfe <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	61fb      	str	r3, [r7, #28]
 800bbfc:	e015      	b.n	800bc2a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d20b      	bcs.n	800bc20 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff ff95 	bl	800bb44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	61fb      	str	r3, [r7, #28]
 800bc1e:	e004      	b.n	800bc2a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc26:	2301      	movs	r3, #1
 800bc28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc2a:	f000 fe7d 	bl	800c928 <vPortExitCritical>

	return xReturn;
 800bc2e:	69fb      	ldr	r3, [r7, #28]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3720      	adds	r7, #32
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	2000836c 	.word	0x2000836c
 800bc3c:	20008380 	.word	0x20008380

0800bc40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc40:	b480      	push	{r7}
 800bc42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc44:	4b03      	ldr	r3, [pc, #12]	@ (800bc54 <vTaskMissedYield+0x14>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	601a      	str	r2, [r3, #0]
}
 800bc4a:	bf00      	nop
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	2000837c 	.word	0x2000837c

0800bc58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc60:	f000 f852 	bl	800bd08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc64:	4b06      	ldr	r3, [pc, #24]	@ (800bc80 <prvIdleTask+0x28>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d9f9      	bls.n	800bc60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc6c:	4b05      	ldr	r3, [pc, #20]	@ (800bc84 <prvIdleTask+0x2c>)
 800bc6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	f3bf 8f4f 	dsb	sy
 800bc78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc7c:	e7f0      	b.n	800bc60 <prvIdleTask+0x8>
 800bc7e:	bf00      	nop
 800bc80:	20007e98 	.word	0x20007e98
 800bc84:	e000ed04 	.word	0xe000ed04

0800bc88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc8e:	2300      	movs	r3, #0
 800bc90:	607b      	str	r3, [r7, #4]
 800bc92:	e00c      	b.n	800bcae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4a12      	ldr	r2, [pc, #72]	@ (800bce8 <prvInitialiseTaskLists+0x60>)
 800bca0:	4413      	add	r3, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe fc6e 	bl	800a584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	607b      	str	r3, [r7, #4]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b37      	cmp	r3, #55	@ 0x37
 800bcb2:	d9ef      	bls.n	800bc94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcb4:	480d      	ldr	r0, [pc, #52]	@ (800bcec <prvInitialiseTaskLists+0x64>)
 800bcb6:	f7fe fc65 	bl	800a584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcba:	480d      	ldr	r0, [pc, #52]	@ (800bcf0 <prvInitialiseTaskLists+0x68>)
 800bcbc:	f7fe fc62 	bl	800a584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcc0:	480c      	ldr	r0, [pc, #48]	@ (800bcf4 <prvInitialiseTaskLists+0x6c>)
 800bcc2:	f7fe fc5f 	bl	800a584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcc6:	480c      	ldr	r0, [pc, #48]	@ (800bcf8 <prvInitialiseTaskLists+0x70>)
 800bcc8:	f7fe fc5c 	bl	800a584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bccc:	480b      	ldr	r0, [pc, #44]	@ (800bcfc <prvInitialiseTaskLists+0x74>)
 800bcce:	f7fe fc59 	bl	800a584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd00 <prvInitialiseTaskLists+0x78>)
 800bcd4:	4a05      	ldr	r2, [pc, #20]	@ (800bcec <prvInitialiseTaskLists+0x64>)
 800bcd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd04 <prvInitialiseTaskLists+0x7c>)
 800bcda:	4a05      	ldr	r2, [pc, #20]	@ (800bcf0 <prvInitialiseTaskLists+0x68>)
 800bcdc:	601a      	str	r2, [r3, #0]
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20007e98 	.word	0x20007e98
 800bcec:	200082f8 	.word	0x200082f8
 800bcf0:	2000830c 	.word	0x2000830c
 800bcf4:	20008328 	.word	0x20008328
 800bcf8:	2000833c 	.word	0x2000833c
 800bcfc:	20008354 	.word	0x20008354
 800bd00:	20008320 	.word	0x20008320
 800bd04:	20008324 	.word	0x20008324

0800bd08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd0e:	e019      	b.n	800bd44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd10:	f000 fdd4 	bl	800c8bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd14:	4b10      	ldr	r3, [pc, #64]	@ (800bd58 <prvCheckTasksWaitingTermination+0x50>)
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe fcb9 	bl	800a698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd26:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <prvCheckTasksWaitingTermination+0x54>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd5c <prvCheckTasksWaitingTermination+0x54>)
 800bd2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd30:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <prvCheckTasksWaitingTermination+0x58>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	4a0a      	ldr	r2, [pc, #40]	@ (800bd60 <prvCheckTasksWaitingTermination+0x58>)
 800bd38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd3a:	f000 fdf5 	bl	800c928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f810 	bl	800bd64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd44:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <prvCheckTasksWaitingTermination+0x58>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e1      	bne.n	800bd10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	2000833c 	.word	0x2000833c
 800bd5c:	20008368 	.word	0x20008368
 800bd60:	20008350 	.word	0x20008350

0800bd64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d108      	bne.n	800bd88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 ff9a 	bl	800ccb4 <vPortFree>
				vPortFree( pxTCB );
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 ff97 	bl	800ccb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd86:	e01b      	b.n	800bdc0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d103      	bne.n	800bd9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 ff8e 	bl	800ccb4 <vPortFree>
	}
 800bd98:	e012      	b.n	800bdc0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d00d      	beq.n	800bdc0 <prvDeleteTCB+0x5c>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda8:	b672      	cpsid	i
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	b662      	cpsie	i
 800bdb8:	60fb      	str	r3, [r7, #12]
}
 800bdba:	bf00      	nop
 800bdbc:	bf00      	nop
 800bdbe:	e7fd      	b.n	800bdbc <prvDeleteTCB+0x58>
	}
 800bdc0:	bf00      	nop
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdce:	4b0c      	ldr	r3, [pc, #48]	@ (800be00 <prvResetNextTaskUnblockTime+0x38>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800be04 <prvResetNextTaskUnblockTime+0x3c>)
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bde0:	e008      	b.n	800bdf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde2:	4b07      	ldr	r3, [pc, #28]	@ (800be00 <prvResetNextTaskUnblockTime+0x38>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	4a04      	ldr	r2, [pc, #16]	@ (800be04 <prvResetNextTaskUnblockTime+0x3c>)
 800bdf2:	6013      	str	r3, [r2, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20008320 	.word	0x20008320
 800be04:	20008388 	.word	0x20008388

0800be08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be0e:	4b0b      	ldr	r3, [pc, #44]	@ (800be3c <xTaskGetSchedulerState+0x34>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d102      	bne.n	800be1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be16:	2301      	movs	r3, #1
 800be18:	607b      	str	r3, [r7, #4]
 800be1a:	e008      	b.n	800be2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be1c:	4b08      	ldr	r3, [pc, #32]	@ (800be40 <xTaskGetSchedulerState+0x38>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be24:	2302      	movs	r3, #2
 800be26:	607b      	str	r3, [r7, #4]
 800be28:	e001      	b.n	800be2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be2a:	2300      	movs	r3, #0
 800be2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be2e:	687b      	ldr	r3, [r7, #4]
	}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20008374 	.word	0x20008374
 800be40:	20008390 	.word	0x20008390

0800be44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d05c      	beq.n	800bf14 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be5a:	4b31      	ldr	r3, [pc, #196]	@ (800bf20 <xTaskPriorityDisinherit+0xdc>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	429a      	cmp	r2, r3
 800be62:	d00d      	beq.n	800be80 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be68:	b672      	cpsid	i
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	b662      	cpsie	i
 800be78:	60fb      	str	r3, [r7, #12]
}
 800be7a:	bf00      	nop
 800be7c:	bf00      	nop
 800be7e:	e7fd      	b.n	800be7c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10d      	bne.n	800bea4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8c:	b672      	cpsid	i
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	b662      	cpsie	i
 800be9c:	60bb      	str	r3, [r7, #8]
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	e7fd      	b.n	800bea0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea8:	1e5a      	subs	r2, r3, #1
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d02c      	beq.n	800bf14 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d128      	bne.n	800bf14 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fe fbe6 	bl	800a698 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <xTaskPriorityDisinherit+0xe0>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d903      	bls.n	800bef4 <xTaskPriorityDisinherit+0xb0>
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef0:	4a0c      	ldr	r2, [pc, #48]	@ (800bf24 <xTaskPriorityDisinherit+0xe0>)
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef8:	4613      	mov	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4a09      	ldr	r2, [pc, #36]	@ (800bf28 <xTaskPriorityDisinherit+0xe4>)
 800bf02:	441a      	add	r2, r3
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	3304      	adds	r3, #4
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7fe fb67 	bl	800a5de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf10:	2301      	movs	r3, #1
 800bf12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf14:	697b      	ldr	r3, [r7, #20]
	}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20007e94 	.word	0x20007e94
 800bf24:	20008370 	.word	0x20008370
 800bf28:	20007e98 	.word	0x20007e98

0800bf2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf36:	4b21      	ldr	r3, [pc, #132]	@ (800bfbc <prvAddCurrentTaskToDelayedList+0x90>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf3c:	4b20      	ldr	r3, [pc, #128]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3304      	adds	r3, #4
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fba8 	bl	800a698 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf4e:	d10a      	bne.n	800bf66 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf56:	4b1a      	ldr	r3, [pc, #104]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4819      	ldr	r0, [pc, #100]	@ (800bfc4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf60:	f7fe fb3d 	bl	800a5de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf64:	e026      	b.n	800bfb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf6e:	4b14      	ldr	r3, [pc, #80]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d209      	bcs.n	800bf92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf7e:	4b12      	ldr	r3, [pc, #72]	@ (800bfc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	f7fe fb4b 	bl	800a626 <vListInsert>
}
 800bf90:	e010      	b.n	800bfb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf92:	4b0e      	ldr	r3, [pc, #56]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fe fb41 	bl	800a626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d202      	bcs.n	800bfb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfae:	4a08      	ldr	r2, [pc, #32]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6013      	str	r3, [r2, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	2000836c 	.word	0x2000836c
 800bfc0:	20007e94 	.word	0x20007e94
 800bfc4:	20008354 	.word	0x20008354
 800bfc8:	20008324 	.word	0x20008324
 800bfcc:	20008320 	.word	0x20008320
 800bfd0:	20008388 	.word	0x20008388

0800bfd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	@ 0x28
 800bfd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfde:	f000 fb21 	bl	800c624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfe2:	4b1e      	ldr	r3, [pc, #120]	@ (800c05c <xTimerCreateTimerTask+0x88>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d021      	beq.n	800c02e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bff2:	1d3a      	adds	r2, r7, #4
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	f107 030c 	add.w	r3, r7, #12
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe faa7 	bl	800a550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	9202      	str	r2, [sp, #8]
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	2302      	movs	r3, #2
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	2300      	movs	r3, #0
 800c012:	460a      	mov	r2, r1
 800c014:	4912      	ldr	r1, [pc, #72]	@ (800c060 <xTimerCreateTimerTask+0x8c>)
 800c016:	4813      	ldr	r0, [pc, #76]	@ (800c064 <xTimerCreateTimerTask+0x90>)
 800c018:	f7ff f882 	bl	800b120 <xTaskCreateStatic>
 800c01c:	4603      	mov	r3, r0
 800c01e:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <xTimerCreateTimerTask+0x94>)
 800c020:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c022:	4b11      	ldr	r3, [pc, #68]	@ (800c068 <xTimerCreateTimerTask+0x94>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c02a:	2301      	movs	r3, #1
 800c02c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10d      	bne.n	800c050 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	b672      	cpsid	i
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	b662      	cpsie	i
 800c048:	613b      	str	r3, [r7, #16]
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c050:	697b      	ldr	r3, [r7, #20]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	200083c4 	.word	0x200083c4
 800c060:	080180ac 	.word	0x080180ac
 800c064:	0800c1ad 	.word	0x0800c1ad
 800c068:	200083c8 	.word	0x200083c8

0800c06c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08a      	sub	sp, #40	@ 0x28
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10d      	bne.n	800c0a0 <xTimerGenericCommand+0x34>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c088:	b672      	cpsid	i
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	b662      	cpsie	i
 800c098:	623b      	str	r3, [r7, #32]
}
 800c09a:	bf00      	nop
 800c09c:	bf00      	nop
 800c09e:	e7fd      	b.n	800c09c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0a0:	4b19      	ldr	r3, [pc, #100]	@ (800c108 <xTimerGenericCommand+0x9c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d02a      	beq.n	800c0fe <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b05      	cmp	r3, #5
 800c0b8:	dc18      	bgt.n	800c0ec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0ba:	f7ff fea5 	bl	800be08 <xTaskGetSchedulerState>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d109      	bne.n	800c0d8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0c4:	4b10      	ldr	r3, [pc, #64]	@ (800c108 <xTimerGenericCommand+0x9c>)
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	f107 0110 	add.w	r1, r7, #16
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0d0:	f7fe fc22 	bl	800a918 <xQueueGenericSend>
 800c0d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0d6:	e012      	b.n	800c0fe <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <xTimerGenericCommand+0x9c>)
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	f107 0110 	add.w	r1, r7, #16
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f7fe fc18 	bl	800a918 <xQueueGenericSend>
 800c0e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0ea:	e008      	b.n	800c0fe <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0ec:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <xTimerGenericCommand+0x9c>)
 800c0ee:	6818      	ldr	r0, [r3, #0]
 800c0f0:	f107 0110 	add.w	r1, r7, #16
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	f7fe fd18 	bl	800ab2c <xQueueGenericSendFromISR>
 800c0fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c100:	4618      	mov	r0, r3
 800c102:	3728      	adds	r7, #40	@ 0x28
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	200083c4 	.word	0x200083c4

0800c10c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af02      	add	r7, sp, #8
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <prvProcessExpiredTimer+0x9c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3304      	adds	r3, #4
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fab7 	bl	800a698 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d025      	beq.n	800c184 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	699a      	ldr	r2, [r3, #24]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	18d1      	adds	r1, r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	6978      	ldr	r0, [r7, #20]
 800c146:	f000 f8d7 	bl	800c2f8 <prvInsertTimerInActiveList>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d022      	beq.n	800c196 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c150:	2300      	movs	r3, #0
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	2100      	movs	r1, #0
 800c15a:	6978      	ldr	r0, [r7, #20]
 800c15c:	f7ff ff86 	bl	800c06c <xTimerGenericCommand>
 800c160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d116      	bne.n	800c196 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16c:	b672      	cpsid	i
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	b662      	cpsie	i
 800c17c:	60fb      	str	r3, [r7, #12]
}
 800c17e:	bf00      	nop
 800c180:	bf00      	nop
 800c182:	e7fd      	b.n	800c180 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c18a:	f023 0301 	bic.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	4798      	blx	r3
}
 800c19e:	bf00      	nop
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	200083bc 	.word	0x200083bc

0800c1ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1b4:	f107 0308 	add.w	r3, r7, #8
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f859 	bl	800c270 <prvGetNextExpireTime>
 800c1be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f805 	bl	800c1d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1ca:	f000 f8d7 	bl	800c37c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1ce:	bf00      	nop
 800c1d0:	e7f0      	b.n	800c1b4 <prvTimerTask+0x8>
	...

0800c1d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1de:	f7ff f9f1 	bl	800b5c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f866 	bl	800c2b8 <prvSampleTimeNow>
 800c1ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d130      	bne.n	800c256 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <prvProcessTimerOrBlockTask+0x3c>
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d806      	bhi.n	800c210 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c202:	f7ff f9ed 	bl	800b5e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c206:	68f9      	ldr	r1, [r7, #12]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff7f 	bl	800c10c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c20e:	e024      	b.n	800c25a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d008      	beq.n	800c228 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c216:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <prvProcessTimerOrBlockTask+0x90>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <prvProcessTimerOrBlockTask+0x50>
 800c220:	2301      	movs	r3, #1
 800c222:	e000      	b.n	800c226 <prvProcessTimerOrBlockTask+0x52>
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c228:	4b0f      	ldr	r3, [pc, #60]	@ (800c268 <prvProcessTimerOrBlockTask+0x94>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	4619      	mov	r1, r3
 800c236:	f7fe ff3f 	bl	800b0b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c23a:	f7ff f9d1 	bl	800b5e0 <xTaskResumeAll>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <prvProcessTimerOrBlockTask+0x98>)
 800c246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	f3bf 8f6f 	isb	sy
}
 800c254:	e001      	b.n	800c25a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c256:	f7ff f9c3 	bl	800b5e0 <xTaskResumeAll>
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	200083c0 	.word	0x200083c0
 800c268:	200083c4 	.word	0x200083c4
 800c26c:	e000ed04 	.word	0xe000ed04

0800c270 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <prvGetNextExpireTime+0x44>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <prvGetNextExpireTime+0x16>
 800c282:	2201      	movs	r2, #1
 800c284:	e000      	b.n	800c288 <prvGetNextExpireTime+0x18>
 800c286:	2200      	movs	r2, #0
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c294:	4b07      	ldr	r3, [pc, #28]	@ (800c2b4 <prvGetNextExpireTime+0x44>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	e001      	b.n	800c2a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	200083bc 	.word	0x200083bc

0800c2b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2c0:	f7ff fa2e 	bl	800b720 <xTaskGetTickCount>
 800c2c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f4 <prvSampleTimeNow+0x3c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d205      	bcs.n	800c2dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2d0:	f000 f940 	bl	800c554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	e002      	b.n	800c2e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2e2:	4a04      	ldr	r2, [pc, #16]	@ (800c2f4 <prvSampleTimeNow+0x3c>)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	200083cc 	.word	0x200083cc

0800c2f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c306:	2300      	movs	r3, #0
 800c308:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d812      	bhi.n	800c344 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	1ad2      	subs	r2, r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d302      	bcc.n	800c332 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e01b      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <prvInsertTimerInActiveList+0x7c>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7fe f972 	bl	800a626 <vListInsert>
 800c342:	e012      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d206      	bcs.n	800c35a <prvInsertTimerInActiveList+0x62>
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d302      	bcc.n	800c35a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c354:	2301      	movs	r3, #1
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e007      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c35a:	4b07      	ldr	r3, [pc, #28]	@ (800c378 <prvInsertTimerInActiveList+0x80>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7fe f95e 	bl	800a626 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c36a:	697b      	ldr	r3, [r7, #20]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	200083c0 	.word	0x200083c0
 800c378:	200083bc 	.word	0x200083bc

0800c37c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08e      	sub	sp, #56	@ 0x38
 800c380:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c382:	e0d4      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	da1b      	bge.n	800c3c2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c38a:	1d3b      	adds	r3, r7, #4
 800c38c:	3304      	adds	r3, #4
 800c38e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10d      	bne.n	800c3b2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	b672      	cpsid	i
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	b662      	cpsie	i
 800c3aa:	61fb      	str	r3, [r7, #28]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3b8:	6850      	ldr	r0, [r2, #4]
 800c3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3bc:	6892      	ldr	r2, [r2, #8]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f2c0 80b2 	blt.w	800c52e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d004      	beq.n	800c3e0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe f95c 	bl	800a698 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff ff68 	bl	800c2b8 <prvSampleTimeNow>
 800c3e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	f200 809b 	bhi.w	800c528 <prvProcessReceivedCommands+0x1ac>
 800c3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <prvProcessReceivedCommands+0x7c>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c421 	.word	0x0800c421
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c421 	.word	0x0800c421
 800c404:	0800c49b 	.word	0x0800c49b
 800c408:	0800c4af 	.word	0x0800c4af
 800c40c:	0800c4ff 	.word	0x0800c4ff
 800c410:	0800c421 	.word	0x0800c421
 800c414:	0800c421 	.word	0x0800c421
 800c418:	0800c49b 	.word	0x0800c49b
 800c41c:	0800c4af 	.word	0x0800c4af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c426:	f043 0301 	orr.w	r3, r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	18d1      	adds	r1, r2, r3
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c440:	f7ff ff5a 	bl	800c2f8 <prvInsertTimerInActiveList>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d070      	beq.n	800c52c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d065      	beq.n	800c52c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	441a      	add	r2, r3
 800c468:	2300      	movs	r3, #0
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	2300      	movs	r3, #0
 800c46e:	2100      	movs	r1, #0
 800c470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c472:	f7ff fdfb 	bl	800c06c <xTimerGenericCommand>
 800c476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d156      	bne.n	800c52c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	b672      	cpsid	i
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	b662      	cpsie	i
 800c492:	61bb      	str	r3, [r7, #24]
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	e7fd      	b.n	800c496 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4a0:	f023 0301 	bic.w	r3, r3, #1
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4ac:	e03f      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4b4:	f043 0301 	orr.w	r3, r3, #1
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10d      	bne.n	800c4ea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	b672      	cpsid	i
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	b662      	cpsie	i
 800c4e2:	617b      	str	r3, [r7, #20]
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop
 800c4e8:	e7fd      	b.n	800c4e6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ec:	699a      	ldr	r2, [r3, #24]
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f0:	18d1      	adds	r1, r2, r3
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f8:	f7ff fefe 	bl	800c2f8 <prvInsertTimerInActiveList>
					break;
 800c4fc:	e017      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d103      	bne.n	800c514 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800c50c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c50e:	f000 fbd1 	bl	800ccb4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c512:	e00c      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c51a:	f023 0301 	bic.w	r3, r3, #1
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c526:	e002      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800c528:	bf00      	nop
 800c52a:	e000      	b.n	800c52e <prvProcessReceivedCommands+0x1b2>
					break;
 800c52c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c52e:	4b08      	ldr	r3, [pc, #32]	@ (800c550 <prvProcessReceivedCommands+0x1d4>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	1d39      	adds	r1, r7, #4
 800c534:	2200      	movs	r2, #0
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe fb9c 	bl	800ac74 <xQueueReceive>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f47f af20 	bne.w	800c384 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	3730      	adds	r7, #48	@ 0x30
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	200083c4 	.word	0x200083c4

0800c554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c55a:	e04b      	b.n	800c5f4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c55c:	4b2f      	ldr	r3, [pc, #188]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c566:	4b2d      	ldr	r3, [pc, #180]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3304      	adds	r3, #4
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe f88f 	bl	800a698 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d031      	beq.n	800c5f4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	4413      	add	r3, r2
 800c598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d90e      	bls.n	800c5c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fe f834 	bl	800a626 <vListInsert>
 800c5be:	e019      	b.n	800c5f4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff fd4e 	bl	800c06c <xTimerGenericCommand>
 800c5d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10d      	bne.n	800c5f4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5dc:	b672      	cpsid	i
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	b662      	cpsie	i
 800c5ec:	603b      	str	r3, [r7, #0]
}
 800c5ee:	bf00      	nop
 800c5f0:	bf00      	nop
 800c5f2:	e7fd      	b.n	800c5f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5f4:	4b09      	ldr	r3, [pc, #36]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1ae      	bne.n	800c55c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5fe:	4b07      	ldr	r3, [pc, #28]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c604:	4b06      	ldr	r3, [pc, #24]	@ (800c620 <prvSwitchTimerLists+0xcc>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a04      	ldr	r2, [pc, #16]	@ (800c61c <prvSwitchTimerLists+0xc8>)
 800c60a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c60c:	4a04      	ldr	r2, [pc, #16]	@ (800c620 <prvSwitchTimerLists+0xcc>)
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	200083bc 	.word	0x200083bc
 800c620:	200083c0 	.word	0x200083c0

0800c624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c62a:	f000 f947 	bl	800c8bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c62e:	4b15      	ldr	r3, [pc, #84]	@ (800c684 <prvCheckForValidListAndQueue+0x60>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d120      	bne.n	800c678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c636:	4814      	ldr	r0, [pc, #80]	@ (800c688 <prvCheckForValidListAndQueue+0x64>)
 800c638:	f7fd ffa4 	bl	800a584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c63c:	4813      	ldr	r0, [pc, #76]	@ (800c68c <prvCheckForValidListAndQueue+0x68>)
 800c63e:	f7fd ffa1 	bl	800a584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c642:	4b13      	ldr	r3, [pc, #76]	@ (800c690 <prvCheckForValidListAndQueue+0x6c>)
 800c644:	4a10      	ldr	r2, [pc, #64]	@ (800c688 <prvCheckForValidListAndQueue+0x64>)
 800c646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c648:	4b12      	ldr	r3, [pc, #72]	@ (800c694 <prvCheckForValidListAndQueue+0x70>)
 800c64a:	4a10      	ldr	r2, [pc, #64]	@ (800c68c <prvCheckForValidListAndQueue+0x68>)
 800c64c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c64e:	2300      	movs	r3, #0
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4b11      	ldr	r3, [pc, #68]	@ (800c698 <prvCheckForValidListAndQueue+0x74>)
 800c654:	4a11      	ldr	r2, [pc, #68]	@ (800c69c <prvCheckForValidListAndQueue+0x78>)
 800c656:	2110      	movs	r1, #16
 800c658:	200a      	movs	r0, #10
 800c65a:	f7fe f8b3 	bl	800a7c4 <xQueueGenericCreateStatic>
 800c65e:	4603      	mov	r3, r0
 800c660:	4a08      	ldr	r2, [pc, #32]	@ (800c684 <prvCheckForValidListAndQueue+0x60>)
 800c662:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c664:	4b07      	ldr	r3, [pc, #28]	@ (800c684 <prvCheckForValidListAndQueue+0x60>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d005      	beq.n	800c678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <prvCheckForValidListAndQueue+0x60>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	490b      	ldr	r1, [pc, #44]	@ (800c6a0 <prvCheckForValidListAndQueue+0x7c>)
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fcf6 	bl	800b064 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c678:	f000 f956 	bl	800c928 <vPortExitCritical>
}
 800c67c:	bf00      	nop
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	200083c4 	.word	0x200083c4
 800c688:	20008394 	.word	0x20008394
 800c68c:	200083a8 	.word	0x200083a8
 800c690:	200083bc 	.word	0x200083bc
 800c694:	200083c0 	.word	0x200083c0
 800c698:	20008470 	.word	0x20008470
 800c69c:	200083d0 	.word	0x200083d0
 800c6a0:	080180b4 	.word	0x080180b4

0800c6a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3b04      	subs	r3, #4
 800c6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f023 0201 	bic.w	r2, r3, #1
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3b04      	subs	r3, #4
 800c6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c708 <pxPortInitialiseStack+0x64>)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3b14      	subs	r3, #20
 800c6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f06f 0202 	mvn.w	r2, #2
 800c6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3b20      	subs	r3, #32
 800c6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	0800c70d 	.word	0x0800c70d

0800c70c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c716:	4b15      	ldr	r3, [pc, #84]	@ (800c76c <prvTaskExitError+0x60>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c71e:	d00d      	beq.n	800c73c <prvTaskExitError+0x30>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	60fb      	str	r3, [r7, #12]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <prvTaskExitError+0x2c>
	__asm volatile
 800c73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c740:	b672      	cpsid	i
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	b662      	cpsie	i
 800c750:	60bb      	str	r3, [r7, #8]
}
 800c752:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c754:	bf00      	nop
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0fc      	beq.n	800c756 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	2000009c 	.word	0x2000009c

0800c770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c770:	4b07      	ldr	r3, [pc, #28]	@ (800c790 <pxCurrentTCBConst2>)
 800c772:	6819      	ldr	r1, [r3, #0]
 800c774:	6808      	ldr	r0, [r1, #0]
 800c776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77a:	f380 8809 	msr	PSP, r0
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f04f 0000 	mov.w	r0, #0
 800c786:	f380 8811 	msr	BASEPRI, r0
 800c78a:	4770      	bx	lr
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst2>:
 800c790:	20007e94 	.word	0x20007e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c798:	4808      	ldr	r0, [pc, #32]	@ (800c7bc <prvPortStartFirstTask+0x24>)
 800c79a:	6800      	ldr	r0, [r0, #0]
 800c79c:	6800      	ldr	r0, [r0, #0]
 800c79e:	f380 8808 	msr	MSP, r0
 800c7a2:	f04f 0000 	mov.w	r0, #0
 800c7a6:	f380 8814 	msr	CONTROL, r0
 800c7aa:	b662      	cpsie	i
 800c7ac:	b661      	cpsie	f
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	df00      	svc	0
 800c7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ba:	bf00      	nop
 800c7bc:	e000ed08 	.word	0xe000ed08

0800c7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7c6:	4b37      	ldr	r3, [pc, #220]	@ (800c8a4 <xPortStartScheduler+0xe4>)
 800c7c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	22ff      	movs	r2, #255	@ 0xff
 800c7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7e0:	78fb      	ldrb	r3, [r7, #3]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c8a8 <xPortStartScheduler+0xe8>)
 800c7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7ee:	4b2f      	ldr	r3, [pc, #188]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c7f0:	2207      	movs	r2, #7
 800c7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7f4:	e009      	b.n	800c80a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	4a2b      	ldr	r2, [pc, #172]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	b2db      	uxtb	r3, r3
 800c808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c812:	2b80      	cmp	r3, #128	@ 0x80
 800c814:	d0ef      	beq.n	800c7f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c816:	4b25      	ldr	r3, [pc, #148]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f1c3 0307 	rsb	r3, r3, #7
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d00d      	beq.n	800c83e <xPortStartScheduler+0x7e>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	b672      	cpsid	i
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	b662      	cpsie	i
 800c836:	60bb      	str	r3, [r7, #8]
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c83e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	021b      	lsls	r3, r3, #8
 800c844:	4a19      	ldr	r2, [pc, #100]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c848:	4b18      	ldr	r3, [pc, #96]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c850:	4a16      	ldr	r2, [pc, #88]	@ (800c8ac <xPortStartScheduler+0xec>)
 800c852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	b2da      	uxtb	r2, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c85c:	4b14      	ldr	r3, [pc, #80]	@ (800c8b0 <xPortStartScheduler+0xf0>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a13      	ldr	r2, [pc, #76]	@ (800c8b0 <xPortStartScheduler+0xf0>)
 800c862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c868:	4b11      	ldr	r3, [pc, #68]	@ (800c8b0 <xPortStartScheduler+0xf0>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a10      	ldr	r2, [pc, #64]	@ (800c8b0 <xPortStartScheduler+0xf0>)
 800c86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c874:	f000 f8dc 	bl	800ca30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c878:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <xPortStartScheduler+0xf4>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c87e:	f000 f8fb 	bl	800ca78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c882:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b8 <xPortStartScheduler+0xf8>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a0c      	ldr	r2, [pc, #48]	@ (800c8b8 <xPortStartScheduler+0xf8>)
 800c888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c88e:	f7ff ff83 	bl	800c798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c892:	f7ff f811 	bl	800b8b8 <vTaskSwitchContext>
	prvTaskExitError();
 800c896:	f7ff ff39 	bl	800c70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	e000e400 	.word	0xe000e400
 800c8a8:	200084c0 	.word	0x200084c0
 800c8ac:	200084c4 	.word	0x200084c4
 800c8b0:	e000ed20 	.word	0xe000ed20
 800c8b4:	2000009c 	.word	0x2000009c
 800c8b8:	e000ef34 	.word	0xe000ef34

0800c8bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c6:	b672      	cpsid	i
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	b662      	cpsie	i
 800c8d6:	607b      	str	r3, [r7, #4]
}
 800c8d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8da:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <vPortEnterCritical+0x64>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c920 <vPortEnterCritical+0x64>)
 800c8e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c920 <vPortEnterCritical+0x64>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d112      	bne.n	800c912 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c924 <vPortEnterCritical+0x68>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00d      	beq.n	800c912 <vPortEnterCritical+0x56>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fa:	b672      	cpsid	i
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	b662      	cpsie	i
 800c90a:	603b      	str	r3, [r7, #0]
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <vPortEnterCritical+0x52>
	}
}
 800c912:	bf00      	nop
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	2000009c 	.word	0x2000009c
 800c924:	e000ed04 	.word	0xe000ed04

0800c928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c92e:	4b13      	ldr	r3, [pc, #76]	@ (800c97c <vPortExitCritical+0x54>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10d      	bne.n	800c952 <vPortExitCritical+0x2a>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93a:	b672      	cpsid	i
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	b662      	cpsie	i
 800c94a:	607b      	str	r3, [r7, #4]
}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	e7fd      	b.n	800c94e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c952:	4b0a      	ldr	r3, [pc, #40]	@ (800c97c <vPortExitCritical+0x54>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3b01      	subs	r3, #1
 800c958:	4a08      	ldr	r2, [pc, #32]	@ (800c97c <vPortExitCritical+0x54>)
 800c95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c95c:	4b07      	ldr	r3, [pc, #28]	@ (800c97c <vPortExitCritical+0x54>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <vPortExitCritical+0x48>
 800c964:	2300      	movs	r3, #0
 800c966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	f383 8811 	msr	BASEPRI, r3
}
 800c96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	2000009c 	.word	0x2000009c

0800c980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c980:	f3ef 8009 	mrs	r0, PSP
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4b15      	ldr	r3, [pc, #84]	@ (800c9e0 <pxCurrentTCBConst>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	f01e 0f10 	tst.w	lr, #16
 800c990:	bf08      	it	eq
 800c992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99a:	6010      	str	r0, [r2, #0]
 800c99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f380 8811 	msr	BASEPRI, r0
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	f7fe ff80 	bl	800b8b8 <vTaskSwitchContext>
 800c9b8:	f04f 0000 	mov.w	r0, #0
 800c9bc:	f380 8811 	msr	BASEPRI, r0
 800c9c0:	bc09      	pop	{r0, r3}
 800c9c2:	6819      	ldr	r1, [r3, #0]
 800c9c4:	6808      	ldr	r0, [r1, #0]
 800c9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	f01e 0f10 	tst.w	lr, #16
 800c9ce:	bf08      	it	eq
 800c9d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9d4:	f380 8809 	msr	PSP, r0
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop

0800c9e0 <pxCurrentTCBConst>:
 800c9e0:	20007e94 	.word	0x20007e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop

0800c9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f2:	b672      	cpsid	i
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	b662      	cpsie	i
 800ca02:	607b      	str	r3, [r7, #4]
}
 800ca04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca06:	f7fe fe9b 	bl	800b740 <xTaskIncrementTick>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca10:	4b06      	ldr	r3, [pc, #24]	@ (800ca2c <SysTick_Handler+0x44>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	f383 8811 	msr	BASEPRI, r3
}
 800ca22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	e000ed04 	.word	0xe000ed04

0800ca30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca30:	b480      	push	{r7}
 800ca32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca34:	4b0b      	ldr	r3, [pc, #44]	@ (800ca64 <vPortSetupTimerInterrupt+0x34>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca68 <vPortSetupTimerInterrupt+0x38>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca40:	4b0a      	ldr	r3, [pc, #40]	@ (800ca6c <vPortSetupTimerInterrupt+0x3c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a0a      	ldr	r2, [pc, #40]	@ (800ca70 <vPortSetupTimerInterrupt+0x40>)
 800ca46:	fba2 2303 	umull	r2, r3, r2, r3
 800ca4a:	099b      	lsrs	r3, r3, #6
 800ca4c:	4a09      	ldr	r2, [pc, #36]	@ (800ca74 <vPortSetupTimerInterrupt+0x44>)
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca52:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <vPortSetupTimerInterrupt+0x34>)
 800ca54:	2207      	movs	r2, #7
 800ca56:	601a      	str	r2, [r3, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	e000e010 	.word	0xe000e010
 800ca68:	e000e018 	.word	0xe000e018
 800ca6c:	20000004 	.word	0x20000004
 800ca70:	10624dd3 	.word	0x10624dd3
 800ca74:	e000e014 	.word	0xe000e014

0800ca78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca88 <vPortEnableVFP+0x10>
 800ca7c:	6801      	ldr	r1, [r0, #0]
 800ca7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca82:	6001      	str	r1, [r0, #0]
 800ca84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca86:	bf00      	nop
 800ca88:	e000ed88 	.word	0xe000ed88

0800ca8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca92:	f3ef 8305 	mrs	r3, IPSR
 800ca96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b0f      	cmp	r3, #15
 800ca9c:	d917      	bls.n	800cace <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca9e:	4a1a      	ldr	r2, [pc, #104]	@ (800cb08 <vPortValidateInterruptPriority+0x7c>)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4413      	add	r3, r2
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800caa8:	4b18      	ldr	r3, [pc, #96]	@ (800cb0c <vPortValidateInterruptPriority+0x80>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	7afa      	ldrb	r2, [r7, #11]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d20d      	bcs.n	800cace <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab6:	b672      	cpsid	i
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	b662      	cpsie	i
 800cac6:	607b      	str	r3, [r7, #4]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cace:	4b10      	ldr	r3, [pc, #64]	@ (800cb10 <vPortValidateInterruptPriority+0x84>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cad6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb14 <vPortValidateInterruptPriority+0x88>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d90d      	bls.n	800cafa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	b672      	cpsid	i
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	b662      	cpsie	i
 800caf2:	603b      	str	r3, [r7, #0]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <vPortValidateInterruptPriority+0x6a>
	}
 800cafa:	bf00      	nop
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	e000e3f0 	.word	0xe000e3f0
 800cb0c:	200084c0 	.word	0x200084c0
 800cb10:	e000ed0c 	.word	0xe000ed0c
 800cb14:	200084c4 	.word	0x200084c4

0800cb18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08a      	sub	sp, #40	@ 0x28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb24:	f7fe fd4e 	bl	800b5c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb28:	4b5d      	ldr	r3, [pc, #372]	@ (800cca0 <pvPortMalloc+0x188>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb30:	f000 f920 	bl	800cd74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb34:	4b5b      	ldr	r3, [pc, #364]	@ (800cca4 <pvPortMalloc+0x18c>)
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f040 8094 	bne.w	800cc6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d020      	beq.n	800cb8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800cb48:	2208      	movs	r2, #8
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d017      	beq.n	800cb8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f023 0307 	bic.w	r3, r3, #7
 800cb60:	3308      	adds	r3, #8
 800cb62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f003 0307 	and.w	r3, r3, #7
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00d      	beq.n	800cb8a <pvPortMalloc+0x72>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb72:	b672      	cpsid	i
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	b662      	cpsie	i
 800cb82:	617b      	str	r3, [r7, #20]
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop
 800cb88:	e7fd      	b.n	800cb86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d06c      	beq.n	800cc6a <pvPortMalloc+0x152>
 800cb90:	4b45      	ldr	r3, [pc, #276]	@ (800cca8 <pvPortMalloc+0x190>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d867      	bhi.n	800cc6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb9a:	4b44      	ldr	r3, [pc, #272]	@ (800ccac <pvPortMalloc+0x194>)
 800cb9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb9e:	4b43      	ldr	r3, [pc, #268]	@ (800ccac <pvPortMalloc+0x194>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cba4:	e004      	b.n	800cbb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800cba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d903      	bls.n	800cbc2 <pvPortMalloc+0xaa>
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1f1      	bne.n	800cba6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbc2:	4b37      	ldr	r3, [pc, #220]	@ (800cca0 <pvPortMalloc+0x188>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d04e      	beq.n	800cc6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	4413      	add	r3, r2
 800cbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	1ad2      	subs	r2, r2, r3
 800cbe6:	2308      	movs	r3, #8
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d922      	bls.n	800cc34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00d      	beq.n	800cc1c <pvPortMalloc+0x104>
	__asm volatile
 800cc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc04:	b672      	cpsid	i
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	b662      	cpsie	i
 800cc14:	613b      	str	r3, [r7, #16]
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	e7fd      	b.n	800cc18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	1ad2      	subs	r2, r2, r3
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc2e:	69b8      	ldr	r0, [r7, #24]
 800cc30:	f000 f902 	bl	800ce38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc34:	4b1c      	ldr	r3, [pc, #112]	@ (800cca8 <pvPortMalloc+0x190>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	4a1a      	ldr	r2, [pc, #104]	@ (800cca8 <pvPortMalloc+0x190>)
 800cc40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc42:	4b19      	ldr	r3, [pc, #100]	@ (800cca8 <pvPortMalloc+0x190>)
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	4b1a      	ldr	r3, [pc, #104]	@ (800ccb0 <pvPortMalloc+0x198>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d203      	bcs.n	800cc56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc4e:	4b16      	ldr	r3, [pc, #88]	@ (800cca8 <pvPortMalloc+0x190>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a17      	ldr	r2, [pc, #92]	@ (800ccb0 <pvPortMalloc+0x198>)
 800cc54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	4b12      	ldr	r3, [pc, #72]	@ (800cca4 <pvPortMalloc+0x18c>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc6a:	f7fe fcb9 	bl	800b5e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	f003 0307 	and.w	r3, r3, #7
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00d      	beq.n	800cc94 <pvPortMalloc+0x17c>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7c:	b672      	cpsid	i
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	b662      	cpsie	i
 800cc8c:	60fb      	str	r3, [r7, #12]
}
 800cc8e:	bf00      	nop
 800cc90:	bf00      	nop
 800cc92:	e7fd      	b.n	800cc90 <pvPortMalloc+0x178>
	return pvReturn;
 800cc94:	69fb      	ldr	r3, [r7, #28]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3728      	adds	r7, #40	@ 0x28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000c0d0 	.word	0x2000c0d0
 800cca4:	2000c0dc 	.word	0x2000c0dc
 800cca8:	2000c0d4 	.word	0x2000c0d4
 800ccac:	2000c0c8 	.word	0x2000c0c8
 800ccb0:	2000c0d8 	.word	0x2000c0d8

0800ccb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d04e      	beq.n	800cd64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccc6:	2308      	movs	r3, #8
 800ccc8:	425b      	negs	r3, r3
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	4413      	add	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	4b24      	ldr	r3, [pc, #144]	@ (800cd6c <vPortFree+0xb8>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4013      	ands	r3, r2
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10d      	bne.n	800ccfe <vPortFree+0x4a>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce6:	b672      	cpsid	i
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	b662      	cpsie	i
 800ccf6:	60fb      	str	r3, [r7, #12]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00d      	beq.n	800cd22 <vPortFree+0x6e>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	b672      	cpsid	i
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	b662      	cpsie	i
 800cd1a:	60bb      	str	r3, [r7, #8]
}
 800cd1c:	bf00      	nop
 800cd1e:	bf00      	nop
 800cd20:	e7fd      	b.n	800cd1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	4b11      	ldr	r3, [pc, #68]	@ (800cd6c <vPortFree+0xb8>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d019      	beq.n	800cd64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d115      	bne.n	800cd64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd6c <vPortFree+0xb8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	43db      	mvns	r3, r3
 800cd42:	401a      	ands	r2, r3
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd48:	f7fe fc3c 	bl	800b5c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	4b07      	ldr	r3, [pc, #28]	@ (800cd70 <vPortFree+0xbc>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4413      	add	r3, r2
 800cd56:	4a06      	ldr	r2, [pc, #24]	@ (800cd70 <vPortFree+0xbc>)
 800cd58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd5a:	6938      	ldr	r0, [r7, #16]
 800cd5c:	f000 f86c 	bl	800ce38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd60:	f7fe fc3e 	bl	800b5e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd64:	bf00      	nop
 800cd66:	3718      	adds	r7, #24
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	2000c0dc 	.word	0x2000c0dc
 800cd70:	2000c0d4 	.word	0x2000c0d4

0800cd74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd74:	b480      	push	{r7}
 800cd76:	b085      	sub	sp, #20
 800cd78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd80:	4b27      	ldr	r3, [pc, #156]	@ (800ce20 <prvHeapInit+0xac>)
 800cd82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f003 0307 	and.w	r3, r3, #7
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00c      	beq.n	800cda8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3307      	adds	r3, #7
 800cd92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f023 0307 	bic.w	r3, r3, #7
 800cd9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce20 <prvHeapInit+0xac>)
 800cda4:	4413      	add	r3, r2
 800cda6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdac:	4a1d      	ldr	r2, [pc, #116]	@ (800ce24 <prvHeapInit+0xb0>)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ce24 <prvHeapInit+0xb0>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdc0:	2208      	movs	r2, #8
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	1a9b      	subs	r3, r3, r2
 800cdc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 0307 	bic.w	r3, r3, #7
 800cdce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	4a15      	ldr	r2, [pc, #84]	@ (800ce28 <prvHeapInit+0xb4>)
 800cdd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdd6:	4b14      	ldr	r3, [pc, #80]	@ (800ce28 <prvHeapInit+0xb4>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2200      	movs	r2, #0
 800cddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdde:	4b12      	ldr	r3, [pc, #72]	@ (800ce28 <prvHeapInit+0xb4>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ce28 <prvHeapInit+0xb4>)
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	4a0a      	ldr	r2, [pc, #40]	@ (800ce2c <prvHeapInit+0xb8>)
 800ce02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4a09      	ldr	r2, [pc, #36]	@ (800ce30 <prvHeapInit+0xbc>)
 800ce0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce0c:	4b09      	ldr	r3, [pc, #36]	@ (800ce34 <prvHeapInit+0xc0>)
 800ce0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce12:	601a      	str	r2, [r3, #0]
}
 800ce14:	bf00      	nop
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	200084c8 	.word	0x200084c8
 800ce24:	2000c0c8 	.word	0x2000c0c8
 800ce28:	2000c0d0 	.word	0x2000c0d0
 800ce2c:	2000c0d8 	.word	0x2000c0d8
 800ce30:	2000c0d4 	.word	0x2000c0d4
 800ce34:	2000c0dc 	.word	0x2000c0dc

0800ce38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce40:	4b28      	ldr	r3, [pc, #160]	@ (800cee4 <prvInsertBlockIntoFreeList+0xac>)
 800ce42:	60fb      	str	r3, [r7, #12]
 800ce44:	e002      	b.n	800ce4c <prvInsertBlockIntoFreeList+0x14>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d8f7      	bhi.n	800ce46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	4413      	add	r3, r2
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d108      	bne.n	800ce7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	441a      	add	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	68ba      	ldr	r2, [r7, #8]
 800ce84:	441a      	add	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d118      	bne.n	800cec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	4b15      	ldr	r3, [pc, #84]	@ (800cee8 <prvInsertBlockIntoFreeList+0xb0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d00d      	beq.n	800ceb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	441a      	add	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	e008      	b.n	800cec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <prvInsertBlockIntoFreeList+0xb0>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	e003      	b.n	800cec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d002      	beq.n	800ced6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ced6:	bf00      	nop
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	2000c0c8 	.word	0x2000c0c8
 800cee8:	2000c0d0 	.word	0x2000c0d0

0800ceec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cef0:	2200      	movs	r2, #0
 800cef2:	4912      	ldr	r1, [pc, #72]	@ (800cf3c <MX_USB_DEVICE_Init+0x50>)
 800cef4:	4812      	ldr	r0, [pc, #72]	@ (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cef6:	f7fb fe9f 	bl	8008c38 <USBD_Init>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf00:	f7f4 f93e 	bl	8001180 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf04:	490f      	ldr	r1, [pc, #60]	@ (800cf44 <MX_USB_DEVICE_Init+0x58>)
 800cf06:	480e      	ldr	r0, [pc, #56]	@ (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf08:	f7fb fec6 	bl	8008c98 <USBD_RegisterClass>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf12:	f7f4 f935 	bl	8001180 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf16:	490c      	ldr	r1, [pc, #48]	@ (800cf48 <MX_USB_DEVICE_Init+0x5c>)
 800cf18:	4809      	ldr	r0, [pc, #36]	@ (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf1a:	f7fb fdfd 	bl	8008b18 <USBD_CDC_RegisterInterface>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf24:	f7f4 f92c 	bl	8001180 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf28:	4805      	ldr	r0, [pc, #20]	@ (800cf40 <MX_USB_DEVICE_Init+0x54>)
 800cf2a:	f7fb feeb 	bl	8008d04 <USBD_Start>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf34:	f7f4 f924 	bl	8001180 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf38:	bf00      	nop
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	200000b4 	.word	0x200000b4
 800cf40:	2000c0e0 	.word	0x2000c0e0
 800cf44:	2000001c 	.word	0x2000001c
 800cf48:	200000a0 	.word	0x200000a0

0800cf4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf50:	2200      	movs	r2, #0
 800cf52:	4905      	ldr	r1, [pc, #20]	@ (800cf68 <CDC_Init_FS+0x1c>)
 800cf54:	4805      	ldr	r0, [pc, #20]	@ (800cf6c <CDC_Init_FS+0x20>)
 800cf56:	f7fb fdf9 	bl	8008b4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf5a:	4905      	ldr	r1, [pc, #20]	@ (800cf70 <CDC_Init_FS+0x24>)
 800cf5c:	4803      	ldr	r0, [pc, #12]	@ (800cf6c <CDC_Init_FS+0x20>)
 800cf5e:	f7fb fe17 	bl	8008b90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	2000cbbc 	.word	0x2000cbbc
 800cf6c:	2000c0e0 	.word	0x2000c0e0
 800cf70:	2000c3bc 	.word	0x2000c3bc

0800cf74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cf78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
 800cf90:	4613      	mov	r3, r2
 800cf92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	2b23      	cmp	r3, #35	@ 0x23
 800cf98:	d84a      	bhi.n	800d030 <CDC_Control_FS+0xac>
 800cf9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa0 <CDC_Control_FS+0x1c>)
 800cf9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa0:	0800d031 	.word	0x0800d031
 800cfa4:	0800d031 	.word	0x0800d031
 800cfa8:	0800d031 	.word	0x0800d031
 800cfac:	0800d031 	.word	0x0800d031
 800cfb0:	0800d031 	.word	0x0800d031
 800cfb4:	0800d031 	.word	0x0800d031
 800cfb8:	0800d031 	.word	0x0800d031
 800cfbc:	0800d031 	.word	0x0800d031
 800cfc0:	0800d031 	.word	0x0800d031
 800cfc4:	0800d031 	.word	0x0800d031
 800cfc8:	0800d031 	.word	0x0800d031
 800cfcc:	0800d031 	.word	0x0800d031
 800cfd0:	0800d031 	.word	0x0800d031
 800cfd4:	0800d031 	.word	0x0800d031
 800cfd8:	0800d031 	.word	0x0800d031
 800cfdc:	0800d031 	.word	0x0800d031
 800cfe0:	0800d031 	.word	0x0800d031
 800cfe4:	0800d031 	.word	0x0800d031
 800cfe8:	0800d031 	.word	0x0800d031
 800cfec:	0800d031 	.word	0x0800d031
 800cff0:	0800d031 	.word	0x0800d031
 800cff4:	0800d031 	.word	0x0800d031
 800cff8:	0800d031 	.word	0x0800d031
 800cffc:	0800d031 	.word	0x0800d031
 800d000:	0800d031 	.word	0x0800d031
 800d004:	0800d031 	.word	0x0800d031
 800d008:	0800d031 	.word	0x0800d031
 800d00c:	0800d031 	.word	0x0800d031
 800d010:	0800d031 	.word	0x0800d031
 800d014:	0800d031 	.word	0x0800d031
 800d018:	0800d031 	.word	0x0800d031
 800d01c:	0800d031 	.word	0x0800d031
 800d020:	0800d031 	.word	0x0800d031
 800d024:	0800d031 	.word	0x0800d031
 800d028:	0800d031 	.word	0x0800d031
 800d02c:	0800d031 	.word	0x0800d031
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d030:	bf00      	nop
  }

  return (USBD_OK);
 800d032:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	4805      	ldr	r0, [pc, #20]	@ (800d064 <CDC_Receive_FS+0x24>)
 800d04e:	f7fb fd9f 	bl	8008b90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d052:	4804      	ldr	r0, [pc, #16]	@ (800d064 <CDC_Receive_FS+0x24>)
 800d054:	f7fb fdba 	bl	8008bcc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	2000c0e0 	.word	0x2000c0e0

0800d068 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d068:	b480      	push	{r7}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	4613      	mov	r3, r2
 800d074:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
	...

0800d08c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	2212      	movs	r2, #18
 800d09c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d09e:	4b03      	ldr	r3, [pc, #12]	@ (800d0ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr
 800d0ac:	200000d4 	.word	0x200000d4

0800d0b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6039      	str	r1, [r7, #0]
 800d0ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2204      	movs	r2, #4
 800d0c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0c2:	4b03      	ldr	r3, [pc, #12]	@ (800d0d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	200000f4 	.word	0x200000f4

0800d0d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	6039      	str	r1, [r7, #0]
 800d0de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d105      	bne.n	800d0f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	4907      	ldr	r1, [pc, #28]	@ (800d108 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0ea:	4808      	ldr	r0, [pc, #32]	@ (800d10c <USBD_FS_ProductStrDescriptor+0x38>)
 800d0ec:	f7fc ffe4 	bl	800a0b8 <USBD_GetString>
 800d0f0:	e004      	b.n	800d0fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4904      	ldr	r1, [pc, #16]	@ (800d108 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0f6:	4805      	ldr	r0, [pc, #20]	@ (800d10c <USBD_FS_ProductStrDescriptor+0x38>)
 800d0f8:	f7fc ffde 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0fc:	4b02      	ldr	r3, [pc, #8]	@ (800d108 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	2000d3bc 	.word	0x2000d3bc
 800d10c:	080180bc 	.word	0x080180bc

0800d110 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	6039      	str	r1, [r7, #0]
 800d11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	4904      	ldr	r1, [pc, #16]	@ (800d130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d120:	4804      	ldr	r0, [pc, #16]	@ (800d134 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d122:	f7fc ffc9 	bl	800a0b8 <USBD_GetString>
  return USBD_StrDesc;
 800d126:	4b02      	ldr	r3, [pc, #8]	@ (800d130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	2000d3bc 	.word	0x2000d3bc
 800d134:	080180d4 	.word	0x080180d4

0800d138 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	6039      	str	r1, [r7, #0]
 800d142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	221a      	movs	r2, #26
 800d148:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d14a:	f000 f855 	bl	800d1f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d14e:	4b02      	ldr	r3, [pc, #8]	@ (800d158 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d150:	4618      	mov	r0, r3
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	200000f8 	.word	0x200000f8

0800d15c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	4603      	mov	r3, r0
 800d164:	6039      	str	r1, [r7, #0]
 800d166:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d105      	bne.n	800d17a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	4907      	ldr	r1, [pc, #28]	@ (800d190 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d172:	4808      	ldr	r0, [pc, #32]	@ (800d194 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d174:	f7fc ffa0 	bl	800a0b8 <USBD_GetString>
 800d178:	e004      	b.n	800d184 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4904      	ldr	r1, [pc, #16]	@ (800d190 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d17e:	4805      	ldr	r0, [pc, #20]	@ (800d194 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d180:	f7fc ff9a 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d184:	4b02      	ldr	r3, [pc, #8]	@ (800d190 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	2000d3bc 	.word	0x2000d3bc
 800d194:	080180e8 	.word	0x080180e8

0800d198 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	6039      	str	r1, [r7, #0]
 800d1a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d105      	bne.n	800d1b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	4907      	ldr	r1, [pc, #28]	@ (800d1cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ae:	4808      	ldr	r0, [pc, #32]	@ (800d1d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1b0:	f7fc ff82 	bl	800a0b8 <USBD_GetString>
 800d1b4:	e004      	b.n	800d1c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	4904      	ldr	r1, [pc, #16]	@ (800d1cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ba:	4805      	ldr	r0, [pc, #20]	@ (800d1d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1bc:	f7fc ff7c 	bl	800a0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1c0:	4b02      	ldr	r3, [pc, #8]	@ (800d1cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	2000d3bc 	.word	0x2000d3bc
 800d1d0:	080180f4 	.word	0x080180f4

0800d1d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	6039      	str	r1, [r7, #0]
 800d1de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	220c      	movs	r2, #12
 800d1e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d1e6:	4b03      	ldr	r3, [pc, #12]	@ (800d1f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	200000e8 	.word	0x200000e8

0800d1f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d23c <Get_SerialNum+0x44>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d204:	4b0e      	ldr	r3, [pc, #56]	@ (800d240 <Get_SerialNum+0x48>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d20a:	4b0e      	ldr	r3, [pc, #56]	@ (800d244 <Get_SerialNum+0x4c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4413      	add	r3, r2
 800d216:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d21e:	2208      	movs	r2, #8
 800d220:	4909      	ldr	r1, [pc, #36]	@ (800d248 <Get_SerialNum+0x50>)
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 f814 	bl	800d250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d228:	2204      	movs	r2, #4
 800d22a:	4908      	ldr	r1, [pc, #32]	@ (800d24c <Get_SerialNum+0x54>)
 800d22c:	68b8      	ldr	r0, [r7, #8]
 800d22e:	f000 f80f 	bl	800d250 <IntToUnicode>
  }
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	1ff0f420 	.word	0x1ff0f420
 800d240:	1ff0f424 	.word	0x1ff0f424
 800d244:	1ff0f428 	.word	0x1ff0f428
 800d248:	200000fa 	.word	0x200000fa
 800d24c:	2000010a 	.word	0x2000010a

0800d250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	4613      	mov	r3, r2
 800d25c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
 800d266:	e027      	b.n	800d2b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	0f1b      	lsrs	r3, r3, #28
 800d26c:	2b09      	cmp	r3, #9
 800d26e:	d80b      	bhi.n	800d288 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	0f1b      	lsrs	r3, r3, #28
 800d274:	b2da      	uxtb	r2, r3
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4619      	mov	r1, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	440b      	add	r3, r1
 800d280:	3230      	adds	r2, #48	@ 0x30
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e00a      	b.n	800d29e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	0f1b      	lsrs	r3, r3, #28
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	005b      	lsls	r3, r3, #1
 800d292:	4619      	mov	r1, r3
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	440b      	add	r3, r1
 800d298:	3237      	adds	r2, #55	@ 0x37
 800d29a:	b2d2      	uxtb	r2, r2
 800d29c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
 800d2a6:	005b      	lsls	r3, r3, #1
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	75fb      	strb	r3, [r7, #23]
 800d2b8:	7dfa      	ldrb	r2, [r7, #23]
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d3d3      	bcc.n	800d268 <IntToUnicode+0x18>
  }
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	371c      	adds	r7, #28
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b0ae      	sub	sp, #184	@ 0xb8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d2dc:	2200      	movs	r2, #0
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	605a      	str	r2, [r3, #4]
 800d2e2:	609a      	str	r2, [r3, #8]
 800d2e4:	60da      	str	r2, [r3, #12]
 800d2e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2e8:	f107 0314 	add.w	r3, r7, #20
 800d2ec:	2290      	movs	r2, #144	@ 0x90
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f009 ff47 	bl	8017184 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d2fe:	d16e      	bne.n	800d3de <HAL_PCD_MspInit+0x10e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d300:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d304:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d306:	23c0      	movs	r3, #192	@ 0xc0
 800d308:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800d30a:	2302      	movs	r3, #2
 800d30c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800d30e:	2302      	movs	r3, #2
 800d310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800d312:	2301      	movs	r3, #1
 800d314:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800d316:	2301      	movs	r3, #1
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800d31a:	2300      	movs	r3, #0
 800d31c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800d31e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d326:	f107 0314 	add.w	r3, r7, #20
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7f7 fa1a 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 800d336:	f7f3 ff23 	bl	8001180 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d33a:	4b2b      	ldr	r3, [pc, #172]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33e:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d340:	f043 0301 	orr.w	r3, r3, #1
 800d344:	6313      	str	r3, [r2, #48]	@ 0x30
 800d346:	4b28      	ldr	r3, [pc, #160]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d34a:	f003 0301 	and.w	r3, r3, #1
 800d34e:	613b      	str	r3, [r7, #16]
 800d350:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d352:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d35a:	2302      	movs	r3, #2
 800d35c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d360:	2300      	movs	r3, #0
 800d362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d366:	2303      	movs	r3, #3
 800d368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d36c:	230a      	movs	r3, #10
 800d36e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d372:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d376:	4619      	mov	r1, r3
 800d378:	481c      	ldr	r0, [pc, #112]	@ (800d3ec <HAL_PCD_MspInit+0x11c>)
 800d37a:	f7f5 f89f 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d37e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d386:	2300      	movs	r3, #0
 800d388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38c:	2300      	movs	r3, #0
 800d38e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d392:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d396:	4619      	mov	r1, r3
 800d398:	4814      	ldr	r0, [pc, #80]	@ (800d3ec <HAL_PCD_MspInit+0x11c>)
 800d39a:	f7f5 f88f 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d39e:	4b12      	ldr	r3, [pc, #72]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a2:	4a11      	ldr	r2, [pc, #68]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a8:	6353      	str	r3, [r2, #52]	@ 0x34
 800d3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3b2:	60fb      	str	r3, [r7, #12]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ba:	4a0b      	ldr	r2, [pc, #44]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d3c0:	6453      	str	r3, [r2, #68]	@ 0x44
 800d3c2:	4b09      	ldr	r3, [pc, #36]	@ (800d3e8 <HAL_PCD_MspInit+0x118>)
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3ca:	60bb      	str	r3, [r7, #8]
 800d3cc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2105      	movs	r1, #5
 800d3d2:	2043      	movs	r0, #67	@ 0x43
 800d3d4:	f7f4 fc32 	bl	8001c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3d8:	2043      	movs	r0, #67	@ 0x43
 800d3da:	f7f4 fc4b 	bl	8001c74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3de:	bf00      	nop
 800d3e0:	37b8      	adds	r7, #184	@ 0xb8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	40023800 	.word	0x40023800
 800d3ec:	40020000 	.word	0x40020000

0800d3f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7fb fcc9 	bl	8008d9e <USBD_LL_SetupStage>
}
 800d40c:	bf00      	nop
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d426:	78fa      	ldrb	r2, [r7, #3]
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	4613      	mov	r3, r2
 800d42c:	00db      	lsls	r3, r3, #3
 800d42e:	4413      	add	r3, r2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	440b      	add	r3, r1
 800d434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	78fb      	ldrb	r3, [r7, #3]
 800d43c:	4619      	mov	r1, r3
 800d43e:	f7fb fd03 	bl	8008e48 <USBD_LL_DataOutStage>
}
 800d442:	bf00      	nop
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b082      	sub	sp, #8
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d45c:	78fa      	ldrb	r2, [r7, #3]
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	4613      	mov	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	440b      	add	r3, r1
 800d46a:	3320      	adds	r3, #32
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	4619      	mov	r1, r3
 800d472:	f7fb fd9c 	bl	8008fae <USBD_LL_DataInStage>
}
 800d476:	bf00      	nop
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b082      	sub	sp, #8
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fb fed6 	bl	800923e <USBD_LL_SOF>
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	79db      	ldrb	r3, [r3, #7]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73fb      	strb	r3, [r7, #15]
 800d4b2:	e008      	b.n	800d4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	79db      	ldrb	r3, [r3, #7]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d102      	bne.n	800d4c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	73fb      	strb	r3, [r7, #15]
 800d4c0:	e001      	b.n	800d4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d4c2:	f7f3 fe5d 	bl	8001180 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4cc:	7bfa      	ldrb	r2, [r7, #15]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fb fe70 	bl	80091b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fb fe18 	bl	8009112 <USBD_LL_Reset>
}
 800d4e2:	bf00      	nop
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fb fe6b 	bl	80091d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	6812      	ldr	r2, [r2, #0]
 800d50e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d512:	f043 0301 	orr.w	r3, r3, #1
 800d516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7adb      	ldrb	r3, [r3, #11]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d005      	beq.n	800d52c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d520:	4b04      	ldr	r3, [pc, #16]	@ (800d534 <HAL_PCD_SuspendCallback+0x48>)
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	4a03      	ldr	r2, [pc, #12]	@ (800d534 <HAL_PCD_SuspendCallback+0x48>)
 800d526:	f043 0306 	orr.w	r3, r3, #6
 800d52a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d52c:	bf00      	nop
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	e000ed00 	.word	0xe000ed00

0800d538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d546:	4618      	mov	r0, r3
 800d548:	f7fb fe61 	bl	800920e <USBD_LL_Resume>
}
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d566:	78fa      	ldrb	r2, [r7, #3]
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fb feb9 	bl	80092e2 <USBD_LL_IsoOUTIncomplete>
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d58a:	78fa      	ldrb	r2, [r7, #3]
 800d58c:	4611      	mov	r1, r2
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fb fe75 	bl	800927e <USBD_LL_IsoINIncomplete>
}
 800d594:	bf00      	nop
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fb fecb 	bl	8009346 <USBD_LL_DevConnected>
}
 800d5b0:	bf00      	nop
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fb fec8 	bl	800935c <USBD_LL_DevDisconnected>
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d13c      	bne.n	800d65e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d5e4:	4a20      	ldr	r2, [pc, #128]	@ (800d668 <USBD_LL_Init+0x94>)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800d668 <USBD_LL_Init+0x94>)
 800d5f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800d668 <USBD_LL_Init+0x94>)
 800d5f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d5fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d668 <USBD_LL_Init+0x94>)
 800d5fe:	2206      	movs	r2, #6
 800d600:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d602:	4b19      	ldr	r3, [pc, #100]	@ (800d668 <USBD_LL_Init+0x94>)
 800d604:	2202      	movs	r2, #2
 800d606:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d608:	4b17      	ldr	r3, [pc, #92]	@ (800d668 <USBD_LL_Init+0x94>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d60e:	4b16      	ldr	r3, [pc, #88]	@ (800d668 <USBD_LL_Init+0x94>)
 800d610:	2202      	movs	r2, #2
 800d612:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d614:	4b14      	ldr	r3, [pc, #80]	@ (800d668 <USBD_LL_Init+0x94>)
 800d616:	2200      	movs	r2, #0
 800d618:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d61a:	4b13      	ldr	r3, [pc, #76]	@ (800d668 <USBD_LL_Init+0x94>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d620:	4b11      	ldr	r3, [pc, #68]	@ (800d668 <USBD_LL_Init+0x94>)
 800d622:	2200      	movs	r2, #0
 800d624:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d626:	4b10      	ldr	r3, [pc, #64]	@ (800d668 <USBD_LL_Init+0x94>)
 800d628:	2200      	movs	r2, #0
 800d62a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d62c:	4b0e      	ldr	r3, [pc, #56]	@ (800d668 <USBD_LL_Init+0x94>)
 800d62e:	2200      	movs	r2, #0
 800d630:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d632:	480d      	ldr	r0, [pc, #52]	@ (800d668 <USBD_LL_Init+0x94>)
 800d634:	f7f5 f907 	bl	8002846 <HAL_PCD_Init>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d63e:	f7f3 fd9f 	bl	8001180 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d642:	2180      	movs	r1, #128	@ 0x80
 800d644:	4808      	ldr	r0, [pc, #32]	@ (800d668 <USBD_LL_Init+0x94>)
 800d646:	f7f6 fb52 	bl	8003cee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d64a:	2240      	movs	r2, #64	@ 0x40
 800d64c:	2100      	movs	r1, #0
 800d64e:	4806      	ldr	r0, [pc, #24]	@ (800d668 <USBD_LL_Init+0x94>)
 800d650:	f7f6 fb06 	bl	8003c60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d654:	2280      	movs	r2, #128	@ 0x80
 800d656:	2101      	movs	r1, #1
 800d658:	4803      	ldr	r0, [pc, #12]	@ (800d668 <USBD_LL_Init+0x94>)
 800d65a:	f7f6 fb01 	bl	8003c60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	2000d5bc 	.word	0x2000d5bc

0800d66c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d682:	4618      	mov	r0, r3
 800d684:	f7f5 f9f5 	bl	8002a72 <HAL_PCD_Start>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f97e 	bl	800d990 <USBD_Get_USB_Status>
 800d694:	4603      	mov	r3, r0
 800d696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d698:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	4608      	mov	r0, r1
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	70fb      	strb	r3, [r7, #3]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70bb      	strb	r3, [r7, #2]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6ca:	78bb      	ldrb	r3, [r7, #2]
 800d6cc:	883a      	ldrh	r2, [r7, #0]
 800d6ce:	78f9      	ldrb	r1, [r7, #3]
 800d6d0:	f7f5 fee3 	bl	800349a <HAL_PCD_EP_Open>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 f958 	bl	800d990 <USBD_Get_USB_Status>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d708:	78fa      	ldrb	r2, [r7, #3]
 800d70a:	4611      	mov	r1, r2
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7f5 ff2c 	bl	800356a <HAL_PCD_EP_Close>
 800d712:	4603      	mov	r3, r0
 800d714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 f939 	bl	800d990 <USBD_Get_USB_Status>
 800d71e:	4603      	mov	r3, r0
 800d720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d722:	7bbb      	ldrb	r3, [r7, #14]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d738:	2300      	movs	r3, #0
 800d73a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d746:	78fa      	ldrb	r2, [r7, #3]
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7f5 ffe4 	bl	8003718 <HAL_PCD_EP_SetStall>
 800d750:	4603      	mov	r3, r0
 800d752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f91a 	bl	800d990 <USBD_Get_USB_Status>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d760:	7bbb      	ldrb	r3, [r7, #14]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b084      	sub	sp, #16
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	460b      	mov	r3, r1
 800d774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d784:	78fa      	ldrb	r2, [r7, #3]
 800d786:	4611      	mov	r1, r2
 800d788:	4618      	mov	r0, r3
 800d78a:	f7f6 f828 	bl	80037de <HAL_PCD_EP_ClrStall>
 800d78e:	4603      	mov	r3, r0
 800d790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	4618      	mov	r0, r3
 800d796:	f000 f8fb 	bl	800d990 <USBD_Get_USB_Status>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d79e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	da0b      	bge.n	800d7dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7c4:	78fb      	ldrb	r3, [r7, #3]
 800d7c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7ca:	68f9      	ldr	r1, [r7, #12]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	4413      	add	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	3316      	adds	r3, #22
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	e00b      	b.n	800d7f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7e2:	68f9      	ldr	r1, [r7, #12]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d7f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d81a:	78fa      	ldrb	r2, [r7, #3]
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f7f5 fe17 	bl	8003452 <HAL_PCD_SetAddress>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 f8b0 	bl	800d990 <USBD_Get_USB_Status>
 800d830:	4603      	mov	r3, r0
 800d832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d834:	7bbb      	ldrb	r3, [r7, #14]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b086      	sub	sp, #24
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	603b      	str	r3, [r7, #0]
 800d84a:	460b      	mov	r3, r1
 800d84c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d852:	2300      	movs	r3, #0
 800d854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d85c:	7af9      	ldrb	r1, [r7, #11]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	f7f5 ff1f 	bl	80036a4 <HAL_PCD_EP_Transmit>
 800d866:	4603      	mov	r3, r0
 800d868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f88f 	bl	800d990 <USBD_Get_USB_Status>
 800d872:	4603      	mov	r3, r0
 800d874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d876:	7dbb      	ldrb	r3, [r7, #22]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	460b      	mov	r3, r1
 800d88e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d89e:	7af9      	ldrb	r1, [r7, #11]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	f7f5 feab 	bl	80035fe <HAL_PCD_EP_Receive>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 f86e 	bl	800d990 <USBD_Get_USB_Status>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7f5 fecb 	bl	8003674 <HAL_PCD_EP_GetRxCount>
 800d8de:	4603      	mov	r3, r0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <HAL_PCDEx_LPM_Callback+0x18>
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d01f      	beq.n	800d93e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d8fe:	e03b      	b.n	800d978 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7adb      	ldrb	r3, [r3, #11]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d007      	beq.n	800d918 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d908:	f000 f83c 	bl	800d984 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d90c:	4b1c      	ldr	r3, [pc, #112]	@ (800d980 <HAL_PCDEx_LPM_Callback+0x98>)
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	4a1b      	ldr	r2, [pc, #108]	@ (800d980 <HAL_PCDEx_LPM_Callback+0x98>)
 800d912:	f023 0306 	bic.w	r3, r3, #6
 800d916:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6812      	ldr	r2, [r2, #0]
 800d926:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d92a:	f023 0301 	bic.w	r3, r3, #1
 800d92e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d936:	4618      	mov	r0, r3
 800d938:	f7fb fc69 	bl	800920e <USBD_LL_Resume>
    break;
 800d93c:	e01c      	b.n	800d978 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	6812      	ldr	r2, [r2, #0]
 800d94c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d950:	f043 0301 	orr.w	r3, r3, #1
 800d954:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fb fc3a 	bl	80091d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	7adb      	ldrb	r3, [r3, #11]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d005      	beq.n	800d976 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d96a:	4b05      	ldr	r3, [pc, #20]	@ (800d980 <HAL_PCDEx_LPM_Callback+0x98>)
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	4a04      	ldr	r2, [pc, #16]	@ (800d980 <HAL_PCDEx_LPM_Callback+0x98>)
 800d970:	f043 0306 	orr.w	r3, r3, #6
 800d974:	6113      	str	r3, [r2, #16]
    break;
 800d976:	bf00      	nop
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	e000ed00 	.word	0xe000ed00

0800d984 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d988:	f7f3 fb80 	bl	800108c <SystemClock_Config>
}
 800d98c:	bf00      	nop
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d99e:	79fb      	ldrb	r3, [r7, #7]
 800d9a0:	2b03      	cmp	r3, #3
 800d9a2:	d817      	bhi.n	800d9d4 <USBD_Get_USB_Status+0x44>
 800d9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ac <USBD_Get_USB_Status+0x1c>)
 800d9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9aa:	bf00      	nop
 800d9ac:	0800d9bd 	.word	0x0800d9bd
 800d9b0:	0800d9c3 	.word	0x0800d9c3
 800d9b4:	0800d9c9 	.word	0x0800d9c9
 800d9b8:	0800d9cf 	.word	0x0800d9cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c0:	e00b      	b.n	800d9da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9c6:	e008      	b.n	800d9da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d9cc:	e005      	b.n	800d9da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d2:	e002      	b.n	800d9da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9d8:	bf00      	nop
  }
  return usb_status;
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <rcl_get_zero_initialized_node>:
 800d9e8:	4a03      	ldr	r2, [pc, #12]	@ (800d9f8 <rcl_get_zero_initialized_node+0x10>)
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	4770      	bx	lr
 800d9f8:	08018170 	.word	0x08018170

0800d9fc <rcl_node_init>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	b0a9      	sub	sp, #164	@ 0xa4
 800da02:	4604      	mov	r4, r0
 800da04:	460e      	mov	r6, r1
 800da06:	4615      	mov	r5, r2
 800da08:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800da0c:	a823      	add	r0, sp, #140	@ 0x8c
 800da0e:	461f      	mov	r7, r3
 800da10:	f004 fd6c 	bl	80124ec <rcl_guard_condition_get_default_options>
 800da14:	f1b8 0f00 	cmp.w	r8, #0
 800da18:	f000 80f3 	beq.w	800dc02 <rcl_node_init+0x206>
 800da1c:	4640      	mov	r0, r8
 800da1e:	f000 fb87 	bl	800e130 <rcutils_allocator_is_valid>
 800da22:	2d00      	cmp	r5, #0
 800da24:	bf18      	it	ne
 800da26:	2c00      	cmpne	r4, #0
 800da28:	f080 0001 	eor.w	r0, r0, #1
 800da2c:	bf0c      	ite	eq
 800da2e:	f04f 0c01 	moveq.w	ip, #1
 800da32:	f04f 0c00 	movne.w	ip, #0
 800da36:	2e00      	cmp	r6, #0
 800da38:	bf08      	it	eq
 800da3a:	f04c 0c01 	orreq.w	ip, ip, #1
 800da3e:	ea4c 0c00 	orr.w	ip, ip, r0
 800da42:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 800da46:	f040 80dc 	bne.w	800dc02 <rcl_node_init+0x206>
 800da4a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800da4e:	f1ba 0f00 	cmp.w	sl, #0
 800da52:	f040 80fc 	bne.w	800dc4e <rcl_node_init+0x252>
 800da56:	2f00      	cmp	r7, #0
 800da58:	f000 80d3 	beq.w	800dc02 <rcl_node_init+0x206>
 800da5c:	4638      	mov	r0, r7
 800da5e:	f004 fc53 	bl	8012308 <rcl_context_is_valid>
 800da62:	4683      	mov	fp, r0
 800da64:	2800      	cmp	r0, #0
 800da66:	f000 80d2 	beq.w	800dc0e <rcl_node_init+0x212>
 800da6a:	4652      	mov	r2, sl
 800da6c:	4630      	mov	r0, r6
 800da6e:	a922      	add	r1, sp, #136	@ 0x88
 800da70:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 800da74:	f000 fda2 	bl	800e5bc <rmw_validate_node_name>
 800da78:	4682      	mov	sl, r0
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f040 80c3 	bne.w	800dc06 <rcl_node_init+0x20a>
 800da80:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800da82:	2800      	cmp	r0, #0
 800da84:	f040 80f1 	bne.w	800dc6a <rcl_node_init+0x26e>
 800da88:	4628      	mov	r0, r5
 800da8a:	f7f2 fbe3 	bl	8000254 <strlen>
 800da8e:	2800      	cmp	r0, #0
 800da90:	f040 80c0 	bne.w	800dc14 <rcl_node_init+0x218>
 800da94:	4d79      	ldr	r5, [pc, #484]	@ (800dc7c <rcl_node_init+0x280>)
 800da96:	a922      	add	r1, sp, #136	@ 0x88
 800da98:	2200      	movs	r2, #0
 800da9a:	4628      	mov	r0, r5
 800da9c:	f000 fd70 	bl	800e580 <rmw_validate_namespace>
 800daa0:	4682      	mov	sl, r0
 800daa2:	2800      	cmp	r0, #0
 800daa4:	f040 80af 	bne.w	800dc06 <rcl_node_init+0x20a>
 800daa8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800daaa:	2800      	cmp	r0, #0
 800daac:	f040 80d5 	bne.w	800dc5a <rcl_node_init+0x25e>
 800dab0:	f8d8 3000 	ldr.w	r3, [r8]
 800dab4:	2078      	movs	r0, #120	@ 0x78
 800dab6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800daba:	4798      	blx	r3
 800dabc:	4682      	mov	sl, r0
 800dabe:	6060      	str	r0, [r4, #4]
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f000 80cf 	beq.w	800dc64 <rcl_node_init+0x268>
 800dac6:	2200      	movs	r2, #0
 800dac8:	2300      	movs	r3, #0
 800daca:	a808      	add	r0, sp, #32
 800dacc:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 800dad0:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 800dad4:	f000 f902 	bl	800dcdc <rcl_node_get_default_options>
 800dad8:	a908      	add	r1, sp, #32
 800dada:	4650      	mov	r0, sl
 800dadc:	2268      	movs	r2, #104	@ 0x68
 800dade:	f009 fc1a 	bl	8017316 <memcpy>
 800dae2:	6861      	ldr	r1, [r4, #4]
 800dae4:	4640      	mov	r0, r8
 800dae6:	6027      	str	r7, [r4, #0]
 800dae8:	f000 f906 	bl	800dcf8 <rcl_node_options_copy>
 800daec:	2800      	cmp	r0, #0
 800daee:	d158      	bne.n	800dba2 <rcl_node_init+0x1a6>
 800daf0:	4628      	mov	r0, r5
 800daf2:	f7f2 fbaf 	bl	8000254 <strlen>
 800daf6:	4428      	add	r0, r5
 800daf8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800dafc:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800db00:	2b2f      	cmp	r3, #47	@ 0x2f
 800db02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	bf0c      	ite	eq
 800db0a:	4b5d      	ldreq	r3, [pc, #372]	@ (800dc80 <rcl_node_init+0x284>)
 800db0c:	4b5d      	ldrne	r3, [pc, #372]	@ (800dc84 <rcl_node_init+0x288>)
 800db0e:	9302      	str	r3, [sp, #8]
 800db10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800db1a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800db1e:	f000 fb5f 	bl	800e1e0 <rcutils_format_string_limit>
 800db22:	6823      	ldr	r3, [r4, #0]
 800db24:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 800db28:	4631      	mov	r1, r6
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	462a      	mov	r2, r5
 800db2e:	6866      	ldr	r6, [r4, #4]
 800db30:	3028      	adds	r0, #40	@ 0x28
 800db32:	f000 fe39 	bl	800e7a8 <rmw_create_node>
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	66b0      	str	r0, [r6, #104]	@ 0x68
 800db3a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d032      	beq.n	800dba6 <rcl_node_init+0x1aa>
 800db40:	f000 fec2 	bl	800e8c8 <rmw_node_get_graph_guard_condition>
 800db44:	4682      	mov	sl, r0
 800db46:	b360      	cbz	r0, 800dba2 <rcl_node_init+0x1a6>
 800db48:	f8d8 3000 	ldr.w	r3, [r8]
 800db4c:	2008      	movs	r0, #8
 800db4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db52:	6866      	ldr	r6, [r4, #4]
 800db54:	4798      	blx	r3
 800db56:	6863      	ldr	r3, [r4, #4]
 800db58:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800db5a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800db5e:	f1bb 0f00 	cmp.w	fp, #0
 800db62:	d020      	beq.n	800dba6 <rcl_node_init+0x1aa>
 800db64:	a806      	add	r0, sp, #24
 800db66:	ae23      	add	r6, sp, #140	@ 0x8c
 800db68:	f004 fc34 	bl	80123d4 <rcl_get_zero_initialized_guard_condition>
 800db6c:	a806      	add	r0, sp, #24
 800db6e:	6863      	ldr	r3, [r4, #4]
 800db70:	46c4      	mov	ip, r8
 800db72:	c803      	ldmia	r0, {r0, r1}
 800db74:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800db78:	e88b 0003 	stmia.w	fp, {r0, r1}
 800db7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800db82:	f8dc 3000 	ldr.w	r3, [ip]
 800db86:	6033      	str	r3, [r6, #0]
 800db88:	ab28      	add	r3, sp, #160	@ 0xa0
 800db8a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800db8e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800db92:	4651      	mov	r1, sl
 800db94:	463a      	mov	r2, r7
 800db96:	4670      	mov	r0, lr
 800db98:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db9a:	f004 fc25 	bl	80123e8 <rcl_guard_condition_init_from_rmw>
 800db9e:	4682      	mov	sl, r0
 800dba0:	b328      	cbz	r0, 800dbee <rcl_node_init+0x1f2>
 800dba2:	6863      	ldr	r3, [r4, #4]
 800dba4:	b1f3      	cbz	r3, 800dbe4 <rcl_node_init+0x1e8>
 800dba6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800dba8:	b128      	cbz	r0, 800dbb6 <rcl_node_init+0x1ba>
 800dbaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbb2:	4798      	blx	r3
 800dbb4:	6863      	ldr	r3, [r4, #4]
 800dbb6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800dbb8:	b110      	cbz	r0, 800dbc0 <rcl_node_init+0x1c4>
 800dbba:	f000 fe07 	bl	800e7cc <rmw_destroy_node>
 800dbbe:	6863      	ldr	r3, [r4, #4]
 800dbc0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800dbc2:	b148      	cbz	r0, 800dbd8 <rcl_node_init+0x1dc>
 800dbc4:	f004 fc6c 	bl	80124a0 <rcl_guard_condition_fini>
 800dbc8:	6863      	ldr	r3, [r4, #4]
 800dbca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbce:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800dbd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbd4:	4798      	blx	r3
 800dbd6:	6863      	ldr	r3, [r4, #4]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbe2:	4798      	blx	r3
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	f04f 0a01 	mov.w	sl, #1
 800dbea:	e9c4 3300 	strd	r3, r3, [r4]
 800dbee:	f1b9 0f00 	cmp.w	r9, #0
 800dbf2:	d008      	beq.n	800dc06 <rcl_node_init+0x20a>
 800dbf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbfe:	4798      	blx	r3
 800dc00:	e001      	b.n	800dc06 <rcl_node_init+0x20a>
 800dc02:	f04f 0a0b 	mov.w	sl, #11
 800dc06:	4650      	mov	r0, sl
 800dc08:	b029      	add	sp, #164	@ 0xa4
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 800dc12:	e7f8      	b.n	800dc06 <rcl_node_init+0x20a>
 800dc14:	782b      	ldrb	r3, [r5, #0]
 800dc16:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc18:	f43f af3d 	beq.w	800da96 <rcl_node_init+0x9a>
 800dc1c:	9503      	str	r5, [sp, #12]
 800dc1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	4b18      	ldr	r3, [pc, #96]	@ (800dc88 <rcl_node_init+0x28c>)
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dc32:	f000 fad5 	bl	800e1e0 <rcutils_format_string_limit>
 800dc36:	4605      	mov	r5, r0
 800dc38:	b1e0      	cbz	r0, 800dc74 <rcl_node_init+0x278>
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	a922      	add	r1, sp, #136	@ 0x88
 800dc3e:	9222      	str	r2, [sp, #136]	@ 0x88
 800dc40:	f000 fc9e 	bl	800e580 <rmw_validate_namespace>
 800dc44:	4682      	mov	sl, r0
 800dc46:	2800      	cmp	r0, #0
 800dc48:	d1d4      	bne.n	800dbf4 <rcl_node_init+0x1f8>
 800dc4a:	46d9      	mov	r9, fp
 800dc4c:	e72c      	b.n	800daa8 <rcl_node_init+0xac>
 800dc4e:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 800dc52:	4650      	mov	r0, sl
 800dc54:	b029      	add	sp, #164	@ 0xa4
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 800dc5e:	f000 fca1 	bl	800e5a4 <rmw_namespace_validation_result_string>
 800dc62:	e7c4      	b.n	800dbee <rcl_node_init+0x1f2>
 800dc64:	f04f 0a0a 	mov.w	sl, #10
 800dc68:	e7c1      	b.n	800dbee <rcl_node_init+0x1f2>
 800dc6a:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 800dc6e:	f000 fcf9 	bl	800e664 <rmw_node_name_validation_result_string>
 800dc72:	e7c8      	b.n	800dc06 <rcl_node_init+0x20a>
 800dc74:	f04f 0a0a 	mov.w	sl, #10
 800dc78:	e7c5      	b.n	800dc06 <rcl_node_init+0x20a>
 800dc7a:	bf00      	nop
 800dc7c:	08018158 	.word	0x08018158
 800dc80:	08018160 	.word	0x08018160
 800dc84:	08018168 	.word	0x08018168
 800dc88:	0801815c 	.word	0x0801815c

0800dc8c <rcl_node_is_valid>:
 800dc8c:	b130      	cbz	r0, 800dc9c <rcl_node_is_valid+0x10>
 800dc8e:	6843      	ldr	r3, [r0, #4]
 800dc90:	b123      	cbz	r3, 800dc9c <rcl_node_is_valid+0x10>
 800dc92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc94:	b113      	cbz	r3, 800dc9c <rcl_node_is_valid+0x10>
 800dc96:	6800      	ldr	r0, [r0, #0]
 800dc98:	f004 bb36 	b.w	8012308 <rcl_context_is_valid>
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	4770      	bx	lr

0800dca0 <rcl_node_get_name>:
 800dca0:	b120      	cbz	r0, 800dcac <rcl_node_get_name+0xc>
 800dca2:	6840      	ldr	r0, [r0, #4]
 800dca4:	b110      	cbz	r0, 800dcac <rcl_node_get_name+0xc>
 800dca6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dca8:	b100      	cbz	r0, 800dcac <rcl_node_get_name+0xc>
 800dcaa:	6880      	ldr	r0, [r0, #8]
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop

0800dcb0 <rcl_node_get_namespace>:
 800dcb0:	b120      	cbz	r0, 800dcbc <rcl_node_get_namespace+0xc>
 800dcb2:	6840      	ldr	r0, [r0, #4]
 800dcb4:	b110      	cbz	r0, 800dcbc <rcl_node_get_namespace+0xc>
 800dcb6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dcb8:	b100      	cbz	r0, 800dcbc <rcl_node_get_namespace+0xc>
 800dcba:	68c0      	ldr	r0, [r0, #12]
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop

0800dcc0 <rcl_node_get_options>:
 800dcc0:	b128      	cbz	r0, 800dcce <rcl_node_get_options+0xe>
 800dcc2:	6840      	ldr	r0, [r0, #4]
 800dcc4:	b118      	cbz	r0, 800dcce <rcl_node_get_options+0xe>
 800dcc6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bf08      	it	eq
 800dccc:	2000      	moveq	r0, #0
 800dcce:	4770      	bx	lr

0800dcd0 <rcl_node_get_rmw_handle>:
 800dcd0:	b110      	cbz	r0, 800dcd8 <rcl_node_get_rmw_handle+0x8>
 800dcd2:	6840      	ldr	r0, [r0, #4]
 800dcd4:	b100      	cbz	r0, 800dcd8 <rcl_node_get_rmw_handle+0x8>
 800dcd6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop

0800dcdc <rcl_node_get_default_options>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	4604      	mov	r4, r0
 800dce0:	2268      	movs	r2, #104	@ 0x68
 800dce2:	2100      	movs	r1, #0
 800dce4:	f009 fa4e 	bl	8017184 <memset>
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fa13 	bl	800e114 <rcutils_get_default_allocator>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	7523      	strb	r3, [r4, #20]
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	bf00      	nop

0800dcf8 <rcl_node_options_copy>:
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	bf18      	it	ne
 800dcfc:	4288      	cmpne	r0, r1
 800dcfe:	d01b      	beq.n	800dd38 <rcl_node_options_copy+0x40>
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	fab1 f681 	clz	r6, r1
 800dd06:	460c      	mov	r4, r1
 800dd08:	0976      	lsrs	r6, r6, #5
 800dd0a:	b199      	cbz	r1, 800dd34 <rcl_node_options_copy+0x3c>
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	8a87      	ldrh	r7, [r0, #20]
 800dd10:	4684      	mov	ip, r0
 800dd12:	468e      	mov	lr, r1
 800dd14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	2250      	movs	r2, #80	@ 0x50
 800dd1e:	f10c 0118 	add.w	r1, ip, #24
 800dd22:	f104 0018 	add.w	r0, r4, #24
 800dd26:	f8ce 3000 	str.w	r3, [lr]
 800dd2a:	82a7      	strh	r7, [r4, #20]
 800dd2c:	f009 faf3 	bl	8017316 <memcpy>
 800dd30:	4630      	mov	r0, r6
 800dd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd34:	200b      	movs	r0, #11
 800dd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd38:	200b      	movs	r0, #11
 800dd3a:	4770      	bx	lr

0800dd3c <rcl_get_zero_initialized_publisher>:
 800dd3c:	4b01      	ldr	r3, [pc, #4]	@ (800dd44 <rcl_get_zero_initialized_publisher+0x8>)
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	08018178 	.word	0x08018178

0800dd48 <rcl_publisher_init>:
 800dd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd4c:	b088      	sub	sp, #32
 800dd4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800dd50:	2e00      	cmp	r6, #0
 800dd52:	d06b      	beq.n	800de2c <rcl_publisher_init+0xe4>
 800dd54:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800dd58:	4605      	mov	r5, r0
 800dd5a:	460f      	mov	r7, r1
 800dd5c:	4690      	mov	r8, r2
 800dd5e:	4650      	mov	r0, sl
 800dd60:	4699      	mov	r9, r3
 800dd62:	f000 f9e5 	bl	800e130 <rcutils_allocator_is_valid>
 800dd66:	f080 0401 	eor.w	r4, r0, #1
 800dd6a:	b2e4      	uxtb	r4, r4
 800dd6c:	2c00      	cmp	r4, #0
 800dd6e:	d15d      	bne.n	800de2c <rcl_publisher_init+0xe4>
 800dd70:	2d00      	cmp	r5, #0
 800dd72:	d05b      	beq.n	800de2c <rcl_publisher_init+0xe4>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b123      	cbz	r3, 800dd82 <rcl_publisher_init+0x3a>
 800dd78:	2464      	movs	r4, #100	@ 0x64
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	b008      	add	sp, #32
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	4638      	mov	r0, r7
 800dd84:	f7ff ff82 	bl	800dc8c <rcl_node_is_valid>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d054      	beq.n	800de36 <rcl_publisher_init+0xee>
 800dd8c:	f1b8 0f00 	cmp.w	r8, #0
 800dd90:	d04c      	beq.n	800de2c <rcl_publisher_init+0xe4>
 800dd92:	fab9 f389 	clz	r3, r9
 800dd96:	095b      	lsrs	r3, r3, #5
 800dd98:	f1b9 0f00 	cmp.w	r9, #0
 800dd9c:	d046      	beq.n	800de2c <rcl_publisher_init+0xe4>
 800dd9e:	aa07      	add	r2, sp, #28
 800dda0:	9307      	str	r3, [sp, #28]
 800dda2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800dda6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ddaa:	9205      	str	r2, [sp, #20]
 800ddac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ddb0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ddbc:	f004 fdda 	bl	8012974 <rcl_node_resolve_name>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d14f      	bne.n	800de64 <rcl_publisher_init+0x11c>
 800ddc4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ddc6:	20c8      	movs	r0, #200	@ 0xc8
 800ddc8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ddca:	4798      	blx	r3
 800ddcc:	6028      	str	r0, [r5, #0]
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d050      	beq.n	800de74 <rcl_publisher_init+0x12c>
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f7ff ff7c 	bl	800dcd0 <rcl_node_get_rmw_handle>
 800ddd8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800dddc:	4641      	mov	r1, r8
 800ddde:	9a07      	ldr	r2, [sp, #28]
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	4633      	mov	r3, r6
 800dde4:	682c      	ldr	r4, [r5, #0]
 800dde6:	f000 fdd9 	bl	800e99c <rmw_create_publisher>
 800ddea:	682b      	ldr	r3, [r5, #0]
 800ddec:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800ddf0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ddf4:	b370      	cbz	r0, 800de54 <rcl_publisher_init+0x10c>
 800ddf6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ddfa:	f000 feb3 	bl	800eb64 <rmw_publisher_get_actual_qos>
 800ddfe:	682b      	ldr	r3, [r5, #0]
 800de00:	4604      	mov	r4, r0
 800de02:	b9d0      	cbnz	r0, 800de3a <rcl_publisher_init+0xf2>
 800de04:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800de08:	4631      	mov	r1, r6
 800de0a:	4618      	mov	r0, r3
 800de0c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800de10:	2270      	movs	r2, #112	@ 0x70
 800de12:	f009 fa80 	bl	8017316 <memcpy>
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800de1c:	9807      	ldr	r0, [sp, #28]
 800de1e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800de20:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de22:	4798      	blx	r3
 800de24:	4620      	mov	r0, r4
 800de26:	b008      	add	sp, #32
 800de28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de2c:	240b      	movs	r4, #11
 800de2e:	4620      	mov	r0, r4
 800de30:	b008      	add	sp, #32
 800de32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de36:	24c8      	movs	r4, #200	@ 0xc8
 800de38:	e79f      	b.n	800dd7a <rcl_publisher_init+0x32>
 800de3a:	b1cb      	cbz	r3, 800de70 <rcl_publisher_init+0x128>
 800de3c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800de40:	b142      	cbz	r2, 800de54 <rcl_publisher_init+0x10c>
 800de42:	4638      	mov	r0, r7
 800de44:	f7ff ff44 	bl	800dcd0 <rcl_node_get_rmw_handle>
 800de48:	682b      	ldr	r3, [r5, #0]
 800de4a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800de4e:	f000 fe9d 	bl	800eb8c <rmw_destroy_publisher>
 800de52:	682b      	ldr	r3, [r5, #0]
 800de54:	4618      	mov	r0, r3
 800de56:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800de58:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de5a:	2401      	movs	r4, #1
 800de5c:	4790      	blx	r2
 800de5e:	2300      	movs	r3, #0
 800de60:	602b      	str	r3, [r5, #0]
 800de62:	e7db      	b.n	800de1c <rcl_publisher_init+0xd4>
 800de64:	2867      	cmp	r0, #103	@ 0x67
 800de66:	d007      	beq.n	800de78 <rcl_publisher_init+0x130>
 800de68:	2869      	cmp	r0, #105	@ 0x69
 800de6a:	d005      	beq.n	800de78 <rcl_publisher_init+0x130>
 800de6c:	280a      	cmp	r0, #10
 800de6e:	d001      	beq.n	800de74 <rcl_publisher_init+0x12c>
 800de70:	2401      	movs	r4, #1
 800de72:	e7d3      	b.n	800de1c <rcl_publisher_init+0xd4>
 800de74:	240a      	movs	r4, #10
 800de76:	e7d1      	b.n	800de1c <rcl_publisher_init+0xd4>
 800de78:	2467      	movs	r4, #103	@ 0x67
 800de7a:	e7cf      	b.n	800de1c <rcl_publisher_init+0xd4>

0800de7c <rcl_publisher_get_default_options>:
 800de7c:	b570      	push	{r4, r5, r6, lr}
 800de7e:	4d14      	ldr	r5, [pc, #80]	@ (800ded0 <rcl_publisher_get_default_options+0x54>)
 800de80:	b088      	sub	sp, #32
 800de82:	4604      	mov	r4, r0
 800de84:	2250      	movs	r2, #80	@ 0x50
 800de86:	4913      	ldr	r1, [pc, #76]	@ (800ded4 <rcl_publisher_get_default_options+0x58>)
 800de88:	4628      	mov	r0, r5
 800de8a:	f009 fa44 	bl	8017316 <memcpy>
 800de8e:	a802      	add	r0, sp, #8
 800de90:	f000 f940 	bl	800e114 <rcutils_get_default_allocator>
 800de94:	f10d 0c08 	add.w	ip, sp, #8
 800de98:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800de9c:	466e      	mov	r6, sp
 800de9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dea2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dea6:	f8dc 3000 	ldr.w	r3, [ip]
 800deaa:	4630      	mov	r0, r6
 800deac:	f8ce 3000 	str.w	r3, [lr]
 800deb0:	f000 fb0e 	bl	800e4d0 <rmw_get_default_publisher_options>
 800deb4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800deb8:	2270      	movs	r2, #112	@ 0x70
 800deba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800debe:	e883 0003 	stmia.w	r3, {r0, r1}
 800dec2:	4629      	mov	r1, r5
 800dec4:	4620      	mov	r0, r4
 800dec6:	f009 fa26 	bl	8017316 <memcpy>
 800deca:	4620      	mov	r0, r4
 800decc:	b008      	add	sp, #32
 800dece:	bd70      	pop	{r4, r5, r6, pc}
 800ded0:	2000daa0 	.word	0x2000daa0
 800ded4:	08018180 	.word	0x08018180

0800ded8 <rcl_publish>:
 800ded8:	b1f8      	cbz	r0, 800df1a <rcl_publish+0x42>
 800deda:	6803      	ldr	r3, [r0, #0]
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	4604      	mov	r4, r0
 800dee0:	b1b3      	cbz	r3, 800df10 <rcl_publish+0x38>
 800dee2:	4616      	mov	r6, r2
 800dee4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800dee8:	b192      	cbz	r2, 800df10 <rcl_publish+0x38>
 800deea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800deee:	460d      	mov	r5, r1
 800def0:	f004 fa0a 	bl	8012308 <rcl_context_is_valid>
 800def4:	b160      	cbz	r0, 800df10 <rcl_publish+0x38>
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800defc:	b140      	cbz	r0, 800df10 <rcl_publish+0x38>
 800defe:	b155      	cbz	r5, 800df16 <rcl_publish+0x3e>
 800df00:	4632      	mov	r2, r6
 800df02:	4629      	mov	r1, r5
 800df04:	f000 fcea 	bl	800e8dc <rmw_publish>
 800df08:	3800      	subs	r0, #0
 800df0a:	bf18      	it	ne
 800df0c:	2001      	movne	r0, #1
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df14:	bd70      	pop	{r4, r5, r6, pc}
 800df16:	200b      	movs	r0, #11
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df1e:	4770      	bx	lr

0800df20 <rclc_support_init>:
 800df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	b3bb      	cbz	r3, 800df98 <rclc_support_init+0x78>
 800df28:	4606      	mov	r6, r0
 800df2a:	b3a8      	cbz	r0, 800df98 <rclc_support_init+0x78>
 800df2c:	461c      	mov	r4, r3
 800df2e:	460f      	mov	r7, r1
 800df30:	4690      	mov	r8, r2
 800df32:	f004 fbfd 	bl	8012730 <rcl_get_zero_initialized_init_options>
 800df36:	f104 050c 	add.w	r5, r4, #12
 800df3a:	9005      	str	r0, [sp, #20]
 800df3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df40:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df44:	a805      	add	r0, sp, #20
 800df46:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800df4a:	f004 fbf3 	bl	8012734 <rcl_init_options_init>
 800df4e:	4605      	mov	r5, r0
 800df50:	b9e0      	cbnz	r0, 800df8c <rclc_support_init+0x6c>
 800df52:	ad02      	add	r5, sp, #8
 800df54:	4628      	mov	r0, r5
 800df56:	f004 f9cd 	bl	80122f4 <rcl_get_zero_initialized_context>
 800df5a:	4633      	mov	r3, r6
 800df5c:	aa05      	add	r2, sp, #20
 800df5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df62:	e886 0003 	stmia.w	r6, {r0, r1}
 800df66:	4641      	mov	r1, r8
 800df68:	4638      	mov	r0, r7
 800df6a:	f004 fadb 	bl	8012524 <rcl_init>
 800df6e:	4605      	mov	r5, r0
 800df70:	b9b8      	cbnz	r0, 800dfa2 <rclc_support_init+0x82>
 800df72:	4622      	mov	r2, r4
 800df74:	f106 010c 	add.w	r1, r6, #12
 800df78:	2003      	movs	r0, #3
 800df7a:	60b4      	str	r4, [r6, #8]
 800df7c:	f004 fee8 	bl	8012d50 <rcl_clock_init>
 800df80:	4605      	mov	r5, r0
 800df82:	b970      	cbnz	r0, 800dfa2 <rclc_support_init+0x82>
 800df84:	a805      	add	r0, sp, #20
 800df86:	f004 fc3b 	bl	8012800 <rcl_init_options_fini>
 800df8a:	b108      	cbz	r0, 800df90 <rclc_support_init+0x70>
 800df8c:	f000 f90c 	bl	800e1a8 <rcutils_reset_error>
 800df90:	4628      	mov	r0, r5
 800df92:	b006      	add	sp, #24
 800df94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df98:	250b      	movs	r5, #11
 800df9a:	4628      	mov	r0, r5
 800df9c:	b006      	add	sp, #24
 800df9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa2:	f000 f901 	bl	800e1a8 <rcutils_reset_error>
 800dfa6:	a805      	add	r0, sp, #20
 800dfa8:	f004 fc2a 	bl	8012800 <rcl_init_options_fini>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d0ef      	beq.n	800df90 <rclc_support_init+0x70>
 800dfb0:	e7ec      	b.n	800df8c <rclc_support_init+0x6c>
 800dfb2:	bf00      	nop

0800dfb4 <rclc_node_init_default>:
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bf18      	it	ne
 800dfb8:	2a00      	cmpne	r2, #0
 800dfba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfbe:	4616      	mov	r6, r2
 800dfc0:	bf0c      	ite	eq
 800dfc2:	2201      	moveq	r2, #1
 800dfc4:	2200      	movne	r2, #0
 800dfc6:	b0a1      	sub	sp, #132	@ 0x84
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	bf08      	it	eq
 800dfcc:	f042 0201 	orreq.w	r2, r2, #1
 800dfd0:	bb22      	cbnz	r2, 800e01c <rclc_node_init_default+0x68>
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	b310      	cbz	r0, 800e01c <rclc_node_init_default+0x68>
 800dfd6:	f10d 0810 	add.w	r8, sp, #16
 800dfda:	461f      	mov	r7, r3
 800dfdc:	460d      	mov	r5, r1
 800dfde:	f10d 0918 	add.w	r9, sp, #24
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	f7ff fd00 	bl	800d9e8 <rcl_get_zero_initialized_node>
 800dfe8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dfec:	e884 0003 	stmia.w	r4, {r0, r1}
 800dff0:	4648      	mov	r0, r9
 800dff2:	f7ff fe73 	bl	800dcdc <rcl_node_get_default_options>
 800dff6:	4640      	mov	r0, r8
 800dff8:	f7ff fcf6 	bl	800d9e8 <rcl_get_zero_initialized_node>
 800dffc:	f8cd 9000 	str.w	r9, [sp]
 800e000:	463b      	mov	r3, r7
 800e002:	4632      	mov	r2, r6
 800e004:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e008:	e884 0003 	stmia.w	r4, {r0, r1}
 800e00c:	4629      	mov	r1, r5
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff fcf4 	bl	800d9fc <rcl_node_init>
 800e014:	b930      	cbnz	r0, 800e024 <rclc_node_init_default+0x70>
 800e016:	b021      	add	sp, #132	@ 0x84
 800e018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e01c:	200b      	movs	r0, #11
 800e01e:	b021      	add	sp, #132	@ 0x84
 800e020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e024:	9003      	str	r0, [sp, #12]
 800e026:	f000 f8bf 	bl	800e1a8 <rcutils_reset_error>
 800e02a:	f000 f8bd 	bl	800e1a8 <rcutils_reset_error>
 800e02e:	9803      	ldr	r0, [sp, #12]
 800e030:	b021      	add	sp, #132	@ 0x84
 800e032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e036:	bf00      	nop

0800e038 <rclc_publisher_init_default>:
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bf18      	it	ne
 800e03c:	2a00      	cmpne	r2, #0
 800e03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e042:	4616      	mov	r6, r2
 800e044:	bf0c      	ite	eq
 800e046:	2201      	moveq	r2, #1
 800e048:	2200      	movne	r2, #0
 800e04a:	b0a0      	sub	sp, #128	@ 0x80
 800e04c:	2900      	cmp	r1, #0
 800e04e:	bf08      	it	eq
 800e050:	f042 0201 	orreq.w	r2, r2, #1
 800e054:	bb1a      	cbnz	r2, 800e09e <rclc_publisher_init_default+0x66>
 800e056:	4604      	mov	r4, r0
 800e058:	b308      	cbz	r0, 800e09e <rclc_publisher_init_default+0x66>
 800e05a:	f10d 0810 	add.w	r8, sp, #16
 800e05e:	461f      	mov	r7, r3
 800e060:	460d      	mov	r5, r1
 800e062:	f7ff fe6b 	bl	800dd3c <rcl_get_zero_initialized_publisher>
 800e066:	6020      	str	r0, [r4, #0]
 800e068:	4640      	mov	r0, r8
 800e06a:	f7ff ff07 	bl	800de7c <rcl_publisher_get_default_options>
 800e06e:	2250      	movs	r2, #80	@ 0x50
 800e070:	490d      	ldr	r1, [pc, #52]	@ (800e0a8 <rclc_publisher_init_default+0x70>)
 800e072:	4640      	mov	r0, r8
 800e074:	f009 f94f 	bl	8017316 <memcpy>
 800e078:	463b      	mov	r3, r7
 800e07a:	4632      	mov	r2, r6
 800e07c:	4629      	mov	r1, r5
 800e07e:	4620      	mov	r0, r4
 800e080:	f8cd 8000 	str.w	r8, [sp]
 800e084:	f7ff fe60 	bl	800dd48 <rcl_publisher_init>
 800e088:	b910      	cbnz	r0, 800e090 <rclc_publisher_init_default+0x58>
 800e08a:	b020      	add	sp, #128	@ 0x80
 800e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e090:	9003      	str	r0, [sp, #12]
 800e092:	f000 f889 	bl	800e1a8 <rcutils_reset_error>
 800e096:	9803      	ldr	r0, [sp, #12]
 800e098:	b020      	add	sp, #128	@ 0x80
 800e09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09e:	200b      	movs	r0, #11
 800e0a0:	b020      	add	sp, #128	@ 0x80
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a6:	bf00      	nop
 800e0a8:	080181d0 	.word	0x080181d0

0800e0ac <__default_zero_allocate>:
 800e0ac:	f008 bbaa 	b.w	8016804 <calloc>

0800e0b0 <__default_reallocate>:
 800e0b0:	f008 bd48 	b.w	8016b44 <realloc>

0800e0b4 <__default_deallocate>:
 800e0b4:	f008 bc24 	b.w	8016900 <free>

0800e0b8 <__default_allocate>:
 800e0b8:	f008 bc1a 	b.w	80168f0 <malloc>

0800e0bc <rcutils_get_zero_initialized_allocator>:
 800e0bc:	b510      	push	{r4, lr}
 800e0be:	4c05      	ldr	r4, [pc, #20]	@ (800e0d4 <rcutils_get_zero_initialized_allocator+0x18>)
 800e0c0:	4686      	mov	lr, r0
 800e0c2:	4684      	mov	ip, r0
 800e0c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0ca:	6823      	ldr	r3, [r4, #0]
 800e0cc:	4670      	mov	r0, lr
 800e0ce:	f8cc 3000 	str.w	r3, [ip]
 800e0d2:	bd10      	pop	{r4, pc}
 800e0d4:	08018220 	.word	0x08018220

0800e0d8 <rcutils_set_default_allocator>:
 800e0d8:	b1a8      	cbz	r0, 800e106 <rcutils_set_default_allocator+0x2e>
 800e0da:	6802      	ldr	r2, [r0, #0]
 800e0dc:	b1a2      	cbz	r2, 800e108 <rcutils_set_default_allocator+0x30>
 800e0de:	6841      	ldr	r1, [r0, #4]
 800e0e0:	b1a1      	cbz	r1, 800e10c <rcutils_set_default_allocator+0x34>
 800e0e2:	b410      	push	{r4}
 800e0e4:	68c4      	ldr	r4, [r0, #12]
 800e0e6:	b164      	cbz	r4, 800e102 <rcutils_set_default_allocator+0x2a>
 800e0e8:	6880      	ldr	r0, [r0, #8]
 800e0ea:	b138      	cbz	r0, 800e0fc <rcutils_set_default_allocator+0x24>
 800e0ec:	4b08      	ldr	r3, [pc, #32]	@ (800e110 <rcutils_set_default_allocator+0x38>)
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	4620      	mov	r0, r4
 800e104:	e7fa      	b.n	800e0fc <rcutils_set_default_allocator+0x24>
 800e106:	4770      	bx	lr
 800e108:	4610      	mov	r0, r2
 800e10a:	4770      	bx	lr
 800e10c:	4608      	mov	r0, r1
 800e10e:	4770      	bx	lr
 800e110:	20000114 	.word	0x20000114

0800e114 <rcutils_get_default_allocator>:
 800e114:	b510      	push	{r4, lr}
 800e116:	4c05      	ldr	r4, [pc, #20]	@ (800e12c <rcutils_get_default_allocator+0x18>)
 800e118:	4686      	mov	lr, r0
 800e11a:	4684      	mov	ip, r0
 800e11c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e11e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	4670      	mov	r0, lr
 800e126:	f8cc 3000 	str.w	r3, [ip]
 800e12a:	bd10      	pop	{r4, pc}
 800e12c:	20000114 	.word	0x20000114

0800e130 <rcutils_allocator_is_valid>:
 800e130:	b158      	cbz	r0, 800e14a <rcutils_allocator_is_valid+0x1a>
 800e132:	6803      	ldr	r3, [r0, #0]
 800e134:	b143      	cbz	r3, 800e148 <rcutils_allocator_is_valid+0x18>
 800e136:	6843      	ldr	r3, [r0, #4]
 800e138:	b133      	cbz	r3, 800e148 <rcutils_allocator_is_valid+0x18>
 800e13a:	68c3      	ldr	r3, [r0, #12]
 800e13c:	b123      	cbz	r3, 800e148 <rcutils_allocator_is_valid+0x18>
 800e13e:	6880      	ldr	r0, [r0, #8]
 800e140:	3800      	subs	r0, #0
 800e142:	bf18      	it	ne
 800e144:	2001      	movne	r0, #1
 800e146:	4770      	bx	lr
 800e148:	4618      	mov	r0, r3
 800e14a:	4770      	bx	lr

0800e14c <rcutils_get_env>:
 800e14c:	b168      	cbz	r0, 800e16a <rcutils_get_env+0x1e>
 800e14e:	b510      	push	{r4, lr}
 800e150:	460c      	mov	r4, r1
 800e152:	b129      	cbz	r1, 800e160 <rcutils_get_env+0x14>
 800e154:	f008 fb84 	bl	8016860 <getenv>
 800e158:	b120      	cbz	r0, 800e164 <rcutils_get_env+0x18>
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	2000      	movs	r0, #0
 800e15e:	bd10      	pop	{r4, pc}
 800e160:	4803      	ldr	r0, [pc, #12]	@ (800e170 <rcutils_get_env+0x24>)
 800e162:	bd10      	pop	{r4, pc}
 800e164:	4b03      	ldr	r3, [pc, #12]	@ (800e174 <rcutils_get_env+0x28>)
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	bd10      	pop	{r4, pc}
 800e16a:	4803      	ldr	r0, [pc, #12]	@ (800e178 <rcutils_get_env+0x2c>)
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	08018250 	.word	0x08018250
 800e174:	08018618 	.word	0x08018618
 800e178:	08018234 	.word	0x08018234

0800e17c <rcutils_get_error_string>:
 800e17c:	4b06      	ldr	r3, [pc, #24]	@ (800e198 <rcutils_get_error_string+0x1c>)
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	b13b      	cbz	r3, 800e192 <rcutils_get_error_string+0x16>
 800e182:	4b06      	ldr	r3, [pc, #24]	@ (800e19c <rcutils_get_error_string+0x20>)
 800e184:	781a      	ldrb	r2, [r3, #0]
 800e186:	b90a      	cbnz	r2, 800e18c <rcutils_get_error_string+0x10>
 800e188:	2201      	movs	r2, #1
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	4b04      	ldr	r3, [pc, #16]	@ (800e1a0 <rcutils_get_error_string+0x24>)
 800e18e:	7818      	ldrb	r0, [r3, #0]
 800e190:	4770      	bx	lr
 800e192:	4b04      	ldr	r3, [pc, #16]	@ (800e1a4 <rcutils_get_error_string+0x28>)
 800e194:	7818      	ldrb	r0, [r3, #0]
 800e196:	4770      	bx	lr
 800e198:	2000db10 	.word	0x2000db10
 800e19c:	2000db29 	.word	0x2000db29
 800e1a0:	2000db28 	.word	0x2000db28
 800e1a4:	0801826c 	.word	0x0801826c

0800e1a8 <rcutils_reset_error>:
 800e1a8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e1c8 <rcutils_reset_error+0x20>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	4a08      	ldr	r2, [pc, #32]	@ (800e1d0 <rcutils_reset_error+0x28>)
 800e1b0:	4808      	ldr	r0, [pc, #32]	@ (800e1d4 <rcutils_reset_error+0x2c>)
 800e1b2:	8013      	strh	r3, [r2, #0]
 800e1b4:	4908      	ldr	r1, [pc, #32]	@ (800e1d8 <rcutils_reset_error+0x30>)
 800e1b6:	7003      	strb	r3, [r0, #0]
 800e1b8:	700b      	strb	r3, [r1, #0]
 800e1ba:	ed82 7b02 	vstr	d7, [r2, #8]
 800e1be:	4a07      	ldr	r2, [pc, #28]	@ (800e1dc <rcutils_reset_error+0x34>)
 800e1c0:	7013      	strb	r3, [r2, #0]
 800e1c2:	4770      	bx	lr
 800e1c4:	f3af 8000 	nop.w
	...
 800e1d0:	2000db18 	.word	0x2000db18
 800e1d4:	2000db29 	.word	0x2000db29
 800e1d8:	2000db28 	.word	0x2000db28
 800e1dc:	2000db10 	.word	0x2000db10

0800e1e0 <rcutils_format_string_limit>:
 800e1e0:	b40f      	push	{r0, r1, r2, r3}
 800e1e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e4:	b083      	sub	sp, #12
 800e1e6:	ac08      	add	r4, sp, #32
 800e1e8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e1ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e1ee:	b326      	cbz	r6, 800e23a <rcutils_format_string_limit+0x5a>
 800e1f0:	a808      	add	r0, sp, #32
 800e1f2:	f7ff ff9d 	bl	800e130 <rcutils_allocator_is_valid>
 800e1f6:	b300      	cbz	r0, 800e23a <rcutils_format_string_limit+0x5a>
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e1fc:	4632      	mov	r2, r6
 800e1fe:	4608      	mov	r0, r1
 800e200:	e9cd 3300 	strd	r3, r3, [sp]
 800e204:	f000 f906 	bl	800e414 <rcutils_vsnprintf>
 800e208:	1c43      	adds	r3, r0, #1
 800e20a:	4605      	mov	r5, r0
 800e20c:	d015      	beq.n	800e23a <rcutils_format_string_limit+0x5a>
 800e20e:	1c47      	adds	r7, r0, #1
 800e210:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e212:	429f      	cmp	r7, r3
 800e214:	d901      	bls.n	800e21a <rcutils_format_string_limit+0x3a>
 800e216:	1e5d      	subs	r5, r3, #1
 800e218:	461f      	mov	r7, r3
 800e21a:	9b08      	ldr	r3, [sp, #32]
 800e21c:	4638      	mov	r0, r7
 800e21e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e220:	4798      	blx	r3
 800e222:	4604      	mov	r4, r0
 800e224:	b148      	cbz	r0, 800e23a <rcutils_format_string_limit+0x5a>
 800e226:	4632      	mov	r2, r6
 800e228:	4639      	mov	r1, r7
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	f000 f8f2 	bl	800e414 <rcutils_vsnprintf>
 800e230:	2800      	cmp	r0, #0
 800e232:	db09      	blt.n	800e248 <rcutils_format_string_limit+0x68>
 800e234:	2300      	movs	r3, #0
 800e236:	5563      	strb	r3, [r4, r5]
 800e238:	e000      	b.n	800e23c <rcutils_format_string_limit+0x5c>
 800e23a:	2400      	movs	r4, #0
 800e23c:	4620      	mov	r0, r4
 800e23e:	b003      	add	sp, #12
 800e240:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e244:	b004      	add	sp, #16
 800e246:	4770      	bx	lr
 800e248:	4620      	mov	r0, r4
 800e24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e24c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e24e:	2400      	movs	r4, #0
 800e250:	4798      	blx	r3
 800e252:	e7f3      	b.n	800e23c <rcutils_format_string_limit+0x5c>

0800e254 <rcutils_repl_str>:
 800e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e258:	ed2d 8b02 	vpush	{d8}
 800e25c:	b087      	sub	sp, #28
 800e25e:	2600      	movs	r6, #0
 800e260:	4680      	mov	r8, r0
 800e262:	468a      	mov	sl, r1
 800e264:	9000      	str	r0, [sp, #0]
 800e266:	4608      	mov	r0, r1
 800e268:	ee08 2a10 	vmov	s16, r2
 800e26c:	4699      	mov	r9, r3
 800e26e:	2510      	movs	r5, #16
 800e270:	f7f1 fff0 	bl	8000254 <strlen>
 800e274:	4637      	mov	r7, r6
 800e276:	46b3      	mov	fp, r6
 800e278:	9001      	str	r0, [sp, #4]
 800e27a:	e01e      	b.n	800e2ba <rcutils_repl_str+0x66>
 800e27c:	f10b 0b01 	add.w	fp, fp, #1
 800e280:	9b01      	ldr	r3, [sp, #4]
 800e282:	455e      	cmp	r6, fp
 800e284:	eb04 0803 	add.w	r8, r4, r3
 800e288:	d211      	bcs.n	800e2ae <rcutils_repl_str+0x5a>
 800e28a:	442e      	add	r6, r5
 800e28c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e290:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e298:	00b1      	lsls	r1, r6, #2
 800e29a:	4798      	blx	r3
 800e29c:	2800      	cmp	r0, #0
 800e29e:	f000 8088 	beq.w	800e3b2 <rcutils_repl_str+0x15e>
 800e2a2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	bf28      	it	cs
 800e2aa:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e2ae:	9a00      	ldr	r2, [sp, #0]
 800e2b0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800e2b4:	1aa4      	subs	r4, r4, r2
 800e2b6:	f843 4c04 	str.w	r4, [r3, #-4]
 800e2ba:	4651      	mov	r1, sl
 800e2bc:	4640      	mov	r0, r8
 800e2be:	f008 ff88 	bl	80171d2 <strstr>
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	2c00      	cmp	r4, #0
 800e2c8:	d1d8      	bne.n	800e27c <rcutils_repl_str+0x28>
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	f7f1 ffc2 	bl	8000254 <strlen>
 800e2d0:	9b00      	ldr	r3, [sp, #0]
 800e2d2:	eba8 0803 	sub.w	r8, r8, r3
 800e2d6:	eb08 0400 	add.w	r4, r8, r0
 800e2da:	9402      	str	r4, [sp, #8]
 800e2dc:	f1bb 0f00 	cmp.w	fp, #0
 800e2e0:	d045      	beq.n	800e36e <rcutils_repl_str+0x11a>
 800e2e2:	ee18 0a10 	vmov	r0, s16
 800e2e6:	f7f1 ffb5 	bl	8000254 <strlen>
 800e2ea:	9a01      	ldr	r2, [sp, #4]
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e2f2:	1a82      	subs	r2, r0, r2
 800e2f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e2f8:	fb0b 4202 	mla	r2, fp, r2, r4
 800e2fc:	1c50      	adds	r0, r2, #1
 800e2fe:	9205      	str	r2, [sp, #20]
 800e300:	4798      	blx	r3
 800e302:	4682      	mov	sl, r0
 800e304:	2800      	cmp	r0, #0
 800e306:	d054      	beq.n	800e3b2 <rcutils_repl_str+0x15e>
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	463d      	mov	r5, r7
 800e30c:	9900      	ldr	r1, [sp, #0]
 800e30e:	2401      	movs	r4, #1
 800e310:	f009 f801 	bl	8017316 <memcpy>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800e31a:	eb0a 0803 	add.w	r8, sl, r3
 800e31e:	ee18 7a10 	vmov	r7, s16
 800e322:	f8dd a000 	ldr.w	sl, [sp]
 800e326:	f8cd 9000 	str.w	r9, [sp]
 800e32a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e32e:	4632      	mov	r2, r6
 800e330:	4639      	mov	r1, r7
 800e332:	4640      	mov	r0, r8
 800e334:	44b0      	add	r8, r6
 800e336:	f008 ffee 	bl	8017316 <memcpy>
 800e33a:	f855 2b04 	ldr.w	r2, [r5], #4
 800e33e:	45a3      	cmp	fp, r4
 800e340:	444a      	add	r2, r9
 800e342:	eb0a 0102 	add.w	r1, sl, r2
 800e346:	d02a      	beq.n	800e39e <rcutils_repl_str+0x14a>
 800e348:	6828      	ldr	r0, [r5, #0]
 800e34a:	1a82      	subs	r2, r0, r2
 800e34c:	4640      	mov	r0, r8
 800e34e:	4490      	add	r8, r2
 800e350:	f008 ffe1 	bl	8017316 <memcpy>
 800e354:	1c62      	adds	r2, r4, #1
 800e356:	45a3      	cmp	fp, r4
 800e358:	4614      	mov	r4, r2
 800e35a:	d8e8      	bhi.n	800e32e <rcutils_repl_str+0xda>
 800e35c:	f8dd 9000 	ldr.w	r9, [sp]
 800e360:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e364:	2300      	movs	r3, #0
 800e366:	9a05      	ldr	r2, [sp, #20]
 800e368:	f80a 3002 	strb.w	r3, [sl, r2]
 800e36c:	e00b      	b.n	800e386 <rcutils_repl_str+0x132>
 800e36e:	4620      	mov	r0, r4
 800e370:	f8d9 3000 	ldr.w	r3, [r9]
 800e374:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e378:	3001      	adds	r0, #1
 800e37a:	4798      	blx	r3
 800e37c:	4682      	mov	sl, r0
 800e37e:	b110      	cbz	r0, 800e386 <rcutils_repl_str+0x132>
 800e380:	9900      	ldr	r1, [sp, #0]
 800e382:	f008 ffc0 	bl	8017306 <strcpy>
 800e386:	4638      	mov	r0, r7
 800e388:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e38c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e390:	4798      	blx	r3
 800e392:	4650      	mov	r0, sl
 800e394:	b007      	add	sp, #28
 800e396:	ecbd 8b02 	vpop	{d8}
 800e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	9b02      	ldr	r3, [sp, #8]
 800e3a0:	4640      	mov	r0, r8
 800e3a2:	f8dd 9000 	ldr.w	r9, [sp]
 800e3a6:	1a9a      	subs	r2, r3, r2
 800e3a8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e3ac:	f008 ffb3 	bl	8017316 <memcpy>
 800e3b0:	e7d8      	b.n	800e364 <rcutils_repl_str+0x110>
 800e3b2:	f04f 0a00 	mov.w	sl, #0
 800e3b6:	e7e6      	b.n	800e386 <rcutils_repl_str+0x132>

0800e3b8 <rcutils_snprintf>:
 800e3b8:	b40c      	push	{r2, r3}
 800e3ba:	b530      	push	{r4, r5, lr}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	ab06      	add	r3, sp, #24
 800e3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3c4:	9301      	str	r3, [sp, #4]
 800e3c6:	b1e2      	cbz	r2, 800e402 <rcutils_snprintf+0x4a>
 800e3c8:	fab0 f480 	clz	r4, r0
 800e3cc:	fab1 f581 	clz	r5, r1
 800e3d0:	ea50 0c01 	orrs.w	ip, r0, r1
 800e3d4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e3d8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e3dc:	d008      	beq.n	800e3f0 <rcutils_snprintf+0x38>
 800e3de:	b984      	cbnz	r4, 800e402 <rcutils_snprintf+0x4a>
 800e3e0:	b97d      	cbnz	r5, 800e402 <rcutils_snprintf+0x4a>
 800e3e2:	f008 fe2d 	bl	8017040 <vsniprintf>
 800e3e6:	b003      	add	sp, #12
 800e3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3ec:	b002      	add	sp, #8
 800e3ee:	4770      	bx	lr
 800e3f0:	4661      	mov	r1, ip
 800e3f2:	4660      	mov	r0, ip
 800e3f4:	f008 fe24 	bl	8017040 <vsniprintf>
 800e3f8:	b003      	add	sp, #12
 800e3fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3fe:	b002      	add	sp, #8
 800e400:	4770      	bx	lr
 800e402:	f008 ff53 	bl	80172ac <__errno>
 800e406:	2216      	movs	r2, #22
 800e408:	4603      	mov	r3, r0
 800e40a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	e7e9      	b.n	800e3e6 <rcutils_snprintf+0x2e>
 800e412:	bf00      	nop

0800e414 <rcutils_vsnprintf>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	b1b2      	cbz	r2, 800e446 <rcutils_vsnprintf+0x32>
 800e418:	fab0 f480 	clz	r4, r0
 800e41c:	fab1 f581 	clz	r5, r1
 800e420:	ea50 0c01 	orrs.w	ip, r0, r1
 800e424:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e428:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e42c:	d005      	beq.n	800e43a <rcutils_vsnprintf+0x26>
 800e42e:	b954      	cbnz	r4, 800e446 <rcutils_vsnprintf+0x32>
 800e430:	b94d      	cbnz	r5, 800e446 <rcutils_vsnprintf+0x32>
 800e432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e436:	f008 be03 	b.w	8017040 <vsniprintf>
 800e43a:	4661      	mov	r1, ip
 800e43c:	4660      	mov	r0, ip
 800e43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e442:	f008 bdfd 	b.w	8017040 <vsniprintf>
 800e446:	f008 ff31 	bl	80172ac <__errno>
 800e44a:	2316      	movs	r3, #22
 800e44c:	6003      	str	r3, [r0, #0]
 800e44e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e452:	bd70      	pop	{r4, r5, r6, pc}

0800e454 <rcutils_strdup>:
 800e454:	b084      	sub	sp, #16
 800e456:	b570      	push	{r4, r5, r6, lr}
 800e458:	b082      	sub	sp, #8
 800e45a:	4605      	mov	r5, r0
 800e45c:	ac07      	add	r4, sp, #28
 800e45e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e462:	b1b0      	cbz	r0, 800e492 <rcutils_strdup+0x3e>
 800e464:	f7f1 fef6 	bl	8000254 <strlen>
 800e468:	1c42      	adds	r2, r0, #1
 800e46a:	9b07      	ldr	r3, [sp, #28]
 800e46c:	4606      	mov	r6, r0
 800e46e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e470:	4610      	mov	r0, r2
 800e472:	9201      	str	r2, [sp, #4]
 800e474:	4798      	blx	r3
 800e476:	4604      	mov	r4, r0
 800e478:	b128      	cbz	r0, 800e486 <rcutils_strdup+0x32>
 800e47a:	9a01      	ldr	r2, [sp, #4]
 800e47c:	4629      	mov	r1, r5
 800e47e:	f008 ff4a 	bl	8017316 <memcpy>
 800e482:	2300      	movs	r3, #0
 800e484:	55a3      	strb	r3, [r4, r6]
 800e486:	4620      	mov	r0, r4
 800e488:	b002      	add	sp, #8
 800e48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e48e:	b004      	add	sp, #16
 800e490:	4770      	bx	lr
 800e492:	4604      	mov	r4, r0
 800e494:	e7f7      	b.n	800e486 <rcutils_strdup+0x32>
 800e496:	bf00      	nop

0800e498 <rcutils_strndup>:
 800e498:	b082      	sub	sp, #8
 800e49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49c:	ac06      	add	r4, sp, #24
 800e49e:	4605      	mov	r5, r0
 800e4a0:	e884 000c 	stmia.w	r4, {r2, r3}
 800e4a4:	b188      	cbz	r0, 800e4ca <rcutils_strndup+0x32>
 800e4a6:	1c4f      	adds	r7, r1, #1
 800e4a8:	460e      	mov	r6, r1
 800e4aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	4790      	blx	r2
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	b128      	cbz	r0, 800e4c0 <rcutils_strndup+0x28>
 800e4b4:	463a      	mov	r2, r7
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	f008 ff2d 	bl	8017316 <memcpy>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	55a3      	strb	r3, [r4, r6]
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4c6:	b002      	add	sp, #8
 800e4c8:	4770      	bx	lr
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	e7f8      	b.n	800e4c0 <rcutils_strndup+0x28>
 800e4ce:	bf00      	nop

0800e4d0 <rmw_get_default_publisher_options>:
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	6002      	str	r2, [r0, #0]
 800e4d4:	7102      	strb	r2, [r0, #4]
 800e4d6:	4770      	bx	lr

0800e4d8 <rmw_validate_namespace_with_size>:
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d043      	beq.n	800e564 <rmw_validate_namespace_with_size+0x8c>
 800e4dc:	b570      	push	{r4, r5, r6, lr}
 800e4de:	4614      	mov	r4, r2
 800e4e0:	b0c2      	sub	sp, #264	@ 0x108
 800e4e2:	b32a      	cbz	r2, 800e530 <rmw_validate_namespace_with_size+0x58>
 800e4e4:	2901      	cmp	r1, #1
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	461e      	mov	r6, r3
 800e4ea:	d102      	bne.n	800e4f2 <rmw_validate_namespace_with_size+0x1a>
 800e4ec:	7803      	ldrb	r3, [r0, #0]
 800e4ee:	2b2f      	cmp	r3, #47	@ 0x2f
 800e4f0:	d012      	beq.n	800e518 <rmw_validate_namespace_with_size+0x40>
 800e4f2:	aa01      	add	r2, sp, #4
 800e4f4:	4669      	mov	r1, sp
 800e4f6:	f004 ff0b 	bl	8013310 <rmw_validate_full_topic_name>
 800e4fa:	b980      	cbnz	r0, 800e51e <rmw_validate_namespace_with_size+0x46>
 800e4fc:	9a00      	ldr	r2, [sp, #0]
 800e4fe:	b14a      	cbz	r2, 800e514 <rmw_validate_namespace_with_size+0x3c>
 800e500:	2a07      	cmp	r2, #7
 800e502:	d007      	beq.n	800e514 <rmw_validate_namespace_with_size+0x3c>
 800e504:	1e53      	subs	r3, r2, #1
 800e506:	2b05      	cmp	r3, #5
 800e508:	d82e      	bhi.n	800e568 <rmw_validate_namespace_with_size+0x90>
 800e50a:	e8df f003 	tbb	[pc, r3]
 800e50e:	1f1c      	.short	0x1f1c
 800e510:	14282522 	.word	0x14282522
 800e514:	2df5      	cmp	r5, #245	@ 0xf5
 800e516:	d804      	bhi.n	800e522 <rmw_validate_namespace_with_size+0x4a>
 800e518:	2300      	movs	r3, #0
 800e51a:	4618      	mov	r0, r3
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	b042      	add	sp, #264	@ 0x108
 800e520:	bd70      	pop	{r4, r5, r6, pc}
 800e522:	2307      	movs	r3, #7
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	2e00      	cmp	r6, #0
 800e528:	d0f9      	beq.n	800e51e <rmw_validate_namespace_with_size+0x46>
 800e52a:	23f4      	movs	r3, #244	@ 0xf4
 800e52c:	6033      	str	r3, [r6, #0]
 800e52e:	e7f6      	b.n	800e51e <rmw_validate_namespace_with_size+0x46>
 800e530:	200b      	movs	r0, #11
 800e532:	b042      	add	sp, #264	@ 0x108
 800e534:	bd70      	pop	{r4, r5, r6, pc}
 800e536:	2306      	movs	r3, #6
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	2e00      	cmp	r6, #0
 800e53c:	d0ef      	beq.n	800e51e <rmw_validate_namespace_with_size+0x46>
 800e53e:	9b01      	ldr	r3, [sp, #4]
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	b042      	add	sp, #264	@ 0x108
 800e544:	bd70      	pop	{r4, r5, r6, pc}
 800e546:	2301      	movs	r3, #1
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	e7f6      	b.n	800e53a <rmw_validate_namespace_with_size+0x62>
 800e54c:	2302      	movs	r3, #2
 800e54e:	6023      	str	r3, [r4, #0]
 800e550:	e7f3      	b.n	800e53a <rmw_validate_namespace_with_size+0x62>
 800e552:	2303      	movs	r3, #3
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	e7f0      	b.n	800e53a <rmw_validate_namespace_with_size+0x62>
 800e558:	2304      	movs	r3, #4
 800e55a:	6023      	str	r3, [r4, #0]
 800e55c:	e7ed      	b.n	800e53a <rmw_validate_namespace_with_size+0x62>
 800e55e:	2305      	movs	r3, #5
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	e7ea      	b.n	800e53a <rmw_validate_namespace_with_size+0x62>
 800e564:	200b      	movs	r0, #11
 800e566:	4770      	bx	lr
 800e568:	4613      	mov	r3, r2
 800e56a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e56e:	4a03      	ldr	r2, [pc, #12]	@ (800e57c <rmw_validate_namespace_with_size+0xa4>)
 800e570:	a802      	add	r0, sp, #8
 800e572:	f7ff ff21 	bl	800e3b8 <rcutils_snprintf>
 800e576:	2001      	movs	r0, #1
 800e578:	e7d1      	b.n	800e51e <rmw_validate_namespace_with_size+0x46>
 800e57a:	bf00      	nop
 800e57c:	08018270 	.word	0x08018270

0800e580 <rmw_validate_namespace>:
 800e580:	b168      	cbz	r0, 800e59e <rmw_validate_namespace+0x1e>
 800e582:	b570      	push	{r4, r5, r6, lr}
 800e584:	460d      	mov	r5, r1
 800e586:	4616      	mov	r6, r2
 800e588:	4604      	mov	r4, r0
 800e58a:	f7f1 fe63 	bl	8000254 <strlen>
 800e58e:	4633      	mov	r3, r6
 800e590:	4601      	mov	r1, r0
 800e592:	462a      	mov	r2, r5
 800e594:	4620      	mov	r0, r4
 800e596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e59a:	f7ff bf9d 	b.w	800e4d8 <rmw_validate_namespace_with_size>
 800e59e:	200b      	movs	r0, #11
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop

0800e5a4 <rmw_namespace_validation_result_string>:
 800e5a4:	2807      	cmp	r0, #7
 800e5a6:	d803      	bhi.n	800e5b0 <rmw_namespace_validation_result_string+0xc>
 800e5a8:	4b02      	ldr	r3, [pc, #8]	@ (800e5b4 <rmw_namespace_validation_result_string+0x10>)
 800e5aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e5ae:	4770      	bx	lr
 800e5b0:	4801      	ldr	r0, [pc, #4]	@ (800e5b8 <rmw_namespace_validation_result_string+0x14>)
 800e5b2:	4770      	bx	lr
 800e5b4:	08018468 	.word	0x08018468
 800e5b8:	080182c0 	.word	0x080182c0

0800e5bc <rmw_validate_node_name>:
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d042      	beq.n	800e646 <rmw_validate_node_name+0x8a>
 800e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c4:	460d      	mov	r5, r1
 800e5c6:	2900      	cmp	r1, #0
 800e5c8:	d03f      	beq.n	800e64a <rmw_validate_node_name+0x8e>
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	4616      	mov	r6, r2
 800e5ce:	f7f1 fe41 	bl	8000254 <strlen>
 800e5d2:	b310      	cbz	r0, 800e61a <rmw_validate_node_name+0x5e>
 800e5d4:	1e63      	subs	r3, r4, #1
 800e5d6:	f1c4 0101 	rsb	r1, r4, #1
 800e5da:	eb03 0800 	add.w	r8, r3, r0
 800e5de:	18cf      	adds	r7, r1, r3
 800e5e0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e5e4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e5e8:	f02e 0c20 	bic.w	ip, lr, #32
 800e5ec:	2a09      	cmp	r2, #9
 800e5ee:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e5f2:	d905      	bls.n	800e600 <rmw_validate_node_name+0x44>
 800e5f4:	f1bc 0f19 	cmp.w	ip, #25
 800e5f8:	d902      	bls.n	800e600 <rmw_validate_node_name+0x44>
 800e5fa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e5fe:	d114      	bne.n	800e62a <rmw_validate_node_name+0x6e>
 800e600:	4598      	cmp	r8, r3
 800e602:	d1ec      	bne.n	800e5de <rmw_validate_node_name+0x22>
 800e604:	7822      	ldrb	r2, [r4, #0]
 800e606:	4b16      	ldr	r3, [pc, #88]	@ (800e660 <rmw_validate_node_name+0xa4>)
 800e608:	5cd3      	ldrb	r3, [r2, r3]
 800e60a:	f013 0304 	ands.w	r3, r3, #4
 800e60e:	d113      	bne.n	800e638 <rmw_validate_node_name+0x7c>
 800e610:	28ff      	cmp	r0, #255	@ 0xff
 800e612:	d81c      	bhi.n	800e64e <rmw_validate_node_name+0x92>
 800e614:	4618      	mov	r0, r3
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	e00c      	b.n	800e634 <rmw_validate_node_name+0x78>
 800e61a:	2301      	movs	r3, #1
 800e61c:	602b      	str	r3, [r5, #0]
 800e61e:	b17e      	cbz	r6, 800e640 <rmw_validate_node_name+0x84>
 800e620:	2300      	movs	r3, #0
 800e622:	4618      	mov	r0, r3
 800e624:	6033      	str	r3, [r6, #0]
 800e626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62a:	2302      	movs	r3, #2
 800e62c:	602b      	str	r3, [r5, #0]
 800e62e:	b13e      	cbz	r6, 800e640 <rmw_validate_node_name+0x84>
 800e630:	2000      	movs	r0, #0
 800e632:	6037      	str	r7, [r6, #0]
 800e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e638:	2303      	movs	r3, #3
 800e63a:	602b      	str	r3, [r5, #0]
 800e63c:	2e00      	cmp	r6, #0
 800e63e:	d1ef      	bne.n	800e620 <rmw_validate_node_name+0x64>
 800e640:	2000      	movs	r0, #0
 800e642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e646:	200b      	movs	r0, #11
 800e648:	4770      	bx	lr
 800e64a:	200b      	movs	r0, #11
 800e64c:	e7f2      	b.n	800e634 <rmw_validate_node_name+0x78>
 800e64e:	2204      	movs	r2, #4
 800e650:	602a      	str	r2, [r5, #0]
 800e652:	2e00      	cmp	r6, #0
 800e654:	d0f4      	beq.n	800e640 <rmw_validate_node_name+0x84>
 800e656:	22fe      	movs	r2, #254	@ 0xfe
 800e658:	4618      	mov	r0, r3
 800e65a:	6032      	str	r2, [r6, #0]
 800e65c:	e7ea      	b.n	800e634 <rmw_validate_node_name+0x78>
 800e65e:	bf00      	nop
 800e660:	08018bec 	.word	0x08018bec

0800e664 <rmw_node_name_validation_result_string>:
 800e664:	2804      	cmp	r0, #4
 800e666:	d803      	bhi.n	800e670 <rmw_node_name_validation_result_string+0xc>
 800e668:	4b02      	ldr	r3, [pc, #8]	@ (800e674 <rmw_node_name_validation_result_string+0x10>)
 800e66a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e66e:	4770      	bx	lr
 800e670:	4801      	ldr	r0, [pc, #4]	@ (800e678 <rmw_node_name_validation_result_string+0x14>)
 800e672:	4770      	bx	lr
 800e674:	08018574 	.word	0x08018574
 800e678:	08018488 	.word	0x08018488

0800e67c <rmw_uros_set_custom_transport>:
 800e67c:	b470      	push	{r4, r5, r6}
 800e67e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e682:	b162      	cbz	r2, 800e69e <rmw_uros_set_custom_transport+0x22>
 800e684:	b15b      	cbz	r3, 800e69e <rmw_uros_set_custom_transport+0x22>
 800e686:	b155      	cbz	r5, 800e69e <rmw_uros_set_custom_transport+0x22>
 800e688:	b14e      	cbz	r6, 800e69e <rmw_uros_set_custom_transport+0x22>
 800e68a:	4c06      	ldr	r4, [pc, #24]	@ (800e6a4 <rmw_uros_set_custom_transport+0x28>)
 800e68c:	7020      	strb	r0, [r4, #0]
 800e68e:	2000      	movs	r0, #0
 800e690:	6166      	str	r6, [r4, #20]
 800e692:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e696:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e69a:	bc70      	pop	{r4, r5, r6}
 800e69c:	4770      	bx	lr
 800e69e:	200b      	movs	r0, #11
 800e6a0:	bc70      	pop	{r4, r5, r6}
 800e6a2:	4770      	bx	lr
 800e6a4:	2000db2c 	.word	0x2000db2c

0800e6a8 <create_node>:
 800e6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	b083      	sub	sp, #12
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d064      	beq.n	800e77c <create_node+0xd4>
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	4838      	ldr	r0, [pc, #224]	@ (800e798 <create_node+0xf0>)
 800e6b6:	460f      	mov	r7, r1
 800e6b8:	4690      	mov	r8, r2
 800e6ba:	461d      	mov	r5, r3
 800e6bc:	f004 fea4 	bl	8013408 <get_memory>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d05b      	beq.n	800e77c <create_node+0xd4>
 800e6c4:	6884      	ldr	r4, [r0, #8]
 800e6c6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e6c8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e6cc:	f104 0518 	add.w	r5, r4, #24
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	f004 ff01 	bl	80134d8 <rmw_get_implementation_identifier>
 800e6d6:	f8c4 9020 	str.w	r9, [r4, #32]
 800e6da:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f7f1 fdb8 	bl	8000254 <strlen>
 800e6e4:	1c42      	adds	r2, r0, #1
 800e6e6:	2a3c      	cmp	r2, #60	@ 0x3c
 800e6e8:	d840      	bhi.n	800e76c <create_node+0xc4>
 800e6ea:	4648      	mov	r0, r9
 800e6ec:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e6f0:	4631      	mov	r1, r6
 800e6f2:	f008 fe10 	bl	8017316 <memcpy>
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e6fc:	f7f1 fdaa 	bl	8000254 <strlen>
 800e700:	1c42      	adds	r2, r0, #1
 800e702:	2a3c      	cmp	r2, #60	@ 0x3c
 800e704:	d832      	bhi.n	800e76c <create_node+0xc4>
 800e706:	4639      	mov	r1, r7
 800e708:	4648      	mov	r0, r9
 800e70a:	f008 fe04 	bl	8017316 <memcpy>
 800e70e:	6923      	ldr	r3, [r4, #16]
 800e710:	2101      	movs	r1, #1
 800e712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e716:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e71a:	1842      	adds	r2, r0, r1
 800e71c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e720:	f001 f99a 	bl	800fa58 <uxr_object_id>
 800e724:	6160      	str	r0, [r4, #20]
 800e726:	783b      	ldrb	r3, [r7, #0]
 800e728:	2b2f      	cmp	r3, #47	@ 0x2f
 800e72a:	d12c      	bne.n	800e786 <create_node+0xde>
 800e72c:	787b      	ldrb	r3, [r7, #1]
 800e72e:	bb53      	cbnz	r3, 800e786 <create_node+0xde>
 800e730:	4633      	mov	r3, r6
 800e732:	4a1a      	ldr	r2, [pc, #104]	@ (800e79c <create_node+0xf4>)
 800e734:	213c      	movs	r1, #60	@ 0x3c
 800e736:	481a      	ldr	r0, [pc, #104]	@ (800e7a0 <create_node+0xf8>)
 800e738:	f008 fbe0 	bl	8016efc <sniprintf>
 800e73c:	6920      	ldr	r0, [r4, #16]
 800e73e:	2106      	movs	r1, #6
 800e740:	fa1f f388 	uxth.w	r3, r8
 800e744:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e748:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e74c:	9101      	str	r1, [sp, #4]
 800e74e:	4914      	ldr	r1, [pc, #80]	@ (800e7a0 <create_node+0xf8>)
 800e750:	9100      	str	r1, [sp, #0]
 800e752:	6811      	ldr	r1, [r2, #0]
 800e754:	6962      	ldr	r2, [r4, #20]
 800e756:	f001 f871 	bl	800f83c <uxr_buffer_create_participant_bin>
 800e75a:	4602      	mov	r2, r0
 800e75c:	6920      	ldr	r0, [r4, #16]
 800e75e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e762:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e766:	f000 fd47 	bl	800f1f8 <run_xrce_session>
 800e76a:	b918      	cbnz	r0, 800e774 <create_node+0xcc>
 800e76c:	4628      	mov	r0, r5
 800e76e:	2500      	movs	r5, #0
 800e770:	f000 fc6c 	bl	800f04c <rmw_uxrce_fini_node_memory>
 800e774:	4628      	mov	r0, r5
 800e776:	b003      	add	sp, #12
 800e778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e77c:	2500      	movs	r5, #0
 800e77e:	4628      	mov	r0, r5
 800e780:	b003      	add	sp, #12
 800e782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e786:	463b      	mov	r3, r7
 800e788:	4a06      	ldr	r2, [pc, #24]	@ (800e7a4 <create_node+0xfc>)
 800e78a:	213c      	movs	r1, #60	@ 0x3c
 800e78c:	9600      	str	r6, [sp, #0]
 800e78e:	4804      	ldr	r0, [pc, #16]	@ (800e7a0 <create_node+0xf8>)
 800e790:	f008 fbb4 	bl	8016efc <sniprintf>
 800e794:	e7d2      	b.n	800e73c <create_node+0x94>
 800e796:	bf00      	nop
 800e798:	20012454 	.word	0x20012454
 800e79c:	080185bc 	.word	0x080185bc
 800e7a0:	2000db48 	.word	0x2000db48
 800e7a4:	08018168 	.word	0x08018168

0800e7a8 <rmw_create_node>:
 800e7a8:	468c      	mov	ip, r1
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	f1bc 0f00 	cmp.w	ip, #0
 800e7b0:	d00a      	beq.n	800e7c8 <rmw_create_node+0x20>
 800e7b2:	f89c 3000 	ldrb.w	r3, [ip]
 800e7b6:	b13b      	cbz	r3, 800e7c8 <rmw_create_node+0x20>
 800e7b8:	b132      	cbz	r2, 800e7c8 <rmw_create_node+0x20>
 800e7ba:	7813      	ldrb	r3, [r2, #0]
 800e7bc:	b123      	cbz	r3, 800e7c8 <rmw_create_node+0x20>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e7c2:	4660      	mov	r0, ip
 800e7c4:	f7ff bf70 	b.w	800e6a8 <create_node>
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	4770      	bx	lr

0800e7cc <rmw_destroy_node>:
 800e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ce:	b328      	cbz	r0, 800e81c <rmw_destroy_node+0x50>
 800e7d0:	4607      	mov	r7, r0
 800e7d2:	6800      	ldr	r0, [r0, #0]
 800e7d4:	b120      	cbz	r0, 800e7e0 <rmw_destroy_node+0x14>
 800e7d6:	4b37      	ldr	r3, [pc, #220]	@ (800e8b4 <rmw_destroy_node+0xe8>)
 800e7d8:	6819      	ldr	r1, [r3, #0]
 800e7da:	f7f1 fd31 	bl	8000240 <strcmp>
 800e7de:	b9e8      	cbnz	r0, 800e81c <rmw_destroy_node+0x50>
 800e7e0:	687d      	ldr	r5, [r7, #4]
 800e7e2:	b1dd      	cbz	r5, 800e81c <rmw_destroy_node+0x50>
 800e7e4:	4b34      	ldr	r3, [pc, #208]	@ (800e8b8 <rmw_destroy_node+0xec>)
 800e7e6:	681c      	ldr	r4, [r3, #0]
 800e7e8:	2c00      	cmp	r4, #0
 800e7ea:	d060      	beq.n	800e8ae <rmw_destroy_node+0xe2>
 800e7ec:	2600      	movs	r6, #0
 800e7ee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e7f2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e7f6:	429d      	cmp	r5, r3
 800e7f8:	d013      	beq.n	800e822 <rmw_destroy_node+0x56>
 800e7fa:	2c00      	cmp	r4, #0
 800e7fc:	d1f7      	bne.n	800e7ee <rmw_destroy_node+0x22>
 800e7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e8bc <rmw_destroy_node+0xf0>)
 800e800:	681c      	ldr	r4, [r3, #0]
 800e802:	b1c4      	cbz	r4, 800e836 <rmw_destroy_node+0x6a>
 800e804:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e808:	6a0b      	ldr	r3, [r1, #32]
 800e80a:	429d      	cmp	r5, r3
 800e80c:	d1f9      	bne.n	800e802 <rmw_destroy_node+0x36>
 800e80e:	317c      	adds	r1, #124	@ 0x7c
 800e810:	4638      	mov	r0, r7
 800e812:	f000 fa53 	bl	800ecbc <rmw_destroy_subscription>
 800e816:	2801      	cmp	r0, #1
 800e818:	4606      	mov	r6, r0
 800e81a:	d1f2      	bne.n	800e802 <rmw_destroy_node+0x36>
 800e81c:	2601      	movs	r6, #1
 800e81e:	4630      	mov	r0, r6
 800e820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e822:	3184      	adds	r1, #132	@ 0x84
 800e824:	4638      	mov	r0, r7
 800e826:	f000 f9b1 	bl	800eb8c <rmw_destroy_publisher>
 800e82a:	2801      	cmp	r0, #1
 800e82c:	4606      	mov	r6, r0
 800e82e:	d0f5      	beq.n	800e81c <rmw_destroy_node+0x50>
 800e830:	2c00      	cmp	r4, #0
 800e832:	d1dc      	bne.n	800e7ee <rmw_destroy_node+0x22>
 800e834:	e7e3      	b.n	800e7fe <rmw_destroy_node+0x32>
 800e836:	4b22      	ldr	r3, [pc, #136]	@ (800e8c0 <rmw_destroy_node+0xf4>)
 800e838:	681c      	ldr	r4, [r3, #0]
 800e83a:	b16c      	cbz	r4, 800e858 <rmw_destroy_node+0x8c>
 800e83c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e840:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e842:	429d      	cmp	r5, r3
 800e844:	d1f9      	bne.n	800e83a <rmw_destroy_node+0x6e>
 800e846:	317c      	adds	r1, #124	@ 0x7c
 800e848:	4638      	mov	r0, r7
 800e84a:	f000 f9f3 	bl	800ec34 <rmw_destroy_service>
 800e84e:	2801      	cmp	r0, #1
 800e850:	4606      	mov	r6, r0
 800e852:	d0e3      	beq.n	800e81c <rmw_destroy_node+0x50>
 800e854:	2c00      	cmp	r4, #0
 800e856:	d1f1      	bne.n	800e83c <rmw_destroy_node+0x70>
 800e858:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c4 <rmw_destroy_node+0xf8>)
 800e85a:	681c      	ldr	r4, [r3, #0]
 800e85c:	b16c      	cbz	r4, 800e87a <rmw_destroy_node+0xae>
 800e85e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e862:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e864:	429d      	cmp	r5, r3
 800e866:	d1f9      	bne.n	800e85c <rmw_destroy_node+0x90>
 800e868:	317c      	adds	r1, #124	@ 0x7c
 800e86a:	4638      	mov	r0, r7
 800e86c:	f004 fdf0 	bl	8013450 <rmw_destroy_client>
 800e870:	2801      	cmp	r0, #1
 800e872:	4606      	mov	r6, r0
 800e874:	d0d2      	beq.n	800e81c <rmw_destroy_node+0x50>
 800e876:	2c00      	cmp	r4, #0
 800e878:	d1f1      	bne.n	800e85e <rmw_destroy_node+0x92>
 800e87a:	6928      	ldr	r0, [r5, #16]
 800e87c:	696a      	ldr	r2, [r5, #20]
 800e87e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e882:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e886:	6819      	ldr	r1, [r3, #0]
 800e888:	f000 ff8c 	bl	800f7a4 <uxr_buffer_delete_entity>
 800e88c:	4602      	mov	r2, r0
 800e88e:	6928      	ldr	r0, [r5, #16]
 800e890:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e894:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e898:	f000 fcae 	bl	800f1f8 <run_xrce_session>
 800e89c:	4603      	mov	r3, r0
 800e89e:	4638      	mov	r0, r7
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	bf08      	it	eq
 800e8a4:	2602      	moveq	r6, #2
 800e8a6:	f000 fbd1 	bl	800f04c <rmw_uxrce_fini_node_memory>
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ae:	4626      	mov	r6, r4
 800e8b0:	e7a5      	b.n	800e7fe <rmw_destroy_node+0x32>
 800e8b2:	bf00      	nop
 800e8b4:	0801892c 	.word	0x0801892c
 800e8b8:	20012464 	.word	0x20012464
 800e8bc:	200124a4 	.word	0x200124a4
 800e8c0:	20012474 	.word	0x20012474
 800e8c4:	2000db84 	.word	0x2000db84

0800e8c8 <rmw_node_get_graph_guard_condition>:
 800e8c8:	6843      	ldr	r3, [r0, #4]
 800e8ca:	6918      	ldr	r0, [r3, #16]
 800e8cc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop

0800e8d4 <flush_session>:
 800e8d4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e8d6:	f001 be85 	b.w	80105e4 <uxr_run_session_until_confirm_delivery>
 800e8da:	bf00      	nop

0800e8dc <rmw_publish>:
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d053      	beq.n	800e988 <rmw_publish+0xac>
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	b08e      	sub	sp, #56	@ 0x38
 800e8e6:	2900      	cmp	r1, #0
 800e8e8:	d04b      	beq.n	800e982 <rmw_publish+0xa6>
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	6800      	ldr	r0, [r0, #0]
 800e8ee:	f000 fcfd 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d045      	beq.n	800e982 <rmw_publish+0xa6>
 800e8f6:	6866      	ldr	r6, [r4, #4]
 800e8f8:	2e00      	cmp	r6, #0
 800e8fa:	d042      	beq.n	800e982 <rmw_publish+0xa6>
 800e8fc:	69b4      	ldr	r4, [r6, #24]
 800e8fe:	4628      	mov	r0, r5
 800e900:	6923      	ldr	r3, [r4, #16]
 800e902:	4798      	blx	r3
 800e904:	69f3      	ldr	r3, [r6, #28]
 800e906:	9005      	str	r0, [sp, #20]
 800e908:	b113      	cbz	r3, 800e910 <rmw_publish+0x34>
 800e90a:	a805      	add	r0, sp, #20
 800e90c:	4798      	blx	r3
 800e90e:	9805      	ldr	r0, [sp, #20]
 800e910:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	9000      	str	r0, [sp, #0]
 800e918:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e91c:	6972      	ldr	r2, [r6, #20]
 800e91e:	ab06      	add	r3, sp, #24
 800e920:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e922:	f002 fc5d 	bl	80111e0 <uxr_prepare_output_stream>
 800e926:	b1d8      	cbz	r0, 800e960 <rmw_publish+0x84>
 800e928:	68a3      	ldr	r3, [r4, #8]
 800e92a:	a906      	add	r1, sp, #24
 800e92c:	4628      	mov	r0, r5
 800e92e:	4798      	blx	r3
 800e930:	6a33      	ldr	r3, [r6, #32]
 800e932:	4604      	mov	r4, r0
 800e934:	b10b      	cbz	r3, 800e93a <rmw_publish+0x5e>
 800e936:	a806      	add	r0, sp, #24
 800e938:	4798      	blx	r3
 800e93a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e93e:	2b01      	cmp	r3, #1
 800e940:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e944:	d022      	beq.n	800e98c <rmw_publish+0xb0>
 800e946:	6918      	ldr	r0, [r3, #16]
 800e948:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e94a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e94e:	f001 fe49 	bl	80105e4 <uxr_run_session_until_confirm_delivery>
 800e952:	4020      	ands	r0, r4
 800e954:	b2c4      	uxtb	r4, r0
 800e956:	f084 0001 	eor.w	r0, r4, #1
 800e95a:	b2c0      	uxtb	r0, r0
 800e95c:	b00e      	add	sp, #56	@ 0x38
 800e95e:	bd70      	pop	{r4, r5, r6, pc}
 800e960:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e964:	6918      	ldr	r0, [r3, #16]
 800e966:	9b05      	ldr	r3, [sp, #20]
 800e968:	9602      	str	r6, [sp, #8]
 800e96a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e96e:	9300      	str	r3, [sp, #0]
 800e970:	4b09      	ldr	r3, [pc, #36]	@ (800e998 <rmw_publish+0xbc>)
 800e972:	9301      	str	r3, [sp, #4]
 800e974:	ab06      	add	r3, sp, #24
 800e976:	6972      	ldr	r2, [r6, #20]
 800e978:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e97a:	f002 fc61 	bl	8011240 <uxr_prepare_output_stream_fragmented>
 800e97e:	2800      	cmp	r0, #0
 800e980:	d1d2      	bne.n	800e928 <rmw_publish+0x4c>
 800e982:	2001      	movs	r0, #1
 800e984:	b00e      	add	sp, #56	@ 0x38
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	2001      	movs	r0, #1
 800e98a:	4770      	bx	lr
 800e98c:	6918      	ldr	r0, [r3, #16]
 800e98e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e992:	f001 faa7 	bl	800fee4 <uxr_flash_output_streams>
 800e996:	e7de      	b.n	800e956 <rmw_publish+0x7a>
 800e998:	0800e8d5 	.word	0x0800e8d5

0800e99c <rmw_create_publisher>:
 800e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a0:	b087      	sub	sp, #28
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	f000 80d2 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	2900      	cmp	r1, #0
 800e9ac:	f000 80ce 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	6800      	ldr	r0, [r0, #0]
 800e9b4:	4615      	mov	r5, r2
 800e9b6:	461f      	mov	r7, r3
 800e9b8:	f000 fc98 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800e9bc:	f080 0001 	eor.w	r0, r0, #1
 800e9c0:	b2c0      	uxtb	r0, r0
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f040 80c2 	bne.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9c8:	2d00      	cmp	r5, #0
 800e9ca:	f000 80bf 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9ce:	782b      	ldrb	r3, [r5, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 80bb 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9d6:	2f00      	cmp	r7, #0
 800e9d8:	f000 80b8 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9dc:	485e      	ldr	r0, [pc, #376]	@ (800eb58 <rmw_create_publisher+0x1bc>)
 800e9de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9e2:	f004 fd11 	bl	8013408 <get_memory>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	f000 80b0 	beq.w	800eb4c <rmw_create_publisher+0x1b0>
 800e9ec:	6884      	ldr	r4, [r0, #8]
 800e9ee:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e9f2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e9f6:	f004 fd6f 	bl	80134d8 <rmw_get_implementation_identifier>
 800e9fa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e9fe:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ea02:	4628      	mov	r0, r5
 800ea04:	f7f1 fc26 	bl	8000254 <strlen>
 800ea08:	3001      	adds	r0, #1
 800ea0a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800ea0e:	283c      	cmp	r0, #60	@ 0x3c
 800ea10:	f200 808f 	bhi.w	800eb32 <rmw_create_publisher+0x196>
 800ea14:	462b      	mov	r3, r5
 800ea16:	4a51      	ldr	r2, [pc, #324]	@ (800eb5c <rmw_create_publisher+0x1c0>)
 800ea18:	213c      	movs	r1, #60	@ 0x3c
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	f008 fa6e 	bl	8016efc <sniprintf>
 800ea20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea24:	4639      	mov	r1, r7
 800ea26:	2250      	movs	r2, #80	@ 0x50
 800ea28:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ea2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ea2e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ea32:	f008 fc70 	bl	8017316 <memcpy>
 800ea36:	7a3b      	ldrb	r3, [r7, #8]
 800ea38:	4630      	mov	r0, r6
 800ea3a:	4949      	ldr	r1, [pc, #292]	@ (800eb60 <rmw_create_publisher+0x1c4>)
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea42:	bf0c      	ite	eq
 800ea44:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ea48:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ea4c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ea54:	f000 fc58 	bl	800f308 <get_message_typesupport_handle>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d06a      	beq.n	800eb32 <rmw_create_publisher+0x196>
 800ea5c:	6842      	ldr	r2, [r0, #4]
 800ea5e:	61a2      	str	r2, [r4, #24]
 800ea60:	2a00      	cmp	r2, #0
 800ea62:	d066      	beq.n	800eb32 <rmw_create_publisher+0x196>
 800ea64:	4629      	mov	r1, r5
 800ea66:	463b      	mov	r3, r7
 800ea68:	4648      	mov	r0, r9
 800ea6a:	f004 ffcb 	bl	8013a04 <create_topic>
 800ea6e:	6260      	str	r0, [r4, #36]	@ 0x24
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d062      	beq.n	800eb3a <rmw_create_publisher+0x19e>
 800ea74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea78:	2103      	movs	r1, #3
 800ea7a:	2506      	movs	r5, #6
 800ea7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea80:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ea84:	1c42      	adds	r2, r0, #1
 800ea86:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ea8a:	f000 ffe5 	bl	800fa58 <uxr_object_id>
 800ea8e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ea92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea96:	6120      	str	r0, [r4, #16]
 800ea98:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ea9c:	6910      	ldr	r0, [r2, #16]
 800ea9e:	9500      	str	r5, [sp, #0]
 800eaa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eaa4:	6819      	ldr	r1, [r3, #0]
 800eaa6:	6922      	ldr	r2, [r4, #16]
 800eaa8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eaac:	f000 ff2e 	bl	800f90c <uxr_buffer_create_publisher_bin>
 800eab0:	4602      	mov	r2, r0
 800eab2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eab6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eaba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eabe:	f000 fb9b 	bl	800f1f8 <run_xrce_session>
 800eac2:	b3b0      	cbz	r0, 800eb32 <rmw_create_publisher+0x196>
 800eac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eac8:	2105      	movs	r1, #5
 800eaca:	f10d 0a10 	add.w	sl, sp, #16
 800eace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ead2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ead6:	1c42      	adds	r2, r0, #1
 800ead8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800eadc:	f000 ffbc 	bl	800fa58 <uxr_object_id>
 800eae0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eae4:	4639      	mov	r1, r7
 800eae6:	6160      	str	r0, [r4, #20]
 800eae8:	691e      	ldr	r6, [r3, #16]
 800eaea:	4650      	mov	r0, sl
 800eaec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaf0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800eaf4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800eaf8:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800eafc:	f000 fb98 	bl	800f230 <convert_qos_profile>
 800eb00:	9503      	str	r5, [sp, #12]
 800eb02:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800eb06:	9001      	str	r0, [sp, #4]
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eb0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eb1a:	f000 ff27 	bl	800f96c <uxr_buffer_create_datawriter_bin>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eb24:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb28:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb2c:	f000 fb64 	bl	800f1f8 <run_xrce_session>
 800eb30:	b970      	cbnz	r0, 800eb50 <rmw_create_publisher+0x1b4>
 800eb32:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb34:	b108      	cbz	r0, 800eb3a <rmw_create_publisher+0x19e>
 800eb36:	f000 faf9 	bl	800f12c <rmw_uxrce_fini_topic_memory>
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	f04f 0800 	mov.w	r8, #0
 800eb40:	f000 fa9c 	bl	800f07c <rmw_uxrce_fini_publisher_memory>
 800eb44:	4640      	mov	r0, r8
 800eb46:	b007      	add	sp, #28
 800eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	f04f 0800 	mov.w	r8, #0
 800eb50:	4640      	mov	r0, r8
 800eb52:	b007      	add	sp, #28
 800eb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb58:	20012464 	.word	0x20012464
 800eb5c:	080185bc 	.word	0x080185bc
 800eb60:	08018588 	.word	0x08018588

0800eb64 <rmw_publisher_get_actual_qos>:
 800eb64:	b178      	cbz	r0, 800eb86 <rmw_publisher_get_actual_qos+0x22>
 800eb66:	b510      	push	{r4, lr}
 800eb68:	fab1 f481 	clz	r4, r1
 800eb6c:	0964      	lsrs	r4, r4, #5
 800eb6e:	b141      	cbz	r1, 800eb82 <rmw_publisher_get_actual_qos+0x1e>
 800eb70:	6843      	ldr	r3, [r0, #4]
 800eb72:	2250      	movs	r2, #80	@ 0x50
 800eb74:	4608      	mov	r0, r1
 800eb76:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800eb7a:	f008 fbcc 	bl	8017316 <memcpy>
 800eb7e:	4620      	mov	r0, r4
 800eb80:	bd10      	pop	{r4, pc}
 800eb82:	200b      	movs	r0, #11
 800eb84:	bd10      	pop	{r4, pc}
 800eb86:	200b      	movs	r0, #11
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop

0800eb8c <rmw_destroy_publisher>:
 800eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb90:	b128      	cbz	r0, 800eb9e <rmw_destroy_publisher+0x12>
 800eb92:	4604      	mov	r4, r0
 800eb94:	6800      	ldr	r0, [r0, #0]
 800eb96:	460d      	mov	r5, r1
 800eb98:	f000 fba8 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800eb9c:	b918      	cbnz	r0, 800eba6 <rmw_destroy_publisher+0x1a>
 800eb9e:	2401      	movs	r4, #1
 800eba0:	4620      	mov	r0, r4
 800eba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba6:	6863      	ldr	r3, [r4, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0f8      	beq.n	800eb9e <rmw_destroy_publisher+0x12>
 800ebac:	fab5 f485 	clz	r4, r5
 800ebb0:	0964      	lsrs	r4, r4, #5
 800ebb2:	2d00      	cmp	r5, #0
 800ebb4:	d0f3      	beq.n	800eb9e <rmw_destroy_publisher+0x12>
 800ebb6:	6828      	ldr	r0, [r5, #0]
 800ebb8:	f000 fb98 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d0ee      	beq.n	800eb9e <rmw_destroy_publisher+0x12>
 800ebc0:	686e      	ldr	r6, [r5, #4]
 800ebc2:	2e00      	cmp	r6, #0
 800ebc4:	d0eb      	beq.n	800eb9e <rmw_destroy_publisher+0x12>
 800ebc6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800ebc8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800ebcc:	f004 ff6a 	bl	8013aa4 <destroy_topic>
 800ebd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ebd4:	6972      	ldr	r2, [r6, #20]
 800ebd6:	6918      	ldr	r0, [r3, #16]
 800ebd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebe0:	6819      	ldr	r1, [r3, #0]
 800ebe2:	f000 fddf 	bl	800f7a4 <uxr_buffer_delete_entity>
 800ebe6:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ebea:	4680      	mov	r8, r0
 800ebec:	6932      	ldr	r2, [r6, #16]
 800ebee:	6918      	ldr	r0, [r3, #16]
 800ebf0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebf8:	6819      	ldr	r1, [r3, #0]
 800ebfa:	f000 fdd3 	bl	800f7a4 <uxr_buffer_delete_entity>
 800ebfe:	4606      	mov	r6, r0
 800ec00:	6938      	ldr	r0, [r7, #16]
 800ec02:	4642      	mov	r2, r8
 800ec04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec0c:	f000 faf4 	bl	800f1f8 <run_xrce_session>
 800ec10:	693f      	ldr	r7, [r7, #16]
 800ec12:	4632      	mov	r2, r6
 800ec14:	4606      	mov	r6, r0
 800ec16:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ec20:	f000 faea 	bl	800f1f8 <run_xrce_session>
 800ec24:	b126      	cbz	r6, 800ec30 <rmw_destroy_publisher+0xa4>
 800ec26:	b118      	cbz	r0, 800ec30 <rmw_destroy_publisher+0xa4>
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f000 fa27 	bl	800f07c <rmw_uxrce_fini_publisher_memory>
 800ec2e:	e7b7      	b.n	800eba0 <rmw_destroy_publisher+0x14>
 800ec30:	2402      	movs	r4, #2
 800ec32:	e7f9      	b.n	800ec28 <rmw_destroy_publisher+0x9c>

0800ec34 <rmw_destroy_service>:
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	b128      	cbz	r0, 800ec44 <rmw_destroy_service+0x10>
 800ec38:	4604      	mov	r4, r0
 800ec3a:	6800      	ldr	r0, [r0, #0]
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	f000 fb55 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800ec42:	b910      	cbnz	r0, 800ec4a <rmw_destroy_service+0x16>
 800ec44:	2401      	movs	r4, #1
 800ec46:	4620      	mov	r0, r4
 800ec48:	bd70      	pop	{r4, r5, r6, pc}
 800ec4a:	6863      	ldr	r3, [r4, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d0f9      	beq.n	800ec44 <rmw_destroy_service+0x10>
 800ec50:	2d00      	cmp	r5, #0
 800ec52:	d0f7      	beq.n	800ec44 <rmw_destroy_service+0x10>
 800ec54:	6828      	ldr	r0, [r5, #0]
 800ec56:	f000 fb49 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d0f2      	beq.n	800ec44 <rmw_destroy_service+0x10>
 800ec5e:	686e      	ldr	r6, [r5, #4]
 800ec60:	2e00      	cmp	r6, #0
 800ec62:	d0ef      	beq.n	800ec44 <rmw_destroy_service+0x10>
 800ec64:	6864      	ldr	r4, [r4, #4]
 800ec66:	6932      	ldr	r2, [r6, #16]
 800ec68:	6920      	ldr	r0, [r4, #16]
 800ec6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec72:	6819      	ldr	r1, [r3, #0]
 800ec74:	f000 ff20 	bl	800fab8 <uxr_buffer_cancel_data>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	6920      	ldr	r0, [r4, #16]
 800ec7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec80:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec84:	f000 fab8 	bl	800f1f8 <run_xrce_session>
 800ec88:	6920      	ldr	r0, [r4, #16]
 800ec8a:	6932      	ldr	r2, [r6, #16]
 800ec8c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec94:	6819      	ldr	r1, [r3, #0]
 800ec96:	f000 fd85 	bl	800f7a4 <uxr_buffer_delete_entity>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	6920      	ldr	r0, [r4, #16]
 800ec9e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eca2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eca6:	f000 faa7 	bl	800f1f8 <run_xrce_session>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	4628      	mov	r0, r5
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	bf14      	ite	ne
 800ecb2:	2400      	movne	r4, #0
 800ecb4:	2402      	moveq	r4, #2
 800ecb6:	f000 fa0d 	bl	800f0d4 <rmw_uxrce_fini_service_memory>
 800ecba:	e7c4      	b.n	800ec46 <rmw_destroy_service+0x12>

0800ecbc <rmw_destroy_subscription>:
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc0:	b128      	cbz	r0, 800ecce <rmw_destroy_subscription+0x12>
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	6800      	ldr	r0, [r0, #0]
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	f000 fb10 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800eccc:	b918      	cbnz	r0, 800ecd6 <rmw_destroy_subscription+0x1a>
 800ecce:	2401      	movs	r4, #1
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd6:	6863      	ldr	r3, [r4, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0f8      	beq.n	800ecce <rmw_destroy_subscription+0x12>
 800ecdc:	fab5 f485 	clz	r4, r5
 800ece0:	0964      	lsrs	r4, r4, #5
 800ece2:	2d00      	cmp	r5, #0
 800ece4:	d0f3      	beq.n	800ecce <rmw_destroy_subscription+0x12>
 800ece6:	6828      	ldr	r0, [r5, #0]
 800ece8:	f000 fb00 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d0ee      	beq.n	800ecce <rmw_destroy_subscription+0x12>
 800ecf0:	686e      	ldr	r6, [r5, #4]
 800ecf2:	2e00      	cmp	r6, #0
 800ecf4:	d0eb      	beq.n	800ecce <rmw_destroy_subscription+0x12>
 800ecf6:	6a37      	ldr	r7, [r6, #32]
 800ecf8:	6972      	ldr	r2, [r6, #20]
 800ecfa:	6938      	ldr	r0, [r7, #16]
 800ecfc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed04:	6819      	ldr	r1, [r3, #0]
 800ed06:	f000 fed7 	bl	800fab8 <uxr_buffer_cancel_data>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	6938      	ldr	r0, [r7, #16]
 800ed0e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed12:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed16:	f000 fa6f 	bl	800f1f8 <run_xrce_session>
 800ed1a:	69f0      	ldr	r0, [r6, #28]
 800ed1c:	f004 fec2 	bl	8013aa4 <destroy_topic>
 800ed20:	6a33      	ldr	r3, [r6, #32]
 800ed22:	6972      	ldr	r2, [r6, #20]
 800ed24:	6918      	ldr	r0, [r3, #16]
 800ed26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	f000 fd38 	bl	800f7a4 <uxr_buffer_delete_entity>
 800ed34:	6a33      	ldr	r3, [r6, #32]
 800ed36:	4680      	mov	r8, r0
 800ed38:	6932      	ldr	r2, [r6, #16]
 800ed3a:	6918      	ldr	r0, [r3, #16]
 800ed3c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed44:	6819      	ldr	r1, [r3, #0]
 800ed46:	f000 fd2d 	bl	800f7a4 <uxr_buffer_delete_entity>
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	6938      	ldr	r0, [r7, #16]
 800ed4e:	4642      	mov	r2, r8
 800ed50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed58:	f000 fa4e 	bl	800f1f8 <run_xrce_session>
 800ed5c:	693f      	ldr	r7, [r7, #16]
 800ed5e:	4632      	mov	r2, r6
 800ed60:	4606      	mov	r6, r0
 800ed62:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ed66:	4638      	mov	r0, r7
 800ed68:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed6c:	f000 fa44 	bl	800f1f8 <run_xrce_session>
 800ed70:	b126      	cbz	r6, 800ed7c <rmw_destroy_subscription+0xc0>
 800ed72:	b118      	cbz	r0, 800ed7c <rmw_destroy_subscription+0xc0>
 800ed74:	4628      	mov	r0, r5
 800ed76:	f000 f997 	bl	800f0a8 <rmw_uxrce_fini_subscription_memory>
 800ed7a:	e7a9      	b.n	800ecd0 <rmw_destroy_subscription+0x14>
 800ed7c:	2402      	movs	r4, #2
 800ed7e:	e7f9      	b.n	800ed74 <rmw_destroy_subscription+0xb8>

0800ed80 <rmw_uxrce_init_service_memory>:
 800ed80:	b1e2      	cbz	r2, 800edbc <rmw_uxrce_init_service_memory+0x3c>
 800ed82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed86:	7b05      	ldrb	r5, [r0, #12]
 800ed88:	4606      	mov	r6, r0
 800ed8a:	b9ad      	cbnz	r5, 800edb8 <rmw_uxrce_init_service_memory+0x38>
 800ed8c:	23c8      	movs	r3, #200	@ 0xc8
 800ed8e:	4617      	mov	r7, r2
 800ed90:	460c      	mov	r4, r1
 800ed92:	46a8      	mov	r8, r5
 800ed94:	6083      	str	r3, [r0, #8]
 800ed96:	f240 1301 	movw	r3, #257	@ 0x101
 800ed9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ed9e:	8183      	strh	r3, [r0, #12]
 800eda0:	3501      	adds	r5, #1
 800eda2:	4621      	mov	r1, r4
 800eda4:	4630      	mov	r0, r6
 800eda6:	f004 fb3f 	bl	8013428 <put_memory>
 800edaa:	42af      	cmp	r7, r5
 800edac:	60a4      	str	r4, [r4, #8]
 800edae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800edb2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800edb6:	d1f3      	bne.n	800eda0 <rmw_uxrce_init_service_memory+0x20>
 800edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop

0800edc0 <rmw_uxrce_init_client_memory>:
 800edc0:	b1e2      	cbz	r2, 800edfc <rmw_uxrce_init_client_memory+0x3c>
 800edc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc6:	7b05      	ldrb	r5, [r0, #12]
 800edc8:	4606      	mov	r6, r0
 800edca:	b9ad      	cbnz	r5, 800edf8 <rmw_uxrce_init_client_memory+0x38>
 800edcc:	23c8      	movs	r3, #200	@ 0xc8
 800edce:	4617      	mov	r7, r2
 800edd0:	460c      	mov	r4, r1
 800edd2:	46a8      	mov	r8, r5
 800edd4:	6083      	str	r3, [r0, #8]
 800edd6:	f240 1301 	movw	r3, #257	@ 0x101
 800edda:	e9c0 5500 	strd	r5, r5, [r0]
 800edde:	8183      	strh	r3, [r0, #12]
 800ede0:	3501      	adds	r5, #1
 800ede2:	4621      	mov	r1, r4
 800ede4:	4630      	mov	r0, r6
 800ede6:	f004 fb1f 	bl	8013428 <put_memory>
 800edea:	42af      	cmp	r7, r5
 800edec:	60a4      	str	r4, [r4, #8]
 800edee:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800edf2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800edf6:	d1f3      	bne.n	800ede0 <rmw_uxrce_init_client_memory+0x20>
 800edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop

0800ee00 <rmw_uxrce_init_publisher_memory>:
 800ee00:	b1e2      	cbz	r2, 800ee3c <rmw_uxrce_init_publisher_memory+0x3c>
 800ee02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee06:	7b05      	ldrb	r5, [r0, #12]
 800ee08:	4606      	mov	r6, r0
 800ee0a:	b9ad      	cbnz	r5, 800ee38 <rmw_uxrce_init_publisher_memory+0x38>
 800ee0c:	23d8      	movs	r3, #216	@ 0xd8
 800ee0e:	4617      	mov	r7, r2
 800ee10:	460c      	mov	r4, r1
 800ee12:	46a8      	mov	r8, r5
 800ee14:	6083      	str	r3, [r0, #8]
 800ee16:	f240 1301 	movw	r3, #257	@ 0x101
 800ee1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee1e:	8183      	strh	r3, [r0, #12]
 800ee20:	3501      	adds	r5, #1
 800ee22:	4621      	mov	r1, r4
 800ee24:	4630      	mov	r0, r6
 800ee26:	f004 faff 	bl	8013428 <put_memory>
 800ee2a:	42af      	cmp	r7, r5
 800ee2c:	60a4      	str	r4, [r4, #8]
 800ee2e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee32:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ee36:	d1f3      	bne.n	800ee20 <rmw_uxrce_init_publisher_memory+0x20>
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop

0800ee40 <rmw_uxrce_init_subscription_memory>:
 800ee40:	b1e2      	cbz	r2, 800ee7c <rmw_uxrce_init_subscription_memory+0x3c>
 800ee42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee46:	7b05      	ldrb	r5, [r0, #12]
 800ee48:	4606      	mov	r6, r0
 800ee4a:	b9ad      	cbnz	r5, 800ee78 <rmw_uxrce_init_subscription_memory+0x38>
 800ee4c:	23d8      	movs	r3, #216	@ 0xd8
 800ee4e:	4617      	mov	r7, r2
 800ee50:	460c      	mov	r4, r1
 800ee52:	46a8      	mov	r8, r5
 800ee54:	6083      	str	r3, [r0, #8]
 800ee56:	f240 1301 	movw	r3, #257	@ 0x101
 800ee5a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee5e:	8183      	strh	r3, [r0, #12]
 800ee60:	3501      	adds	r5, #1
 800ee62:	4621      	mov	r1, r4
 800ee64:	4630      	mov	r0, r6
 800ee66:	f004 fadf 	bl	8013428 <put_memory>
 800ee6a:	42af      	cmp	r7, r5
 800ee6c:	60a4      	str	r4, [r4, #8]
 800ee6e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee72:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ee76:	d1f3      	bne.n	800ee60 <rmw_uxrce_init_subscription_memory+0x20>
 800ee78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop

0800ee80 <rmw_uxrce_init_node_memory>:
 800ee80:	b1e2      	cbz	r2, 800eebc <rmw_uxrce_init_node_memory+0x3c>
 800ee82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee86:	7b05      	ldrb	r5, [r0, #12]
 800ee88:	4606      	mov	r6, r0
 800ee8a:	b9ad      	cbnz	r5, 800eeb8 <rmw_uxrce_init_node_memory+0x38>
 800ee8c:	23a4      	movs	r3, #164	@ 0xa4
 800ee8e:	4617      	mov	r7, r2
 800ee90:	460c      	mov	r4, r1
 800ee92:	46a8      	mov	r8, r5
 800ee94:	6083      	str	r3, [r0, #8]
 800ee96:	f240 1301 	movw	r3, #257	@ 0x101
 800ee9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee9e:	8183      	strh	r3, [r0, #12]
 800eea0:	3501      	adds	r5, #1
 800eea2:	4621      	mov	r1, r4
 800eea4:	4630      	mov	r0, r6
 800eea6:	f004 fabf 	bl	8013428 <put_memory>
 800eeaa:	42af      	cmp	r7, r5
 800eeac:	60a4      	str	r4, [r4, #8]
 800eeae:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eeb2:	f804 8c98 	strb.w	r8, [r4, #-152]
 800eeb6:	d1f3      	bne.n	800eea0 <rmw_uxrce_init_node_memory+0x20>
 800eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop

0800eec0 <rmw_uxrce_init_session_memory>:
 800eec0:	b1ea      	cbz	r2, 800eefe <rmw_uxrce_init_session_memory+0x3e>
 800eec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec6:	7b05      	ldrb	r5, [r0, #12]
 800eec8:	4606      	mov	r6, r0
 800eeca:	b9b5      	cbnz	r5, 800eefa <rmw_uxrce_init_session_memory+0x3a>
 800eecc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800eed0:	f240 1301 	movw	r3, #257	@ 0x101
 800eed4:	4617      	mov	r7, r2
 800eed6:	460c      	mov	r4, r1
 800eed8:	46a9      	mov	r9, r5
 800eeda:	f8c0 8008 	str.w	r8, [r0, #8]
 800eede:	8183      	strh	r3, [r0, #12]
 800eee0:	e9c0 5500 	strd	r5, r5, [r0]
 800eee4:	3501      	adds	r5, #1
 800eee6:	4621      	mov	r1, r4
 800eee8:	4630      	mov	r0, r6
 800eeea:	f004 fa9d 	bl	8013428 <put_memory>
 800eeee:	42af      	cmp	r7, r5
 800eef0:	60a4      	str	r4, [r4, #8]
 800eef2:	f884 900c 	strb.w	r9, [r4, #12]
 800eef6:	4444      	add	r4, r8
 800eef8:	d1f4      	bne.n	800eee4 <rmw_uxrce_init_session_memory+0x24>
 800eefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefe:	4770      	bx	lr

0800ef00 <rmw_uxrce_init_topic_memory>:
 800ef00:	b1e2      	cbz	r2, 800ef3c <rmw_uxrce_init_topic_memory+0x3c>
 800ef02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef06:	7b05      	ldrb	r5, [r0, #12]
 800ef08:	4606      	mov	r6, r0
 800ef0a:	b9ad      	cbnz	r5, 800ef38 <rmw_uxrce_init_topic_memory+0x38>
 800ef0c:	231c      	movs	r3, #28
 800ef0e:	4617      	mov	r7, r2
 800ef10:	460c      	mov	r4, r1
 800ef12:	46a8      	mov	r8, r5
 800ef14:	6083      	str	r3, [r0, #8]
 800ef16:	f240 1301 	movw	r3, #257	@ 0x101
 800ef1a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef1e:	8183      	strh	r3, [r0, #12]
 800ef20:	3501      	adds	r5, #1
 800ef22:	4621      	mov	r1, r4
 800ef24:	4630      	mov	r0, r6
 800ef26:	f004 fa7f 	bl	8013428 <put_memory>
 800ef2a:	42af      	cmp	r7, r5
 800ef2c:	60a4      	str	r4, [r4, #8]
 800ef2e:	f104 041c 	add.w	r4, r4, #28
 800ef32:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ef36:	d1f3      	bne.n	800ef20 <rmw_uxrce_init_topic_memory+0x20>
 800ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop

0800ef40 <rmw_uxrce_init_static_input_buffer_memory>:
 800ef40:	b1ea      	cbz	r2, 800ef7e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef46:	7b05      	ldrb	r5, [r0, #12]
 800ef48:	4606      	mov	r6, r0
 800ef4a:	b9b5      	cbnz	r5, 800ef7a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef4c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef50:	4617      	mov	r7, r2
 800ef52:	460c      	mov	r4, r1
 800ef54:	46a8      	mov	r8, r5
 800ef56:	6083      	str	r3, [r0, #8]
 800ef58:	f240 1301 	movw	r3, #257	@ 0x101
 800ef5c:	e9c0 5500 	strd	r5, r5, [r0]
 800ef60:	8183      	strh	r3, [r0, #12]
 800ef62:	3501      	adds	r5, #1
 800ef64:	4621      	mov	r1, r4
 800ef66:	4630      	mov	r0, r6
 800ef68:	f004 fa5e 	bl	8013428 <put_memory>
 800ef6c:	42af      	cmp	r7, r5
 800ef6e:	60a4      	str	r4, [r4, #8]
 800ef70:	f884 800c 	strb.w	r8, [r4, #12]
 800ef74:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ef78:	d1f3      	bne.n	800ef62 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ef7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7e:	4770      	bx	lr

0800ef80 <rmw_uxrce_init_init_options_impl_memory>:
 800ef80:	b1e2      	cbz	r2, 800efbc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ef82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef86:	7b05      	ldrb	r5, [r0, #12]
 800ef88:	4606      	mov	r6, r0
 800ef8a:	b9ad      	cbnz	r5, 800efb8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ef8c:	232c      	movs	r3, #44	@ 0x2c
 800ef8e:	4617      	mov	r7, r2
 800ef90:	460c      	mov	r4, r1
 800ef92:	46a8      	mov	r8, r5
 800ef94:	6083      	str	r3, [r0, #8]
 800ef96:	f240 1301 	movw	r3, #257	@ 0x101
 800ef9a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef9e:	8183      	strh	r3, [r0, #12]
 800efa0:	3501      	adds	r5, #1
 800efa2:	4621      	mov	r1, r4
 800efa4:	4630      	mov	r0, r6
 800efa6:	f004 fa3f 	bl	8013428 <put_memory>
 800efaa:	42af      	cmp	r7, r5
 800efac:	60a4      	str	r4, [r4, #8]
 800efae:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800efb2:	f804 8c20 	strb.w	r8, [r4, #-32]
 800efb6:	d1f3      	bne.n	800efa0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800efb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop

0800efc0 <rmw_uxrce_init_wait_set_memory>:
 800efc0:	b1e2      	cbz	r2, 800effc <rmw_uxrce_init_wait_set_memory+0x3c>
 800efc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc6:	7b05      	ldrb	r5, [r0, #12]
 800efc8:	4606      	mov	r6, r0
 800efca:	b9ad      	cbnz	r5, 800eff8 <rmw_uxrce_init_wait_set_memory+0x38>
 800efcc:	231c      	movs	r3, #28
 800efce:	4617      	mov	r7, r2
 800efd0:	460c      	mov	r4, r1
 800efd2:	46a8      	mov	r8, r5
 800efd4:	6083      	str	r3, [r0, #8]
 800efd6:	f240 1301 	movw	r3, #257	@ 0x101
 800efda:	e9c0 5500 	strd	r5, r5, [r0]
 800efde:	8183      	strh	r3, [r0, #12]
 800efe0:	3501      	adds	r5, #1
 800efe2:	4621      	mov	r1, r4
 800efe4:	4630      	mov	r0, r6
 800efe6:	f004 fa1f 	bl	8013428 <put_memory>
 800efea:	42af      	cmp	r7, r5
 800efec:	60a4      	str	r4, [r4, #8]
 800efee:	f104 041c 	add.w	r4, r4, #28
 800eff2:	f804 8c10 	strb.w	r8, [r4, #-16]
 800eff6:	d1f3      	bne.n	800efe0 <rmw_uxrce_init_wait_set_memory+0x20>
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop

0800f000 <rmw_uxrce_init_guard_condition_memory>:
 800f000:	b1e2      	cbz	r2, 800f03c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f006:	7b05      	ldrb	r5, [r0, #12]
 800f008:	4606      	mov	r6, r0
 800f00a:	b9ad      	cbnz	r5, 800f038 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f00c:	2320      	movs	r3, #32
 800f00e:	4617      	mov	r7, r2
 800f010:	460c      	mov	r4, r1
 800f012:	46a8      	mov	r8, r5
 800f014:	6083      	str	r3, [r0, #8]
 800f016:	f240 1301 	movw	r3, #257	@ 0x101
 800f01a:	e9c0 5500 	strd	r5, r5, [r0]
 800f01e:	8183      	strh	r3, [r0, #12]
 800f020:	3501      	adds	r5, #1
 800f022:	4621      	mov	r1, r4
 800f024:	4630      	mov	r0, r6
 800f026:	f004 f9ff 	bl	8013428 <put_memory>
 800f02a:	42af      	cmp	r7, r5
 800f02c:	60a4      	str	r4, [r4, #8]
 800f02e:	f104 0420 	add.w	r4, r4, #32
 800f032:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f036:	d1f3      	bne.n	800f020 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop

0800f040 <rmw_uxrce_fini_session_memory>:
 800f040:	4601      	mov	r1, r0
 800f042:	4801      	ldr	r0, [pc, #4]	@ (800f048 <rmw_uxrce_fini_session_memory+0x8>)
 800f044:	f004 b9f0 	b.w	8013428 <put_memory>
 800f048:	20012484 	.word	0x20012484

0800f04c <rmw_uxrce_fini_node_memory>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4604      	mov	r4, r0
 800f050:	6800      	ldr	r0, [r0, #0]
 800f052:	b128      	cbz	r0, 800f060 <rmw_uxrce_fini_node_memory+0x14>
 800f054:	4b07      	ldr	r3, [pc, #28]	@ (800f074 <rmw_uxrce_fini_node_memory+0x28>)
 800f056:	6819      	ldr	r1, [r3, #0]
 800f058:	f7f1 f8f2 	bl	8000240 <strcmp>
 800f05c:	b940      	cbnz	r0, 800f070 <rmw_uxrce_fini_node_memory+0x24>
 800f05e:	6020      	str	r0, [r4, #0]
 800f060:	6861      	ldr	r1, [r4, #4]
 800f062:	b129      	cbz	r1, 800f070 <rmw_uxrce_fini_node_memory+0x24>
 800f064:	2500      	movs	r5, #0
 800f066:	4804      	ldr	r0, [pc, #16]	@ (800f078 <rmw_uxrce_fini_node_memory+0x2c>)
 800f068:	610d      	str	r5, [r1, #16]
 800f06a:	f004 f9dd 	bl	8013428 <put_memory>
 800f06e:	6065      	str	r5, [r4, #4]
 800f070:	bd38      	pop	{r3, r4, r5, pc}
 800f072:	bf00      	nop
 800f074:	0801892c 	.word	0x0801892c
 800f078:	20012454 	.word	0x20012454

0800f07c <rmw_uxrce_fini_publisher_memory>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	6800      	ldr	r0, [r0, #0]
 800f082:	b128      	cbz	r0, 800f090 <rmw_uxrce_fini_publisher_memory+0x14>
 800f084:	4b06      	ldr	r3, [pc, #24]	@ (800f0a0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f086:	6819      	ldr	r1, [r3, #0]
 800f088:	f7f1 f8da 	bl	8000240 <strcmp>
 800f08c:	b938      	cbnz	r0, 800f09e <rmw_uxrce_fini_publisher_memory+0x22>
 800f08e:	6020      	str	r0, [r4, #0]
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	b121      	cbz	r1, 800f09e <rmw_uxrce_fini_publisher_memory+0x22>
 800f094:	4803      	ldr	r0, [pc, #12]	@ (800f0a4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f096:	f004 f9c7 	bl	8013428 <put_memory>
 800f09a:	2300      	movs	r3, #0
 800f09c:	6063      	str	r3, [r4, #4]
 800f09e:	bd10      	pop	{r4, pc}
 800f0a0:	0801892c 	.word	0x0801892c
 800f0a4:	20012464 	.word	0x20012464

0800f0a8 <rmw_uxrce_fini_subscription_memory>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	6800      	ldr	r0, [r0, #0]
 800f0ae:	b128      	cbz	r0, 800f0bc <rmw_uxrce_fini_subscription_memory+0x14>
 800f0b0:	4b06      	ldr	r3, [pc, #24]	@ (800f0cc <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0b2:	6819      	ldr	r1, [r3, #0]
 800f0b4:	f7f1 f8c4 	bl	8000240 <strcmp>
 800f0b8:	b938      	cbnz	r0, 800f0ca <rmw_uxrce_fini_subscription_memory+0x22>
 800f0ba:	6020      	str	r0, [r4, #0]
 800f0bc:	6861      	ldr	r1, [r4, #4]
 800f0be:	b121      	cbz	r1, 800f0ca <rmw_uxrce_fini_subscription_memory+0x22>
 800f0c0:	4803      	ldr	r0, [pc, #12]	@ (800f0d0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0c2:	f004 f9b1 	bl	8013428 <put_memory>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	bd10      	pop	{r4, pc}
 800f0cc:	0801892c 	.word	0x0801892c
 800f0d0:	200124a4 	.word	0x200124a4

0800f0d4 <rmw_uxrce_fini_service_memory>:
 800f0d4:	b510      	push	{r4, lr}
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	6800      	ldr	r0, [r0, #0]
 800f0da:	b128      	cbz	r0, 800f0e8 <rmw_uxrce_fini_service_memory+0x14>
 800f0dc:	4b06      	ldr	r3, [pc, #24]	@ (800f0f8 <rmw_uxrce_fini_service_memory+0x24>)
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	f7f1 f8ae 	bl	8000240 <strcmp>
 800f0e4:	b938      	cbnz	r0, 800f0f6 <rmw_uxrce_fini_service_memory+0x22>
 800f0e6:	6020      	str	r0, [r4, #0]
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	b121      	cbz	r1, 800f0f6 <rmw_uxrce_fini_service_memory+0x22>
 800f0ec:	4803      	ldr	r0, [pc, #12]	@ (800f0fc <rmw_uxrce_fini_service_memory+0x28>)
 800f0ee:	f004 f99b 	bl	8013428 <put_memory>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	6063      	str	r3, [r4, #4]
 800f0f6:	bd10      	pop	{r4, pc}
 800f0f8:	0801892c 	.word	0x0801892c
 800f0fc:	20012474 	.word	0x20012474

0800f100 <rmw_uxrce_fini_client_memory>:
 800f100:	b510      	push	{r4, lr}
 800f102:	4604      	mov	r4, r0
 800f104:	6800      	ldr	r0, [r0, #0]
 800f106:	b128      	cbz	r0, 800f114 <rmw_uxrce_fini_client_memory+0x14>
 800f108:	4b06      	ldr	r3, [pc, #24]	@ (800f124 <rmw_uxrce_fini_client_memory+0x24>)
 800f10a:	6819      	ldr	r1, [r3, #0]
 800f10c:	f7f1 f898 	bl	8000240 <strcmp>
 800f110:	b938      	cbnz	r0, 800f122 <rmw_uxrce_fini_client_memory+0x22>
 800f112:	6020      	str	r0, [r4, #0]
 800f114:	6861      	ldr	r1, [r4, #4]
 800f116:	b121      	cbz	r1, 800f122 <rmw_uxrce_fini_client_memory+0x22>
 800f118:	4803      	ldr	r0, [pc, #12]	@ (800f128 <rmw_uxrce_fini_client_memory+0x28>)
 800f11a:	f004 f985 	bl	8013428 <put_memory>
 800f11e:	2300      	movs	r3, #0
 800f120:	6063      	str	r3, [r4, #4]
 800f122:	bd10      	pop	{r4, pc}
 800f124:	0801892c 	.word	0x0801892c
 800f128:	2000db84 	.word	0x2000db84

0800f12c <rmw_uxrce_fini_topic_memory>:
 800f12c:	b510      	push	{r4, lr}
 800f12e:	4604      	mov	r4, r0
 800f130:	4803      	ldr	r0, [pc, #12]	@ (800f140 <rmw_uxrce_fini_topic_memory+0x14>)
 800f132:	4621      	mov	r1, r4
 800f134:	f004 f978 	bl	8013428 <put_memory>
 800f138:	2300      	movs	r3, #0
 800f13a:	61a3      	str	r3, [r4, #24]
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	bf00      	nop
 800f140:	200124b4 	.word	0x200124b4

0800f144 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f144:	b082      	sub	sp, #8
 800f146:	492b      	ldr	r1, [pc, #172]	@ (800f1f4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f148:	b530      	push	{r4, r5, lr}
 800f14a:	680d      	ldr	r5, [r1, #0]
 800f14c:	ac03      	add	r4, sp, #12
 800f14e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f152:	461c      	mov	r4, r3
 800f154:	2d00      	cmp	r5, #0
 800f156:	d04b      	beq.n	800f1f0 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f158:	462b      	mov	r3, r5
 800f15a:	2100      	movs	r1, #0
 800f15c:	689a      	ldr	r2, [r3, #8]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f164:	4290      	cmp	r0, r2
 800f166:	bf08      	it	eq
 800f168:	3101      	addeq	r1, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1f6      	bne.n	800f15c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f16e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f172:	2b02      	cmp	r3, #2
 800f174:	d029      	beq.n	800f1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f176:	d820      	bhi.n	800f1ba <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f178:	428c      	cmp	r4, r1
 800f17a:	d828      	bhi.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f17c:	fab4 f284 	clz	r2, r4
 800f180:	0952      	lsrs	r2, r2, #5
 800f182:	b324      	cbz	r4, 800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f184:	b1dd      	cbz	r5, 800f1be <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f186:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f18a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f18e:	e001      	b.n	800f194 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f190:	686d      	ldr	r5, [r5, #4]
 800f192:	b1ad      	cbz	r5, 800f1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f194:	68ab      	ldr	r3, [r5, #8]
 800f196:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f19a:	4288      	cmp	r0, r1
 800f19c:	d1f8      	bne.n	800f190 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f19e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f1a2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1a6:	4561      	cmp	r1, ip
 800f1a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1ac:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1b0:	daee      	bge.n	800f190 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f1b2:	468c      	mov	ip, r1
 800f1b4:	461c      	mov	r4, r3
 800f1b6:	462a      	mov	r2, r5
 800f1b8:	e7ea      	b.n	800f190 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d0dc      	beq.n	800f178 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f1be:	2200      	movs	r2, #0
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1c6:	b002      	add	sp, #8
 800f1c8:	4770      	bx	lr
 800f1ca:	428c      	cmp	r4, r1
 800f1cc:	d905      	bls.n	800f1da <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f1ce:	4809      	ldr	r0, [pc, #36]	@ (800f1f4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1d4:	b002      	add	sp, #8
 800f1d6:	f004 b917 	b.w	8013408 <get_memory>
 800f1da:	fab4 f284 	clz	r2, r4
 800f1de:	0952      	lsrs	r2, r2, #5
 800f1e0:	2c00      	cmp	r4, #0
 800f1e2:	d1ed      	bne.n	800f1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f1e4:	4803      	ldr	r0, [pc, #12]	@ (800f1f4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f1e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ea:	b002      	add	sp, #8
 800f1ec:	f004 b90c 	b.w	8013408 <get_memory>
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	e7bc      	b.n	800f16e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f1f4:	20012494 	.word	0x20012494

0800f1f8 <run_xrce_session>:
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	788c      	ldrb	r4, [r1, #2]
 800f1fc:	b086      	sub	sp, #24
 800f1fe:	2c01      	cmp	r4, #1
 800f200:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f204:	d00c      	beq.n	800f220 <run_xrce_session+0x28>
 800f206:	2401      	movs	r4, #1
 800f208:	4619      	mov	r1, r3
 800f20a:	f10d 020e 	add.w	r2, sp, #14
 800f20e:	f10d 0317 	add.w	r3, sp, #23
 800f212:	9400      	str	r4, [sp, #0]
 800f214:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f218:	f001 fa08 	bl	801062c <uxr_run_session_until_all_status>
 800f21c:	b006      	add	sp, #24
 800f21e:	bd10      	pop	{r4, pc}
 800f220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f224:	f000 fe5e 	bl	800fee4 <uxr_flash_output_streams>
 800f228:	4620      	mov	r0, r4
 800f22a:	b006      	add	sp, #24
 800f22c:	bd10      	pop	{r4, pc}
 800f22e:	bf00      	nop

0800f230 <convert_qos_profile>:
 800f230:	7a4a      	ldrb	r2, [r1, #9]
 800f232:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f236:	2a02      	cmp	r2, #2
 800f238:	bf18      	it	ne
 800f23a:	2200      	movne	r2, #0
 800f23c:	7002      	strb	r2, [r0, #0]
 800f23e:	f1ac 0202 	sub.w	r2, ip, #2
 800f242:	fab2 f282 	clz	r2, r2
 800f246:	0952      	lsrs	r2, r2, #5
 800f248:	7042      	strb	r2, [r0, #1]
 800f24a:	780a      	ldrb	r2, [r1, #0]
 800f24c:	8889      	ldrh	r1, [r1, #4]
 800f24e:	f1a2 0202 	sub.w	r2, r2, #2
 800f252:	8081      	strh	r1, [r0, #4]
 800f254:	fab2 f282 	clz	r2, r2
 800f258:	0952      	lsrs	r2, r2, #5
 800f25a:	7082      	strb	r2, [r0, #2]
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop

0800f260 <generate_type_name>:
 800f260:	2300      	movs	r3, #0
 800f262:	b530      	push	{r4, r5, lr}
 800f264:	700b      	strb	r3, [r1, #0]
 800f266:	b087      	sub	sp, #28
 800f268:	6803      	ldr	r3, [r0, #0]
 800f26a:	4614      	mov	r4, r2
 800f26c:	b1bb      	cbz	r3, 800f29e <generate_type_name+0x3e>
 800f26e:	4a0e      	ldr	r2, [pc, #56]	@ (800f2a8 <generate_type_name+0x48>)
 800f270:	4615      	mov	r5, r2
 800f272:	9500      	str	r5, [sp, #0]
 800f274:	9203      	str	r2, [sp, #12]
 800f276:	4d0d      	ldr	r5, [pc, #52]	@ (800f2ac <generate_type_name+0x4c>)
 800f278:	6842      	ldr	r2, [r0, #4]
 800f27a:	4608      	mov	r0, r1
 800f27c:	490c      	ldr	r1, [pc, #48]	@ (800f2b0 <generate_type_name+0x50>)
 800f27e:	9204      	str	r2, [sp, #16]
 800f280:	9105      	str	r1, [sp, #20]
 800f282:	9102      	str	r1, [sp, #8]
 800f284:	4621      	mov	r1, r4
 800f286:	4a0b      	ldr	r2, [pc, #44]	@ (800f2b4 <generate_type_name+0x54>)
 800f288:	9501      	str	r5, [sp, #4]
 800f28a:	f007 fe37 	bl	8016efc <sniprintf>
 800f28e:	2800      	cmp	r0, #0
 800f290:	bfa8      	it	ge
 800f292:	4284      	cmpge	r4, r0
 800f294:	bfcc      	ite	gt
 800f296:	2001      	movgt	r0, #1
 800f298:	2000      	movle	r0, #0
 800f29a:	b007      	add	sp, #28
 800f29c:	bd30      	pop	{r4, r5, pc}
 800f29e:	4b06      	ldr	r3, [pc, #24]	@ (800f2b8 <generate_type_name+0x58>)
 800f2a0:	4a01      	ldr	r2, [pc, #4]	@ (800f2a8 <generate_type_name+0x48>)
 800f2a2:	461d      	mov	r5, r3
 800f2a4:	e7e5      	b.n	800f272 <generate_type_name+0x12>
 800f2a6:	bf00      	nop
 800f2a8:	080185ac 	.word	0x080185ac
 800f2ac:	080185c4 	.word	0x080185c4
 800f2b0:	080185c0 	.word	0x080185c0
 800f2b4:	080185b0 	.word	0x080185b0
 800f2b8:	08018618 	.word	0x08018618

0800f2bc <generate_topic_name>:
 800f2bc:	b530      	push	{r4, r5, lr}
 800f2be:	4614      	mov	r4, r2
 800f2c0:	b083      	sub	sp, #12
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	4b07      	ldr	r3, [pc, #28]	@ (800f2e4 <generate_topic_name+0x28>)
 800f2c6:	4a08      	ldr	r2, [pc, #32]	@ (800f2e8 <generate_topic_name+0x2c>)
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	9500      	str	r5, [sp, #0]
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	f007 fe15 	bl	8016efc <sniprintf>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	bfa8      	it	ge
 800f2d6:	4284      	cmpge	r4, r0
 800f2d8:	bfcc      	ite	gt
 800f2da:	2001      	movgt	r0, #1
 800f2dc:	2000      	movle	r0, #0
 800f2de:	b003      	add	sp, #12
 800f2e0:	bd30      	pop	{r4, r5, pc}
 800f2e2:	bf00      	nop
 800f2e4:	080185c8 	.word	0x080185c8
 800f2e8:	08018160 	.word	0x08018160

0800f2ec <is_uxrce_rmw_identifier_valid>:
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	b140      	cbz	r0, 800f304 <is_uxrce_rmw_identifier_valid+0x18>
 800f2f2:	f004 f8f1 	bl	80134d8 <rmw_get_implementation_identifier>
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f7f0 ffa1 	bl	8000240 <strcmp>
 800f2fe:	fab0 f080 	clz	r0, r0
 800f302:	0940      	lsrs	r0, r0, #5
 800f304:	bd10      	pop	{r4, pc}
 800f306:	bf00      	nop

0800f308 <get_message_typesupport_handle>:
 800f308:	6883      	ldr	r3, [r0, #8]
 800f30a:	4718      	bx	r3

0800f30c <get_message_typesupport_handle_function>:
 800f30c:	b510      	push	{r4, lr}
 800f30e:	4604      	mov	r4, r0
 800f310:	6800      	ldr	r0, [r0, #0]
 800f312:	f7f0 ff95 	bl	8000240 <strcmp>
 800f316:	2800      	cmp	r0, #0
 800f318:	bf0c      	ite	eq
 800f31a:	4620      	moveq	r0, r4
 800f31c:	2000      	movne	r0, #0
 800f31e:	bd10      	pop	{r4, pc}

0800f320 <rosidl_runtime_c__String__init>:
 800f320:	b510      	push	{r4, lr}
 800f322:	4604      	mov	r4, r0
 800f324:	b086      	sub	sp, #24
 800f326:	b170      	cbz	r0, 800f346 <rosidl_runtime_c__String__init+0x26>
 800f328:	a801      	add	r0, sp, #4
 800f32a:	f7fe fef3 	bl	800e114 <rcutils_get_default_allocator>
 800f32e:	9b01      	ldr	r3, [sp, #4]
 800f330:	9905      	ldr	r1, [sp, #20]
 800f332:	2001      	movs	r0, #1
 800f334:	4798      	blx	r3
 800f336:	6020      	str	r0, [r4, #0]
 800f338:	b128      	cbz	r0, 800f346 <rosidl_runtime_c__String__init+0x26>
 800f33a:	2100      	movs	r1, #0
 800f33c:	2201      	movs	r2, #1
 800f33e:	7001      	strb	r1, [r0, #0]
 800f340:	4610      	mov	r0, r2
 800f342:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f346:	b006      	add	sp, #24
 800f348:	bd10      	pop	{r4, pc}
 800f34a:	bf00      	nop

0800f34c <rosidl_runtime_c__String__fini>:
 800f34c:	b320      	cbz	r0, 800f398 <rosidl_runtime_c__String__fini+0x4c>
 800f34e:	6803      	ldr	r3, [r0, #0]
 800f350:	b510      	push	{r4, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	b086      	sub	sp, #24
 800f356:	b173      	cbz	r3, 800f376 <rosidl_runtime_c__String__fini+0x2a>
 800f358:	6883      	ldr	r3, [r0, #8]
 800f35a:	b1f3      	cbz	r3, 800f39a <rosidl_runtime_c__String__fini+0x4e>
 800f35c:	a801      	add	r0, sp, #4
 800f35e:	f7fe fed9 	bl	800e114 <rcutils_get_default_allocator>
 800f362:	9b02      	ldr	r3, [sp, #8]
 800f364:	9905      	ldr	r1, [sp, #20]
 800f366:	6820      	ldr	r0, [r4, #0]
 800f368:	4798      	blx	r3
 800f36a:	2300      	movs	r3, #0
 800f36c:	e9c4 3300 	strd	r3, r3, [r4]
 800f370:	60a3      	str	r3, [r4, #8]
 800f372:	b006      	add	sp, #24
 800f374:	bd10      	pop	{r4, pc}
 800f376:	6843      	ldr	r3, [r0, #4]
 800f378:	b9db      	cbnz	r3, 800f3b2 <rosidl_runtime_c__String__fini+0x66>
 800f37a:	6883      	ldr	r3, [r0, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d0f8      	beq.n	800f372 <rosidl_runtime_c__String__fini+0x26>
 800f380:	4b12      	ldr	r3, [pc, #72]	@ (800f3cc <rosidl_runtime_c__String__fini+0x80>)
 800f382:	2251      	movs	r2, #81	@ 0x51
 800f384:	2101      	movs	r1, #1
 800f386:	4812      	ldr	r0, [pc, #72]	@ (800f3d0 <rosidl_runtime_c__String__fini+0x84>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	f007 fd96 	bl	8016ebc <fwrite>
 800f390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f394:	f007 fa52 	bl	801683c <exit>
 800f398:	4770      	bx	lr
 800f39a:	4b0c      	ldr	r3, [pc, #48]	@ (800f3cc <rosidl_runtime_c__String__fini+0x80>)
 800f39c:	224c      	movs	r2, #76	@ 0x4c
 800f39e:	2101      	movs	r1, #1
 800f3a0:	480c      	ldr	r0, [pc, #48]	@ (800f3d4 <rosidl_runtime_c__String__fini+0x88>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	f007 fd89 	bl	8016ebc <fwrite>
 800f3aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3ae:	f007 fa45 	bl	801683c <exit>
 800f3b2:	4b06      	ldr	r3, [pc, #24]	@ (800f3cc <rosidl_runtime_c__String__fini+0x80>)
 800f3b4:	224e      	movs	r2, #78	@ 0x4e
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	4807      	ldr	r0, [pc, #28]	@ (800f3d8 <rosidl_runtime_c__String__fini+0x8c>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	f007 fd7d 	bl	8016ebc <fwrite>
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3c6:	f007 fa39 	bl	801683c <exit>
 800f3ca:	bf00      	nop
 800f3cc:	200001c0 	.word	0x200001c0
 800f3d0:	0801866c 	.word	0x0801866c
 800f3d4:	080185cc 	.word	0x080185cc
 800f3d8:	0801861c 	.word	0x0801861c

0800f3dc <rosidl_runtime_c__String__assignn>:
 800f3dc:	2900      	cmp	r1, #0
 800f3de:	bf18      	it	ne
 800f3e0:	f1b2 3fff 	cmpne.w	r2, #4294967295	@ 0xffffffff
 800f3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	bf0c      	ite	eq
 800f3ea:	2401      	moveq	r4, #1
 800f3ec:	2400      	movne	r4, #0
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	bf08      	it	eq
 800f3f4:	f044 0401 	orreq.w	r4, r4, #1
 800f3f8:	b124      	cbz	r4, 800f404 <rosidl_runtime_c__String__assignn+0x28>
 800f3fa:	2400      	movs	r4, #0
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	b007      	add	sp, #28
 800f400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f404:	4616      	mov	r6, r2
 800f406:	4605      	mov	r5, r0
 800f408:	a801      	add	r0, sp, #4
 800f40a:	460f      	mov	r7, r1
 800f40c:	f106 0901 	add.w	r9, r6, #1
 800f410:	f7fe fe80 	bl	800e114 <rcutils_get_default_allocator>
 800f414:	9b03      	ldr	r3, [sp, #12]
 800f416:	9a05      	ldr	r2, [sp, #20]
 800f418:	4649      	mov	r1, r9
 800f41a:	6828      	ldr	r0, [r5, #0]
 800f41c:	4798      	blx	r3
 800f41e:	4680      	mov	r8, r0
 800f420:	2800      	cmp	r0, #0
 800f422:	d0eb      	beq.n	800f3fc <rosidl_runtime_c__String__assignn+0x20>
 800f424:	4639      	mov	r1, r7
 800f426:	4632      	mov	r2, r6
 800f428:	f007 ff75 	bl	8017316 <memcpy>
 800f42c:	f808 4006 	strb.w	r4, [r8, r6]
 800f430:	2401      	movs	r4, #1
 800f432:	f8c5 9008 	str.w	r9, [r5, #8]
 800f436:	4620      	mov	r0, r4
 800f438:	e9c5 8600 	strd	r8, r6, [r5]
 800f43c:	b007      	add	sp, #28
 800f43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f442:	bf00      	nop

0800f444 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f444:	4b04      	ldr	r3, [pc, #16]	@ (800f458 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	b10a      	cbz	r2, 800f44e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800f44a:	4803      	ldr	r0, [pc, #12]	@ (800f458 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f44c:	4770      	bx	lr
 800f44e:	4a03      	ldr	r2, [pc, #12]	@ (800f45c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800f450:	4801      	ldr	r0, [pc, #4]	@ (800f458 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f452:	6812      	ldr	r2, [r2, #0]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	4770      	bx	lr
 800f458:	20000130 	.word	0x20000130
 800f45c:	200001ac 	.word	0x200001ac

0800f460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f460:	4a02      	ldr	r2, [pc, #8]	@ (800f46c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800f462:	4b03      	ldr	r3, [pc, #12]	@ (800f470 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800f464:	6812      	ldr	r2, [r2, #0]
 800f466:	601a      	str	r2, [r3, #0]
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	200001ac 	.word	0x200001ac
 800f470:	20000130 	.word	0x20000130

0800f474 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800f474:	f004 bb8c 	b.w	8013b90 <std_msgs__msg__String__init>

0800f478 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800f478:	f004 bb9c 	b.w	8013bb4 <std_msgs__msg__String__fini>

0800f47c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f47c:	4b04      	ldr	r3, [pc, #16]	@ (800f490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	b10a      	cbz	r2, 800f486 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800f482:	4803      	ldr	r0, [pc, #12]	@ (800f490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f484:	4770      	bx	lr
 800f486:	4a03      	ldr	r2, [pc, #12]	@ (800f494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800f488:	4801      	ldr	r0, [pc, #4]	@ (800f490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	4770      	bx	lr
 800f490:	20000178 	.word	0x20000178
 800f494:	200001b0 	.word	0x200001b0

0800f498 <_String__max_serialized_size>:
 800f498:	2000      	movs	r0, #0
 800f49a:	4770      	bx	lr

0800f49c <_String__cdr_serialize>:
 800f49c:	b1c8      	cbz	r0, 800f4d2 <_String__cdr_serialize+0x36>
 800f49e:	b570      	push	{r4, r5, r6, lr}
 800f4a0:	6806      	ldr	r6, [r0, #0]
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	460d      	mov	r5, r1
 800f4a6:	b15e      	cbz	r6, 800f4c0 <_String__cdr_serialize+0x24>
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7f0 fed3 	bl	8000254 <strlen>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	1c42      	adds	r2, r0, #1
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	6063      	str	r3, [r4, #4]
 800f4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4bc:	f000 b91a 	b.w	800f6f4 <ucdr_serialize_sequence_char>
 800f4c0:	4633      	mov	r3, r6
 800f4c2:	4632      	mov	r2, r6
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	6063      	str	r3, [r4, #4]
 800f4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4ce:	f000 b911 	b.w	800f6f4 <ucdr_serialize_sequence_char>
 800f4d2:	4770      	bx	lr

0800f4d4 <get_serialized_size_std_msgs__msg__String>:
 800f4d4:	b510      	push	{r4, lr}
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	b130      	cbz	r0, 800f4e8 <get_serialized_size_std_msgs__msg__String+0x14>
 800f4da:	4608      	mov	r0, r1
 800f4dc:	2104      	movs	r1, #4
 800f4de:	f000 f899 	bl	800f614 <ucdr_alignment>
 800f4e2:	6863      	ldr	r3, [r4, #4]
 800f4e4:	3305      	adds	r3, #5
 800f4e6:	4418      	add	r0, r3
 800f4e8:	bd10      	pop	{r4, pc}
 800f4ea:	bf00      	nop

0800f4ec <_String__cdr_deserialize>:
 800f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	b083      	sub	sp, #12
 800f4f2:	b1a1      	cbz	r1, 800f51e <_String__cdr_deserialize+0x32>
 800f4f4:	688f      	ldr	r7, [r1, #8]
 800f4f6:	ab01      	add	r3, sp, #4
 800f4f8:	6809      	ldr	r1, [r1, #0]
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	463a      	mov	r2, r7
 800f4fe:	f000 f90b 	bl	800f718 <ucdr_deserialize_sequence_char>
 800f502:	9b01      	ldr	r3, [sp, #4]
 800f504:	4605      	mov	r5, r0
 800f506:	b920      	cbnz	r0, 800f512 <_String__cdr_deserialize+0x26>
 800f508:	429f      	cmp	r7, r3
 800f50a:	d30c      	bcc.n	800f526 <_String__cdr_deserialize+0x3a>
 800f50c:	4628      	mov	r0, r5
 800f50e:	b003      	add	sp, #12
 800f510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f512:	b103      	cbz	r3, 800f516 <_String__cdr_deserialize+0x2a>
 800f514:	3b01      	subs	r3, #1
 800f516:	4628      	mov	r0, r5
 800f518:	6063      	str	r3, [r4, #4]
 800f51a:	b003      	add	sp, #12
 800f51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51e:	460d      	mov	r5, r1
 800f520:	4628      	mov	r0, r5
 800f522:	b003      	add	sp, #12
 800f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f526:	2101      	movs	r1, #1
 800f528:	4630      	mov	r0, r6
 800f52a:	75b5      	strb	r5, [r6, #22]
 800f52c:	7571      	strb	r1, [r6, #21]
 800f52e:	6065      	str	r5, [r4, #4]
 800f530:	f000 f888 	bl	800f644 <ucdr_align_to>
 800f534:	4630      	mov	r0, r6
 800f536:	9901      	ldr	r1, [sp, #4]
 800f538:	f000 f8bc 	bl	800f6b4 <ucdr_advance_buffer>
 800f53c:	4628      	mov	r0, r5
 800f53e:	b003      	add	sp, #12
 800f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f542:	bf00      	nop

0800f544 <_String__get_serialized_size>:
 800f544:	b510      	push	{r4, lr}
 800f546:	4604      	mov	r4, r0
 800f548:	b130      	cbz	r0, 800f558 <_String__get_serialized_size+0x14>
 800f54a:	2104      	movs	r1, #4
 800f54c:	2000      	movs	r0, #0
 800f54e:	f000 f861 	bl	800f614 <ucdr_alignment>
 800f552:	6863      	ldr	r3, [r4, #4]
 800f554:	3305      	adds	r3, #5
 800f556:	4418      	add	r0, r3
 800f558:	bd10      	pop	{r4, pc}
 800f55a:	bf00      	nop

0800f55c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f55c:	4800      	ldr	r0, [pc, #0]	@ (800f560 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800f55e:	4770      	bx	lr
 800f560:	20000184 	.word	0x20000184

0800f564 <ucdr_check_buffer_available_for>:
 800f564:	7d83      	ldrb	r3, [r0, #22]
 800f566:	b93b      	cbnz	r3, 800f578 <ucdr_check_buffer_available_for+0x14>
 800f568:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f56c:	4419      	add	r1, r3
 800f56e:	4288      	cmp	r0, r1
 800f570:	bf34      	ite	cc
 800f572:	2000      	movcc	r0, #0
 800f574:	2001      	movcs	r0, #1
 800f576:	4770      	bx	lr
 800f578:	2000      	movs	r0, #0
 800f57a:	4770      	bx	lr

0800f57c <ucdr_check_final_buffer_behavior>:
 800f57c:	7d83      	ldrb	r3, [r0, #22]
 800f57e:	b943      	cbnz	r3, 800f592 <ucdr_check_final_buffer_behavior+0x16>
 800f580:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f584:	b510      	push	{r4, lr}
 800f586:	4291      	cmp	r1, r2
 800f588:	4604      	mov	r4, r0
 800f58a:	d205      	bcs.n	800f598 <ucdr_check_final_buffer_behavior+0x1c>
 800f58c:	2301      	movs	r3, #1
 800f58e:	4618      	mov	r0, r3
 800f590:	bd10      	pop	{r4, pc}
 800f592:	2300      	movs	r3, #0
 800f594:	4618      	mov	r0, r3
 800f596:	4770      	bx	lr
 800f598:	6982      	ldr	r2, [r0, #24]
 800f59a:	b13a      	cbz	r2, 800f5ac <ucdr_check_final_buffer_behavior+0x30>
 800f59c:	69c1      	ldr	r1, [r0, #28]
 800f59e:	4790      	blx	r2
 800f5a0:	f080 0301 	eor.w	r3, r0, #1
 800f5a4:	75a0      	strb	r0, [r4, #22]
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	bd10      	pop	{r4, pc}
 800f5ac:	2001      	movs	r0, #1
 800f5ae:	75a0      	strb	r0, [r4, #22]
 800f5b0:	e7fa      	b.n	800f5a8 <ucdr_check_final_buffer_behavior+0x2c>
 800f5b2:	bf00      	nop

0800f5b4 <ucdr_set_on_full_buffer_callback>:
 800f5b4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop

0800f5bc <ucdr_init_buffer_origin_offset_endian>:
 800f5bc:	b410      	push	{r4}
 800f5be:	9c01      	ldr	r4, [sp, #4]
 800f5c0:	440a      	add	r2, r1
 800f5c2:	6001      	str	r1, [r0, #0]
 800f5c4:	6042      	str	r2, [r0, #4]
 800f5c6:	190a      	adds	r2, r1, r4
 800f5c8:	441c      	add	r4, r3
 800f5ca:	6082      	str	r2, [r0, #8]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f5d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f5d6:	7542      	strb	r2, [r0, #21]
 800f5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5dc:	7582      	strb	r2, [r0, #22]
 800f5de:	7503      	strb	r3, [r0, #20]
 800f5e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop

0800f5e8 <ucdr_init_buffer_origin_offset>:
 800f5e8:	b510      	push	{r4, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	9c04      	ldr	r4, [sp, #16]
 800f5ee:	9400      	str	r4, [sp, #0]
 800f5f0:	2401      	movs	r4, #1
 800f5f2:	9401      	str	r4, [sp, #4]
 800f5f4:	f7ff ffe2 	bl	800f5bc <ucdr_init_buffer_origin_offset_endian>
 800f5f8:	b002      	add	sp, #8
 800f5fa:	bd10      	pop	{r4, pc}

0800f5fc <ucdr_init_buffer_origin>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	2400      	movs	r4, #0
 800f600:	b082      	sub	sp, #8
 800f602:	9400      	str	r4, [sp, #0]
 800f604:	f7ff fff0 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 800f608:	b002      	add	sp, #8
 800f60a:	bd10      	pop	{r4, pc}

0800f60c <ucdr_init_buffer>:
 800f60c:	2300      	movs	r3, #0
 800f60e:	f7ff bff5 	b.w	800f5fc <ucdr_init_buffer_origin>
 800f612:	bf00      	nop

0800f614 <ucdr_alignment>:
 800f614:	fbb0 f2f1 	udiv	r2, r0, r1
 800f618:	fb02 0011 	mls	r0, r2, r1, r0
 800f61c:	1e4b      	subs	r3, r1, #1
 800f61e:	1a08      	subs	r0, r1, r0
 800f620:	4018      	ands	r0, r3
 800f622:	4770      	bx	lr

0800f624 <ucdr_buffer_alignment>:
 800f624:	7d43      	ldrb	r3, [r0, #21]
 800f626:	428b      	cmp	r3, r1
 800f628:	d209      	bcs.n	800f63e <ucdr_buffer_alignment+0x1a>
 800f62a:	6903      	ldr	r3, [r0, #16]
 800f62c:	1e4a      	subs	r2, r1, #1
 800f62e:	fbb3 f0f1 	udiv	r0, r3, r1
 800f632:	fb01 3010 	mls	r0, r1, r0, r3
 800f636:	1a09      	subs	r1, r1, r0
 800f638:	ea01 0002 	and.w	r0, r1, r2
 800f63c:	4770      	bx	lr
 800f63e:	2000      	movs	r0, #0
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop

0800f644 <ucdr_align_to>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	f7ff ffeb 	bl	800f624 <ucdr_buffer_alignment>
 800f64e:	68a3      	ldr	r3, [r4, #8]
 800f650:	7565      	strb	r5, [r4, #21]
 800f652:	181a      	adds	r2, r3, r0
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	4418      	add	r0, r3
 800f658:	6863      	ldr	r3, [r4, #4]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	6120      	str	r0, [r4, #16]
 800f65e:	bf28      	it	cs
 800f660:	4613      	movcs	r3, r2
 800f662:	60a3      	str	r3, [r4, #8]
 800f664:	bd38      	pop	{r3, r4, r5, pc}
 800f666:	bf00      	nop

0800f668 <ucdr_buffer_length>:
 800f668:	6882      	ldr	r2, [r0, #8]
 800f66a:	6800      	ldr	r0, [r0, #0]
 800f66c:	1a10      	subs	r0, r2, r0
 800f66e:	4770      	bx	lr

0800f670 <ucdr_buffer_remaining>:
 800f670:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f674:	1a10      	subs	r0, r2, r0
 800f676:	4770      	bx	lr

0800f678 <ucdr_check_final_buffer_behavior_array>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	7d83      	ldrb	r3, [r0, #22]
 800f67c:	b9a3      	cbnz	r3, 800f6a8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f67e:	4604      	mov	r4, r0
 800f680:	460d      	mov	r5, r1
 800f682:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f686:	429a      	cmp	r2, r3
 800f688:	d300      	bcc.n	800f68c <ucdr_check_final_buffer_behavior_array+0x14>
 800f68a:	b931      	cbnz	r1, 800f69a <ucdr_check_final_buffer_behavior_array+0x22>
 800f68c:	4620      	mov	r0, r4
 800f68e:	f7ff ffef 	bl	800f670 <ucdr_buffer_remaining>
 800f692:	42a8      	cmp	r0, r5
 800f694:	bf28      	it	cs
 800f696:	4628      	movcs	r0, r5
 800f698:	bd38      	pop	{r3, r4, r5, pc}
 800f69a:	6983      	ldr	r3, [r0, #24]
 800f69c:	b133      	cbz	r3, 800f6ac <ucdr_check_final_buffer_behavior_array+0x34>
 800f69e:	69c1      	ldr	r1, [r0, #28]
 800f6a0:	4798      	blx	r3
 800f6a2:	75a0      	strb	r0, [r4, #22]
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d0f1      	beq.n	800f68c <ucdr_check_final_buffer_behavior_array+0x14>
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	bd38      	pop	{r3, r4, r5, pc}
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	7583      	strb	r3, [r0, #22]
 800f6b0:	e7fa      	b.n	800f6a8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f6b2:	bf00      	nop

0800f6b4 <ucdr_advance_buffer>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	460d      	mov	r5, r1
 800f6ba:	f7ff ff53 	bl	800f564 <ucdr_check_buffer_available_for>
 800f6be:	b178      	cbz	r0, 800f6e0 <ucdr_advance_buffer+0x2c>
 800f6c0:	6923      	ldr	r3, [r4, #16]
 800f6c2:	68a2      	ldr	r2, [r4, #8]
 800f6c4:	442b      	add	r3, r5
 800f6c6:	442a      	add	r2, r5
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	60a2      	str	r2, [r4, #8]
 800f6ce:	7563      	strb	r3, [r4, #21]
 800f6d0:	bd38      	pop	{r3, r4, r5, pc}
 800f6d2:	68a2      	ldr	r2, [r4, #8]
 800f6d4:	1a2d      	subs	r5, r5, r0
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	4402      	add	r2, r0
 800f6da:	4418      	add	r0, r3
 800f6dc:	60a2      	str	r2, [r4, #8]
 800f6de:	6120      	str	r0, [r4, #16]
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f7ff ffc7 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d1f1      	bne.n	800f6d2 <ucdr_advance_buffer+0x1e>
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	7563      	strb	r3, [r4, #21]
 800f6f2:	bd38      	pop	{r3, r4, r5, pc}

0800f6f4 <ucdr_serialize_sequence_char>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	4615      	mov	r5, r2
 800f6f8:	460e      	mov	r6, r1
 800f6fa:	7d01      	ldrb	r1, [r0, #20]
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	f004 fe6b 	bl	80143d8 <ucdr_serialize_endian_uint32_t>
 800f702:	b90d      	cbnz	r5, 800f708 <ucdr_serialize_sequence_char+0x14>
 800f704:	2001      	movs	r0, #1
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	462b      	mov	r3, r5
 800f70a:	4632      	mov	r2, r6
 800f70c:	7d21      	ldrb	r1, [r4, #20]
 800f70e:	4620      	mov	r0, r4
 800f710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f714:	f004 ba52 	b.w	8013bbc <ucdr_serialize_endian_array_char>

0800f718 <ucdr_deserialize_sequence_char>:
 800f718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	461d      	mov	r5, r3
 800f71e:	4616      	mov	r6, r2
 800f720:	460f      	mov	r7, r1
 800f722:	461a      	mov	r2, r3
 800f724:	7d01      	ldrb	r1, [r0, #20]
 800f726:	4604      	mov	r4, r0
 800f728:	f004 ff7e 	bl	8014628 <ucdr_deserialize_endian_uint32_t>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	429e      	cmp	r6, r3
 800f730:	d201      	bcs.n	800f736 <ucdr_deserialize_sequence_char+0x1e>
 800f732:	2201      	movs	r2, #1
 800f734:	75a2      	strb	r2, [r4, #22]
 800f736:	b913      	cbnz	r3, 800f73e <ucdr_deserialize_sequence_char+0x26>
 800f738:	2001      	movs	r0, #1
 800f73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f73e:	463a      	mov	r2, r7
 800f740:	7d21      	ldrb	r1, [r4, #20]
 800f742:	4620      	mov	r0, r4
 800f744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	f004 ba6a 	b.w	8013c20 <ucdr_deserialize_endian_array_char>

0800f74c <ucdr_serialize_sequence_uint8_t>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	4615      	mov	r5, r2
 800f750:	460e      	mov	r6, r1
 800f752:	7d01      	ldrb	r1, [r0, #20]
 800f754:	4604      	mov	r4, r0
 800f756:	f004 fe3f 	bl	80143d8 <ucdr_serialize_endian_uint32_t>
 800f75a:	b90d      	cbnz	r5, 800f760 <ucdr_serialize_sequence_uint8_t+0x14>
 800f75c:	2001      	movs	r0, #1
 800f75e:	bd70      	pop	{r4, r5, r6, pc}
 800f760:	462b      	mov	r3, r5
 800f762:	4632      	mov	r2, r6
 800f764:	7d21      	ldrb	r1, [r4, #20]
 800f766:	4620      	mov	r0, r4
 800f768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f76c:	f004 babe 	b.w	8013cec <ucdr_serialize_endian_array_uint8_t>

0800f770 <ucdr_deserialize_sequence_uint8_t>:
 800f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f774:	461d      	mov	r5, r3
 800f776:	4616      	mov	r6, r2
 800f778:	460f      	mov	r7, r1
 800f77a:	461a      	mov	r2, r3
 800f77c:	7d01      	ldrb	r1, [r0, #20]
 800f77e:	4604      	mov	r4, r0
 800f780:	f004 ff52 	bl	8014628 <ucdr_deserialize_endian_uint32_t>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	429e      	cmp	r6, r3
 800f788:	d201      	bcs.n	800f78e <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f78a:	2201      	movs	r2, #1
 800f78c:	75a2      	strb	r2, [r4, #22]
 800f78e:	b913      	cbnz	r3, 800f796 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f790:	2001      	movs	r0, #1
 800f792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f796:	463a      	mov	r2, r7
 800f798:	7d21      	ldrb	r1, [r4, #20]
 800f79a:	4620      	mov	r0, r4
 800f79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a0:	f004 bb0a 	b.w	8013db8 <ucdr_deserialize_endian_array_uint8_t>

0800f7a4 <uxr_buffer_delete_entity>:
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	b08e      	sub	sp, #56	@ 0x38
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	9103      	str	r1, [sp, #12]
 800f7ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	2204      	movs	r2, #4
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	ab06      	add	r3, sp, #24
 800f7ba:	f001 f963 	bl	8010a84 <uxr_prepare_stream_to_write_submessage>
 800f7be:	b918      	cbnz	r0, 800f7c8 <uxr_buffer_delete_entity+0x24>
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	b00e      	add	sp, #56	@ 0x38
 800f7c6:	bd10      	pop	{r4, pc}
 800f7c8:	9902      	ldr	r1, [sp, #8]
 800f7ca:	aa05      	add	r2, sp, #20
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f001 fa95 	bl	8010cfc <uxr_init_base_object_request>
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	a905      	add	r1, sp, #20
 800f7d6:	a806      	add	r0, sp, #24
 800f7d8:	f002 fbfe 	bl	8011fd8 <uxr_serialize_DELETE_Payload>
 800f7dc:	4620      	mov	r0, r4
 800f7de:	b00e      	add	sp, #56	@ 0x38
 800f7e0:	bd10      	pop	{r4, pc}
 800f7e2:	bf00      	nop

0800f7e4 <uxr_common_create_entity>:
 800f7e4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	f1bc 0f01 	cmp.w	ip, #1
 800f7ee:	b08c      	sub	sp, #48	@ 0x30
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	9202      	str	r2, [sp, #8]
 800f7f4:	bf0c      	ite	eq
 800f7f6:	f003 0201 	andeq.w	r2, r3, #1
 800f7fa:	2200      	movne	r2, #0
 800f7fc:	330e      	adds	r3, #14
 800f7fe:	9103      	str	r1, [sp, #12]
 800f800:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f804:	441a      	add	r2, r3
 800f806:	ab04      	add	r3, sp, #16
 800f808:	9101      	str	r1, [sp, #4]
 800f80a:	2101      	movs	r1, #1
 800f80c:	b292      	uxth	r2, r2
 800f80e:	9100      	str	r1, [sp, #0]
 800f810:	9903      	ldr	r1, [sp, #12]
 800f812:	f001 f937 	bl	8010a84 <uxr_prepare_stream_to_write_submessage>
 800f816:	b918      	cbnz	r0, 800f820 <uxr_common_create_entity+0x3c>
 800f818:	4604      	mov	r4, r0
 800f81a:	4620      	mov	r0, r4
 800f81c:	b00c      	add	sp, #48	@ 0x30
 800f81e:	bd10      	pop	{r4, pc}
 800f820:	9902      	ldr	r1, [sp, #8]
 800f822:	4620      	mov	r0, r4
 800f824:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f826:	f001 fa69 	bl	8010cfc <uxr_init_base_object_request>
 800f82a:	4604      	mov	r4, r0
 800f82c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f82e:	a804      	add	r0, sp, #16
 800f830:	f002 fb2c 	bl	8011e8c <uxr_serialize_CREATE_Payload>
 800f834:	4620      	mov	r0, r4
 800f836:	b00c      	add	sp, #48	@ 0x30
 800f838:	bd10      	pop	{r4, pc}
 800f83a:	bf00      	nop

0800f83c <uxr_buffer_create_participant_bin>:
 800f83c:	b570      	push	{r4, r5, r6, lr}
 800f83e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f842:	4605      	mov	r5, r0
 800f844:	ac11      	add	r4, sp, #68	@ 0x44
 800f846:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f84a:	2303      	movs	r3, #3
 800f84c:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f850:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f854:	7223      	strb	r3, [r4, #8]
 800f856:	2300      	movs	r3, #0
 800f858:	2201      	movs	r2, #1
 800f85a:	f88d 3014 	strb.w	r3, [sp, #20]
 800f85e:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f860:	7122      	strb	r2, [r4, #4]
 800f862:	b1cb      	cbz	r3, 800f898 <uxr_buffer_create_participant_bin+0x5c>
 800f864:	f88d 201c 	strb.w	r2, [sp, #28]
 800f868:	9308      	str	r3, [sp, #32]
 800f86a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f86e:	a915      	add	r1, sp, #84	@ 0x54
 800f870:	a809      	add	r0, sp, #36	@ 0x24
 800f872:	f7ff fecb 	bl	800f60c <ucdr_init_buffer>
 800f876:	a905      	add	r1, sp, #20
 800f878:	a809      	add	r0, sp, #36	@ 0x24
 800f87a:	f001 ffdd 	bl	8011838 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f87e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f880:	9600      	str	r6, [sp, #0]
 800f882:	4628      	mov	r0, r5
 800f884:	9401      	str	r4, [sp, #4]
 800f886:	60e3      	str	r3, [r4, #12]
 800f888:	b29b      	uxth	r3, r3
 800f88a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f88e:	f7ff ffa9 	bl	800f7e4 <uxr_common_create_entity>
 800f892:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	f88d 301c 	strb.w	r3, [sp, #28]
 800f89c:	e7e5      	b.n	800f86a <uxr_buffer_create_participant_bin+0x2e>
 800f89e:	bf00      	nop

0800f8a0 <uxr_buffer_create_topic_bin>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	9105      	str	r1, [sp, #20]
 800f8ac:	a997      	add	r1, sp, #604	@ 0x25c
 800f8ae:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f8b2:	ac13      	add	r4, sp, #76	@ 0x4c
 800f8b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f8be:	f000 f8ed 	bl	800fa9c <uxr_object_id_to_raw>
 800f8c2:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f8c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8c8:	a917      	add	r1, sp, #92	@ 0x5c
 800f8ca:	a80b      	add	r0, sp, #44	@ 0x2c
 800f8cc:	9306      	str	r3, [sp, #24]
 800f8ce:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f8d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8d2:	2303      	movs	r3, #3
 800f8d4:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f8d8:	2301      	movs	r3, #1
 800f8da:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f88d 301c 	strb.w	r3, [sp, #28]
 800f8e4:	f7ff fe92 	bl	800f60c <ucdr_init_buffer>
 800f8e8:	a906      	add	r1, sp, #24
 800f8ea:	a80b      	add	r0, sp, #44	@ 0x2c
 800f8ec:	f001 ffc6 	bl	801187c <uxr_serialize_OBJK_Topic_Binary>
 800f8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	9600      	str	r6, [sp, #0]
 800f8f6:	9316      	str	r3, [sp, #88]	@ 0x58
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	9401      	str	r4, [sp, #4]
 800f8fc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f900:	f7ff ff70 	bl	800f7e4 <uxr_common_create_entity>
 800f904:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f908:	bd70      	pop	{r4, r5, r6, pc}
 800f90a:	bf00      	nop

0800f90c <uxr_buffer_create_publisher_bin>:
 800f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f912:	2603      	movs	r6, #3
 800f914:	4605      	mov	r5, r0
 800f916:	4618      	mov	r0, r3
 800f918:	9105      	str	r1, [sp, #20]
 800f91a:	a992      	add	r1, sp, #584	@ 0x248
 800f91c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f920:	ac0e      	add	r4, sp, #56	@ 0x38
 800f922:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f926:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f92a:	f000 f8b7 	bl	800fa9c <uxr_object_id_to_raw>
 800f92e:	2300      	movs	r3, #0
 800f930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f934:	a912      	add	r1, sp, #72	@ 0x48
 800f936:	a806      	add	r0, sp, #24
 800f938:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f93c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f940:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f944:	f7ff fe62 	bl	800f60c <ucdr_init_buffer>
 800f948:	a993      	add	r1, sp, #588	@ 0x24c
 800f94a:	a806      	add	r0, sp, #24
 800f94c:	f002 f84a 	bl	80119e4 <uxr_serialize_OBJK_Publisher_Binary>
 800f950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f952:	4628      	mov	r0, r5
 800f954:	9700      	str	r7, [sp, #0]
 800f956:	9311      	str	r3, [sp, #68]	@ 0x44
 800f958:	b29b      	uxth	r3, r3
 800f95a:	9401      	str	r4, [sp, #4]
 800f95c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f960:	f7ff ff40 	bl	800f7e4 <uxr_common_create_entity>
 800f964:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f96a:	bf00      	nop

0800f96c <uxr_buffer_create_datawriter_bin>:
 800f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f974:	4606      	mov	r6, r0
 800f976:	4618      	mov	r0, r3
 800f978:	2703      	movs	r7, #3
 800f97a:	ac1d      	add	r4, sp, #116	@ 0x74
 800f97c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f980:	9105      	str	r1, [sp, #20]
 800f982:	a9a1      	add	r1, sp, #644	@ 0x284
 800f984:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f988:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f98c:	2305      	movs	r3, #5
 800f98e:	7123      	strb	r3, [r4, #4]
 800f990:	f000 f884 	bl	800fa9c <uxr_object_id_to_raw>
 800f994:	a90e      	add	r1, sp, #56	@ 0x38
 800f996:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f998:	7227      	strb	r7, [r4, #8]
 800f99a:	f000 f87f 	bl	800fa9c <uxr_object_id_to_raw>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f9a4:	3d00      	subs	r5, #0
 800f9a6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f9aa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f9ae:	bf18      	it	ne
 800f9b0:	2501      	movne	r5, #1
 800f9b2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f9b6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f9ba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f9be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f9c8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f9cc:	bb8a      	cbnz	r2, 800fa32 <uxr_buffer_create_datawriter_bin+0xc6>
 800f9ce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f9d2:	f04f 0c13 	mov.w	ip, #19
 800f9d6:	250b      	movs	r5, #11
 800f9d8:	2221      	movs	r2, #33	@ 0x21
 800f9da:	2111      	movs	r1, #17
 800f9dc:	2009      	movs	r0, #9
 800f9de:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f9e2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f9e6:	b923      	cbnz	r3, 800f9f2 <uxr_buffer_create_datawriter_bin+0x86>
 800f9e8:	4672      	mov	r2, lr
 800f9ea:	4661      	mov	r1, ip
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f9f2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d025      	beq.n	800fa46 <uxr_buffer_create_datawriter_bin+0xda>
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d029      	beq.n	800fa52 <uxr_buffer_create_datawriter_bin+0xe6>
 800f9fe:	b32b      	cbz	r3, 800fa4c <uxr_buffer_create_datawriter_bin+0xe0>
 800fa00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa04:	a921      	add	r1, sp, #132	@ 0x84
 800fa06:	a806      	add	r0, sp, #24
 800fa08:	f7ff fe00 	bl	800f60c <ucdr_init_buffer>
 800fa0c:	a90e      	add	r1, sp, #56	@ 0x38
 800fa0e:	a806      	add	r0, sp, #24
 800fa10:	f002 f85e 	bl	8011ad0 <uxr_serialize_OBJK_DataWriter_Binary>
 800fa14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa16:	f8cd 8000 	str.w	r8, [sp]
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	9401      	str	r4, [sp, #4]
 800fa1e:	60e3      	str	r3, [r4, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa26:	f7ff fedd 	bl	800f7e4 <uxr_common_create_entity>
 800fa2a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fa2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa32:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fa36:	f04f 0c12 	mov.w	ip, #18
 800fa3a:	250a      	movs	r5, #10
 800fa3c:	2220      	movs	r2, #32
 800fa3e:	2110      	movs	r1, #16
 800fa40:	2008      	movs	r0, #8
 800fa42:	2702      	movs	r7, #2
 800fa44:	e7cd      	b.n	800f9e2 <uxr_buffer_create_datawriter_bin+0x76>
 800fa46:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fa4a:	e7d9      	b.n	800fa00 <uxr_buffer_create_datawriter_bin+0x94>
 800fa4c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fa50:	e7d6      	b.n	800fa00 <uxr_buffer_create_datawriter_bin+0x94>
 800fa52:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fa56:	e7d3      	b.n	800fa00 <uxr_buffer_create_datawriter_bin+0x94>

0800fa58 <uxr_object_id>:
 800fa58:	b082      	sub	sp, #8
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f88d 1006 	strb.w	r1, [sp, #6]
 800fa60:	f360 030f 	bfi	r3, r0, #0, #16
 800fa64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fa68:	f362 431f 	bfi	r3, r2, #16, #16
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	b002      	add	sp, #8
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop

0800fa74 <uxr_object_id_from_raw>:
 800fa74:	7843      	ldrb	r3, [r0, #1]
 800fa76:	b082      	sub	sp, #8
 800fa78:	7801      	ldrb	r1, [r0, #0]
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	091a      	lsrs	r2, r3, #4
 800fa7e:	f003 030f 	and.w	r3, r3, #15
 800fa82:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800fa86:	f88d 3006 	strb.w	r3, [sp, #6]
 800fa8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa8e:	f362 000f 	bfi	r0, r2, #0, #16
 800fa92:	f363 401f 	bfi	r0, r3, #16, #16
 800fa96:	b002      	add	sp, #8
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop

0800fa9c <uxr_object_id_to_raw>:
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800faa2:	b082      	sub	sp, #8
 800faa4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800faa8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800faac:	f881 c000 	strb.w	ip, [r1]
 800fab0:	7048      	strb	r0, [r1, #1]
 800fab2:	b002      	add	sp, #8
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop

0800fab8 <uxr_buffer_cancel_data>:
 800fab8:	b510      	push	{r4, lr}
 800faba:	2300      	movs	r3, #0
 800fabc:	b094      	sub	sp, #80	@ 0x50
 800fabe:	4604      	mov	r4, r0
 800fac0:	9205      	str	r2, [sp, #20]
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fac8:	f88d 301e 	strb.w	r3, [sp, #30]
 800facc:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800fad0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fad4:	2308      	movs	r3, #8
 800fad6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fada:	2201      	movs	r2, #1
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	ab0c      	add	r3, sp, #48	@ 0x30
 800fae0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800fae4:	2210      	movs	r2, #16
 800fae6:	f000 ffcd 	bl	8010a84 <uxr_prepare_stream_to_write_submessage>
 800faea:	b918      	cbnz	r0, 800faf4 <uxr_buffer_cancel_data+0x3c>
 800faec:	4604      	mov	r4, r0
 800faee:	4620      	mov	r0, r4
 800faf0:	b014      	add	sp, #80	@ 0x50
 800faf2:	bd10      	pop	{r4, pc}
 800faf4:	9905      	ldr	r1, [sp, #20]
 800faf6:	aa06      	add	r2, sp, #24
 800faf8:	4620      	mov	r0, r4
 800fafa:	f001 f8ff 	bl	8010cfc <uxr_init_base_object_request>
 800fafe:	4604      	mov	r4, r0
 800fb00:	a906      	add	r1, sp, #24
 800fb02:	a80c      	add	r0, sp, #48	@ 0x30
 800fb04:	f002 fb12 	bl	801212c <uxr_serialize_READ_DATA_Payload>
 800fb08:	4620      	mov	r0, r4
 800fb0a:	b014      	add	sp, #80	@ 0x50
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	bf00      	nop

0800fb10 <read_submessage_format>:
 800fb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb14:	b095      	sub	sp, #84	@ 0x54
 800fb16:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800fb1a:	b113      	cbz	r3, 800fb22 <read_submessage_format+0x12>
 800fb1c:	b015      	add	sp, #84	@ 0x54
 800fb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb22:	4606      	mov	r6, r0
 800fb24:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800fb26:	460c      	mov	r4, r1
 800fb28:	4615      	mov	r5, r2
 800fb2a:	9004      	str	r0, [sp, #16]
 800fb2c:	4699      	mov	r9, r3
 800fb2e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800fb30:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800fb34:	9005      	str	r0, [sp, #20]
 800fb36:	a80c      	add	r0, sp, #48	@ 0x30
 800fb38:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800fb3c:	1a52      	subs	r2, r2, r1
 800fb3e:	f7ff fd65 	bl	800f60c <ucdr_init_buffer>
 800fb42:	a80c      	add	r0, sp, #48	@ 0x30
 800fb44:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fb48:	f7ff fd34 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 800fb4c:	69e2      	ldr	r2, [r4, #28]
 800fb4e:	b19a      	cbz	r2, 800fb78 <read_submessage_format+0x68>
 800fb50:	f1b8 0f07 	cmp.w	r8, #7
 800fb54:	f882 9014 	strb.w	r9, [r2, #20]
 800fb58:	d040      	beq.n	800fbdc <read_submessage_format+0xcc>
 800fb5a:	f1b8 0f08 	cmp.w	r8, #8
 800fb5e:	d02e      	beq.n	800fbbe <read_submessage_format+0xae>
 800fb60:	f1b8 0f06 	cmp.w	r8, #6
 800fb64:	d011      	beq.n	800fb8a <read_submessage_format+0x7a>
 800fb66:	2301      	movs	r3, #1
 800fb68:	7513      	strb	r3, [r2, #20]
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f7ff fda1 	bl	800f6b4 <ucdr_advance_buffer>
 800fb72:	b015      	add	sp, #84	@ 0x54
 800fb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb78:	f1b8 0f07 	cmp.w	r8, #7
 800fb7c:	d02e      	beq.n	800fbdc <read_submessage_format+0xcc>
 800fb7e:	f1b8 0f08 	cmp.w	r8, #8
 800fb82:	d01c      	beq.n	800fbbe <read_submessage_format+0xae>
 800fb84:	f1b8 0f06 	cmp.w	r8, #6
 800fb88:	d1ef      	bne.n	800fb6a <read_submessage_format+0x5a>
 800fb8a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 800fb8e:	f1b8 0f00 	cmp.w	r8, #0
 800fb92:	d011      	beq.n	800fbb8 <read_submessage_format+0xa8>
 800fb94:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb96:	9501      	str	r5, [sp, #4]
 800fb98:	463a      	mov	r2, r7
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	2306      	movs	r3, #6
 800fba0:	f88d 3016 	strb.w	r3, [sp, #22]
 800fba4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800fba8:	9302      	str	r3, [sp, #8]
 800fbaa:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800fbae:	47c0      	blx	r8
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	69e2      	ldr	r2, [r4, #28]
 800fbb4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fbb8:	2a00      	cmp	r2, #0
 800fbba:	d1d4      	bne.n	800fb66 <read_submessage_format+0x56>
 800fbbc:	e7d5      	b.n	800fb6a <read_submessage_format+0x5a>
 800fbbe:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0f8      	beq.n	800fbb8 <read_submessage_format+0xa8>
 800fbc6:	a80c      	add	r0, sp, #48	@ 0x30
 800fbc8:	a906      	add	r1, sp, #24
 800fbca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fbce:	f002 fb53 	bl	8012278 <uxr_deserialize_SampleIdentity>
 800fbd2:	b9a0      	cbnz	r0, 800fbfe <read_submessage_format+0xee>
 800fbd4:	69e2      	ldr	r2, [r4, #28]
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	d1c5      	bne.n	800fb66 <read_submessage_format+0x56>
 800fbda:	e7c6      	b.n	800fb6a <read_submessage_format+0x5a>
 800fbdc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 800fbe0:	b13b      	cbz	r3, 800fbf2 <read_submessage_format+0xe2>
 800fbe2:	a906      	add	r1, sp, #24
 800fbe4:	a80c      	add	r0, sp, #48	@ 0x30
 800fbe6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fbea:	f002 f83f 	bl	8011c6c <uxr_deserialize_BaseObjectRequest>
 800fbee:	bb60      	cbnz	r0, 800fc4a <read_submessage_format+0x13a>
 800fbf0:	69e2      	ldr	r2, [r4, #28]
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	442b      	add	r3, r5
 800fbf6:	60a3      	str	r3, [r4, #8]
 800fbf8:	2a00      	cmp	r2, #0
 800fbfa:	d1b4      	bne.n	800fb66 <read_submessage_format+0x56>
 800fbfc:	e7b5      	b.n	800fb6a <read_submessage_format+0x5a>
 800fbfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc00:	a80c      	add	r0, sp, #48	@ 0x30
 800fc02:	eba8 0803 	sub.w	r8, r8, r3
 800fc06:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fc0a:	44a8      	add	r8, r5
 800fc0c:	1a52      	subs	r2, r2, r1
 800fc0e:	f7ff fcfd 	bl	800f60c <ucdr_init_buffer>
 800fc12:	a80c      	add	r0, sp, #48	@ 0x30
 800fc14:	fa1f f888 	uxth.w	r8, r8
 800fc18:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc1c:	f7ff fcca 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 800fc20:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc22:	2108      	movs	r1, #8
 800fc24:	f8cd 8004 	str.w	r8, [sp, #4]
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	463a      	mov	r2, r7
 800fc2c:	f88d 1016 	strb.w	r1, [sp, #22]
 800fc30:	ab06      	add	r3, sp, #24
 800fc32:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 800fc36:	4630      	mov	r0, r6
 800fc38:	9102      	str	r1, [sp, #8]
 800fc3a:	9905      	ldr	r1, [sp, #20]
 800fc3c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 800fc40:	47b8      	blx	r7
 800fc42:	2301      	movs	r3, #1
 800fc44:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fc48:	e7c4      	b.n	800fbd4 <read_submessage_format+0xc4>
 800fc4a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fc4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc50:	a80c      	add	r0, sp, #48	@ 0x30
 800fc52:	1a52      	subs	r2, r2, r1
 800fc54:	eba8 0803 	sub.w	r8, r8, r3
 800fc58:	f7ff fcd8 	bl	800f60c <ucdr_init_buffer>
 800fc5c:	a80c      	add	r0, sp, #48	@ 0x30
 800fc5e:	44a8      	add	r8, r5
 800fc60:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc64:	f7ff fca6 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 800fc68:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc6a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fc6e:	fa1f f888 	uxth.w	r8, r8
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	463a      	mov	r2, r7
 800fc76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f8cd 8004 	str.w	r8, [sp, #4]
 800fc80:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fc84:	2107      	movs	r1, #7
 800fc86:	f88d 1016 	strb.w	r1, [sp, #22]
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 800fc90:	9102      	str	r1, [sp, #8]
 800fc92:	9905      	ldr	r1, [sp, #20]
 800fc94:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 800fc98:	47b8      	blx	r7
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fca0:	e7a6      	b.n	800fbf0 <read_submessage_format+0xe0>
 800fca2:	bf00      	nop

0800fca4 <on_get_fragmentation_info>:
 800fca4:	b500      	push	{lr}
 800fca6:	b08b      	sub	sp, #44	@ 0x2c
 800fca8:	4601      	mov	r1, r0
 800fcaa:	2204      	movs	r2, #4
 800fcac:	a802      	add	r0, sp, #8
 800fcae:	f7ff fcad 	bl	800f60c <ucdr_init_buffer>
 800fcb2:	f10d 0305 	add.w	r3, sp, #5
 800fcb6:	f10d 0206 	add.w	r2, sp, #6
 800fcba:	a901      	add	r1, sp, #4
 800fcbc:	a802      	add	r0, sp, #8
 800fcbe:	f001 f9a7 	bl	8011010 <uxr_read_submessage_header>
 800fcc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcc6:	2b0d      	cmp	r3, #13
 800fcc8:	d003      	beq.n	800fcd2 <on_get_fragmentation_info+0x2e>
 800fcca:	2000      	movs	r0, #0
 800fccc:	b00b      	add	sp, #44	@ 0x2c
 800fcce:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fcd6:	f013 0f02 	tst.w	r3, #2
 800fcda:	bf14      	ite	ne
 800fcdc:	2002      	movne	r0, #2
 800fcde:	2001      	moveq	r0, #1
 800fce0:	b00b      	add	sp, #44	@ 0x2c
 800fce2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fce6:	bf00      	nop

0800fce8 <read_submessage_get_info>:
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	2500      	movs	r5, #0
 800fcec:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800fcf0:	460e      	mov	r6, r1
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	a810      	add	r0, sp, #64	@ 0x40
 800fcfc:	9503      	str	r5, [sp, #12]
 800fcfe:	9504      	str	r5, [sp, #16]
 800fd00:	f007 fa40 	bl	8017184 <memset>
 800fd04:	a903      	add	r1, sp, #12
 800fd06:	4630      	mov	r0, r6
 800fd08:	f002 f950 	bl	8011fac <uxr_deserialize_GET_INFO_Payload>
 800fd0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fd10:	4620      	mov	r0, r4
 800fd12:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd16:	f000 ffe9 	bl	8010cec <uxr_session_header_offset>
 800fd1a:	462b      	mov	r3, r5
 800fd1c:	220c      	movs	r2, #12
 800fd1e:	a905      	add	r1, sp, #20
 800fd20:	9000      	str	r0, [sp, #0]
 800fd22:	a808      	add	r0, sp, #32
 800fd24:	f7ff fc60 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 800fd28:	a910      	add	r1, sp, #64	@ 0x40
 800fd2a:	a808      	add	r0, sp, #32
 800fd2c:	f002 f9b2 	bl	8012094 <uxr_serialize_INFO_Payload>
 800fd30:	9b08      	ldr	r3, [sp, #32]
 800fd32:	462a      	mov	r2, r5
 800fd34:	4629      	mov	r1, r5
 800fd36:	4620      	mov	r0, r4
 800fd38:	f000 ff84 	bl	8010c44 <uxr_stamp_session_header>
 800fd3c:	a808      	add	r0, sp, #32
 800fd3e:	f7ff fc93 	bl	800f668 <ucdr_buffer_length>
 800fd42:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd44:	4602      	mov	r2, r0
 800fd46:	a905      	add	r1, sp, #20
 800fd48:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fd4c:	47a0      	blx	r4
 800fd4e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800fd52:	bd70      	pop	{r4, r5, r6, pc}

0800fd54 <write_submessage_acknack.isra.0>:
 800fd54:	b570      	push	{r4, r5, r6, lr}
 800fd56:	b092      	sub	sp, #72	@ 0x48
 800fd58:	4605      	mov	r5, r0
 800fd5a:	460e      	mov	r6, r1
 800fd5c:	4614      	mov	r4, r2
 800fd5e:	f000 ffc5 	bl	8010cec <uxr_session_header_offset>
 800fd62:	a905      	add	r1, sp, #20
 800fd64:	9000      	str	r0, [sp, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	a80a      	add	r0, sp, #40	@ 0x28
 800fd6a:	2211      	movs	r2, #17
 800fd6c:	f7ff fc3c 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 800fd70:	2218      	movs	r2, #24
 800fd72:	2300      	movs	r3, #0
 800fd74:	210a      	movs	r1, #10
 800fd76:	fb02 5404 	mla	r4, r2, r4, r5
 800fd7a:	a80a      	add	r0, sp, #40	@ 0x28
 800fd7c:	2205      	movs	r2, #5
 800fd7e:	3450      	adds	r4, #80	@ 0x50
 800fd80:	f001 f92c 	bl	8010fdc <uxr_buffer_submessage_header>
 800fd84:	a903      	add	r1, sp, #12
 800fd86:	4620      	mov	r0, r4
 800fd88:	f005 f9a8 	bl	80150dc <uxr_compute_acknack>
 800fd8c:	ba40      	rev16	r0, r0
 800fd8e:	a903      	add	r1, sp, #12
 800fd90:	f88d 6010 	strb.w	r6, [sp, #16]
 800fd94:	f8ad 000e 	strh.w	r0, [sp, #14]
 800fd98:	a80a      	add	r0, sp, #40	@ 0x28
 800fd9a:	f002 f9ed 	bl	8012178 <uxr_serialize_ACKNACK_Payload>
 800fd9e:	2200      	movs	r2, #0
 800fda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fda2:	4628      	mov	r0, r5
 800fda4:	4611      	mov	r1, r2
 800fda6:	f000 ff4d 	bl	8010c44 <uxr_stamp_session_header>
 800fdaa:	a80a      	add	r0, sp, #40	@ 0x28
 800fdac:	f7ff fc5c 	bl	800f668 <ucdr_buffer_length>
 800fdb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	a905      	add	r1, sp, #20
 800fdb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fdba:	47a0      	blx	r4
 800fdbc:	b012      	add	sp, #72	@ 0x48
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}

0800fdc0 <uxr_init_session>:
 800fdc0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fdf8 <uxr_init_session+0x38>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	b510      	push	{r4, lr}
 800fdc8:	4604      	mov	r4, r0
 800fdca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fdce:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800fdd2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800fdd6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800fdda:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800fdde:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800fde2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800fde6:	2181      	movs	r1, #129	@ 0x81
 800fde8:	f000 fe90 	bl	8010b0c <uxr_init_session_info>
 800fdec:	f104 0008 	add.w	r0, r4, #8
 800fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf4:	f001 b80e 	b.w	8010e14 <uxr_init_stream_storage>
	...

0800fe00 <uxr_set_status_callback>:
 800fe00:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop

0800fe08 <uxr_set_topic_callback>:
 800fe08:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop

0800fe10 <uxr_set_request_callback>:
 800fe10:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop

0800fe18 <uxr_set_reply_callback>:
 800fe18:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop

0800fe20 <uxr_create_output_best_effort_stream>:
 800fe20:	b510      	push	{r4, lr}
 800fe22:	4604      	mov	r4, r0
 800fe24:	b084      	sub	sp, #16
 800fe26:	e9cd 2100 	strd	r2, r1, [sp]
 800fe2a:	f000 ff5f 	bl	8010cec <uxr_session_header_offset>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f104 0008 	add.w	r0, r4, #8
 800fe34:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fe38:	b004      	add	sp, #16
 800fe3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe3e:	f001 b82f 	b.w	8010ea0 <uxr_add_output_best_effort_buffer>
 800fe42:	bf00      	nop

0800fe44 <uxr_create_output_reliable_stream>:
 800fe44:	b530      	push	{r4, r5, lr}
 800fe46:	b089      	sub	sp, #36	@ 0x24
 800fe48:	4604      	mov	r4, r0
 800fe4a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fe4e:	9303      	str	r3, [sp, #12]
 800fe50:	f000 ff4c 	bl	8010cec <uxr_session_header_offset>
 800fe54:	4605      	mov	r5, r0
 800fe56:	9905      	ldr	r1, [sp, #20]
 800fe58:	f104 0008 	add.w	r0, r4, #8
 800fe5c:	9500      	str	r5, [sp, #0]
 800fe5e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fe62:	f001 f831 	bl	8010ec8 <uxr_add_output_reliable_buffer>
 800fe66:	2200      	movs	r2, #0
 800fe68:	fa5f fc80 	uxtb.w	ip, r0
 800fe6c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800fe70:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800fe74:	0e03      	lsrs	r3, r0, #24
 800fe76:	f36c 0207 	bfi	r2, ip, #0, #8
 800fe7a:	f364 220f 	bfi	r2, r4, #8, #8
 800fe7e:	f361 4217 	bfi	r2, r1, #16, #8
 800fe82:	f363 621f 	bfi	r2, r3, #24, #8
 800fe86:	4610      	mov	r0, r2
 800fe88:	b009      	add	sp, #36	@ 0x24
 800fe8a:	bd30      	pop	{r4, r5, pc}

0800fe8c <uxr_create_input_best_effort_stream>:
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	3008      	adds	r0, #8
 800fe90:	b002      	add	sp, #8
 800fe92:	f001 b833 	b.w	8010efc <uxr_add_input_best_effort_buffer>
 800fe96:	bf00      	nop

0800fe98 <uxr_create_input_reliable_stream>:
 800fe98:	b510      	push	{r4, lr}
 800fe9a:	4c0c      	ldr	r4, [pc, #48]	@ (800fecc <uxr_create_input_reliable_stream+0x34>)
 800fe9c:	b084      	sub	sp, #16
 800fe9e:	3008      	adds	r0, #8
 800fea0:	9400      	str	r4, [sp, #0]
 800fea2:	f001 f841 	bl	8010f28 <uxr_add_input_reliable_buffer>
 800fea6:	2200      	movs	r2, #0
 800fea8:	fa5f fe80 	uxtb.w	lr, r0
 800feac:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800feb0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800feb4:	0e03      	lsrs	r3, r0, #24
 800feb6:	f36e 0207 	bfi	r2, lr, #0, #8
 800feba:	f36c 220f 	bfi	r2, ip, #8, #8
 800febe:	f361 4217 	bfi	r2, r1, #16, #8
 800fec2:	f363 621f 	bfi	r2, r3, #24, #8
 800fec6:	4610      	mov	r0, r2
 800fec8:	b004      	add	sp, #16
 800feca:	bd10      	pop	{r4, pc}
 800fecc:	0800fca5 	.word	0x0800fca5

0800fed0 <uxr_epoch_nanos>:
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4604      	mov	r4, r0
 800fed4:	f001 f8e4 	bl	80110a0 <uxr_nanos>
 800fed8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800fedc:	1ac0      	subs	r0, r0, r3
 800fede:	eb61 0102 	sbc.w	r1, r1, r2
 800fee2:	bd10      	pop	{r4, pc}

0800fee4 <uxr_flash_output_streams>:
 800fee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fee8:	7e03      	ldrb	r3, [r0, #24]
 800feea:	b084      	sub	sp, #16
 800feec:	4604      	mov	r4, r0
 800feee:	b1fb      	cbz	r3, 800ff30 <uxr_flash_output_streams+0x4c>
 800fef0:	f04f 0900 	mov.w	r9, #0
 800fef4:	f10d 0802 	add.w	r8, sp, #2
 800fef8:	af03      	add	r7, sp, #12
 800fefa:	ae02      	add	r6, sp, #8
 800fefc:	4648      	mov	r0, r9
 800fefe:	2201      	movs	r2, #1
 800ff00:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ff04:	4611      	mov	r1, r2
 800ff06:	3508      	adds	r5, #8
 800ff08:	f000 ff2a 	bl	8010d60 <uxr_stream_id>
 800ff0c:	4684      	mov	ip, r0
 800ff0e:	4643      	mov	r3, r8
 800ff10:	463a      	mov	r2, r7
 800ff12:	4631      	mov	r1, r6
 800ff14:	4628      	mov	r0, r5
 800ff16:	f8cd c004 	str.w	ip, [sp, #4]
 800ff1a:	f005 f969 	bl	80151f0 <uxr_prepare_best_effort_buffer_to_send>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d13d      	bne.n	800ff9e <uxr_flash_output_streams+0xba>
 800ff22:	f109 0901 	add.w	r9, r9, #1
 800ff26:	7e23      	ldrb	r3, [r4, #24]
 800ff28:	fa5f f089 	uxtb.w	r0, r9
 800ff2c:	4283      	cmp	r3, r0
 800ff2e:	d8e6      	bhi.n	800fefe <uxr_flash_output_streams+0x1a>
 800ff30:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ff34:	b383      	cbz	r3, 800ff98 <uxr_flash_output_streams+0xb4>
 800ff36:	f04f 0900 	mov.w	r9, #0
 800ff3a:	f10d 0802 	add.w	r8, sp, #2
 800ff3e:	af03      	add	r7, sp, #12
 800ff40:	ae02      	add	r6, sp, #8
 800ff42:	4648      	mov	r0, r9
 800ff44:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ff48:	2201      	movs	r2, #1
 800ff4a:	2102      	movs	r1, #2
 800ff4c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ff50:	f000 ff06 	bl	8010d60 <uxr_stream_id>
 800ff54:	9001      	str	r0, [sp, #4]
 800ff56:	3520      	adds	r5, #32
 800ff58:	e00c      	b.n	800ff74 <uxr_flash_output_streams+0x90>
 800ff5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ff5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ff62:	9b02      	ldr	r3, [sp, #8]
 800ff64:	f000 fe6e 	bl	8010c44 <uxr_stamp_session_header>
 800ff68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff6a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ff6e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ff72:	47d0      	blx	sl
 800ff74:	4643      	mov	r3, r8
 800ff76:	463a      	mov	r2, r7
 800ff78:	4631      	mov	r1, r6
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f005 fb5c 	bl	8015638 <uxr_prepare_next_reliable_buffer_to_send>
 800ff80:	4603      	mov	r3, r0
 800ff82:	4620      	mov	r0, r4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1e8      	bne.n	800ff5a <uxr_flash_output_streams+0x76>
 800ff88:	f109 0901 	add.w	r9, r9, #1
 800ff8c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ff90:	fa5f f089 	uxtb.w	r0, r9
 800ff94:	4283      	cmp	r3, r0
 800ff96:	d8d5      	bhi.n	800ff44 <uxr_flash_output_streams+0x60>
 800ff98:	b004      	add	sp, #16
 800ff9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff9e:	9b02      	ldr	r3, [sp, #8]
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ffa6:	f109 0901 	add.w	r9, r9, #1
 800ffaa:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ffae:	f000 fe49 	bl	8010c44 <uxr_stamp_session_header>
 800ffb2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ffb4:	9a03      	ldr	r2, [sp, #12]
 800ffb6:	685d      	ldr	r5, [r3, #4]
 800ffb8:	6818      	ldr	r0, [r3, #0]
 800ffba:	9902      	ldr	r1, [sp, #8]
 800ffbc:	47a8      	blx	r5
 800ffbe:	7e23      	ldrb	r3, [r4, #24]
 800ffc0:	fa5f f089 	uxtb.w	r0, r9
 800ffc4:	4283      	cmp	r3, r0
 800ffc6:	d89a      	bhi.n	800fefe <uxr_flash_output_streams+0x1a>
 800ffc8:	e7b2      	b.n	800ff30 <uxr_flash_output_streams+0x4c>
 800ffca:	bf00      	nop

0800ffcc <read_submessage_info>:
 800ffcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd0:	460d      	mov	r5, r1
 800ffd2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	4669      	mov	r1, sp
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f001 fef8 	bl	8011dd0 <uxr_deserialize_BaseObjectReply>
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	a902      	add	r1, sp, #8
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800ffea:	f003 ff2f 	bl	8013e4c <ucdr_deserialize_bool>
 800ffee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fff2:	4004      	ands	r4, r0
 800fff4:	b2e4      	uxtb	r4, r4
 800fff6:	b95b      	cbnz	r3, 8010010 <read_submessage_info+0x44>
 800fff8:	a987      	add	r1, sp, #540	@ 0x21c
 800fffa:	4628      	mov	r0, r5
 800fffc:	f003 ff26 	bl	8013e4c <ucdr_deserialize_bool>
 8010000:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010004:	4680      	mov	r8, r0
 8010006:	b94b      	cbnz	r3, 801001c <read_submessage_info+0x50>
 8010008:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801000c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010010:	a903      	add	r1, sp, #12
 8010012:	4628      	mov	r0, r5
 8010014:	f001 fd88 	bl	8011b28 <uxr_deserialize_ObjectVariant>
 8010018:	4004      	ands	r4, r0
 801001a:	e7ed      	b.n	800fff8 <read_submessage_info+0x2c>
 801001c:	a988      	add	r1, sp, #544	@ 0x220
 801001e:	4628      	mov	r0, r5
 8010020:	f003 ff42 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8010024:	ea14 0f08 	tst.w	r4, r8
 8010028:	d0ee      	beq.n	8010008 <read_submessage_info+0x3c>
 801002a:	2800      	cmp	r0, #0
 801002c:	d0ec      	beq.n	8010008 <read_submessage_info+0x3c>
 801002e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010032:	2b0d      	cmp	r3, #13
 8010034:	d1e8      	bne.n	8010008 <read_submessage_info+0x3c>
 8010036:	a98a      	add	r1, sp, #552	@ 0x228
 8010038:	4628      	mov	r0, r5
 801003a:	f004 fcdb 	bl	80149f4 <ucdr_deserialize_int16_t>
 801003e:	b138      	cbz	r0, 8010050 <read_submessage_info+0x84>
 8010040:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010044:	2b00      	cmp	r3, #0
 8010046:	dd06      	ble.n	8010056 <read_submessage_info+0x8a>
 8010048:	2f00      	cmp	r7, #0
 801004a:	bf14      	ite	ne
 801004c:	2001      	movne	r0, #1
 801004e:	2002      	moveq	r0, #2
 8010050:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010054:	e7d8      	b.n	8010008 <read_submessage_info+0x3c>
 8010056:	2000      	movs	r0, #0
 8010058:	e7fa      	b.n	8010050 <read_submessage_info+0x84>
 801005a:	bf00      	nop

0801005c <read_submessage_list>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	4604      	mov	r4, r0
 8010062:	b097      	sub	sp, #92	@ 0x5c
 8010064:	460d      	mov	r5, r1
 8010066:	4ec1      	ldr	r6, [pc, #772]	@ (801036c <read_submessage_list+0x310>)
 8010068:	9209      	str	r2, [sp, #36]	@ 0x24
 801006a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801006e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010070:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010074:	4628      	mov	r0, r5
 8010076:	f000 ffcb 	bl	8011010 <uxr_read_submessage_header>
 801007a:	2800      	cmp	r0, #0
 801007c:	f000 8142 	beq.w	8010304 <read_submessage_list+0x2a8>
 8010080:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010084:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010088:	3b02      	subs	r3, #2
 801008a:	2b0d      	cmp	r3, #13
 801008c:	d8ed      	bhi.n	801006a <read_submessage_list+0xe>
 801008e:	a101      	add	r1, pc, #4	@ (adr r1, 8010094 <read_submessage_list+0x38>)
 8010090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010094:	080102fb 	.word	0x080102fb
 8010098:	0801006b 	.word	0x0801006b
 801009c:	080102eb 	.word	0x080102eb
 80100a0:	08010289 	.word	0x08010289
 80100a4:	0801027f 	.word	0x0801027f
 80100a8:	0801006b 	.word	0x0801006b
 80100ac:	0801006b 	.word	0x0801006b
 80100b0:	080101d5 	.word	0x080101d5
 80100b4:	08010167 	.word	0x08010167
 80100b8:	08010127 	.word	0x08010127
 80100bc:	0801006b 	.word	0x0801006b
 80100c0:	0801006b 	.word	0x0801006b
 80100c4:	0801006b 	.word	0x0801006b
 80100c8:	080100cd 	.word	0x080100cd
 80100cc:	a910      	add	r1, sp, #64	@ 0x40
 80100ce:	4628      	mov	r0, r5
 80100d0:	f002 f8a6 	bl	8012220 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80100d4:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 80100d8:	f1b8 0f00 	cmp.w	r8, #0
 80100dc:	f000 811a 	beq.w	8010314 <read_submessage_list+0x2b8>
 80100e0:	f000 ffde 	bl	80110a0 <uxr_nanos>
 80100e4:	4602      	mov	r2, r0
 80100e6:	460b      	mov	r3, r1
 80100e8:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80100ec:	2100      	movs	r1, #0
 80100ee:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80100f0:	9006      	str	r0, [sp, #24]
 80100f2:	468c      	mov	ip, r1
 80100f4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80100f6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80100fa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80100fc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010100:	468c      	mov	ip, r1
 8010102:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010104:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010108:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801010c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8010110:	fbc7 0106 	smlal	r0, r1, r7, r6
 8010114:	e9cd 0100 	strd	r0, r1, [sp]
 8010118:	4620      	mov	r0, r4
 801011a:	47c0      	blx	r8
 801011c:	f04f 0301 	mov.w	r3, #1
 8010120:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010124:	e7a1      	b.n	801006a <read_submessage_list+0xe>
 8010126:	a910      	add	r1, sp, #64	@ 0x40
 8010128:	4628      	mov	r0, r5
 801012a:	f002 f865 	bl	80121f8 <uxr_deserialize_HEARTBEAT_Payload>
 801012e:	2100      	movs	r1, #0
 8010130:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010134:	f000 fe42 	bl	8010dbc <uxr_stream_id_from_raw>
 8010138:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801013c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801013e:	f104 0008 	add.w	r0, r4, #8
 8010142:	4641      	mov	r1, r8
 8010144:	f000 ff28 	bl	8010f98 <uxr_get_input_reliable_stream>
 8010148:	2800      	cmp	r0, #0
 801014a:	d08e      	beq.n	801006a <read_submessage_list+0xe>
 801014c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010150:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010154:	f004 ffb6 	bl	80150c4 <uxr_process_heartbeat>
 8010158:	4642      	mov	r2, r8
 801015a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff fdf8 	bl	800fd54 <write_submessage_acknack.isra.0>
 8010164:	e781      	b.n	801006a <read_submessage_list+0xe>
 8010166:	a910      	add	r1, sp, #64	@ 0x40
 8010168:	4628      	mov	r0, r5
 801016a:	f002 f81d 	bl	80121a8 <uxr_deserialize_ACKNACK_Payload>
 801016e:	2100      	movs	r1, #0
 8010170:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010174:	f000 fe22 	bl	8010dbc <uxr_stream_id_from_raw>
 8010178:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801017c:	900d      	str	r0, [sp, #52]	@ 0x34
 801017e:	f104 0008 	add.w	r0, r4, #8
 8010182:	f000 fef3 	bl	8010f6c <uxr_get_output_reliable_stream>
 8010186:	4680      	mov	r8, r0
 8010188:	2800      	cmp	r0, #0
 801018a:	f43f af6e 	beq.w	801006a <read_submessage_list+0xe>
 801018e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010192:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010196:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801019a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801019e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80101a2:	b289      	uxth	r1, r1
 80101a4:	f005 faf0 	bl	8015788 <uxr_process_acknack>
 80101a8:	4640      	mov	r0, r8
 80101aa:	f005 fab1 	bl	8015710 <uxr_begin_output_nack_buffer_it>
 80101ae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80101b2:	e005      	b.n	80101c0 <read_submessage_list+0x164>
 80101b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80101b6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80101ba:	e9d3 0900 	ldrd	r0, r9, [r3]
 80101be:	47c8      	blx	r9
 80101c0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80101c4:	aa0f      	add	r2, sp, #60	@ 0x3c
 80101c6:	4651      	mov	r1, sl
 80101c8:	4640      	mov	r0, r8
 80101ca:	f005 faa3 	bl	8015714 <uxr_next_reliable_nack_buffer_to_send>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d1f0      	bne.n	80101b4 <read_submessage_list+0x158>
 80101d2:	e74a      	b.n	801006a <read_submessage_list+0xe>
 80101d4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80101d8:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80101dc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80101e0:	4628      	mov	r0, r5
 80101e2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80101e6:	4651      	mov	r1, sl
 80101e8:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80101ec:	f1a8 0804 	sub.w	r8, r8, #4
 80101f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80101f4:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80101f8:	fa1f f888 	uxth.w	r8, r8
 80101fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010200:	f009 090e 	and.w	r9, r9, #14
 8010204:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010208:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801020c:	f001 fd2e 	bl	8011c6c <uxr_deserialize_BaseObjectRequest>
 8010210:	4650      	mov	r0, sl
 8010212:	a90f      	add	r1, sp, #60	@ 0x3c
 8010214:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010218:	f000 fd90 	bl	8010d3c <uxr_parse_base_object_request>
 801021c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801021e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010222:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010226:	9110      	str	r1, [sp, #64]	@ 0x40
 8010228:	f1bb 0f00 	cmp.w	fp, #0
 801022c:	d006      	beq.n	801023c <read_submessage_list+0x1e0>
 801022e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010232:	4652      	mov	r2, sl
 8010234:	4620      	mov	r0, r4
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	2300      	movs	r3, #0
 801023a:	47d8      	blx	fp
 801023c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801023e:	b182      	cbz	r2, 8010262 <read_submessage_list+0x206>
 8010240:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010242:	f04f 0c00 	mov.w	ip, #0
 8010246:	3902      	subs	r1, #2
 8010248:	e003      	b.n	8010252 <read_submessage_list+0x1f6>
 801024a:	f10c 0c01 	add.w	ip, ip, #1
 801024e:	4594      	cmp	ip, r2
 8010250:	d007      	beq.n	8010262 <read_submessage_list+0x206>
 8010252:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8010256:	4553      	cmp	r3, sl
 8010258:	d1f7      	bne.n	801024a <read_submessage_list+0x1ee>
 801025a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801025c:	2200      	movs	r2, #0
 801025e:	f803 200c 	strb.w	r2, [r3, ip]
 8010262:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010266:	464b      	mov	r3, r9
 8010268:	4642      	mov	r2, r8
 801026a:	4620      	mov	r0, r4
 801026c:	9102      	str	r1, [sp, #8]
 801026e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010270:	9101      	str	r1, [sp, #4]
 8010272:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010274:	9100      	str	r1, [sp, #0]
 8010276:	4629      	mov	r1, r5
 8010278:	f7ff fc4a 	bl	800fb10 <read_submessage_format>
 801027c:	e6f5      	b.n	801006a <read_submessage_list+0xe>
 801027e:	4629      	mov	r1, r5
 8010280:	4620      	mov	r0, r4
 8010282:	f7ff fea3 	bl	800ffcc <read_submessage_info>
 8010286:	e6f0      	b.n	801006a <read_submessage_list+0xe>
 8010288:	2a00      	cmp	r2, #0
 801028a:	d03e      	beq.n	801030a <read_submessage_list+0x2ae>
 801028c:	a910      	add	r1, sp, #64	@ 0x40
 801028e:	4628      	mov	r0, r5
 8010290:	f001 fee2 	bl	8012058 <uxr_deserialize_STATUS_Payload>
 8010294:	a90e      	add	r1, sp, #56	@ 0x38
 8010296:	aa0d      	add	r2, sp, #52	@ 0x34
 8010298:	a810      	add	r0, sp, #64	@ 0x40
 801029a:	f000 fd4f 	bl	8010d3c <uxr_parse_base_object_request>
 801029e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80102a0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80102a4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80102a8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80102ac:	910f      	str	r1, [sp, #60]	@ 0x3c
 80102ae:	f1ba 0f00 	cmp.w	sl, #0
 80102b2:	d006      	beq.n	80102c2 <read_submessage_list+0x266>
 80102b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80102b8:	4642      	mov	r2, r8
 80102ba:	4620      	mov	r0, r4
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	464b      	mov	r3, r9
 80102c0:	47d0      	blx	sl
 80102c2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80102c4:	2a00      	cmp	r2, #0
 80102c6:	f43f aed0 	beq.w	801006a <read_submessage_list+0xe>
 80102ca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80102cc:	2100      	movs	r1, #0
 80102ce:	3802      	subs	r0, #2
 80102d0:	e003      	b.n	80102da <read_submessage_list+0x27e>
 80102d2:	3101      	adds	r1, #1
 80102d4:	4291      	cmp	r1, r2
 80102d6:	f43f aec8 	beq.w	801006a <read_submessage_list+0xe>
 80102da:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80102de:	4543      	cmp	r3, r8
 80102e0:	d1f7      	bne.n	80102d2 <read_submessage_list+0x276>
 80102e2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80102e4:	f803 9001 	strb.w	r9, [r3, r1]
 80102e8:	e6bf      	b.n	801006a <read_submessage_list+0xe>
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	f47f aebd 	bne.w	801006a <read_submessage_list+0xe>
 80102f0:	4629      	mov	r1, r5
 80102f2:	4620      	mov	r0, r4
 80102f4:	f000 fc66 	bl	8010bc4 <uxr_read_create_session_status>
 80102f8:	e6b7      	b.n	801006a <read_submessage_list+0xe>
 80102fa:	4629      	mov	r1, r5
 80102fc:	4620      	mov	r0, r4
 80102fe:	f7ff fcf3 	bl	800fce8 <read_submessage_get_info>
 8010302:	e6b2      	b.n	801006a <read_submessage_list+0xe>
 8010304:	b017      	add	sp, #92	@ 0x5c
 8010306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030a:	4629      	mov	r1, r5
 801030c:	4620      	mov	r0, r4
 801030e:	f000 fc67 	bl	8010be0 <uxr_read_delete_session_status>
 8010312:	e6aa      	b.n	801006a <read_submessage_list+0xe>
 8010314:	f000 fec4 	bl	80110a0 <uxr_nanos>
 8010318:	4642      	mov	r2, r8
 801031a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801031c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801031e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010322:	1818      	adds	r0, r3, r0
 8010324:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010326:	eb42 0101 	adc.w	r1, r2, r1
 801032a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801032c:	4642      	mov	r2, r8
 801032e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010332:	469c      	mov	ip, r3
 8010334:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8010338:	fbc3 7806 	smlal	r7, r8, r3, r6
 801033c:	4643      	mov	r3, r8
 801033e:	eb1c 0c07 	adds.w	ip, ip, r7
 8010342:	eb42 0203 	adc.w	r2, r2, r3
 8010346:	ebb0 030c 	subs.w	r3, r0, ip
 801034a:	eb61 0202 	sbc.w	r2, r1, r2
 801034e:	2a00      	cmp	r2, #0
 8010350:	db08      	blt.n	8010364 <read_submessage_list+0x308>
 8010352:	085b      	lsrs	r3, r3, #1
 8010354:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010358:	1052      	asrs	r2, r2, #1
 801035a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801035e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8010362:	e6db      	b.n	801011c <read_submessage_list+0xc0>
 8010364:	3301      	adds	r3, #1
 8010366:	f142 0200 	adc.w	r2, r2, #0
 801036a:	e7f2      	b.n	8010352 <read_submessage_list+0x2f6>
 801036c:	3b9aca00 	.word	0x3b9aca00

08010370 <listen_message_reliably>:
 8010370:	1e0b      	subs	r3, r1, #0
 8010372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010376:	bfb8      	it	lt
 8010378:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801037c:	b09d      	sub	sp, #116	@ 0x74
 801037e:	4680      	mov	r8, r0
 8010380:	9305      	str	r3, [sp, #20]
 8010382:	f000 fe71 	bl	8011068 <uxr_millis>
 8010386:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801038a:	4681      	mov	r9, r0
 801038c:	2a00      	cmp	r2, #0
 801038e:	f000 809a 	beq.w	80104c6 <listen_message_reliably+0x156>
 8010392:	2600      	movs	r6, #0
 8010394:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010398:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801039c:	460f      	mov	r7, r1
 801039e:	4630      	mov	r0, r6
 80103a0:	9303      	str	r3, [sp, #12]
 80103a2:	e00e      	b.n	80103c2 <listen_message_reliably+0x52>
 80103a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103a6:	3601      	adds	r6, #1
 80103a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103aa:	455a      	cmp	r2, fp
 80103ac:	9903      	ldr	r1, [sp, #12]
 80103ae:	b2f0      	uxtb	r0, r6
 80103b0:	eb73 0101 	sbcs.w	r1, r3, r1
 80103b4:	da01      	bge.n	80103ba <listen_message_reliably+0x4a>
 80103b6:	4693      	mov	fp, r2
 80103b8:	9303      	str	r3, [sp, #12]
 80103ba:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80103be:	4283      	cmp	r3, r0
 80103c0:	d95f      	bls.n	8010482 <listen_message_reliably+0x112>
 80103c2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80103c6:	2102      	movs	r1, #2
 80103c8:	2201      	movs	r2, #1
 80103ca:	00e4      	lsls	r4, r4, #3
 80103cc:	f000 fcc8 	bl	8010d60 <uxr_stream_id>
 80103d0:	4601      	mov	r1, r0
 80103d2:	f104 0520 	add.w	r5, r4, #32
 80103d6:	463b      	mov	r3, r7
 80103d8:	464a      	mov	r2, r9
 80103da:	9109      	str	r1, [sp, #36]	@ 0x24
 80103dc:	4445      	add	r5, r8
 80103de:	4628      	mov	r0, r5
 80103e0:	f005 f96a 	bl	80156b8 <uxr_update_output_stream_heartbeat_timestamp>
 80103e4:	eb08 0304 	add.w	r3, r8, r4
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d0db      	beq.n	80103a4 <listen_message_reliably+0x34>
 80103ec:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80103f0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80103f4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80103f8:	4640      	mov	r0, r8
 80103fa:	3501      	adds	r5, #1
 80103fc:	4444      	add	r4, r8
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	f000 fc74 	bl	8010cec <uxr_session_header_offset>
 8010404:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010408:	2300      	movs	r3, #0
 801040a:	2211      	movs	r2, #17
 801040c:	a90c      	add	r1, sp, #48	@ 0x30
 801040e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010412:	9000      	str	r0, [sp, #0]
 8010414:	4650      	mov	r0, sl
 8010416:	3601      	adds	r6, #1
 8010418:	f7ff f8e6 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 801041c:	2300      	movs	r3, #0
 801041e:	2205      	movs	r2, #5
 8010420:	210b      	movs	r1, #11
 8010422:	4650      	mov	r0, sl
 8010424:	f000 fdda 	bl	8010fdc <uxr_buffer_submessage_header>
 8010428:	2101      	movs	r1, #1
 801042a:	8968      	ldrh	r0, [r5, #10]
 801042c:	f005 fa08 	bl	8015840 <uxr_seq_num_add>
 8010430:	892b      	ldrh	r3, [r5, #8]
 8010432:	4602      	mov	r2, r0
 8010434:	a90a      	add	r1, sp, #40	@ 0x28
 8010436:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801043a:	4650      	mov	r0, sl
 801043c:	9b04      	ldr	r3, [sp, #16]
 801043e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010442:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010446:	f001 fec3 	bl	80121d0 <uxr_serialize_HEARTBEAT_Payload>
 801044a:	2200      	movs	r2, #0
 801044c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801044e:	4640      	mov	r0, r8
 8010450:	4611      	mov	r1, r2
 8010452:	f000 fbf7 	bl	8010c44 <uxr_stamp_session_header>
 8010456:	4650      	mov	r0, sl
 8010458:	f7ff f906 	bl	800f668 <ucdr_buffer_length>
 801045c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010460:	4602      	mov	r2, r0
 8010462:	a90c      	add	r1, sp, #48	@ 0x30
 8010464:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010468:	47a8      	blx	r5
 801046a:	9903      	ldr	r1, [sp, #12]
 801046c:	b2f0      	uxtb	r0, r6
 801046e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010472:	455a      	cmp	r2, fp
 8010474:	eb73 0101 	sbcs.w	r1, r3, r1
 8010478:	db9d      	blt.n	80103b6 <listen_message_reliably+0x46>
 801047a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801047e:	4283      	cmp	r3, r0
 8010480:	d89f      	bhi.n	80103c2 <listen_message_reliably+0x52>
 8010482:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010486:	9a03      	ldr	r2, [sp, #12]
 8010488:	429a      	cmp	r2, r3
 801048a:	bf08      	it	eq
 801048c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010490:	d019      	beq.n	80104c6 <listen_message_reliably+0x156>
 8010492:	ebab 0309 	sub.w	r3, fp, r9
 8010496:	2b00      	cmp	r3, #0
 8010498:	9d05      	ldr	r5, [sp, #20]
 801049a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801049e:	aa08      	add	r2, sp, #32
 80104a0:	bf08      	it	eq
 80104a2:	2301      	moveq	r3, #1
 80104a4:	a907      	add	r1, sp, #28
 80104a6:	6884      	ldr	r4, [r0, #8]
 80104a8:	429d      	cmp	r5, r3
 80104aa:	6800      	ldr	r0, [r0, #0]
 80104ac:	bfa8      	it	ge
 80104ae:	461d      	movge	r5, r3
 80104b0:	462b      	mov	r3, r5
 80104b2:	47a0      	blx	r4
 80104b4:	b948      	cbnz	r0, 80104ca <listen_message_reliably+0x15a>
 80104b6:	9b05      	ldr	r3, [sp, #20]
 80104b8:	1b5b      	subs	r3, r3, r5
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	9305      	str	r3, [sp, #20]
 80104be:	f73f af60 	bgt.w	8010382 <listen_message_reliably+0x12>
 80104c2:	4604      	mov	r4, r0
 80104c4:	e012      	b.n	80104ec <listen_message_reliably+0x17c>
 80104c6:	9b05      	ldr	r3, [sp, #20]
 80104c8:	e7e5      	b.n	8010496 <listen_message_reliably+0x126>
 80104ca:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80104ce:	4604      	mov	r4, r0
 80104d0:	2500      	movs	r5, #0
 80104d2:	a80c      	add	r0, sp, #48	@ 0x30
 80104d4:	f7ff f89a 	bl	800f60c <ucdr_init_buffer>
 80104d8:	f10d 031a 	add.w	r3, sp, #26
 80104dc:	aa06      	add	r2, sp, #24
 80104de:	a90c      	add	r1, sp, #48	@ 0x30
 80104e0:	4640      	mov	r0, r8
 80104e2:	f88d 5018 	strb.w	r5, [sp, #24]
 80104e6:	f000 fbc1 	bl	8010c6c <uxr_read_session_header>
 80104ea:	b918      	cbnz	r0, 80104f4 <listen_message_reliably+0x184>
 80104ec:	4620      	mov	r0, r4
 80104ee:	b01d      	add	sp, #116	@ 0x74
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	4629      	mov	r1, r5
 80104f6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80104fa:	f000 fc5f 	bl	8010dbc <uxr_stream_id_from_raw>
 80104fe:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010502:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010506:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801050a:	2e01      	cmp	r6, #1
 801050c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010510:	d04b      	beq.n	80105aa <listen_message_reliably+0x23a>
 8010512:	2e02      	cmp	r6, #2
 8010514:	d00f      	beq.n	8010536 <listen_message_reliably+0x1c6>
 8010516:	2e00      	cmp	r6, #0
 8010518:	d1e8      	bne.n	80104ec <listen_message_reliably+0x17c>
 801051a:	4631      	mov	r1, r6
 801051c:	4630      	mov	r0, r6
 801051e:	f000 fc4d 	bl	8010dbc <uxr_stream_id_from_raw>
 8010522:	4602      	mov	r2, r0
 8010524:	a90c      	add	r1, sp, #48	@ 0x30
 8010526:	4640      	mov	r0, r8
 8010528:	920a      	str	r2, [sp, #40]	@ 0x28
 801052a:	f7ff fd97 	bl	801005c <read_submessage_list>
 801052e:	4620      	mov	r0, r4
 8010530:	b01d      	add	sp, #116	@ 0x74
 8010532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010536:	4629      	mov	r1, r5
 8010538:	f108 0008 	add.w	r0, r8, #8
 801053c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010540:	f000 fd2a 	bl	8010f98 <uxr_get_input_reliable_stream>
 8010544:	4607      	mov	r7, r0
 8010546:	b338      	cbz	r0, 8010598 <listen_message_reliably+0x228>
 8010548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801054a:	a80c      	add	r0, sp, #48	@ 0x30
 801054c:	9203      	str	r2, [sp, #12]
 801054e:	f7ff f88f 	bl	800f670 <ucdr_buffer_remaining>
 8010552:	4603      	mov	r3, r0
 8010554:	f10d 0019 	add.w	r0, sp, #25
 8010558:	9a03      	ldr	r2, [sp, #12]
 801055a:	4651      	mov	r1, sl
 801055c:	9000      	str	r0, [sp, #0]
 801055e:	4638      	mov	r0, r7
 8010560:	f004 fcb4 	bl	8014ecc <uxr_receive_reliable_message>
 8010564:	b1c0      	cbz	r0, 8010598 <listen_message_reliably+0x228>
 8010566:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801056a:	b393      	cbz	r3, 80105d2 <listen_message_reliably+0x262>
 801056c:	ae14      	add	r6, sp, #80	@ 0x50
 801056e:	f04f 0a02 	mov.w	sl, #2
 8010572:	e00a      	b.n	801058a <listen_message_reliably+0x21a>
 8010574:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010578:	4631      	mov	r1, r6
 801057a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801057e:	4640      	mov	r0, r8
 8010580:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010584:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010586:	f7ff fd69 	bl	801005c <read_submessage_list>
 801058a:	2204      	movs	r2, #4
 801058c:	4631      	mov	r1, r6
 801058e:	4638      	mov	r0, r7
 8010590:	f004 fd1e 	bl	8014fd0 <uxr_next_input_reliable_buffer_available>
 8010594:	2800      	cmp	r0, #0
 8010596:	d1ed      	bne.n	8010574 <listen_message_reliably+0x204>
 8010598:	4640      	mov	r0, r8
 801059a:	462a      	mov	r2, r5
 801059c:	4649      	mov	r1, r9
 801059e:	f7ff fbd9 	bl	800fd54 <write_submessage_acknack.isra.0>
 80105a2:	4620      	mov	r0, r4
 80105a4:	b01d      	add	sp, #116	@ 0x74
 80105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105aa:	4629      	mov	r1, r5
 80105ac:	f108 0008 	add.w	r0, r8, #8
 80105b0:	f000 fce8 	bl	8010f84 <uxr_get_input_best_effort_stream>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d099      	beq.n	80104ec <listen_message_reliably+0x17c>
 80105b8:	4651      	mov	r1, sl
 80105ba:	f004 fbfd 	bl	8014db8 <uxr_receive_best_effort_message>
 80105be:	2800      	cmp	r0, #0
 80105c0:	d094      	beq.n	80104ec <listen_message_reliably+0x17c>
 80105c2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80105c6:	a90c      	add	r1, sp, #48	@ 0x30
 80105c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105ca:	4640      	mov	r0, r8
 80105cc:	f7ff fd46 	bl	801005c <read_submessage_list>
 80105d0:	e78c      	b.n	80104ec <listen_message_reliably+0x17c>
 80105d2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80105d6:	a90c      	add	r1, sp, #48	@ 0x30
 80105d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105da:	4640      	mov	r0, r8
 80105dc:	f7ff fd3e 	bl	801005c <read_submessage_list>
 80105e0:	e7c4      	b.n	801056c <listen_message_reliably+0x1fc>
 80105e2:	bf00      	nop

080105e4 <uxr_run_session_until_confirm_delivery>:
 80105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e8:	4606      	mov	r6, r0
 80105ea:	460d      	mov	r5, r1
 80105ec:	f000 fd3c 	bl	8011068 <uxr_millis>
 80105f0:	4607      	mov	r7, r0
 80105f2:	4630      	mov	r0, r6
 80105f4:	f106 0808 	add.w	r8, r6, #8
 80105f8:	f7ff fc74 	bl	800fee4 <uxr_flash_output_streams>
 80105fc:	2d00      	cmp	r5, #0
 80105fe:	db10      	blt.n	8010622 <uxr_run_session_until_confirm_delivery+0x3e>
 8010600:	462c      	mov	r4, r5
 8010602:	e006      	b.n	8010612 <uxr_run_session_until_confirm_delivery+0x2e>
 8010604:	f7ff feb4 	bl	8010370 <listen_message_reliably>
 8010608:	f000 fd2e 	bl	8011068 <uxr_millis>
 801060c:	1bc3      	subs	r3, r0, r7
 801060e:	1aec      	subs	r4, r5, r3
 8010610:	d407      	bmi.n	8010622 <uxr_run_session_until_confirm_delivery+0x3e>
 8010612:	4640      	mov	r0, r8
 8010614:	f000 fccc 	bl	8010fb0 <uxr_output_streams_confirmed>
 8010618:	4603      	mov	r3, r0
 801061a:	4621      	mov	r1, r4
 801061c:	4630      	mov	r0, r6
 801061e:	2b00      	cmp	r3, #0
 8010620:	d0f0      	beq.n	8010604 <uxr_run_session_until_confirm_delivery+0x20>
 8010622:	4640      	mov	r0, r8
 8010624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	f000 bcc2 	b.w	8010fb0 <uxr_output_streams_confirmed>

0801062c <uxr_run_session_until_all_status>:
 801062c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010630:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8010634:	4606      	mov	r6, r0
 8010636:	4688      	mov	r8, r1
 8010638:	4692      	mov	sl, r2
 801063a:	461f      	mov	r7, r3
 801063c:	f7ff fc52 	bl	800fee4 <uxr_flash_output_streams>
 8010640:	f1bb 0f00 	cmp.w	fp, #0
 8010644:	d004      	beq.n	8010650 <uxr_run_session_until_all_status+0x24>
 8010646:	465a      	mov	r2, fp
 8010648:	21ff      	movs	r1, #255	@ 0xff
 801064a:	4638      	mov	r0, r7
 801064c:	f006 fd9a 	bl	8017184 <memset>
 8010650:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8010654:	1e7d      	subs	r5, r7, #1
 8010656:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801065a:	f000 fd05 	bl	8011068 <uxr_millis>
 801065e:	4641      	mov	r1, r8
 8010660:	4681      	mov	r9, r0
 8010662:	4630      	mov	r0, r6
 8010664:	f7ff fe84 	bl	8010370 <listen_message_reliably>
 8010668:	f000 fcfe 	bl	8011068 <uxr_millis>
 801066c:	eba0 0009 	sub.w	r0, r0, r9
 8010670:	eba8 0100 	sub.w	r1, r8, r0
 8010674:	f1bb 0f00 	cmp.w	fp, #0
 8010678:	d029      	beq.n	80106ce <uxr_run_session_until_all_status+0xa2>
 801067a:	46ae      	mov	lr, r5
 801067c:	f04f 0c00 	mov.w	ip, #0
 8010680:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8010684:	2cff      	cmp	r4, #255	@ 0xff
 8010686:	d015      	beq.n	80106b4 <uxr_run_session_until_all_status+0x88>
 8010688:	f10c 0c01 	add.w	ip, ip, #1
 801068c:	45e3      	cmp	fp, ip
 801068e:	d8f7      	bhi.n	8010680 <uxr_run_session_until_all_status+0x54>
 8010690:	2300      	movs	r3, #0
 8010692:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010694:	e000      	b.n	8010698 <uxr_run_session_until_all_status+0x6c>
 8010696:	b158      	cbz	r0, 80106b0 <uxr_run_session_until_all_status+0x84>
 8010698:	462b      	mov	r3, r5
 801069a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801069e:	3302      	adds	r3, #2
 80106a0:	2801      	cmp	r0, #1
 80106a2:	eba3 0307 	sub.w	r3, r3, r7
 80106a6:	bf8c      	ite	hi
 80106a8:	2000      	movhi	r0, #0
 80106aa:	2001      	movls	r0, #1
 80106ac:	459b      	cmp	fp, r3
 80106ae:	d8f2      	bhi.n	8010696 <uxr_run_session_until_all_status+0x6a>
 80106b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b4:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80106b8:	f10c 0c01 	add.w	ip, ip, #1
 80106bc:	45dc      	cmp	ip, fp
 80106be:	d201      	bcs.n	80106c4 <uxr_run_session_until_all_status+0x98>
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d0dd      	beq.n	8010680 <uxr_run_session_until_all_status+0x54>
 80106c4:	2900      	cmp	r1, #0
 80106c6:	dde3      	ble.n	8010690 <uxr_run_session_until_all_status+0x64>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1ca      	bne.n	8010662 <uxr_run_session_until_all_status+0x36>
 80106cc:	e7e0      	b.n	8010690 <uxr_run_session_until_all_status+0x64>
 80106ce:	2001      	movs	r0, #1
 80106d0:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80106d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106d8 <wait_session_status>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	4604      	mov	r4, r0
 80106de:	b09d      	sub	sp, #116	@ 0x74
 80106e0:	20ff      	movs	r0, #255	@ 0xff
 80106e2:	9303      	str	r3, [sp, #12]
 80106e4:	7160      	strb	r0, [r4, #5]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f000 80b6 	beq.w	8010858 <wait_session_status+0x180>
 80106ec:	4689      	mov	r9, r1
 80106ee:	4692      	mov	sl, r2
 80106f0:	f04f 0b00 	mov.w	fp, #0
 80106f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80106f6:	4652      	mov	r2, sl
 80106f8:	4649      	mov	r1, r9
 80106fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 80106fe:	47a8      	blx	r5
 8010700:	f000 fcb2 	bl	8011068 <uxr_millis>
 8010704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010708:	4605      	mov	r5, r0
 801070a:	e009      	b.n	8010720 <wait_session_status+0x48>
 801070c:	f000 fcac 	bl	8011068 <uxr_millis>
 8010710:	1b40      	subs	r0, r0, r5
 8010712:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010716:	2b00      	cmp	r3, #0
 8010718:	dd40      	ble.n	801079c <wait_session_status+0xc4>
 801071a:	7960      	ldrb	r0, [r4, #5]
 801071c:	28ff      	cmp	r0, #255	@ 0xff
 801071e:	d145      	bne.n	80107ac <wait_session_status+0xd4>
 8010720:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010722:	a908      	add	r1, sp, #32
 8010724:	6896      	ldr	r6, [r2, #8]
 8010726:	6810      	ldr	r0, [r2, #0]
 8010728:	aa09      	add	r2, sp, #36	@ 0x24
 801072a:	47b0      	blx	r6
 801072c:	2800      	cmp	r0, #0
 801072e:	d0ed      	beq.n	801070c <wait_session_status+0x34>
 8010730:	a80c      	add	r0, sp, #48	@ 0x30
 8010732:	2600      	movs	r6, #0
 8010734:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010738:	f7fe ff68 	bl	800f60c <ucdr_init_buffer>
 801073c:	f10d 031e 	add.w	r3, sp, #30
 8010740:	aa07      	add	r2, sp, #28
 8010742:	a90c      	add	r1, sp, #48	@ 0x30
 8010744:	4620      	mov	r0, r4
 8010746:	f88d 601c 	strb.w	r6, [sp, #28]
 801074a:	f000 fa8f 	bl	8010c6c <uxr_read_session_header>
 801074e:	2800      	cmp	r0, #0
 8010750:	d0dc      	beq.n	801070c <wait_session_status+0x34>
 8010752:	4631      	mov	r1, r6
 8010754:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010758:	f000 fb30 	bl	8010dbc <uxr_stream_id_from_raw>
 801075c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010760:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010764:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010768:	2f01      	cmp	r7, #1
 801076a:	9302      	str	r3, [sp, #8]
 801076c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010770:	d05c      	beq.n	801082c <wait_session_status+0x154>
 8010772:	2f02      	cmp	r7, #2
 8010774:	d020      	beq.n	80107b8 <wait_session_status+0xe0>
 8010776:	2f00      	cmp	r7, #0
 8010778:	d1c8      	bne.n	801070c <wait_session_status+0x34>
 801077a:	4639      	mov	r1, r7
 801077c:	4638      	mov	r0, r7
 801077e:	f000 fb1d 	bl	8010dbc <uxr_stream_id_from_raw>
 8010782:	a90c      	add	r1, sp, #48	@ 0x30
 8010784:	4602      	mov	r2, r0
 8010786:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010788:	4620      	mov	r0, r4
 801078a:	f7ff fc67 	bl	801005c <read_submessage_list>
 801078e:	f000 fc6b 	bl	8011068 <uxr_millis>
 8010792:	1b40      	subs	r0, r0, r5
 8010794:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010798:	2b00      	cmp	r3, #0
 801079a:	dcbe      	bgt.n	801071a <wait_session_status+0x42>
 801079c:	f10b 0b01 	add.w	fp, fp, #1
 80107a0:	9b03      	ldr	r3, [sp, #12]
 80107a2:	7960      	ldrb	r0, [r4, #5]
 80107a4:	455b      	cmp	r3, fp
 80107a6:	d001      	beq.n	80107ac <wait_session_status+0xd4>
 80107a8:	28ff      	cmp	r0, #255	@ 0xff
 80107aa:	d0a3      	beq.n	80106f4 <wait_session_status+0x1c>
 80107ac:	38ff      	subs	r0, #255	@ 0xff
 80107ae:	bf18      	it	ne
 80107b0:	2001      	movne	r0, #1
 80107b2:	b01d      	add	sp, #116	@ 0x74
 80107b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80107bc:	4631      	mov	r1, r6
 80107be:	f104 0008 	add.w	r0, r4, #8
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	f000 fbe8 	bl	8010f98 <uxr_get_input_reliable_stream>
 80107c8:	4680      	mov	r8, r0
 80107ca:	b348      	cbz	r0, 8010820 <wait_session_status+0x148>
 80107cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107ce:	a80c      	add	r0, sp, #48	@ 0x30
 80107d0:	9205      	str	r2, [sp, #20]
 80107d2:	f7fe ff4d 	bl	800f670 <ucdr_buffer_remaining>
 80107d6:	4603      	mov	r3, r0
 80107d8:	f10d 001d 	add.w	r0, sp, #29
 80107dc:	9a05      	ldr	r2, [sp, #20]
 80107de:	9000      	str	r0, [sp, #0]
 80107e0:	4640      	mov	r0, r8
 80107e2:	9902      	ldr	r1, [sp, #8]
 80107e4:	f004 fb72 	bl	8014ecc <uxr_receive_reliable_message>
 80107e8:	b1d0      	cbz	r0, 8010820 <wait_session_status+0x148>
 80107ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d03a      	beq.n	8010868 <wait_session_status+0x190>
 80107f2:	9f04      	ldr	r7, [sp, #16]
 80107f4:	e00a      	b.n	801080c <wait_session_status+0x134>
 80107f6:	f04f 0302 	mov.w	r3, #2
 80107fa:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80107fe:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010802:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010808:	f7ff fc28 	bl	801005c <read_submessage_list>
 801080c:	a914      	add	r1, sp, #80	@ 0x50
 801080e:	2204      	movs	r2, #4
 8010810:	4640      	mov	r0, r8
 8010812:	f004 fbdd 	bl	8014fd0 <uxr_next_input_reliable_buffer_available>
 8010816:	4603      	mov	r3, r0
 8010818:	a914      	add	r1, sp, #80	@ 0x50
 801081a:	4620      	mov	r0, r4
 801081c:	2b00      	cmp	r3, #0
 801081e:	d1ea      	bne.n	80107f6 <wait_session_status+0x11e>
 8010820:	4632      	mov	r2, r6
 8010822:	9904      	ldr	r1, [sp, #16]
 8010824:	4620      	mov	r0, r4
 8010826:	f7ff fa95 	bl	800fd54 <write_submessage_acknack.isra.0>
 801082a:	e76f      	b.n	801070c <wait_session_status+0x34>
 801082c:	4631      	mov	r1, r6
 801082e:	f104 0008 	add.w	r0, r4, #8
 8010832:	f000 fba7 	bl	8010f84 <uxr_get_input_best_effort_stream>
 8010836:	2800      	cmp	r0, #0
 8010838:	f43f af68 	beq.w	801070c <wait_session_status+0x34>
 801083c:	9902      	ldr	r1, [sp, #8]
 801083e:	f004 fabb 	bl	8014db8 <uxr_receive_best_effort_message>
 8010842:	2800      	cmp	r0, #0
 8010844:	f43f af62 	beq.w	801070c <wait_session_status+0x34>
 8010848:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801084c:	a90c      	add	r1, sp, #48	@ 0x30
 801084e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010850:	4620      	mov	r0, r4
 8010852:	f7ff fc03 	bl	801005c <read_submessage_list>
 8010856:	e759      	b.n	801070c <wait_session_status+0x34>
 8010858:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801085a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801085e:	47a0      	blx	r4
 8010860:	2001      	movs	r0, #1
 8010862:	b01d      	add	sp, #116	@ 0x74
 8010864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010868:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801086c:	a90c      	add	r1, sp, #48	@ 0x30
 801086e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010870:	4620      	mov	r0, r4
 8010872:	f7ff fbf3 	bl	801005c <read_submessage_list>
 8010876:	e7bc      	b.n	80107f2 <wait_session_status+0x11a>

08010878 <uxr_delete_session_retries>:
 8010878:	b530      	push	{r4, r5, lr}
 801087a:	b08f      	sub	sp, #60	@ 0x3c
 801087c:	4604      	mov	r4, r0
 801087e:	460d      	mov	r5, r1
 8010880:	f000 fa34 	bl	8010cec <uxr_session_header_offset>
 8010884:	2300      	movs	r3, #0
 8010886:	2210      	movs	r2, #16
 8010888:	a902      	add	r1, sp, #8
 801088a:	9000      	str	r0, [sp, #0]
 801088c:	a806      	add	r0, sp, #24
 801088e:	f7fe feab 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 8010892:	a906      	add	r1, sp, #24
 8010894:	4620      	mov	r0, r4
 8010896:	f000 f979 	bl	8010b8c <uxr_buffer_delete_session>
 801089a:	2200      	movs	r2, #0
 801089c:	9b06      	ldr	r3, [sp, #24]
 801089e:	4620      	mov	r0, r4
 80108a0:	4611      	mov	r1, r2
 80108a2:	f000 f9cf 	bl	8010c44 <uxr_stamp_session_header>
 80108a6:	a806      	add	r0, sp, #24
 80108a8:	f7fe fede 	bl	800f668 <ucdr_buffer_length>
 80108ac:	462b      	mov	r3, r5
 80108ae:	4602      	mov	r2, r0
 80108b0:	a902      	add	r1, sp, #8
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff ff10 	bl	80106d8 <wait_session_status>
 80108b8:	b118      	cbz	r0, 80108c2 <uxr_delete_session_retries+0x4a>
 80108ba:	7960      	ldrb	r0, [r4, #5]
 80108bc:	fab0 f080 	clz	r0, r0
 80108c0:	0940      	lsrs	r0, r0, #5
 80108c2:	b00f      	add	sp, #60	@ 0x3c
 80108c4:	bd30      	pop	{r4, r5, pc}
 80108c6:	bf00      	nop

080108c8 <uxr_create_session>:
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	f100 0b08 	add.w	fp, r0, #8
 80108d0:	4604      	mov	r4, r0
 80108d2:	b0ab      	sub	sp, #172	@ 0xac
 80108d4:	4658      	mov	r0, fp
 80108d6:	465e      	mov	r6, fp
 80108d8:	f000 faa6 	bl	8010e28 <uxr_reset_stream_storage>
 80108dc:	4620      	mov	r0, r4
 80108de:	f000 fa05 	bl	8010cec <uxr_session_header_offset>
 80108e2:	2300      	movs	r3, #0
 80108e4:	221c      	movs	r2, #28
 80108e6:	a90b      	add	r1, sp, #44	@ 0x2c
 80108e8:	9000      	str	r0, [sp, #0]
 80108ea:	a812      	add	r0, sp, #72	@ 0x48
 80108ec:	f7fe fe7c 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 80108f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108f2:	a912      	add	r1, sp, #72	@ 0x48
 80108f4:	4620      	mov	r0, r4
 80108f6:	8a1a      	ldrh	r2, [r3, #16]
 80108f8:	3a04      	subs	r2, #4
 80108fa:	b292      	uxth	r2, r2
 80108fc:	f000 f91c 	bl	8010b38 <uxr_buffer_create_session>
 8010900:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010902:	4620      	mov	r0, r4
 8010904:	f000 f98a 	bl	8010c1c <uxr_stamp_create_session_header>
 8010908:	a812      	add	r0, sp, #72	@ 0x48
 801090a:	f7fe fead 	bl	800f668 <ucdr_buffer_length>
 801090e:	23ff      	movs	r3, #255	@ 0xff
 8010910:	4681      	mov	r9, r0
 8010912:	7163      	strb	r3, [r4, #5]
 8010914:	230a      	movs	r3, #10
 8010916:	9303      	str	r3, [sp, #12]
 8010918:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801091a:	464a      	mov	r2, r9
 801091c:	a90b      	add	r1, sp, #44	@ 0x2c
 801091e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010922:	47a8      	blx	r5
 8010924:	f000 fba0 	bl	8011068 <uxr_millis>
 8010928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801092c:	4605      	mov	r5, r0
 801092e:	e009      	b.n	8010944 <uxr_create_session+0x7c>
 8010930:	f000 fb9a 	bl	8011068 <uxr_millis>
 8010934:	1b40      	subs	r0, r0, r5
 8010936:	7962      	ldrb	r2, [r4, #5]
 8010938:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801093c:	2b00      	cmp	r3, #0
 801093e:	dd38      	ble.n	80109b2 <uxr_create_session+0xea>
 8010940:	2aff      	cmp	r2, #255	@ 0xff
 8010942:	d13c      	bne.n	80109be <uxr_create_session+0xf6>
 8010944:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010946:	a907      	add	r1, sp, #28
 8010948:	6897      	ldr	r7, [r2, #8]
 801094a:	6810      	ldr	r0, [r2, #0]
 801094c:	aa08      	add	r2, sp, #32
 801094e:	47b8      	blx	r7
 8010950:	2800      	cmp	r0, #0
 8010952:	d0ed      	beq.n	8010930 <uxr_create_session+0x68>
 8010954:	a81a      	add	r0, sp, #104	@ 0x68
 8010956:	2700      	movs	r7, #0
 8010958:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801095c:	f7fe fe56 	bl	800f60c <ucdr_init_buffer>
 8010960:	f10d 031a 	add.w	r3, sp, #26
 8010964:	aa06      	add	r2, sp, #24
 8010966:	a91a      	add	r1, sp, #104	@ 0x68
 8010968:	4620      	mov	r0, r4
 801096a:	f88d 7018 	strb.w	r7, [sp, #24]
 801096e:	f000 f97d 	bl	8010c6c <uxr_read_session_header>
 8010972:	2800      	cmp	r0, #0
 8010974:	d0dc      	beq.n	8010930 <uxr_create_session+0x68>
 8010976:	4639      	mov	r1, r7
 8010978:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801097c:	f000 fa1e 	bl	8010dbc <uxr_stream_id_from_raw>
 8010980:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010984:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8010988:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801098c:	2f01      	cmp	r7, #1
 801098e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010992:	d053      	beq.n	8010a3c <uxr_create_session+0x174>
 8010994:	2f02      	cmp	r7, #2
 8010996:	d018      	beq.n	80109ca <uxr_create_session+0x102>
 8010998:	2f00      	cmp	r7, #0
 801099a:	d1c9      	bne.n	8010930 <uxr_create_session+0x68>
 801099c:	4639      	mov	r1, r7
 801099e:	4638      	mov	r0, r7
 80109a0:	f000 fa0c 	bl	8010dbc <uxr_stream_id_from_raw>
 80109a4:	a91a      	add	r1, sp, #104	@ 0x68
 80109a6:	4602      	mov	r2, r0
 80109a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80109aa:	4620      	mov	r0, r4
 80109ac:	f7ff fb56 	bl	801005c <read_submessage_list>
 80109b0:	e7be      	b.n	8010930 <uxr_create_session+0x68>
 80109b2:	9b03      	ldr	r3, [sp, #12]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	9303      	str	r3, [sp, #12]
 80109b8:	d001      	beq.n	80109be <uxr_create_session+0xf6>
 80109ba:	2aff      	cmp	r2, #255	@ 0xff
 80109bc:	d0ac      	beq.n	8010918 <uxr_create_session+0x50>
 80109be:	2a00      	cmp	r2, #0
 80109c0:	d051      	beq.n	8010a66 <uxr_create_session+0x19e>
 80109c2:	2000      	movs	r0, #0
 80109c4:	b02b      	add	sp, #172	@ 0xac
 80109c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80109ce:	4641      	mov	r1, r8
 80109d0:	4630      	mov	r0, r6
 80109d2:	9304      	str	r3, [sp, #16]
 80109d4:	f000 fae0 	bl	8010f98 <uxr_get_input_reliable_stream>
 80109d8:	4682      	mov	sl, r0
 80109da:	b348      	cbz	r0, 8010a30 <uxr_create_session+0x168>
 80109dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80109de:	a81a      	add	r0, sp, #104	@ 0x68
 80109e0:	9205      	str	r2, [sp, #20]
 80109e2:	f7fe fe45 	bl	800f670 <ucdr_buffer_remaining>
 80109e6:	4603      	mov	r3, r0
 80109e8:	f10d 0019 	add.w	r0, sp, #25
 80109ec:	9a05      	ldr	r2, [sp, #20]
 80109ee:	4659      	mov	r1, fp
 80109f0:	9000      	str	r0, [sp, #0]
 80109f2:	4650      	mov	r0, sl
 80109f4:	f004 fa6a 	bl	8014ecc <uxr_receive_reliable_message>
 80109f8:	b1d0      	cbz	r0, 8010a30 <uxr_create_session+0x168>
 80109fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d038      	beq.n	8010a74 <uxr_create_session+0x1ac>
 8010a02:	9f04      	ldr	r7, [sp, #16]
 8010a04:	e00a      	b.n	8010a1c <uxr_create_session+0x154>
 8010a06:	f04f 0302 	mov.w	r3, #2
 8010a0a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8010a0e:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8010a12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a18:	f7ff fb20 	bl	801005c <read_submessage_list>
 8010a1c:	a922      	add	r1, sp, #136	@ 0x88
 8010a1e:	2204      	movs	r2, #4
 8010a20:	4650      	mov	r0, sl
 8010a22:	f004 fad5 	bl	8014fd0 <uxr_next_input_reliable_buffer_available>
 8010a26:	4603      	mov	r3, r0
 8010a28:	a922      	add	r1, sp, #136	@ 0x88
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1ea      	bne.n	8010a06 <uxr_create_session+0x13e>
 8010a30:	4642      	mov	r2, r8
 8010a32:	9904      	ldr	r1, [sp, #16]
 8010a34:	4620      	mov	r0, r4
 8010a36:	f7ff f98d 	bl	800fd54 <write_submessage_acknack.isra.0>
 8010a3a:	e779      	b.n	8010930 <uxr_create_session+0x68>
 8010a3c:	4641      	mov	r1, r8
 8010a3e:	4630      	mov	r0, r6
 8010a40:	f000 faa0 	bl	8010f84 <uxr_get_input_best_effort_stream>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	f43f af73 	beq.w	8010930 <uxr_create_session+0x68>
 8010a4a:	4659      	mov	r1, fp
 8010a4c:	f004 f9b4 	bl	8014db8 <uxr_receive_best_effort_message>
 8010a50:	2800      	cmp	r0, #0
 8010a52:	f43f af6d 	beq.w	8010930 <uxr_create_session+0x68>
 8010a56:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8010a5a:	a91a      	add	r1, sp, #104	@ 0x68
 8010a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a5e:	4620      	mov	r0, r4
 8010a60:	f7ff fafc 	bl	801005c <read_submessage_list>
 8010a64:	e764      	b.n	8010930 <uxr_create_session+0x68>
 8010a66:	4630      	mov	r0, r6
 8010a68:	f000 f9de 	bl	8010e28 <uxr_reset_stream_storage>
 8010a6c:	2001      	movs	r0, #1
 8010a6e:	b02b      	add	sp, #172	@ 0xac
 8010a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a74:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8010a78:	a91a      	add	r1, sp, #104	@ 0x68
 8010a7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f7ff faed 	bl	801005c <read_submessage_list>
 8010a82:	e7be      	b.n	8010a02 <uxr_create_session+0x13a>

08010a84 <uxr_prepare_stream_to_write_submessage>:
 8010a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	4615      	mov	r5, r2
 8010a90:	461e      	mov	r6, r3
 8010a92:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8010a96:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010a9a:	f105 0904 	add.w	r9, r5, #4
 8010a9e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010aa2:	9101      	str	r1, [sp, #4]
 8010aa4:	f000 fada 	bl	801105c <uxr_submessage_padding>
 8010aa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010aac:	4481      	add	r9, r0
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d01d      	beq.n	8010aee <uxr_prepare_stream_to_write_submessage+0x6a>
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	d116      	bne.n	8010ae4 <uxr_prepare_stream_to_write_submessage+0x60>
 8010ab6:	f104 0008 	add.w	r0, r4, #8
 8010aba:	4651      	mov	r1, sl
 8010abc:	f000 fa56 	bl	8010f6c <uxr_get_output_reliable_stream>
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	b158      	cbz	r0, 8010adc <uxr_prepare_stream_to_write_submessage+0x58>
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	4632      	mov	r2, r6
 8010ac8:	f004 fc48 	bl	801535c <uxr_prepare_reliable_buffer_to_write>
 8010acc:	4604      	mov	r4, r0
 8010ace:	b12c      	cbz	r4, 8010adc <uxr_prepare_stream_to_write_submessage+0x58>
 8010ad0:	4643      	mov	r3, r8
 8010ad2:	b2aa      	uxth	r2, r5
 8010ad4:	4639      	mov	r1, r7
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	f000 fa80 	bl	8010fdc <uxr_buffer_submessage_header>
 8010adc:	4620      	mov	r0, r4
 8010ade:	b002      	add	sp, #8
 8010ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae4:	2400      	movs	r4, #0
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	b002      	add	sp, #8
 8010aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aee:	f104 0008 	add.w	r0, r4, #8
 8010af2:	4651      	mov	r1, sl
 8010af4:	f000 fa32 	bl	8010f5c <uxr_get_output_best_effort_stream>
 8010af8:	4604      	mov	r4, r0
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d0ee      	beq.n	8010adc <uxr_prepare_stream_to_write_submessage+0x58>
 8010afe:	4649      	mov	r1, r9
 8010b00:	4632      	mov	r2, r6
 8010b02:	f004 fb55 	bl	80151b0 <uxr_prepare_best_effort_buffer_to_write>
 8010b06:	4604      	mov	r4, r0
 8010b08:	e7e1      	b.n	8010ace <uxr_prepare_stream_to_write_submessage+0x4a>
 8010b0a:	bf00      	nop

08010b0c <uxr_init_session_info>:
 8010b0c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8010b10:	23ff      	movs	r3, #255	@ 0xff
 8010b12:	7102      	strb	r2, [r0, #4]
 8010b14:	f880 c001 	strb.w	ip, [r0, #1]
 8010b18:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010b1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010b20:	7001      	strb	r1, [r0, #0]
 8010b22:	f880 c002 	strb.w	ip, [r0, #2]
 8010b26:	7143      	strb	r3, [r0, #5]
 8010b28:	70c2      	strb	r2, [r0, #3]
 8010b2a:	b500      	push	{lr}
 8010b2c:	f04f 0e09 	mov.w	lr, #9
 8010b30:	f8a0 e006 	strh.w	lr, [r0, #6]
 8010b34:	f85d fb04 	ldr.w	pc, [sp], #4

08010b38 <uxr_buffer_create_session>:
 8010b38:	b530      	push	{r4, r5, lr}
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	b089      	sub	sp, #36	@ 0x24
 8010b3e:	4d12      	ldr	r5, [pc, #72]	@ (8010b88 <uxr_buffer_create_session+0x50>)
 8010b40:	460c      	mov	r4, r1
 8010b42:	9307      	str	r3, [sp, #28]
 8010b44:	4619      	mov	r1, r3
 8010b46:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	80c2      	strh	r2, [r0, #6]
 8010b50:	f88d 2004 	strb.w	r2, [sp, #4]
 8010b54:	682a      	ldr	r2, [r5, #0]
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	9200      	str	r2, [sp, #0]
 8010b5a:	88aa      	ldrh	r2, [r5, #4]
 8010b5c:	9306      	str	r3, [sp, #24]
 8010b5e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010b62:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010b66:	9202      	str	r2, [sp, #8]
 8010b68:	7802      	ldrb	r2, [r0, #0]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010b70:	2210      	movs	r2, #16
 8010b72:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010b76:	f000 fa31 	bl	8010fdc <uxr_buffer_submessage_header>
 8010b7a:	4669      	mov	r1, sp
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	f001 f983 	bl	8011e88 <uxr_serialize_CREATE_CLIENT_Payload>
 8010b82:	b009      	add	sp, #36	@ 0x24
 8010b84:	bd30      	pop	{r4, r5, pc}
 8010b86:	bf00      	nop
 8010b88:	08018104 	.word	0x08018104

08010b8c <uxr_buffer_delete_session>:
 8010b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8010bc0 <uxr_buffer_delete_session+0x34>)
 8010b8e:	2302      	movs	r3, #2
 8010b90:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8010b94:	b510      	push	{r4, lr}
 8010b96:	460c      	mov	r4, r1
 8010b98:	b082      	sub	sp, #8
 8010b9a:	8911      	ldrh	r1, [r2, #8]
 8010b9c:	2204      	movs	r2, #4
 8010b9e:	80c3      	strh	r3, [r0, #6]
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	2103      	movs	r1, #3
 8010baa:	f8ad c004 	strh.w	ip, [sp, #4]
 8010bae:	f000 fa15 	bl	8010fdc <uxr_buffer_submessage_header>
 8010bb2:	a901      	add	r1, sp, #4
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f001 fa0f 	bl	8011fd8 <uxr_serialize_DELETE_Payload>
 8010bba:	b002      	add	sp, #8
 8010bbc:	bd10      	pop	{r4, pc}
 8010bbe:	bf00      	nop
 8010bc0:	08018104 	.word	0x08018104

08010bc4 <uxr_read_create_session_status>:
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	b088      	sub	sp, #32
 8010bca:	4604      	mov	r4, r0
 8010bcc:	a901      	add	r1, sp, #4
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f001 fa12 	bl	8011ff8 <uxr_deserialize_STATUS_AGENT_Payload>
 8010bd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010bd8:	7163      	strb	r3, [r4, #5]
 8010bda:	b008      	add	sp, #32
 8010bdc:	bd10      	pop	{r4, pc}
 8010bde:	bf00      	nop

08010be0 <uxr_read_delete_session_status>:
 8010be0:	b510      	push	{r4, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	4604      	mov	r4, r0
 8010be6:	4608      	mov	r0, r1
 8010be8:	a902      	add	r1, sp, #8
 8010bea:	f001 fa35 	bl	8012058 <uxr_deserialize_STATUS_Payload>
 8010bee:	88e3      	ldrh	r3, [r4, #6]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d001      	beq.n	8010bf8 <uxr_read_delete_session_status+0x18>
 8010bf4:	b004      	add	sp, #16
 8010bf6:	bd10      	pop	{r4, pc}
 8010bf8:	f10d 000a 	add.w	r0, sp, #10
 8010bfc:	f7fe ff3a 	bl	800fa74 <uxr_object_id_from_raw>
 8010c00:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010c04:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010c08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	2b02      	cmp	r3, #2
 8010c10:	d1f0      	bne.n	8010bf4 <uxr_read_delete_session_status+0x14>
 8010c12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010c16:	7163      	strb	r3, [r4, #5]
 8010c18:	e7ec      	b.n	8010bf4 <uxr_read_delete_session_status+0x14>
 8010c1a:	bf00      	nop

08010c1c <uxr_stamp_create_session_header>:
 8010c1c:	b510      	push	{r4, lr}
 8010c1e:	2208      	movs	r2, #8
 8010c20:	b08a      	sub	sp, #40	@ 0x28
 8010c22:	4604      	mov	r4, r0
 8010c24:	eb0d 0002 	add.w	r0, sp, r2
 8010c28:	f7fe fcf0 	bl	800f60c <ucdr_init_buffer>
 8010c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c30:	2300      	movs	r3, #0
 8010c32:	a802      	add	r0, sp, #8
 8010c34:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010c38:	9400      	str	r4, [sp, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f000 fbca 	bl	80113d4 <uxr_serialize_message_header>
 8010c40:	b00a      	add	sp, #40	@ 0x28
 8010c42:	bd10      	pop	{r4, pc}

08010c44 <uxr_stamp_session_header>:
 8010c44:	b530      	push	{r4, r5, lr}
 8010c46:	b08d      	sub	sp, #52	@ 0x34
 8010c48:	4604      	mov	r4, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	a804      	add	r0, sp, #16
 8010c50:	9203      	str	r2, [sp, #12]
 8010c52:	2208      	movs	r2, #8
 8010c54:	f7fe fcda 	bl	800f60c <ucdr_init_buffer>
 8010c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c5c:	9b03      	ldr	r3, [sp, #12]
 8010c5e:	462a      	mov	r2, r5
 8010c60:	a804      	add	r0, sp, #16
 8010c62:	9400      	str	r4, [sp, #0]
 8010c64:	f000 fbb6 	bl	80113d4 <uxr_serialize_message_header>
 8010c68:	b00d      	add	sp, #52	@ 0x34
 8010c6a:	bd30      	pop	{r4, r5, pc}

08010c6c <uxr_read_session_header>:
 8010c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c70:	4607      	mov	r7, r0
 8010c72:	b084      	sub	sp, #16
 8010c74:	4608      	mov	r0, r1
 8010c76:	460c      	mov	r4, r1
 8010c78:	4615      	mov	r5, r2
 8010c7a:	461e      	mov	r6, r3
 8010c7c:	f7fe fcf8 	bl	800f670 <ucdr_buffer_remaining>
 8010c80:	2808      	cmp	r0, #8
 8010c82:	d803      	bhi.n	8010c8c <uxr_read_session_header+0x20>
 8010c84:	2000      	movs	r0, #0
 8010c86:	b004      	add	sp, #16
 8010c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c8c:	f10d 080c 	add.w	r8, sp, #12
 8010c90:	4633      	mov	r3, r6
 8010c92:	462a      	mov	r2, r5
 8010c94:	4620      	mov	r0, r4
 8010c96:	f10d 010b 	add.w	r1, sp, #11
 8010c9a:	f8cd 8000 	str.w	r8, [sp]
 8010c9e:	f000 fbb7 	bl	8011410 <uxr_deserialize_message_header>
 8010ca2:	783a      	ldrb	r2, [r7, #0]
 8010ca4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d1eb      	bne.n	8010c84 <uxr_read_session_header+0x18>
 8010cac:	061b      	lsls	r3, r3, #24
 8010cae:	d41b      	bmi.n	8010ce8 <uxr_read_session_header+0x7c>
 8010cb0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010cb4:	787b      	ldrb	r3, [r7, #1]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d003      	beq.n	8010cc2 <uxr_read_session_header+0x56>
 8010cba:	2001      	movs	r0, #1
 8010cbc:	f080 0001 	eor.w	r0, r0, #1
 8010cc0:	e7e1      	b.n	8010c86 <uxr_read_session_header+0x1a>
 8010cc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010cc6:	1cb8      	adds	r0, r7, #2
 8010cc8:	78bb      	ldrb	r3, [r7, #2]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d1f5      	bne.n	8010cba <uxr_read_session_header+0x4e>
 8010cce:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010cd2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d1ef      	bne.n	8010cba <uxr_read_session_header+0x4e>
 8010cda:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010cde:	7843      	ldrb	r3, [r0, #1]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d1ea      	bne.n	8010cba <uxr_read_session_header+0x4e>
 8010ce4:	2000      	movs	r0, #0
 8010ce6:	e7e9      	b.n	8010cbc <uxr_read_session_header+0x50>
 8010ce8:	2001      	movs	r0, #1
 8010cea:	e7cc      	b.n	8010c86 <uxr_read_session_header+0x1a>

08010cec <uxr_session_header_offset>:
 8010cec:	f990 3000 	ldrsb.w	r3, [r0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	bfac      	ite	ge
 8010cf4:	2008      	movge	r0, #8
 8010cf6:	2004      	movlt	r0, #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop

08010cfc <uxr_init_base_object_request>:
 8010cfc:	b510      	push	{r4, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010d04:	9101      	str	r1, [sp, #4]
 8010d06:	88c3      	ldrh	r3, [r0, #6]
 8010d08:	f1a3 010a 	sub.w	r1, r3, #10
 8010d0c:	b289      	uxth	r1, r1
 8010d0e:	42a1      	cmp	r1, r4
 8010d10:	d80f      	bhi.n	8010d32 <uxr_init_base_object_request+0x36>
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29c      	uxth	r4, r3
 8010d16:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	80c4      	strh	r4, [r0, #6]
 8010d1e:	1c91      	adds	r1, r2, #2
 8010d20:	9801      	ldr	r0, [sp, #4]
 8010d22:	f882 c000 	strb.w	ip, [r2]
 8010d26:	7053      	strb	r3, [r2, #1]
 8010d28:	f7fe feb8 	bl	800fa9c <uxr_object_id_to_raw>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	b002      	add	sp, #8
 8010d30:	bd10      	pop	{r4, pc}
 8010d32:	230a      	movs	r3, #10
 8010d34:	f04f 0c00 	mov.w	ip, #0
 8010d38:	461c      	mov	r4, r3
 8010d3a:	e7ef      	b.n	8010d1c <uxr_init_base_object_request+0x20>

08010d3c <uxr_parse_base_object_request>:
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	4604      	mov	r4, r0
 8010d40:	3002      	adds	r0, #2
 8010d42:	460d      	mov	r5, r1
 8010d44:	4616      	mov	r6, r2
 8010d46:	f7fe fe95 	bl	800fa74 <uxr_object_id_from_raw>
 8010d4a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010d4e:	8028      	strh	r0, [r5, #0]
 8010d50:	806b      	strh	r3, [r5, #2]
 8010d52:	7822      	ldrb	r2, [r4, #0]
 8010d54:	7863      	ldrb	r3, [r4, #1]
 8010d56:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010d5a:	8033      	strh	r3, [r6, #0]
 8010d5c:	bd70      	pop	{r4, r5, r6, pc}
 8010d5e:	bf00      	nop

08010d60 <uxr_stream_id>:
 8010d60:	2901      	cmp	r1, #1
 8010d62:	4684      	mov	ip, r0
 8010d64:	b500      	push	{lr}
 8010d66:	b083      	sub	sp, #12
 8010d68:	d01f      	beq.n	8010daa <uxr_stream_id+0x4a>
 8010d6a:	2902      	cmp	r1, #2
 8010d6c:	f04f 0e00 	mov.w	lr, #0
 8010d70:	d020      	beq.n	8010db4 <uxr_stream_id+0x54>
 8010d72:	2300      	movs	r3, #0
 8010d74:	2000      	movs	r0, #0
 8010d76:	f36e 0307 	bfi	r3, lr, #0, #8
 8010d7a:	f36c 230f 	bfi	r3, ip, #8, #8
 8010d7e:	f361 4317 	bfi	r3, r1, #16, #8
 8010d82:	f362 631f 	bfi	r3, r2, #24, #8
 8010d86:	fa5f fc83 	uxtb.w	ip, r3
 8010d8a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010d8e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010d92:	0e1b      	lsrs	r3, r3, #24
 8010d94:	f36c 0007 	bfi	r0, ip, #0, #8
 8010d98:	f361 200f 	bfi	r0, r1, #8, #8
 8010d9c:	f362 4017 	bfi	r0, r2, #16, #8
 8010da0:	f363 601f 	bfi	r0, r3, #24, #8
 8010da4:	b003      	add	sp, #12
 8010da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010daa:	f100 0e01 	add.w	lr, r0, #1
 8010dae:	fa5f fe8e 	uxtb.w	lr, lr
 8010db2:	e7de      	b.n	8010d72 <uxr_stream_id+0x12>
 8010db4:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8010db8:	e7db      	b.n	8010d72 <uxr_stream_id+0x12>
 8010dba:	bf00      	nop

08010dbc <uxr_stream_id_from_raw>:
 8010dbc:	b082      	sub	sp, #8
 8010dbe:	b130      	cbz	r0, 8010dce <uxr_stream_id_from_raw+0x12>
 8010dc0:	0603      	lsls	r3, r0, #24
 8010dc2:	d421      	bmi.n	8010e08 <uxr_stream_id_from_raw+0x4c>
 8010dc4:	1e42      	subs	r2, r0, #1
 8010dc6:	f04f 0c01 	mov.w	ip, #1
 8010dca:	b2d2      	uxtb	r2, r2
 8010dcc:	e001      	b.n	8010dd2 <uxr_stream_id_from_raw+0x16>
 8010dce:	4684      	mov	ip, r0
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f360 0307 	bfi	r3, r0, #0, #8
 8010dd8:	2000      	movs	r0, #0
 8010dda:	f362 230f 	bfi	r3, r2, #8, #8
 8010dde:	f36c 4317 	bfi	r3, ip, #16, #8
 8010de2:	f361 631f 	bfi	r3, r1, #24, #8
 8010de6:	fa5f fc83 	uxtb.w	ip, r3
 8010dea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010dee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010df2:	0e1b      	lsrs	r3, r3, #24
 8010df4:	f36c 0007 	bfi	r0, ip, #0, #8
 8010df8:	f361 200f 	bfi	r0, r1, #8, #8
 8010dfc:	f362 4017 	bfi	r0, r2, #16, #8
 8010e00:	f363 601f 	bfi	r0, r3, #24, #8
 8010e04:	b002      	add	sp, #8
 8010e06:	4770      	bx	lr
 8010e08:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010e0c:	f04f 0c02 	mov.w	ip, #2
 8010e10:	e7df      	b.n	8010dd2 <uxr_stream_id_from_raw+0x16>
 8010e12:	bf00      	nop

08010e14 <uxr_init_stream_storage>:
 8010e14:	2300      	movs	r3, #0
 8010e16:	7403      	strb	r3, [r0, #16]
 8010e18:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010e1c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010e20:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop

08010e28 <uxr_reset_stream_storage>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	7c03      	ldrb	r3, [r0, #16]
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	b14b      	cbz	r3, 8010e44 <uxr_reset_stream_storage+0x1c>
 8010e30:	4606      	mov	r6, r0
 8010e32:	2500      	movs	r5, #0
 8010e34:	4630      	mov	r0, r6
 8010e36:	3501      	adds	r5, #1
 8010e38:	f004 f9b4 	bl	80151a4 <uxr_reset_output_best_effort_stream>
 8010e3c:	7c23      	ldrb	r3, [r4, #16]
 8010e3e:	3610      	adds	r6, #16
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d8f7      	bhi.n	8010e34 <uxr_reset_stream_storage+0xc>
 8010e44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010e48:	b15b      	cbz	r3, 8010e62 <uxr_reset_stream_storage+0x3a>
 8010e4a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e4e:	2500      	movs	r5, #0
 8010e50:	4630      	mov	r0, r6
 8010e52:	3501      	adds	r5, #1
 8010e54:	f003 ffac 	bl	8014db0 <uxr_reset_input_best_effort_stream>
 8010e58:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010e5c:	3602      	adds	r6, #2
 8010e5e:	42ab      	cmp	r3, r5
 8010e60:	d8f6      	bhi.n	8010e50 <uxr_reset_stream_storage+0x28>
 8010e62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010e66:	b15b      	cbz	r3, 8010e80 <uxr_reset_stream_storage+0x58>
 8010e68:	f104 0618 	add.w	r6, r4, #24
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	4630      	mov	r0, r6
 8010e70:	3501      	adds	r5, #1
 8010e72:	f004 fa45 	bl	8015300 <uxr_reset_output_reliable_stream>
 8010e76:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010e7a:	3628      	adds	r6, #40	@ 0x28
 8010e7c:	42ab      	cmp	r3, r5
 8010e7e:	d8f6      	bhi.n	8010e6e <uxr_reset_stream_storage+0x46>
 8010e80:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010e84:	b15b      	cbz	r3, 8010e9e <uxr_reset_stream_storage+0x76>
 8010e86:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010e8a:	2500      	movs	r5, #0
 8010e8c:	4630      	mov	r0, r6
 8010e8e:	3501      	adds	r5, #1
 8010e90:	f003 fffa 	bl	8014e88 <uxr_reset_input_reliable_stream>
 8010e94:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010e98:	3618      	adds	r6, #24
 8010e9a:	42ab      	cmp	r3, r5
 8010e9c:	d8f6      	bhi.n	8010e8c <uxr_reset_stream_storage+0x64>
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}

08010ea0 <uxr_add_output_best_effort_buffer>:
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	7c04      	ldrb	r4, [r0, #16]
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	f104 0c01 	add.w	ip, r4, #1
 8010eaa:	f880 c010 	strb.w	ip, [r0, #16]
 8010eae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010eb2:	f004 f96d 	bl	8015190 <uxr_init_output_best_effort_stream>
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4620      	mov	r0, r4
 8010eba:	4611      	mov	r1, r2
 8010ebc:	b002      	add	sp, #8
 8010ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ec2:	f7ff bf4d 	b.w	8010d60 <uxr_stream_id>
 8010ec6:	bf00      	nop

08010ec8 <uxr_add_output_reliable_buffer>:
 8010ec8:	b510      	push	{r4, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	4684      	mov	ip, r0
 8010ece:	2028      	movs	r0, #40	@ 0x28
 8010ed0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010ed4:	9400      	str	r4, [sp, #0]
 8010ed6:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010eda:	fb00 c004 	mla	r0, r0, r4, ip
 8010ede:	f104 0e01 	add.w	lr, r4, #1
 8010ee2:	3018      	adds	r0, #24
 8010ee4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010ee8:	f004 f9d2 	bl	8015290 <uxr_init_output_reliable_stream>
 8010eec:	2201      	movs	r2, #1
 8010eee:	2102      	movs	r1, #2
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	b004      	add	sp, #16
 8010ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef8:	f7ff bf32 	b.w	8010d60 <uxr_stream_id>

08010efc <uxr_add_input_best_effort_buffer>:
 8010efc:	b510      	push	{r4, lr}
 8010efe:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010f02:	b082      	sub	sp, #8
 8010f04:	1c62      	adds	r2, r4, #1
 8010f06:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010f0a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010f0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010f12:	f003 ff49 	bl	8014da8 <uxr_init_input_best_effort_stream>
 8010f16:	2200      	movs	r2, #0
 8010f18:	2101      	movs	r1, #1
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	b002      	add	sp, #8
 8010f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f22:	f7ff bf1d 	b.w	8010d60 <uxr_stream_id>
 8010f26:	bf00      	nop

08010f28 <uxr_add_input_reliable_buffer>:
 8010f28:	b510      	push	{r4, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	4684      	mov	ip, r0
 8010f2e:	2018      	movs	r0, #24
 8010f30:	9c06      	ldr	r4, [sp, #24]
 8010f32:	9400      	str	r4, [sp, #0]
 8010f34:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010f38:	fb00 c004 	mla	r0, r0, r4, ip
 8010f3c:	f104 0e01 	add.w	lr, r4, #1
 8010f40:	3048      	adds	r0, #72	@ 0x48
 8010f42:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010f46:	f003 ff79 	bl	8014e3c <uxr_init_input_reliable_stream>
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	2102      	movs	r1, #2
 8010f4e:	4620      	mov	r0, r4
 8010f50:	b004      	add	sp, #16
 8010f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f56:	f7ff bf03 	b.w	8010d60 <uxr_stream_id>
 8010f5a:	bf00      	nop

08010f5c <uxr_get_output_best_effort_stream>:
 8010f5c:	7c03      	ldrb	r3, [r0, #16]
 8010f5e:	428b      	cmp	r3, r1
 8010f60:	bf8c      	ite	hi
 8010f62:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010f66:	2000      	movls	r0, #0
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop

08010f6c <uxr_get_output_reliable_stream>:
 8010f6c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010f70:	428b      	cmp	r3, r1
 8010f72:	d904      	bls.n	8010f7e <uxr_get_output_reliable_stream+0x12>
 8010f74:	2328      	movs	r3, #40	@ 0x28
 8010f76:	fb03 0001 	mla	r0, r3, r1, r0
 8010f7a:	3018      	adds	r0, #24
 8010f7c:	4770      	bx	lr
 8010f7e:	2000      	movs	r0, #0
 8010f80:	4770      	bx	lr
 8010f82:	bf00      	nop

08010f84 <uxr_get_input_best_effort_stream>:
 8010f84:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010f88:	428b      	cmp	r3, r1
 8010f8a:	d903      	bls.n	8010f94 <uxr_get_input_best_effort_stream+0x10>
 8010f8c:	3121      	adds	r1, #33	@ 0x21
 8010f8e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8010f92:	4770      	bx	lr
 8010f94:	2000      	movs	r0, #0
 8010f96:	4770      	bx	lr

08010f98 <uxr_get_input_reliable_stream>:
 8010f98:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010f9c:	428b      	cmp	r3, r1
 8010f9e:	d904      	bls.n	8010faa <uxr_get_input_reliable_stream+0x12>
 8010fa0:	2318      	movs	r3, #24
 8010fa2:	fb03 0001 	mla	r0, r3, r1, r0
 8010fa6:	3048      	adds	r0, #72	@ 0x48
 8010fa8:	4770      	bx	lr
 8010faa:	2000      	movs	r0, #0
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop

08010fb0 <uxr_output_streams_confirmed>:
 8010fb0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010fb4:	b183      	cbz	r3, 8010fd8 <uxr_output_streams_confirmed+0x28>
 8010fb6:	b570      	push	{r4, r5, r6, lr}
 8010fb8:	4606      	mov	r6, r0
 8010fba:	f100 0518 	add.w	r5, r0, #24
 8010fbe:	2400      	movs	r4, #0
 8010fc0:	e000      	b.n	8010fc4 <uxr_output_streams_confirmed+0x14>
 8010fc2:	b140      	cbz	r0, 8010fd6 <uxr_output_streams_confirmed+0x26>
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	3401      	adds	r4, #1
 8010fc8:	f004 fc0e 	bl	80157e8 <uxr_is_output_up_to_date>
 8010fcc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010fd0:	3528      	adds	r5, #40	@ 0x28
 8010fd2:	42a3      	cmp	r3, r4
 8010fd4:	d8f5      	bhi.n	8010fc2 <uxr_output_streams_confirmed+0x12>
 8010fd6:	bd70      	pop	{r4, r5, r6, pc}
 8010fd8:	2001      	movs	r0, #1
 8010fda:	4770      	bx	lr

08010fdc <uxr_buffer_submessage_header>:
 8010fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fde:	460e      	mov	r6, r1
 8010fe0:	2104      	movs	r1, #4
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4615      	mov	r5, r2
 8010fe6:	461f      	mov	r7, r3
 8010fe8:	f7fe fb2c 	bl	800f644 <ucdr_align_to>
 8010fec:	2301      	movs	r3, #1
 8010fee:	4631      	mov	r1, r6
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	ea47 0203 	orr.w	r2, r7, r3
 8010ff6:	7523      	strb	r3, [r4, #20]
 8010ff8:	462b      	mov	r3, r5
 8010ffa:	f000 fa29 	bl	8011450 <uxr_serialize_submessage_header>
 8010ffe:	4620      	mov	r0, r4
 8011000:	f7fe fb36 	bl	800f670 <ucdr_buffer_remaining>
 8011004:	42a8      	cmp	r0, r5
 8011006:	bf34      	ite	cc
 8011008:	2000      	movcc	r0, #0
 801100a:	2001      	movcs	r0, #1
 801100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801100e:	bf00      	nop

08011010 <uxr_read_submessage_header>:
 8011010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	2104      	movs	r1, #4
 801101a:	4616      	mov	r6, r2
 801101c:	4698      	mov	r8, r3
 801101e:	f7fe fb11 	bl	800f644 <ucdr_align_to>
 8011022:	4620      	mov	r0, r4
 8011024:	f7fe fb24 	bl	800f670 <ucdr_buffer_remaining>
 8011028:	2803      	cmp	r0, #3
 801102a:	bf8c      	ite	hi
 801102c:	2701      	movhi	r7, #1
 801102e:	2700      	movls	r7, #0
 8011030:	d802      	bhi.n	8011038 <uxr_read_submessage_header+0x28>
 8011032:	4638      	mov	r0, r7
 8011034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011038:	4633      	mov	r3, r6
 801103a:	4642      	mov	r2, r8
 801103c:	4620      	mov	r0, r4
 801103e:	4629      	mov	r1, r5
 8011040:	f000 fa1a 	bl	8011478 <uxr_deserialize_submessage_header>
 8011044:	f898 3000 	ldrb.w	r3, [r8]
 8011048:	4638      	mov	r0, r7
 801104a:	f003 0201 	and.w	r2, r3, #1
 801104e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011052:	f888 3000 	strb.w	r3, [r8]
 8011056:	7522      	strb	r2, [r4, #20]
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801105c <uxr_submessage_padding>:
 801105c:	f010 0003 	ands.w	r0, r0, #3
 8011060:	bf18      	it	ne
 8011062:	f1c0 0004 	rsbne	r0, r0, #4
 8011066:	4770      	bx	lr

08011068 <uxr_millis>:
 8011068:	b510      	push	{r4, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	2001      	movs	r0, #1
 801106e:	4669      	mov	r1, sp
 8011070:	f7f0 f97a 	bl	8001368 <clock_gettime>
 8011074:	4908      	ldr	r1, [pc, #32]	@ (8011098 <uxr_millis+0x30>)
 8011076:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801107a:	fba0 0301 	umull	r0, r3, r0, r1
 801107e:	1900      	adds	r0, r0, r4
 8011080:	fb01 3102 	mla	r1, r1, r2, r3
 8011084:	4a05      	ldr	r2, [pc, #20]	@ (801109c <uxr_millis+0x34>)
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801108e:	f7ef f93f 	bl	8000310 <__aeabi_ldivmod>
 8011092:	b004      	add	sp, #16
 8011094:	bd10      	pop	{r4, pc}
 8011096:	bf00      	nop
 8011098:	3b9aca00 	.word	0x3b9aca00
 801109c:	000f4240 	.word	0x000f4240

080110a0 <uxr_nanos>:
 80110a0:	b510      	push	{r4, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	2001      	movs	r0, #1
 80110a6:	4669      	mov	r1, sp
 80110a8:	f7f0 f95e 	bl	8001368 <clock_gettime>
 80110ac:	4a06      	ldr	r2, [pc, #24]	@ (80110c8 <uxr_nanos+0x28>)
 80110ae:	9800      	ldr	r0, [sp, #0]
 80110b0:	9902      	ldr	r1, [sp, #8]
 80110b2:	fba0 0302 	umull	r0, r3, r0, r2
 80110b6:	9c01      	ldr	r4, [sp, #4]
 80110b8:	1840      	adds	r0, r0, r1
 80110ba:	fb02 3304 	mla	r3, r2, r4, r3
 80110be:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80110c2:	b004      	add	sp, #16
 80110c4:	bd10      	pop	{r4, pc}
 80110c6:	bf00      	nop
 80110c8:	3b9aca00 	.word	0x3b9aca00

080110cc <on_full_output_buffer_fragmented>:
 80110cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d0:	460c      	mov	r4, r1
 80110d2:	b08a      	sub	sp, #40	@ 0x28
 80110d4:	4606      	mov	r6, r0
 80110d6:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80110da:	f104 0008 	add.w	r0, r4, #8
 80110de:	f7ff ff45 	bl	8010f6c <uxr_get_output_reliable_stream>
 80110e2:	4605      	mov	r5, r0
 80110e4:	f004 fb8a 	bl	80157fc <get_available_free_slots>
 80110e8:	b968      	cbnz	r0, 8011106 <on_full_output_buffer_fragmented+0x3a>
 80110ea:	4620      	mov	r0, r4
 80110ec:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80110f0:	4798      	blx	r3
 80110f2:	b918      	cbnz	r0, 80110fc <on_full_output_buffer_fragmented+0x30>
 80110f4:	2001      	movs	r0, #1
 80110f6:	b00a      	add	sp, #40	@ 0x28
 80110f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110fc:	4628      	mov	r0, r5
 80110fe:	f004 fb7d 	bl	80157fc <get_available_free_slots>
 8011102:	2800      	cmp	r0, #0
 8011104:	d0f6      	beq.n	80110f4 <on_full_output_buffer_fragmented+0x28>
 8011106:	8929      	ldrh	r1, [r5, #8]
 8011108:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801110c:	89eb      	ldrh	r3, [r5, #14]
 801110e:	7b28      	ldrb	r0, [r5, #12]
 8011110:	686f      	ldr	r7, [r5, #4]
 8011112:	1a12      	subs	r2, r2, r0
 8011114:	fbb3 f0f1 	udiv	r0, r3, r1
 8011118:	fbb7 f7f1 	udiv	r7, r7, r1
 801111c:	fb01 3110 	mls	r1, r1, r0, r3
 8011120:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011124:	b289      	uxth	r1, r1
 8011126:	fb07 f101 	mul.w	r1, r7, r1
 801112a:	3f04      	subs	r7, #4
 801112c:	443a      	add	r2, r7
 801112e:	3104      	adds	r1, #4
 8011130:	fa1f f882 	uxth.w	r8, r2
 8011134:	463a      	mov	r2, r7
 8011136:	eba3 0308 	sub.w	r3, r3, r8
 801113a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801113e:	682b      	ldr	r3, [r5, #0]
 8011140:	4419      	add	r1, r3
 8011142:	2300      	movs	r3, #0
 8011144:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011148:	9000      	str	r0, [sp, #0]
 801114a:	a802      	add	r0, sp, #8
 801114c:	f7fe fa4c 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 8011150:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011154:	f102 0308 	add.w	r3, r2, #8
 8011158:	42bb      	cmp	r3, r7
 801115a:	d927      	bls.n	80111ac <on_full_output_buffer_fragmented+0xe0>
 801115c:	4642      	mov	r2, r8
 801115e:	2300      	movs	r3, #0
 8011160:	210d      	movs	r1, #13
 8011162:	a802      	add	r0, sp, #8
 8011164:	f7ff ff3a 	bl	8010fdc <uxr_buffer_submessage_header>
 8011168:	8929      	ldrh	r1, [r5, #8]
 801116a:	89eb      	ldrh	r3, [r5, #14]
 801116c:	686a      	ldr	r2, [r5, #4]
 801116e:	fbb3 f0f1 	udiv	r0, r3, r1
 8011172:	fbb2 f2f1 	udiv	r2, r2, r1
 8011176:	fb01 3310 	mls	r3, r1, r0, r3
 801117a:	b29b      	uxth	r3, r3
 801117c:	fb02 f303 	mul.w	r3, r2, r3
 8011180:	682a      	ldr	r2, [r5, #0]
 8011182:	50d7      	str	r7, [r2, r3]
 8011184:	2101      	movs	r1, #1
 8011186:	89e8      	ldrh	r0, [r5, #14]
 8011188:	f004 fb5a 	bl	8015840 <uxr_seq_num_add>
 801118c:	9904      	ldr	r1, [sp, #16]
 801118e:	9a03      	ldr	r2, [sp, #12]
 8011190:	81e8      	strh	r0, [r5, #14]
 8011192:	4630      	mov	r0, r6
 8011194:	1a52      	subs	r2, r2, r1
 8011196:	f7fe fa39 	bl	800f60c <ucdr_init_buffer>
 801119a:	4630      	mov	r0, r6
 801119c:	4622      	mov	r2, r4
 801119e:	490f      	ldr	r1, [pc, #60]	@ (80111dc <on_full_output_buffer_fragmented+0x110>)
 80111a0:	f7fe fa08 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 80111a4:	2000      	movs	r0, #0
 80111a6:	b00a      	add	sp, #40	@ 0x28
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	b292      	uxth	r2, r2
 80111ae:	2302      	movs	r3, #2
 80111b0:	210d      	movs	r1, #13
 80111b2:	a802      	add	r0, sp, #8
 80111b4:	f7ff ff12 	bl	8010fdc <uxr_buffer_submessage_header>
 80111b8:	8928      	ldrh	r0, [r5, #8]
 80111ba:	89eb      	ldrh	r3, [r5, #14]
 80111bc:	6869      	ldr	r1, [r5, #4]
 80111be:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80111c2:	fbb3 f7f0 	udiv	r7, r3, r0
 80111c6:	fbb1 f1f0 	udiv	r1, r1, r0
 80111ca:	fb00 3317 	mls	r3, r0, r7, r3
 80111ce:	3208      	adds	r2, #8
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	fb01 f303 	mul.w	r3, r1, r3
 80111d6:	6829      	ldr	r1, [r5, #0]
 80111d8:	50ca      	str	r2, [r1, r3]
 80111da:	e7d3      	b.n	8011184 <on_full_output_buffer_fragmented+0xb8>
 80111dc:	080110cd 	.word	0x080110cd

080111e0 <uxr_prepare_output_stream>:
 80111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111e2:	b087      	sub	sp, #28
 80111e4:	2707      	movs	r7, #7
 80111e6:	2500      	movs	r5, #0
 80111e8:	461c      	mov	r4, r3
 80111ea:	4606      	mov	r6, r0
 80111ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80111f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80111f2:	e9cd 7500 	strd	r7, r5, [sp]
 80111f6:	3204      	adds	r2, #4
 80111f8:	f7ff fc44 	bl	8010a84 <uxr_prepare_stream_to_write_submessage>
 80111fc:	f080 0201 	eor.w	r2, r0, #1
 8011200:	b2d2      	uxtb	r2, r2
 8011202:	75a2      	strb	r2, [r4, #22]
 8011204:	b112      	cbz	r2, 801120c <uxr_prepare_output_stream+0x2c>
 8011206:	4628      	mov	r0, r5
 8011208:	b007      	add	sp, #28
 801120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801120c:	aa05      	add	r2, sp, #20
 801120e:	9902      	ldr	r1, [sp, #8]
 8011210:	4630      	mov	r0, r6
 8011212:	f7ff fd73 	bl	8010cfc <uxr_init_base_object_request>
 8011216:	a905      	add	r1, sp, #20
 8011218:	4605      	mov	r5, r0
 801121a:	4620      	mov	r0, r4
 801121c:	f000 ff9c 	bl	8012158 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011220:	69a6      	ldr	r6, [r4, #24]
 8011222:	69e7      	ldr	r7, [r4, #28]
 8011224:	4620      	mov	r0, r4
 8011226:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801122a:	1a52      	subs	r2, r2, r1
 801122c:	f7fe f9ee 	bl	800f60c <ucdr_init_buffer>
 8011230:	4620      	mov	r0, r4
 8011232:	463a      	mov	r2, r7
 8011234:	4631      	mov	r1, r6
 8011236:	f7fe f9bd 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 801123a:	4628      	mov	r0, r5
 801123c:	b007      	add	sp, #28
 801123e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011240 <uxr_prepare_output_stream_fragmented>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	b091      	sub	sp, #68	@ 0x44
 8011246:	4605      	mov	r5, r0
 8011248:	3008      	adds	r0, #8
 801124a:	461e      	mov	r6, r3
 801124c:	9105      	str	r1, [sp, #20]
 801124e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011252:	9204      	str	r2, [sp, #16]
 8011254:	f7ff fe8a 	bl	8010f6c <uxr_get_output_reliable_stream>
 8011258:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801125c:	2b01      	cmp	r3, #1
 801125e:	f000 8093 	beq.w	8011388 <uxr_prepare_output_stream_fragmented+0x148>
 8011262:	4604      	mov	r4, r0
 8011264:	2800      	cmp	r0, #0
 8011266:	f000 808f 	beq.w	8011388 <uxr_prepare_output_stream_fragmented+0x148>
 801126a:	f004 fac7 	bl	80157fc <get_available_free_slots>
 801126e:	2800      	cmp	r0, #0
 8011270:	f000 8085 	beq.w	801137e <uxr_prepare_output_stream_fragmented+0x13e>
 8011274:	8923      	ldrh	r3, [r4, #8]
 8011276:	89e7      	ldrh	r7, [r4, #14]
 8011278:	6862      	ldr	r2, [r4, #4]
 801127a:	fbb7 f9f3 	udiv	r9, r7, r3
 801127e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011282:	fb03 7919 	mls	r9, r3, r9, r7
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	f1a2 0b04 	sub.w	fp, r2, #4
 801128c:	9203      	str	r2, [sp, #12]
 801128e:	fa1f f989 	uxth.w	r9, r9
 8011292:	fb02 f909 	mul.w	r9, r2, r9
 8011296:	f109 0904 	add.w	r9, r9, #4
 801129a:	4499      	add	r9, r3
 801129c:	7b23      	ldrb	r3, [r4, #12]
 801129e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80112a2:	4543      	cmp	r3, r8
 80112a4:	d37c      	bcc.n	80113a0 <uxr_prepare_output_stream_fragmented+0x160>
 80112a6:	f1ab 0a04 	sub.w	sl, fp, #4
 80112aa:	465a      	mov	r2, fp
 80112ac:	4649      	mov	r1, r9
 80112ae:	a808      	add	r0, sp, #32
 80112b0:	ebaa 0a03 	sub.w	sl, sl, r3
 80112b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80112b6:	f8cd 8000 	str.w	r8, [sp]
 80112ba:	3308      	adds	r3, #8
 80112bc:	fa1f fa8a 	uxth.w	sl, sl
 80112c0:	9302      	str	r3, [sp, #8]
 80112c2:	2300      	movs	r3, #0
 80112c4:	f7fe f990 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 80112c8:	9b02      	ldr	r3, [sp, #8]
 80112ca:	4652      	mov	r2, sl
 80112cc:	210d      	movs	r1, #13
 80112ce:	455b      	cmp	r3, fp
 80112d0:	bf34      	ite	cc
 80112d2:	2302      	movcc	r3, #2
 80112d4:	2300      	movcs	r3, #0
 80112d6:	a808      	add	r0, sp, #32
 80112d8:	f7ff fe80 	bl	8010fdc <uxr_buffer_submessage_header>
 80112dc:	8921      	ldrh	r1, [r4, #8]
 80112de:	6863      	ldr	r3, [r4, #4]
 80112e0:	4638      	mov	r0, r7
 80112e2:	fbb7 f2f1 	udiv	r2, r7, r1
 80112e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80112ea:	fb01 7212 	mls	r2, r1, r2, r7
 80112ee:	2101      	movs	r1, #1
 80112f0:	b292      	uxth	r2, r2
 80112f2:	fb02 f303 	mul.w	r3, r2, r3
 80112f6:	6822      	ldr	r2, [r4, #0]
 80112f8:	f842 b003 	str.w	fp, [r2, r3]
 80112fc:	f004 faa0 	bl	8015840 <uxr_seq_num_add>
 8011300:	9b03      	ldr	r3, [sp, #12]
 8011302:	f108 0104 	add.w	r1, r8, #4
 8011306:	4607      	mov	r7, r0
 8011308:	f1a3 0208 	sub.w	r2, r3, #8
 801130c:	4630      	mov	r0, r6
 801130e:	4449      	add	r1, r9
 8011310:	eba2 0208 	sub.w	r2, r2, r8
 8011314:	f7fe f97a 	bl	800f60c <ucdr_init_buffer>
 8011318:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801131a:	2107      	movs	r1, #7
 801131c:	81e7      	strh	r7, [r4, #14]
 801131e:	1d1a      	adds	r2, r3, #4
 8011320:	2300      	movs	r3, #0
 8011322:	4630      	mov	r0, r6
 8011324:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011328:	bf28      	it	cs
 801132a:	461a      	movcs	r2, r3
 801132c:	b292      	uxth	r2, r2
 801132e:	f7ff fe55 	bl	8010fdc <uxr_buffer_submessage_header>
 8011332:	aa07      	add	r2, sp, #28
 8011334:	9904      	ldr	r1, [sp, #16]
 8011336:	4628      	mov	r0, r5
 8011338:	f7ff fce0 	bl	8010cfc <uxr_init_base_object_request>
 801133c:	4604      	mov	r4, r0
 801133e:	b320      	cbz	r0, 801138a <uxr_prepare_output_stream_fragmented+0x14a>
 8011340:	a907      	add	r1, sp, #28
 8011342:	4630      	mov	r0, r6
 8011344:	f000 ff08 	bl	8012158 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011348:	4630      	mov	r0, r6
 801134a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801134e:	1a52      	subs	r2, r2, r1
 8011350:	f7fe f95c 	bl	800f60c <ucdr_init_buffer>
 8011354:	9b05      	ldr	r3, [sp, #20]
 8011356:	9a02      	ldr	r2, [sp, #8]
 8011358:	4630      	mov	r0, r6
 801135a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801135e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011360:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8011364:	462a      	mov	r2, r5
 8011366:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801136a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801136c:	4918      	ldr	r1, [pc, #96]	@ (80113d0 <uxr_prepare_output_stream_fragmented+0x190>)
 801136e:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011372:	f7fe f91f 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 8011376:	4620      	mov	r0, r4
 8011378:	b011      	add	sp, #68	@ 0x44
 801137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011380:	4628      	mov	r0, r5
 8011382:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011384:	4798      	blx	r3
 8011386:	b920      	cbnz	r0, 8011392 <uxr_prepare_output_stream_fragmented+0x152>
 8011388:	2400      	movs	r4, #0
 801138a:	4620      	mov	r0, r4
 801138c:	b011      	add	sp, #68	@ 0x44
 801138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011392:	4620      	mov	r0, r4
 8011394:	f004 fa32 	bl	80157fc <get_available_free_slots>
 8011398:	2800      	cmp	r0, #0
 801139a:	f47f af6b 	bne.w	8011274 <uxr_prepare_output_stream_fragmented+0x34>
 801139e:	e7f3      	b.n	8011388 <uxr_prepare_output_stream_fragmented+0x148>
 80113a0:	4638      	mov	r0, r7
 80113a2:	2101      	movs	r1, #1
 80113a4:	f004 fa4c 	bl	8015840 <uxr_seq_num_add>
 80113a8:	8922      	ldrh	r2, [r4, #8]
 80113aa:	6863      	ldr	r3, [r4, #4]
 80113ac:	4607      	mov	r7, r0
 80113ae:	fbb3 f9f2 	udiv	r9, r3, r2
 80113b2:	fbb0 f3f2 	udiv	r3, r0, r2
 80113b6:	fb02 0313 	mls	r3, r2, r3, r0
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	fb03 f909 	mul.w	r9, r3, r9
 80113c0:	6823      	ldr	r3, [r4, #0]
 80113c2:	f109 0904 	add.w	r9, r9, #4
 80113c6:	4499      	add	r9, r3
 80113c8:	7b23      	ldrb	r3, [r4, #12]
 80113ca:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80113ce:	e76a      	b.n	80112a6 <uxr_prepare_output_stream_fragmented+0x66>
 80113d0:	080110cd 	.word	0x080110cd

080113d4 <uxr_serialize_message_header>:
 80113d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113d6:	4616      	mov	r6, r2
 80113d8:	b083      	sub	sp, #12
 80113da:	4604      	mov	r4, r0
 80113dc:	460d      	mov	r5, r1
 80113de:	9301      	str	r3, [sp, #4]
 80113e0:	9f08      	ldr	r7, [sp, #32]
 80113e2:	f002 fd4b 	bl	8013e7c <ucdr_serialize_uint8_t>
 80113e6:	4631      	mov	r1, r6
 80113e8:	4620      	mov	r0, r4
 80113ea:	f002 fd47 	bl	8013e7c <ucdr_serialize_uint8_t>
 80113ee:	9a01      	ldr	r2, [sp, #4]
 80113f0:	2101      	movs	r1, #1
 80113f2:	4620      	mov	r0, r4
 80113f4:	f002 fdee 	bl	8013fd4 <ucdr_serialize_endian_uint16_t>
 80113f8:	062b      	lsls	r3, r5, #24
 80113fa:	d501      	bpl.n	8011400 <uxr_serialize_message_header+0x2c>
 80113fc:	b003      	add	sp, #12
 80113fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011400:	2204      	movs	r2, #4
 8011402:	4639      	mov	r1, r7
 8011404:	4620      	mov	r0, r4
 8011406:	b003      	add	sp, #12
 8011408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801140c:	f002 bc3c 	b.w	8013c88 <ucdr_serialize_array_uint8_t>

08011410 <uxr_deserialize_message_header>:
 8011410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011412:	4616      	mov	r6, r2
 8011414:	b083      	sub	sp, #12
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	9301      	str	r3, [sp, #4]
 801141c:	9f08      	ldr	r7, [sp, #32]
 801141e:	f002 fd43 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011422:	4631      	mov	r1, r6
 8011424:	4620      	mov	r0, r4
 8011426:	f002 fd3f 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 801142a:	9a01      	ldr	r2, [sp, #4]
 801142c:	2101      	movs	r1, #1
 801142e:	4620      	mov	r0, r4
 8011430:	f002 fec4 	bl	80141bc <ucdr_deserialize_endian_uint16_t>
 8011434:	f995 3000 	ldrsb.w	r3, [r5]
 8011438:	2b00      	cmp	r3, #0
 801143a:	da01      	bge.n	8011440 <uxr_deserialize_message_header+0x30>
 801143c:	b003      	add	sp, #12
 801143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011440:	2204      	movs	r2, #4
 8011442:	4639      	mov	r1, r7
 8011444:	4620      	mov	r0, r4
 8011446:	b003      	add	sp, #12
 8011448:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801144c:	f002 bc80 	b.w	8013d50 <ucdr_deserialize_array_uint8_t>

08011450 <uxr_serialize_submessage_header>:
 8011450:	b530      	push	{r4, r5, lr}
 8011452:	4615      	mov	r5, r2
 8011454:	b083      	sub	sp, #12
 8011456:	4604      	mov	r4, r0
 8011458:	9301      	str	r3, [sp, #4]
 801145a:	f002 fd0f 	bl	8013e7c <ucdr_serialize_uint8_t>
 801145e:	4629      	mov	r1, r5
 8011460:	4620      	mov	r0, r4
 8011462:	f002 fd0b 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011466:	9a01      	ldr	r2, [sp, #4]
 8011468:	2101      	movs	r1, #1
 801146a:	4620      	mov	r0, r4
 801146c:	b003      	add	sp, #12
 801146e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011472:	f002 bdaf 	b.w	8013fd4 <ucdr_serialize_endian_uint16_t>
 8011476:	bf00      	nop

08011478 <uxr_deserialize_submessage_header>:
 8011478:	b530      	push	{r4, r5, lr}
 801147a:	4615      	mov	r5, r2
 801147c:	b083      	sub	sp, #12
 801147e:	4604      	mov	r4, r0
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	f002 fd11 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011486:	4629      	mov	r1, r5
 8011488:	4620      	mov	r0, r4
 801148a:	f002 fd0d 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 801148e:	9a01      	ldr	r2, [sp, #4]
 8011490:	2101      	movs	r1, #1
 8011492:	4620      	mov	r0, r4
 8011494:	b003      	add	sp, #12
 8011496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801149a:	f002 be8f 	b.w	80141bc <ucdr_deserialize_endian_uint16_t>
 801149e:	bf00      	nop

080114a0 <uxr_serialize_CLIENT_Representation>:
 80114a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a4:	2204      	movs	r2, #4
 80114a6:	460e      	mov	r6, r1
 80114a8:	4605      	mov	r5, r0
 80114aa:	f002 fbed 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80114ae:	4607      	mov	r7, r0
 80114b0:	2202      	movs	r2, #2
 80114b2:	1d31      	adds	r1, r6, #4
 80114b4:	4628      	mov	r0, r5
 80114b6:	f002 fbe7 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80114ba:	4038      	ands	r0, r7
 80114bc:	2202      	movs	r2, #2
 80114be:	1db1      	adds	r1, r6, #6
 80114c0:	b2c7      	uxtb	r7, r0
 80114c2:	4628      	mov	r0, r5
 80114c4:	f002 fbe0 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80114c8:	2204      	movs	r2, #4
 80114ca:	4007      	ands	r7, r0
 80114cc:	f106 0108 	add.w	r1, r6, #8
 80114d0:	4628      	mov	r0, r5
 80114d2:	f002 fbd9 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80114d6:	4007      	ands	r7, r0
 80114d8:	7b31      	ldrb	r1, [r6, #12]
 80114da:	4628      	mov	r0, r5
 80114dc:	f002 fcce 	bl	8013e7c <ucdr_serialize_uint8_t>
 80114e0:	7b71      	ldrb	r1, [r6, #13]
 80114e2:	4007      	ands	r7, r0
 80114e4:	4628      	mov	r0, r5
 80114e6:	f002 fc9b 	bl	8013e20 <ucdr_serialize_bool>
 80114ea:	7b73      	ldrb	r3, [r6, #13]
 80114ec:	ea07 0800 	and.w	r8, r7, r0
 80114f0:	b93b      	cbnz	r3, 8011502 <uxr_serialize_CLIENT_Representation+0x62>
 80114f2:	8bb1      	ldrh	r1, [r6, #28]
 80114f4:	4628      	mov	r0, r5
 80114f6:	f002 fced 	bl	8013ed4 <ucdr_serialize_uint16_t>
 80114fa:	ea08 0000 	and.w	r0, r8, r0
 80114fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011502:	6931      	ldr	r1, [r6, #16]
 8011504:	4628      	mov	r0, r5
 8011506:	f002 fecf 	bl	80142a8 <ucdr_serialize_uint32_t>
 801150a:	6933      	ldr	r3, [r6, #16]
 801150c:	b1e3      	cbz	r3, 8011548 <uxr_serialize_CLIENT_Representation+0xa8>
 801150e:	b1c0      	cbz	r0, 8011542 <uxr_serialize_CLIENT_Representation+0xa2>
 8011510:	4637      	mov	r7, r6
 8011512:	f04f 0900 	mov.w	r9, #0
 8011516:	e000      	b.n	801151a <uxr_serialize_CLIENT_Representation+0x7a>
 8011518:	b19c      	cbz	r4, 8011542 <uxr_serialize_CLIENT_Representation+0xa2>
 801151a:	6979      	ldr	r1, [r7, #20]
 801151c:	4628      	mov	r0, r5
 801151e:	f003 fb6d 	bl	8014bfc <ucdr_serialize_string>
 8011522:	69b9      	ldr	r1, [r7, #24]
 8011524:	4604      	mov	r4, r0
 8011526:	4628      	mov	r0, r5
 8011528:	f003 fb68 	bl	8014bfc <ucdr_serialize_string>
 801152c:	f109 0901 	add.w	r9, r9, #1
 8011530:	6933      	ldr	r3, [r6, #16]
 8011532:	4004      	ands	r4, r0
 8011534:	3708      	adds	r7, #8
 8011536:	4599      	cmp	r9, r3
 8011538:	b2e4      	uxtb	r4, r4
 801153a:	d3ed      	bcc.n	8011518 <uxr_serialize_CLIENT_Representation+0x78>
 801153c:	ea08 0804 	and.w	r8, r8, r4
 8011540:	e7d7      	b.n	80114f2 <uxr_serialize_CLIENT_Representation+0x52>
 8011542:	f04f 0800 	mov.w	r8, #0
 8011546:	e7d4      	b.n	80114f2 <uxr_serialize_CLIENT_Representation+0x52>
 8011548:	ea08 0800 	and.w	r8, r8, r0
 801154c:	e7d1      	b.n	80114f2 <uxr_serialize_CLIENT_Representation+0x52>
 801154e:	bf00      	nop

08011550 <uxr_deserialize_CLIENT_Representation>:
 8011550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011554:	2204      	movs	r2, #4
 8011556:	460c      	mov	r4, r1
 8011558:	4605      	mov	r5, r0
 801155a:	f002 fbf9 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 801155e:	4607      	mov	r7, r0
 8011560:	2202      	movs	r2, #2
 8011562:	1d21      	adds	r1, r4, #4
 8011564:	4628      	mov	r0, r5
 8011566:	f002 fbf3 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 801156a:	4038      	ands	r0, r7
 801156c:	2202      	movs	r2, #2
 801156e:	1da1      	adds	r1, r4, #6
 8011570:	b2c6      	uxtb	r6, r0
 8011572:	4628      	mov	r0, r5
 8011574:	f002 fbec 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011578:	2204      	movs	r2, #4
 801157a:	4006      	ands	r6, r0
 801157c:	f104 0108 	add.w	r1, r4, #8
 8011580:	4628      	mov	r0, r5
 8011582:	f002 fbe5 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011586:	4006      	ands	r6, r0
 8011588:	f104 010c 	add.w	r1, r4, #12
 801158c:	4628      	mov	r0, r5
 801158e:	f002 fc8b 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011592:	f104 010d 	add.w	r1, r4, #13
 8011596:	ea06 0700 	and.w	r7, r6, r0
 801159a:	4628      	mov	r0, r5
 801159c:	f002 fc56 	bl	8013e4c <ucdr_deserialize_bool>
 80115a0:	7b63      	ldrb	r3, [r4, #13]
 80115a2:	4007      	ands	r7, r0
 80115a4:	b93b      	cbnz	r3, 80115b6 <uxr_deserialize_CLIENT_Representation+0x66>
 80115a6:	f104 011c 	add.w	r1, r4, #28
 80115aa:	4628      	mov	r0, r5
 80115ac:	f002 fd92 	bl	80140d4 <ucdr_deserialize_uint16_t>
 80115b0:	4038      	ands	r0, r7
 80115b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115b6:	f104 0110 	add.w	r1, r4, #16
 80115ba:	4628      	mov	r0, r5
 80115bc:	f002 ffa4 	bl	8014508 <ucdr_deserialize_uint32_t>
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d903      	bls.n	80115ce <uxr_deserialize_CLIENT_Representation+0x7e>
 80115c6:	2301      	movs	r3, #1
 80115c8:	2700      	movs	r7, #0
 80115ca:	75ab      	strb	r3, [r5, #22]
 80115cc:	e7eb      	b.n	80115a6 <uxr_deserialize_CLIENT_Representation+0x56>
 80115ce:	b30b      	cbz	r3, 8011614 <uxr_deserialize_CLIENT_Representation+0xc4>
 80115d0:	b1f0      	cbz	r0, 8011610 <uxr_deserialize_CLIENT_Representation+0xc0>
 80115d2:	46a0      	mov	r8, r4
 80115d4:	f04f 0900 	mov.w	r9, #0
 80115d8:	e000      	b.n	80115dc <uxr_deserialize_CLIENT_Representation+0x8c>
 80115da:	b1ce      	cbz	r6, 8011610 <uxr_deserialize_CLIENT_Representation+0xc0>
 80115dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80115e0:	f108 0808 	add.w	r8, r8, #8
 80115e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115e8:	4628      	mov	r0, r5
 80115ea:	f003 fb17 	bl	8014c1c <ucdr_deserialize_string>
 80115ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115f2:	4606      	mov	r6, r0
 80115f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115f8:	4628      	mov	r0, r5
 80115fa:	f109 0901 	add.w	r9, r9, #1
 80115fe:	f003 fb0d 	bl	8014c1c <ucdr_deserialize_string>
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	4006      	ands	r6, r0
 8011606:	4599      	cmp	r9, r3
 8011608:	b2f6      	uxtb	r6, r6
 801160a:	d3e6      	bcc.n	80115da <uxr_deserialize_CLIENT_Representation+0x8a>
 801160c:	4037      	ands	r7, r6
 801160e:	e7ca      	b.n	80115a6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011610:	2700      	movs	r7, #0
 8011612:	e7c8      	b.n	80115a6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011614:	4007      	ands	r7, r0
 8011616:	e7c6      	b.n	80115a6 <uxr_deserialize_CLIENT_Representation+0x56>

08011618 <uxr_serialize_AGENT_Representation>:
 8011618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801161c:	2204      	movs	r2, #4
 801161e:	460f      	mov	r7, r1
 8011620:	4605      	mov	r5, r0
 8011622:	f002 fb31 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011626:	4604      	mov	r4, r0
 8011628:	2202      	movs	r2, #2
 801162a:	1d39      	adds	r1, r7, #4
 801162c:	4628      	mov	r0, r5
 801162e:	f002 fb2b 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011632:	4020      	ands	r0, r4
 8011634:	2202      	movs	r2, #2
 8011636:	1db9      	adds	r1, r7, #6
 8011638:	b2c4      	uxtb	r4, r0
 801163a:	4628      	mov	r0, r5
 801163c:	f002 fb24 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011640:	7a39      	ldrb	r1, [r7, #8]
 8011642:	4004      	ands	r4, r0
 8011644:	4628      	mov	r0, r5
 8011646:	f002 fbeb 	bl	8013e20 <ucdr_serialize_bool>
 801164a:	7a3b      	ldrb	r3, [r7, #8]
 801164c:	ea00 0804 	and.w	r8, r0, r4
 8011650:	b913      	cbnz	r3, 8011658 <uxr_serialize_AGENT_Representation+0x40>
 8011652:	4640      	mov	r0, r8
 8011654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011658:	68f9      	ldr	r1, [r7, #12]
 801165a:	4628      	mov	r0, r5
 801165c:	f002 fe24 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	b303      	cbz	r3, 80116a6 <uxr_serialize_AGENT_Representation+0x8e>
 8011664:	b1d0      	cbz	r0, 801169c <uxr_serialize_AGENT_Representation+0x84>
 8011666:	463e      	mov	r6, r7
 8011668:	f04f 0900 	mov.w	r9, #0
 801166c:	e000      	b.n	8011670 <uxr_serialize_AGENT_Representation+0x58>
 801166e:	b1ac      	cbz	r4, 801169c <uxr_serialize_AGENT_Representation+0x84>
 8011670:	6931      	ldr	r1, [r6, #16]
 8011672:	4628      	mov	r0, r5
 8011674:	f003 fac2 	bl	8014bfc <ucdr_serialize_string>
 8011678:	6971      	ldr	r1, [r6, #20]
 801167a:	4604      	mov	r4, r0
 801167c:	4628      	mov	r0, r5
 801167e:	f003 fabd 	bl	8014bfc <ucdr_serialize_string>
 8011682:	f109 0901 	add.w	r9, r9, #1
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	4004      	ands	r4, r0
 801168a:	3608      	adds	r6, #8
 801168c:	4599      	cmp	r9, r3
 801168e:	b2e4      	uxtb	r4, r4
 8011690:	d3ed      	bcc.n	801166e <uxr_serialize_AGENT_Representation+0x56>
 8011692:	ea08 0804 	and.w	r8, r8, r4
 8011696:	4640      	mov	r0, r8
 8011698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801169c:	f04f 0800 	mov.w	r8, #0
 80116a0:	4640      	mov	r0, r8
 80116a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116a6:	ea08 0800 	and.w	r8, r8, r0
 80116aa:	e7d2      	b.n	8011652 <uxr_serialize_AGENT_Representation+0x3a>

080116ac <uxr_serialize_DATAWRITER_Representation>:
 80116ac:	b570      	push	{r4, r5, r6, lr}
 80116ae:	460d      	mov	r5, r1
 80116b0:	7809      	ldrb	r1, [r1, #0]
 80116b2:	4606      	mov	r6, r0
 80116b4:	f002 fbe2 	bl	8013e7c <ucdr_serialize_uint8_t>
 80116b8:	4604      	mov	r4, r0
 80116ba:	b130      	cbz	r0, 80116ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 80116bc:	782b      	ldrb	r3, [r5, #0]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d00c      	beq.n	80116dc <uxr_serialize_DATAWRITER_Representation+0x30>
 80116c2:	2b03      	cmp	r3, #3
 80116c4:	d010      	beq.n	80116e8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	d008      	beq.n	80116dc <uxr_serialize_DATAWRITER_Representation+0x30>
 80116ca:	2202      	movs	r2, #2
 80116cc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80116d0:	4630      	mov	r0, r6
 80116d2:	f002 fad9 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80116d6:	4020      	ands	r0, r4
 80116d8:	b2c0      	uxtb	r0, r0
 80116da:	bd70      	pop	{r4, r5, r6, pc}
 80116dc:	6869      	ldr	r1, [r5, #4]
 80116de:	4630      	mov	r0, r6
 80116e0:	f003 fa8c 	bl	8014bfc <ucdr_serialize_string>
 80116e4:	4604      	mov	r4, r0
 80116e6:	e7f0      	b.n	80116ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 80116e8:	4629      	mov	r1, r5
 80116ea:	4630      	mov	r0, r6
 80116ec:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80116f0:	3104      	adds	r1, #4
 80116f2:	f7fe f82b 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 80116f6:	4604      	mov	r4, r0
 80116f8:	e7e7      	b.n	80116ca <uxr_serialize_DATAWRITER_Representation+0x1e>
 80116fa:	bf00      	nop

080116fc <uxr_serialize_ObjectVariant.part.0>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	780b      	ldrb	r3, [r1, #0]
 8011700:	460c      	mov	r4, r1
 8011702:	4605      	mov	r5, r0
 8011704:	3b01      	subs	r3, #1
 8011706:	2b0d      	cmp	r3, #13
 8011708:	d854      	bhi.n	80117b4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801170a:	e8df f003 	tbb	[pc, r3]
 801170e:	0730      	.short	0x0730
 8011710:	07071b1b 	.word	0x07071b1b
 8011714:	0c530707 	.word	0x0c530707
 8011718:	494e0c0c 	.word	0x494e0c0c
 801171c:	3104      	adds	r1, #4
 801171e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011722:	f7ff bfc3 	b.w	80116ac <uxr_serialize_DATAWRITER_Representation>
 8011726:	7909      	ldrb	r1, [r1, #4]
 8011728:	f002 fba8 	bl	8013e7c <ucdr_serialize_uint8_t>
 801172c:	b1e8      	cbz	r0, 801176a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801172e:	7923      	ldrb	r3, [r4, #4]
 8011730:	2b01      	cmp	r3, #1
 8011732:	d001      	beq.n	8011738 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011734:	2b02      	cmp	r3, #2
 8011736:	d13d      	bne.n	80117b4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011738:	68a1      	ldr	r1, [r4, #8]
 801173a:	4628      	mov	r0, r5
 801173c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011740:	f003 ba5c 	b.w	8014bfc <ucdr_serialize_string>
 8011744:	7909      	ldrb	r1, [r1, #4]
 8011746:	f002 fb99 	bl	8013e7c <ucdr_serialize_uint8_t>
 801174a:	4606      	mov	r6, r0
 801174c:	b120      	cbz	r0, 8011758 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801174e:	7923      	ldrb	r3, [r4, #4]
 8011750:	2b02      	cmp	r3, #2
 8011752:	d039      	beq.n	80117c8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011754:	2b03      	cmp	r3, #3
 8011756:	d02f      	beq.n	80117b8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011758:	2202      	movs	r2, #2
 801175a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801175e:	4628      	mov	r0, r5
 8011760:	f002 fa92 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011764:	4030      	ands	r0, r6
 8011766:	b2c0      	uxtb	r0, r0
 8011768:	bd70      	pop	{r4, r5, r6, pc}
 801176a:	2000      	movs	r0, #0
 801176c:	bd70      	pop	{r4, r5, r6, pc}
 801176e:	7909      	ldrb	r1, [r1, #4]
 8011770:	f002 fb84 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011774:	4606      	mov	r6, r0
 8011776:	b158      	cbz	r0, 8011790 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011778:	7923      	ldrb	r3, [r4, #4]
 801177a:	2b02      	cmp	r3, #2
 801177c:	d003      	beq.n	8011786 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801177e:	2b03      	cmp	r3, #3
 8011780:	d028      	beq.n	80117d4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011782:	2b01      	cmp	r3, #1
 8011784:	d104      	bne.n	8011790 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011786:	68a1      	ldr	r1, [r4, #8]
 8011788:	4628      	mov	r0, r5
 801178a:	f003 fa37 	bl	8014bfc <ucdr_serialize_string>
 801178e:	4606      	mov	r6, r0
 8011790:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011794:	4628      	mov	r0, r5
 8011796:	f003 f8ad 	bl	80148f4 <ucdr_serialize_int16_t>
 801179a:	4030      	ands	r0, r6
 801179c:	b2c0      	uxtb	r0, r0
 801179e:	bd70      	pop	{r4, r5, r6, pc}
 80117a0:	3104      	adds	r1, #4
 80117a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117a6:	f7ff be7b 	b.w	80114a0 <uxr_serialize_CLIENT_Representation>
 80117aa:	3104      	adds	r1, #4
 80117ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117b0:	f7ff bf32 	b.w	8011618 <uxr_serialize_AGENT_Representation>
 80117b4:	2001      	movs	r0, #1
 80117b6:	bd70      	pop	{r4, r5, r6, pc}
 80117b8:	68a2      	ldr	r2, [r4, #8]
 80117ba:	f104 010c 	add.w	r1, r4, #12
 80117be:	4628      	mov	r0, r5
 80117c0:	f7fd ffc4 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 80117c4:	4606      	mov	r6, r0
 80117c6:	e7c7      	b.n	8011758 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80117c8:	68a1      	ldr	r1, [r4, #8]
 80117ca:	4628      	mov	r0, r5
 80117cc:	f003 fa16 	bl	8014bfc <ucdr_serialize_string>
 80117d0:	4606      	mov	r6, r0
 80117d2:	e7c1      	b.n	8011758 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80117d4:	68a2      	ldr	r2, [r4, #8]
 80117d6:	f104 010c 	add.w	r1, r4, #12
 80117da:	4628      	mov	r0, r5
 80117dc:	f7fd ffb6 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 80117e0:	4606      	mov	r6, r0
 80117e2:	e7d5      	b.n	8011790 <uxr_serialize_ObjectVariant.part.0+0x94>

080117e4 <uxr_deserialize_DATAWRITER_Representation>:
 80117e4:	b570      	push	{r4, r5, r6, lr}
 80117e6:	4606      	mov	r6, r0
 80117e8:	460d      	mov	r5, r1
 80117ea:	f002 fb5d 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 80117ee:	4604      	mov	r4, r0
 80117f0:	b130      	cbz	r0, 8011800 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80117f2:	782b      	ldrb	r3, [r5, #0]
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d00c      	beq.n	8011812 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80117f8:	2b03      	cmp	r3, #3
 80117fa:	d012      	beq.n	8011822 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d008      	beq.n	8011812 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011800:	2202      	movs	r2, #2
 8011802:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011806:	4630      	mov	r0, r6
 8011808:	f002 faa2 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 801180c:	4020      	ands	r0, r4
 801180e:	b2c0      	uxtb	r0, r0
 8011810:	bd70      	pop	{r4, r5, r6, pc}
 8011812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011816:	6869      	ldr	r1, [r5, #4]
 8011818:	4630      	mov	r0, r6
 801181a:	f003 f9ff 	bl	8014c1c <ucdr_deserialize_string>
 801181e:	4604      	mov	r4, r0
 8011820:	e7ee      	b.n	8011800 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011822:	1d2b      	adds	r3, r5, #4
 8011824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011828:	f105 0108 	add.w	r1, r5, #8
 801182c:	4630      	mov	r0, r6
 801182e:	f7fd ff9f 	bl	800f770 <ucdr_deserialize_sequence_uint8_t>
 8011832:	4604      	mov	r4, r0
 8011834:	e7e4      	b.n	8011800 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011836:	bf00      	nop

08011838 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	460d      	mov	r5, r1
 801183c:	7809      	ldrb	r1, [r1, #0]
 801183e:	4606      	mov	r6, r0
 8011840:	f002 faee 	bl	8013e20 <ucdr_serialize_bool>
 8011844:	782b      	ldrb	r3, [r5, #0]
 8011846:	4604      	mov	r4, r0
 8011848:	b94b      	cbnz	r3, 801185e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801184a:	7a29      	ldrb	r1, [r5, #8]
 801184c:	4630      	mov	r0, r6
 801184e:	f002 fae7 	bl	8013e20 <ucdr_serialize_bool>
 8011852:	7a2b      	ldrb	r3, [r5, #8]
 8011854:	4004      	ands	r4, r0
 8011856:	b2e4      	uxtb	r4, r4
 8011858:	b943      	cbnz	r3, 801186c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801185a:	4620      	mov	r0, r4
 801185c:	bd70      	pop	{r4, r5, r6, pc}
 801185e:	6869      	ldr	r1, [r5, #4]
 8011860:	4630      	mov	r0, r6
 8011862:	f003 f9cb 	bl	8014bfc <ucdr_serialize_string>
 8011866:	4004      	ands	r4, r0
 8011868:	b2e4      	uxtb	r4, r4
 801186a:	e7ee      	b.n	801184a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801186c:	68e9      	ldr	r1, [r5, #12]
 801186e:	4630      	mov	r0, r6
 8011870:	f003 f9c4 	bl	8014bfc <ucdr_serialize_string>
 8011874:	4004      	ands	r4, r0
 8011876:	4620      	mov	r0, r4
 8011878:	bd70      	pop	{r4, r5, r6, pc}
 801187a:	bf00      	nop

0801187c <uxr_serialize_OBJK_Topic_Binary>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	460d      	mov	r5, r1
 8011880:	4606      	mov	r6, r0
 8011882:	6809      	ldr	r1, [r1, #0]
 8011884:	f003 f9ba 	bl	8014bfc <ucdr_serialize_string>
 8011888:	4604      	mov	r4, r0
 801188a:	7929      	ldrb	r1, [r5, #4]
 801188c:	4630      	mov	r0, r6
 801188e:	f002 fac7 	bl	8013e20 <ucdr_serialize_bool>
 8011892:	792b      	ldrb	r3, [r5, #4]
 8011894:	4004      	ands	r4, r0
 8011896:	b2e4      	uxtb	r4, r4
 8011898:	b943      	cbnz	r3, 80118ac <uxr_serialize_OBJK_Topic_Binary+0x30>
 801189a:	7b29      	ldrb	r1, [r5, #12]
 801189c:	4630      	mov	r0, r6
 801189e:	f002 fabf 	bl	8013e20 <ucdr_serialize_bool>
 80118a2:	7b2b      	ldrb	r3, [r5, #12]
 80118a4:	4004      	ands	r4, r0
 80118a6:	b93b      	cbnz	r3, 80118b8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80118a8:	4620      	mov	r0, r4
 80118aa:	bd70      	pop	{r4, r5, r6, pc}
 80118ac:	68a9      	ldr	r1, [r5, #8]
 80118ae:	4630      	mov	r0, r6
 80118b0:	f003 f9a4 	bl	8014bfc <ucdr_serialize_string>
 80118b4:	4004      	ands	r4, r0
 80118b6:	e7f0      	b.n	801189a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80118b8:	6929      	ldr	r1, [r5, #16]
 80118ba:	4630      	mov	r0, r6
 80118bc:	f003 f99e 	bl	8014bfc <ucdr_serialize_string>
 80118c0:	4004      	ands	r4, r0
 80118c2:	b2e4      	uxtb	r4, r4
 80118c4:	4620      	mov	r0, r4
 80118c6:	bd70      	pop	{r4, r5, r6, pc}

080118c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80118c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118cc:	460c      	mov	r4, r1
 80118ce:	7809      	ldrb	r1, [r1, #0]
 80118d0:	4606      	mov	r6, r0
 80118d2:	f002 faa5 	bl	8013e20 <ucdr_serialize_bool>
 80118d6:	7823      	ldrb	r3, [r4, #0]
 80118d8:	4605      	mov	r5, r0
 80118da:	b96b      	cbnz	r3, 80118f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80118dc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80118e0:	4630      	mov	r0, r6
 80118e2:	f002 fa9d 	bl	8013e20 <ucdr_serialize_bool>
 80118e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80118ea:	4005      	ands	r5, r0
 80118ec:	b2ed      	uxtb	r5, r5
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d169      	bne.n	80119c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80118f2:	4628      	mov	r0, r5
 80118f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118f8:	6861      	ldr	r1, [r4, #4]
 80118fa:	4630      	mov	r0, r6
 80118fc:	f002 fcd4 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d06b      	beq.n	80119de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011906:	2800      	cmp	r0, #0
 8011908:	d067      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801190a:	68a1      	ldr	r1, [r4, #8]
 801190c:	4630      	mov	r0, r6
 801190e:	f003 f975 	bl	8014bfc <ucdr_serialize_string>
 8011912:	6863      	ldr	r3, [r4, #4]
 8011914:	2b01      	cmp	r3, #1
 8011916:	d953      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011918:	2800      	cmp	r0, #0
 801191a:	d05e      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801191c:	68e1      	ldr	r1, [r4, #12]
 801191e:	4630      	mov	r0, r6
 8011920:	f003 f96c 	bl	8014bfc <ucdr_serialize_string>
 8011924:	6863      	ldr	r3, [r4, #4]
 8011926:	2b02      	cmp	r3, #2
 8011928:	d94a      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801192a:	2800      	cmp	r0, #0
 801192c:	d055      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801192e:	6921      	ldr	r1, [r4, #16]
 8011930:	4630      	mov	r0, r6
 8011932:	f003 f963 	bl	8014bfc <ucdr_serialize_string>
 8011936:	6863      	ldr	r3, [r4, #4]
 8011938:	2b03      	cmp	r3, #3
 801193a:	d941      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801193c:	2800      	cmp	r0, #0
 801193e:	d04c      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011940:	6961      	ldr	r1, [r4, #20]
 8011942:	4630      	mov	r0, r6
 8011944:	f003 f95a 	bl	8014bfc <ucdr_serialize_string>
 8011948:	6863      	ldr	r3, [r4, #4]
 801194a:	2b04      	cmp	r3, #4
 801194c:	d938      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801194e:	2800      	cmp	r0, #0
 8011950:	d043      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011952:	69a1      	ldr	r1, [r4, #24]
 8011954:	4630      	mov	r0, r6
 8011956:	f003 f951 	bl	8014bfc <ucdr_serialize_string>
 801195a:	6863      	ldr	r3, [r4, #4]
 801195c:	2b05      	cmp	r3, #5
 801195e:	d92f      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011960:	2800      	cmp	r0, #0
 8011962:	d03a      	beq.n	80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011964:	69e1      	ldr	r1, [r4, #28]
 8011966:	4630      	mov	r0, r6
 8011968:	f003 f948 	bl	8014bfc <ucdr_serialize_string>
 801196c:	6863      	ldr	r3, [r4, #4]
 801196e:	2b06      	cmp	r3, #6
 8011970:	d926      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011972:	b390      	cbz	r0, 80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011974:	6a21      	ldr	r1, [r4, #32]
 8011976:	4630      	mov	r0, r6
 8011978:	f003 f940 	bl	8014bfc <ucdr_serialize_string>
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	2b07      	cmp	r3, #7
 8011980:	d91e      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011982:	b350      	cbz	r0, 80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011984:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011986:	4630      	mov	r0, r6
 8011988:	f003 f938 	bl	8014bfc <ucdr_serialize_string>
 801198c:	6863      	ldr	r3, [r4, #4]
 801198e:	2b08      	cmp	r3, #8
 8011990:	d916      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011992:	b310      	cbz	r0, 80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011994:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011996:	4630      	mov	r0, r6
 8011998:	f003 f930 	bl	8014bfc <ucdr_serialize_string>
 801199c:	6863      	ldr	r3, [r4, #4]
 801199e:	2b09      	cmp	r3, #9
 80119a0:	d90e      	bls.n	80119c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80119a2:	b1d0      	cbz	r0, 80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119a4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80119a8:	2709      	movs	r7, #9
 80119aa:	e000      	b.n	80119ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80119ac:	b1a8      	cbz	r0, 80119da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119ae:	f858 1b04 	ldr.w	r1, [r8], #4
 80119b2:	4630      	mov	r0, r6
 80119b4:	f003 f922 	bl	8014bfc <ucdr_serialize_string>
 80119b8:	3701      	adds	r7, #1
 80119ba:	6862      	ldr	r2, [r4, #4]
 80119bc:	4297      	cmp	r7, r2
 80119be:	d3f5      	bcc.n	80119ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80119c0:	4005      	ands	r5, r0
 80119c2:	b2ed      	uxtb	r5, r5
 80119c4:	e78a      	b.n	80118dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80119c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80119c8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80119cc:	4630      	mov	r0, r6
 80119ce:	f7fd febd 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 80119d2:	4005      	ands	r5, r0
 80119d4:	4628      	mov	r0, r5
 80119d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119da:	2500      	movs	r5, #0
 80119dc:	e77e      	b.n	80118dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80119de:	4028      	ands	r0, r5
 80119e0:	b2c5      	uxtb	r5, r0
 80119e2:	e77b      	b.n	80118dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080119e4 <uxr_serialize_OBJK_Publisher_Binary>:
 80119e4:	b570      	push	{r4, r5, r6, lr}
 80119e6:	460d      	mov	r5, r1
 80119e8:	7809      	ldrb	r1, [r1, #0]
 80119ea:	4606      	mov	r6, r0
 80119ec:	f002 fa18 	bl	8013e20 <ucdr_serialize_bool>
 80119f0:	782b      	ldrb	r3, [r5, #0]
 80119f2:	4604      	mov	r4, r0
 80119f4:	b94b      	cbnz	r3, 8011a0a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80119f6:	7a29      	ldrb	r1, [r5, #8]
 80119f8:	4630      	mov	r0, r6
 80119fa:	f002 fa11 	bl	8013e20 <ucdr_serialize_bool>
 80119fe:	7a2b      	ldrb	r3, [r5, #8]
 8011a00:	4004      	ands	r4, r0
 8011a02:	b2e4      	uxtb	r4, r4
 8011a04:	b943      	cbnz	r3, 8011a18 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011a06:	4620      	mov	r0, r4
 8011a08:	bd70      	pop	{r4, r5, r6, pc}
 8011a0a:	6869      	ldr	r1, [r5, #4]
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f003 f8f5 	bl	8014bfc <ucdr_serialize_string>
 8011a12:	4004      	ands	r4, r0
 8011a14:	b2e4      	uxtb	r4, r4
 8011a16:	e7ee      	b.n	80119f6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011a18:	f105 010c 	add.w	r1, r5, #12
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f7ff ff53 	bl	80118c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011a22:	4004      	ands	r4, r0
 8011a24:	4620      	mov	r0, r4
 8011a26:	bd70      	pop	{r4, r5, r6, pc}

08011a28 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011a28:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011a2c:	4688      	mov	r8, r1
 8011a2e:	4681      	mov	r9, r0
 8011a30:	8809      	ldrh	r1, [r1, #0]
 8011a32:	f002 fa4f 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011a36:	4606      	mov	r6, r0
 8011a38:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011a3c:	4648      	mov	r0, r9
 8011a3e:	f002 f9ef 	bl	8013e20 <ucdr_serialize_bool>
 8011a42:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011a46:	4006      	ands	r6, r0
 8011a48:	b2f5      	uxtb	r5, r6
 8011a4a:	b9eb      	cbnz	r3, 8011a88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011a4c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011a50:	4648      	mov	r0, r9
 8011a52:	f002 f9e5 	bl	8013e20 <ucdr_serialize_bool>
 8011a56:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011a5a:	4005      	ands	r5, r0
 8011a5c:	bb7b      	cbnz	r3, 8011abe <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011a5e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011a62:	4648      	mov	r0, r9
 8011a64:	f002 f9dc 	bl	8013e20 <ucdr_serialize_bool>
 8011a68:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011a6c:	4005      	ands	r5, r0
 8011a6e:	b9f3      	cbnz	r3, 8011aae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011a70:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011a74:	4648      	mov	r0, r9
 8011a76:	f002 f9d3 	bl	8013e20 <ucdr_serialize_bool>
 8011a7a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011a7e:	4005      	ands	r5, r0
 8011a80:	b94b      	cbnz	r3, 8011a96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011a82:	4628      	mov	r0, r5
 8011a84:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011a88:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011a8c:	4648      	mov	r0, r9
 8011a8e:	f002 fa21 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011a92:	4005      	ands	r5, r0
 8011a94:	e7da      	b.n	8011a4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011a96:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011a9a:	f108 011c 	add.w	r1, r8, #28
 8011a9e:	4648      	mov	r0, r9
 8011aa0:	f7fd fe54 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 8011aa4:	4028      	ands	r0, r5
 8011aa6:	b2c5      	uxtb	r5, r0
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011aae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011ab2:	4648      	mov	r0, r9
 8011ab4:	f002 fbf8 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011ab8:	4028      	ands	r0, r5
 8011aba:	b2c5      	uxtb	r5, r0
 8011abc:	e7d8      	b.n	8011a70 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011abe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011ac2:	4648      	mov	r0, r9
 8011ac4:	f002 fbf0 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011ac8:	4028      	ands	r0, r5
 8011aca:	b2c5      	uxtb	r5, r0
 8011acc:	e7c7      	b.n	8011a5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011ace:	bf00      	nop

08011ad0 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	2202      	movs	r2, #2
 8011ad4:	460d      	mov	r5, r1
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	f002 f8d6 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011adc:	4604      	mov	r4, r0
 8011ade:	78a9      	ldrb	r1, [r5, #2]
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f002 f99d 	bl	8013e20 <ucdr_serialize_bool>
 8011ae6:	78ab      	ldrb	r3, [r5, #2]
 8011ae8:	4004      	ands	r4, r0
 8011aea:	b2e4      	uxtb	r4, r4
 8011aec:	b90b      	cbnz	r3, 8011af2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011aee:	4620      	mov	r0, r4
 8011af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011af2:	f105 0108 	add.w	r1, r5, #8
 8011af6:	4630      	mov	r0, r6
 8011af8:	f7ff ff96 	bl	8011a28 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011afc:	4607      	mov	r7, r0
 8011afe:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011b02:	4630      	mov	r0, r6
 8011b04:	f002 f98c 	bl	8013e20 <ucdr_serialize_bool>
 8011b08:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011b0c:	4038      	ands	r0, r7
 8011b0e:	b2c7      	uxtb	r7, r0
 8011b10:	b913      	cbnz	r3, 8011b18 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011b12:	403c      	ands	r4, r7
 8011b14:	4620      	mov	r0, r4
 8011b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b18:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	f002 fe19 	bl	8014754 <ucdr_serialize_uint64_t>
 8011b22:	4007      	ands	r7, r0
 8011b24:	e7f5      	b.n	8011b12 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011b26:	bf00      	nop

08011b28 <uxr_deserialize_ObjectVariant>:
 8011b28:	b570      	push	{r4, r5, r6, lr}
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	460e      	mov	r6, r1
 8011b2e:	f002 f9bb 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011b32:	b168      	cbz	r0, 8011b50 <uxr_deserialize_ObjectVariant+0x28>
 8011b34:	7833      	ldrb	r3, [r6, #0]
 8011b36:	4604      	mov	r4, r0
 8011b38:	3b01      	subs	r3, #1
 8011b3a:	2b0d      	cmp	r3, #13
 8011b3c:	d809      	bhi.n	8011b52 <uxr_deserialize_ObjectVariant+0x2a>
 8011b3e:	e8df f003 	tbb	[pc, r3]
 8011b42:	0a41      	.short	0x0a41
 8011b44:	0a0a2323 	.word	0x0a0a2323
 8011b48:	10080a0a 	.word	0x10080a0a
 8011b4c:	565c1010 	.word	0x565c1010
 8011b50:	2400      	movs	r4, #0
 8011b52:	4620      	mov	r0, r4
 8011b54:	bd70      	pop	{r4, r5, r6, pc}
 8011b56:	1d31      	adds	r1, r6, #4
 8011b58:	4628      	mov	r0, r5
 8011b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b5e:	f7ff be41 	b.w	80117e4 <uxr_deserialize_DATAWRITER_Representation>
 8011b62:	1d31      	adds	r1, r6, #4
 8011b64:	4628      	mov	r0, r5
 8011b66:	f002 f99f 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	d0f0      	beq.n	8011b50 <uxr_deserialize_ObjectVariant+0x28>
 8011b6e:	7933      	ldrb	r3, [r6, #4]
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d001      	beq.n	8011b78 <uxr_deserialize_ObjectVariant+0x50>
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d1ec      	bne.n	8011b52 <uxr_deserialize_ObjectVariant+0x2a>
 8011b78:	68b1      	ldr	r1, [r6, #8]
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b84:	f003 b84a 	b.w	8014c1c <ucdr_deserialize_string>
 8011b88:	1d31      	adds	r1, r6, #4
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f002 f98c 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011b90:	4604      	mov	r4, r0
 8011b92:	b170      	cbz	r0, 8011bb2 <uxr_deserialize_ObjectVariant+0x8a>
 8011b94:	7933      	ldrb	r3, [r6, #4]
 8011b96:	2b02      	cmp	r3, #2
 8011b98:	d04c      	beq.n	8011c34 <uxr_deserialize_ObjectVariant+0x10c>
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	d109      	bne.n	8011bb2 <uxr_deserialize_ObjectVariant+0x8a>
 8011b9e:	f106 0308 	add.w	r3, r6, #8
 8011ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ba6:	f106 010c 	add.w	r1, r6, #12
 8011baa:	4628      	mov	r0, r5
 8011bac:	f7fd fde0 	bl	800f770 <ucdr_deserialize_sequence_uint8_t>
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011bb8:	4628      	mov	r0, r5
 8011bba:	f002 f8c9 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011bbe:	4020      	ands	r0, r4
 8011bc0:	b2c4      	uxtb	r4, r0
 8011bc2:	e7c6      	b.n	8011b52 <uxr_deserialize_ObjectVariant+0x2a>
 8011bc4:	1d31      	adds	r1, r6, #4
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	f002 f96e 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011bcc:	4604      	mov	r4, r0
 8011bce:	b130      	cbz	r0, 8011bde <uxr_deserialize_ObjectVariant+0xb6>
 8011bd0:	7933      	ldrb	r3, [r6, #4]
 8011bd2:	2b02      	cmp	r3, #2
 8011bd4:	d036      	beq.n	8011c44 <uxr_deserialize_ObjectVariant+0x11c>
 8011bd6:	2b03      	cmp	r3, #3
 8011bd8:	d03c      	beq.n	8011c54 <uxr_deserialize_ObjectVariant+0x12c>
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d032      	beq.n	8011c44 <uxr_deserialize_ObjectVariant+0x11c>
 8011bde:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011be2:	4628      	mov	r0, r5
 8011be4:	f002 ff06 	bl	80149f4 <ucdr_deserialize_int16_t>
 8011be8:	4020      	ands	r0, r4
 8011bea:	b2c4      	uxtb	r4, r0
 8011bec:	e7b1      	b.n	8011b52 <uxr_deserialize_ObjectVariant+0x2a>
 8011bee:	1d31      	adds	r1, r6, #4
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bf6:	f7ff bcab 	b.w	8011550 <uxr_deserialize_CLIENT_Representation>
 8011bfa:	2204      	movs	r2, #4
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	18b1      	adds	r1, r6, r2
 8011c00:	f002 f8a6 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011c04:	4604      	mov	r4, r0
 8011c06:	2202      	movs	r2, #2
 8011c08:	f106 0108 	add.w	r1, r6, #8
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f002 f89f 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011c12:	4004      	ands	r4, r0
 8011c14:	2202      	movs	r2, #2
 8011c16:	f106 010a 	add.w	r1, r6, #10
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	b2e4      	uxtb	r4, r4
 8011c1e:	f002 f897 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011c22:	4603      	mov	r3, r0
 8011c24:	f106 010c 	add.w	r1, r6, #12
 8011c28:	4628      	mov	r0, r5
 8011c2a:	401c      	ands	r4, r3
 8011c2c:	f002 f90e 	bl	8013e4c <ucdr_deserialize_bool>
 8011c30:	4004      	ands	r4, r0
 8011c32:	e78e      	b.n	8011b52 <uxr_deserialize_ObjectVariant+0x2a>
 8011c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c38:	68b1      	ldr	r1, [r6, #8]
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	f002 ffee 	bl	8014c1c <ucdr_deserialize_string>
 8011c40:	4604      	mov	r4, r0
 8011c42:	e7b6      	b.n	8011bb2 <uxr_deserialize_ObjectVariant+0x8a>
 8011c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c48:	68b1      	ldr	r1, [r6, #8]
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f002 ffe6 	bl	8014c1c <ucdr_deserialize_string>
 8011c50:	4604      	mov	r4, r0
 8011c52:	e7c4      	b.n	8011bde <uxr_deserialize_ObjectVariant+0xb6>
 8011c54:	f106 0308 	add.w	r3, r6, #8
 8011c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c5c:	f106 010c 	add.w	r1, r6, #12
 8011c60:	4628      	mov	r0, r5
 8011c62:	f7fd fd85 	bl	800f770 <ucdr_deserialize_sequence_uint8_t>
 8011c66:	4604      	mov	r4, r0
 8011c68:	e7b9      	b.n	8011bde <uxr_deserialize_ObjectVariant+0xb6>
 8011c6a:	bf00      	nop

08011c6c <uxr_deserialize_BaseObjectRequest>:
 8011c6c:	b570      	push	{r4, r5, r6, lr}
 8011c6e:	2202      	movs	r2, #2
 8011c70:	4605      	mov	r5, r0
 8011c72:	460e      	mov	r6, r1
 8011c74:	f002 f86c 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011c78:	2202      	movs	r2, #2
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	18b1      	adds	r1, r6, r2
 8011c80:	f002 f866 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011c84:	4020      	ands	r0, r4
 8011c86:	b2c0      	uxtb	r0, r0
 8011c88:	bd70      	pop	{r4, r5, r6, pc}
 8011c8a:	bf00      	nop

08011c8c <uxr_serialize_ActivityInfoVariant>:
 8011c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c90:	460e      	mov	r6, r1
 8011c92:	7809      	ldrb	r1, [r1, #0]
 8011c94:	4680      	mov	r8, r0
 8011c96:	f002 f8f1 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011c9a:	4607      	mov	r7, r0
 8011c9c:	b138      	cbz	r0, 8011cae <uxr_serialize_ActivityInfoVariant+0x22>
 8011c9e:	7833      	ldrb	r3, [r6, #0]
 8011ca0:	2b06      	cmp	r3, #6
 8011ca2:	f000 8081 	beq.w	8011da8 <uxr_serialize_ActivityInfoVariant+0x11c>
 8011ca6:	2b0d      	cmp	r3, #13
 8011ca8:	d014      	beq.n	8011cd4 <uxr_serialize_ActivityInfoVariant+0x48>
 8011caa:	2b05      	cmp	r3, #5
 8011cac:	d002      	beq.n	8011cb4 <uxr_serialize_ActivityInfoVariant+0x28>
 8011cae:	4638      	mov	r0, r7
 8011cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cb4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011cb8:	4640      	mov	r0, r8
 8011cba:	f002 fe1b 	bl	80148f4 <ucdr_serialize_int16_t>
 8011cbe:	4607      	mov	r7, r0
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8011cc6:	f002 fd45 	bl	8014754 <ucdr_serialize_uint64_t>
 8011cca:	4038      	ands	r0, r7
 8011ccc:	b2c7      	uxtb	r7, r0
 8011cce:	4638      	mov	r0, r7
 8011cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011cd8:	4640      	mov	r0, r8
 8011cda:	f002 fe0b 	bl	80148f4 <ucdr_serialize_int16_t>
 8011cde:	68f1      	ldr	r1, [r6, #12]
 8011ce0:	4607      	mov	r7, r0
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	f002 fae0 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011ce8:	68f3      	ldr	r3, [r6, #12]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d0ed      	beq.n	8011cca <uxr_serialize_ActivityInfoVariant+0x3e>
 8011cee:	b318      	cbz	r0, 8011d38 <uxr_serialize_ActivityInfoVariant+0xac>
 8011cf0:	f106 090c 	add.w	r9, r6, #12
 8011cf4:	2400      	movs	r4, #0
 8011cf6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011cfa:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8011cfe:	7c29      	ldrb	r1, [r5, #16]
 8011d00:	4640      	mov	r0, r8
 8011d02:	f002 f8bb 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011d06:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8011d0a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d051      	beq.n	8011db6 <uxr_serialize_ActivityInfoVariant+0x12a>
 8011d12:	7c2b      	ldrb	r3, [r5, #16]
 8011d14:	00c9      	lsls	r1, r1, #3
 8011d16:	2b03      	cmp	r3, #3
 8011d18:	d854      	bhi.n	8011dc4 <uxr_serialize_ActivityInfoVariant+0x138>
 8011d1a:	e8df f003 	tbb	[pc, r3]
 8011d1e:	2133      	.short	0x2133
 8011d20:	020f      	.short	0x020f
 8011d22:	4449      	add	r1, r9
 8011d24:	4640      	mov	r0, r8
 8011d26:	6889      	ldr	r1, [r1, #8]
 8011d28:	f002 ff68 	bl	8014bfc <ucdr_serialize_string>
 8011d2c:	3401      	adds	r4, #1
 8011d2e:	68f2      	ldr	r2, [r6, #12]
 8011d30:	4294      	cmp	r4, r2
 8011d32:	d244      	bcs.n	8011dbe <uxr_serialize_ActivityInfoVariant+0x132>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d1de      	bne.n	8011cf6 <uxr_serialize_ActivityInfoVariant+0x6a>
 8011d38:	2700      	movs	r7, #0
 8011d3a:	e7b8      	b.n	8011cae <uxr_serialize_ActivityInfoVariant+0x22>
 8011d3c:	3108      	adds	r1, #8
 8011d3e:	44a2      	add	sl, r4
 8011d40:	2210      	movs	r2, #16
 8011d42:	4640      	mov	r0, r8
 8011d44:	4449      	add	r1, r9
 8011d46:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011d4a:	f001 ff9d 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011d4e:	4605      	mov	r5, r0
 8011d50:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8011d54:	4640      	mov	r0, r8
 8011d56:	f002 faa7 	bl	80142a8 <ucdr_serialize_uint32_t>
 8011d5a:	4028      	ands	r0, r5
 8011d5c:	b2c0      	uxtb	r0, r0
 8011d5e:	e7e5      	b.n	8011d2c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011d60:	3108      	adds	r1, #8
 8011d62:	44a2      	add	sl, r4
 8011d64:	2204      	movs	r2, #4
 8011d66:	4640      	mov	r0, r8
 8011d68:	4449      	add	r1, r9
 8011d6a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011d6e:	f001 ff8b 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011d72:	4605      	mov	r5, r0
 8011d74:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8011d78:	4640      	mov	r0, r8
 8011d7a:	f002 f8ab 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011d7e:	4028      	ands	r0, r5
 8011d80:	b2c0      	uxtb	r0, r0
 8011d82:	e7d3      	b.n	8011d2c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011d84:	3108      	adds	r1, #8
 8011d86:	44a2      	add	sl, r4
 8011d88:	2202      	movs	r2, #2
 8011d8a:	4640      	mov	r0, r8
 8011d8c:	4449      	add	r1, r9
 8011d8e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011d92:	f001 ff79 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011d96:	4605      	mov	r5, r0
 8011d98:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8011d9c:	4640      	mov	r0, r8
 8011d9e:	f002 f86d 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011da2:	4028      	ands	r0, r5
 8011da4:	b2c0      	uxtb	r0, r0
 8011da6:	e7c1      	b.n	8011d2c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011da8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011dac:	4640      	mov	r0, r8
 8011dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db2:	f002 bd9f 	b.w	80148f4 <ucdr_serialize_int16_t>
 8011db6:	3401      	adds	r4, #1
 8011db8:	68f2      	ldr	r2, [r6, #12]
 8011dba:	42a2      	cmp	r2, r4
 8011dbc:	d8bc      	bhi.n	8011d38 <uxr_serialize_ActivityInfoVariant+0xac>
 8011dbe:	4007      	ands	r7, r0
 8011dc0:	b2ff      	uxtb	r7, r7
 8011dc2:	e774      	b.n	8011cae <uxr_serialize_ActivityInfoVariant+0x22>
 8011dc4:	3401      	adds	r4, #1
 8011dc6:	68f3      	ldr	r3, [r6, #12]
 8011dc8:	3518      	adds	r5, #24
 8011dca:	429c      	cmp	r4, r3
 8011dcc:	d397      	bcc.n	8011cfe <uxr_serialize_ActivityInfoVariant+0x72>
 8011dce:	e76e      	b.n	8011cae <uxr_serialize_ActivityInfoVariant+0x22>

08011dd0 <uxr_deserialize_BaseObjectReply>:
 8011dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dd4:	2202      	movs	r2, #2
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	460f      	mov	r7, r1
 8011dda:	f001 ffb9 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011dde:	2202      	movs	r2, #2
 8011de0:	4605      	mov	r5, r0
 8011de2:	4630      	mov	r0, r6
 8011de4:	18b9      	adds	r1, r7, r2
 8011de6:	f001 ffb3 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011dea:	4680      	mov	r8, r0
 8011dec:	1d39      	adds	r1, r7, #4
 8011dee:	4630      	mov	r0, r6
 8011df0:	f002 f85a 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011df4:	ea05 0508 	and.w	r5, r5, r8
 8011df8:	4604      	mov	r4, r0
 8011dfa:	1d79      	adds	r1, r7, #5
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	402c      	ands	r4, r5
 8011e00:	f002 f852 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8011e04:	4020      	ands	r0, r4
 8011e06:	b2c0      	uxtb	r0, r0
 8011e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e0c <uxr_serialize_ReadSpecification>:
 8011e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0e:	460e      	mov	r6, r1
 8011e10:	4607      	mov	r7, r0
 8011e12:	7809      	ldrb	r1, [r1, #0]
 8011e14:	f002 f832 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011e18:	4604      	mov	r4, r0
 8011e1a:	7871      	ldrb	r1, [r6, #1]
 8011e1c:	4638      	mov	r0, r7
 8011e1e:	f002 f82d 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011e22:	4004      	ands	r4, r0
 8011e24:	78b1      	ldrb	r1, [r6, #2]
 8011e26:	4638      	mov	r0, r7
 8011e28:	f001 fffa 	bl	8013e20 <ucdr_serialize_bool>
 8011e2c:	78b3      	ldrb	r3, [r6, #2]
 8011e2e:	b2e4      	uxtb	r4, r4
 8011e30:	4004      	ands	r4, r0
 8011e32:	b943      	cbnz	r3, 8011e46 <uxr_serialize_ReadSpecification+0x3a>
 8011e34:	7a31      	ldrb	r1, [r6, #8]
 8011e36:	4638      	mov	r0, r7
 8011e38:	f001 fff2 	bl	8013e20 <ucdr_serialize_bool>
 8011e3c:	7a33      	ldrb	r3, [r6, #8]
 8011e3e:	4004      	ands	r4, r0
 8011e40:	b93b      	cbnz	r3, 8011e52 <uxr_serialize_ReadSpecification+0x46>
 8011e42:	4620      	mov	r0, r4
 8011e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e46:	6871      	ldr	r1, [r6, #4]
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f002 fed7 	bl	8014bfc <ucdr_serialize_string>
 8011e4e:	4004      	ands	r4, r0
 8011e50:	e7f0      	b.n	8011e34 <uxr_serialize_ReadSpecification+0x28>
 8011e52:	8971      	ldrh	r1, [r6, #10]
 8011e54:	4638      	mov	r0, r7
 8011e56:	f002 f83d 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	89b1      	ldrh	r1, [r6, #12]
 8011e5e:	4638      	mov	r0, r7
 8011e60:	f002 f838 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011e64:	4005      	ands	r5, r0
 8011e66:	89f1      	ldrh	r1, [r6, #14]
 8011e68:	4638      	mov	r0, r7
 8011e6a:	b2ed      	uxtb	r5, r5
 8011e6c:	f002 f832 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011e70:	8a31      	ldrh	r1, [r6, #16]
 8011e72:	4025      	ands	r5, r4
 8011e74:	4604      	mov	r4, r0
 8011e76:	4638      	mov	r0, r7
 8011e78:	4025      	ands	r5, r4
 8011e7a:	f002 f82b 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8011e7e:	ea00 0405 	and.w	r4, r0, r5
 8011e82:	4620      	mov	r0, r4
 8011e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e86:	bf00      	nop

08011e88 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011e88:	f7ff bb0a 	b.w	80114a0 <uxr_serialize_CLIENT_Representation>

08011e8c <uxr_serialize_CREATE_Payload>:
 8011e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8e:	2202      	movs	r2, #2
 8011e90:	4607      	mov	r7, r0
 8011e92:	460e      	mov	r6, r1
 8011e94:	f001 fef8 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011e98:	2202      	movs	r2, #2
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	4638      	mov	r0, r7
 8011e9e:	18b1      	adds	r1, r6, r2
 8011ea0:	f001 fef2 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011ea4:	7931      	ldrb	r1, [r6, #4]
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	4638      	mov	r0, r7
 8011eaa:	f001 ffe7 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011eae:	b170      	cbz	r0, 8011ece <uxr_serialize_CREATE_Payload+0x42>
 8011eb0:	7933      	ldrb	r3, [r6, #4]
 8011eb2:	402c      	ands	r4, r5
 8011eb4:	3b01      	subs	r3, #1
 8011eb6:	b2e4      	uxtb	r4, r4
 8011eb8:	2b0d      	cmp	r3, #13
 8011eba:	d809      	bhi.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011ebc:	e8df f003 	tbb	[pc, r3]
 8011ec0:	23230a4c 	.word	0x23230a4c
 8011ec4:	0a0a0a0a 	.word	0x0a0a0a0a
 8011ec8:	12121208 	.word	0x12121208
 8011ecc:	3e45      	.short	0x3e45
 8011ece:	2400      	movs	r4, #0
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed4:	f106 0108 	add.w	r1, r6, #8
 8011ed8:	4638      	mov	r0, r7
 8011eda:	f7ff fbe7 	bl	80116ac <uxr_serialize_DATAWRITER_Representation>
 8011ede:	4004      	ands	r4, r0
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee4:	7a31      	ldrb	r1, [r6, #8]
 8011ee6:	4638      	mov	r0, r7
 8011ee8:	f001 ffc8 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d0ee      	beq.n	8011ece <uxr_serialize_CREATE_Payload+0x42>
 8011ef0:	7a33      	ldrb	r3, [r6, #8]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d001      	beq.n	8011efa <uxr_serialize_CREATE_Payload+0x6e>
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d1ea      	bne.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011efa:	68f1      	ldr	r1, [r6, #12]
 8011efc:	4638      	mov	r0, r7
 8011efe:	f002 fe7d 	bl	8014bfc <ucdr_serialize_string>
 8011f02:	4004      	ands	r4, r0
 8011f04:	e7e4      	b.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011f06:	7a31      	ldrb	r1, [r6, #8]
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f001 ffb7 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011f0e:	4605      	mov	r5, r0
 8011f10:	b158      	cbz	r0, 8011f2a <uxr_serialize_CREATE_Payload+0x9e>
 8011f12:	7a33      	ldrb	r3, [r6, #8]
 8011f14:	2b02      	cmp	r3, #2
 8011f16:	d034      	beq.n	8011f82 <uxr_serialize_CREATE_Payload+0xf6>
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d106      	bne.n	8011f2a <uxr_serialize_CREATE_Payload+0x9e>
 8011f1c:	68f2      	ldr	r2, [r6, #12]
 8011f1e:	f106 0110 	add.w	r1, r6, #16
 8011f22:	4638      	mov	r0, r7
 8011f24:	f7fd fc12 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 8011f28:	4605      	mov	r5, r0
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011f30:	4638      	mov	r0, r7
 8011f32:	f001 fea9 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011f36:	4028      	ands	r0, r5
 8011f38:	4004      	ands	r4, r0
 8011f3a:	e7c9      	b.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011f3c:	f106 0108 	add.w	r1, r6, #8
 8011f40:	4638      	mov	r0, r7
 8011f42:	f7ff faad 	bl	80114a0 <uxr_serialize_CLIENT_Representation>
 8011f46:	4004      	ands	r4, r0
 8011f48:	e7c2      	b.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011f4a:	f106 0108 	add.w	r1, r6, #8
 8011f4e:	4638      	mov	r0, r7
 8011f50:	f7ff fb62 	bl	8011618 <uxr_serialize_AGENT_Representation>
 8011f54:	4004      	ands	r4, r0
 8011f56:	e7bb      	b.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011f58:	7a31      	ldrb	r1, [r6, #8]
 8011f5a:	4638      	mov	r0, r7
 8011f5c:	f001 ff8e 	bl	8013e7c <ucdr_serialize_uint8_t>
 8011f60:	4605      	mov	r5, r0
 8011f62:	b130      	cbz	r0, 8011f72 <uxr_serialize_CREATE_Payload+0xe6>
 8011f64:	7a33      	ldrb	r3, [r6, #8]
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d011      	beq.n	8011f8e <uxr_serialize_CREATE_Payload+0x102>
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d015      	beq.n	8011f9a <uxr_serialize_CREATE_Payload+0x10e>
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d00d      	beq.n	8011f8e <uxr_serialize_CREATE_Payload+0x102>
 8011f72:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011f76:	4638      	mov	r0, r7
 8011f78:	f002 fcbc 	bl	80148f4 <ucdr_serialize_int16_t>
 8011f7c:	4028      	ands	r0, r5
 8011f7e:	4004      	ands	r4, r0
 8011f80:	e7a6      	b.n	8011ed0 <uxr_serialize_CREATE_Payload+0x44>
 8011f82:	68f1      	ldr	r1, [r6, #12]
 8011f84:	4638      	mov	r0, r7
 8011f86:	f002 fe39 	bl	8014bfc <ucdr_serialize_string>
 8011f8a:	4605      	mov	r5, r0
 8011f8c:	e7cd      	b.n	8011f2a <uxr_serialize_CREATE_Payload+0x9e>
 8011f8e:	68f1      	ldr	r1, [r6, #12]
 8011f90:	4638      	mov	r0, r7
 8011f92:	f002 fe33 	bl	8014bfc <ucdr_serialize_string>
 8011f96:	4605      	mov	r5, r0
 8011f98:	e7eb      	b.n	8011f72 <uxr_serialize_CREATE_Payload+0xe6>
 8011f9a:	68f2      	ldr	r2, [r6, #12]
 8011f9c:	f106 0110 	add.w	r1, r6, #16
 8011fa0:	4638      	mov	r0, r7
 8011fa2:	f7fd fbd3 	bl	800f74c <ucdr_serialize_sequence_uint8_t>
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	e7e3      	b.n	8011f72 <uxr_serialize_CREATE_Payload+0xe6>
 8011faa:	bf00      	nop

08011fac <uxr_deserialize_GET_INFO_Payload>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	2202      	movs	r2, #2
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	460e      	mov	r6, r1
 8011fb4:	f001 fecc 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011fb8:	2202      	movs	r2, #2
 8011fba:	4604      	mov	r4, r0
 8011fbc:	4628      	mov	r0, r5
 8011fbe:	18b1      	adds	r1, r6, r2
 8011fc0:	f001 fec6 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	1d31      	adds	r1, r6, #4
 8011fc8:	4628      	mov	r0, r5
 8011fca:	401c      	ands	r4, r3
 8011fcc:	f002 fa9c 	bl	8014508 <ucdr_deserialize_uint32_t>
 8011fd0:	b2e4      	uxtb	r4, r4
 8011fd2:	4020      	ands	r0, r4
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	bf00      	nop

08011fd8 <uxr_serialize_DELETE_Payload>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	2202      	movs	r2, #2
 8011fdc:	4605      	mov	r5, r0
 8011fde:	460e      	mov	r6, r1
 8011fe0:	f001 fe52 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011fe4:	2202      	movs	r2, #2
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	4628      	mov	r0, r5
 8011fea:	18b1      	adds	r1, r6, r2
 8011fec:	f001 fe4c 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8011ff0:	4020      	ands	r0, r4
 8011ff2:	b2c0      	uxtb	r0, r0
 8011ff4:	bd70      	pop	{r4, r5, r6, pc}
 8011ff6:	bf00      	nop

08011ff8 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ffc:	460e      	mov	r6, r1
 8011ffe:	4605      	mov	r5, r0
 8012000:	f001 ff52 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8012004:	4604      	mov	r4, r0
 8012006:	1c71      	adds	r1, r6, #1
 8012008:	4628      	mov	r0, r5
 801200a:	f001 ff4d 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 801200e:	2204      	movs	r2, #4
 8012010:	4681      	mov	r9, r0
 8012012:	4628      	mov	r0, r5
 8012014:	18b1      	adds	r1, r6, r2
 8012016:	f001 fe9b 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 801201a:	f106 0108 	add.w	r1, r6, #8
 801201e:	4680      	mov	r8, r0
 8012020:	2202      	movs	r2, #2
 8012022:	4628      	mov	r0, r5
 8012024:	f001 fe94 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012028:	ea04 0309 	and.w	r3, r4, r9
 801202c:	4607      	mov	r7, r0
 801202e:	2202      	movs	r2, #2
 8012030:	b2db      	uxtb	r3, r3
 8012032:	f106 010a 	add.w	r1, r6, #10
 8012036:	4628      	mov	r0, r5
 8012038:	ea03 0408 	and.w	r4, r3, r8
 801203c:	f001 fe88 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012040:	4603      	mov	r3, r0
 8012042:	4628      	mov	r0, r5
 8012044:	403c      	ands	r4, r7
 8012046:	f106 010c 	add.w	r1, r6, #12
 801204a:	461d      	mov	r5, r3
 801204c:	f001 fefe 	bl	8013e4c <ucdr_deserialize_bool>
 8012050:	4025      	ands	r5, r4
 8012052:	4028      	ands	r0, r5
 8012054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012058 <uxr_deserialize_STATUS_Payload>:
 8012058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801205c:	2202      	movs	r2, #2
 801205e:	4606      	mov	r6, r0
 8012060:	460f      	mov	r7, r1
 8012062:	f001 fe75 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012066:	2202      	movs	r2, #2
 8012068:	4605      	mov	r5, r0
 801206a:	4630      	mov	r0, r6
 801206c:	18b9      	adds	r1, r7, r2
 801206e:	f001 fe6f 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012072:	4680      	mov	r8, r0
 8012074:	1d39      	adds	r1, r7, #4
 8012076:	4630      	mov	r0, r6
 8012078:	f001 ff16 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 801207c:	ea05 0508 	and.w	r5, r5, r8
 8012080:	4604      	mov	r4, r0
 8012082:	1d79      	adds	r1, r7, #5
 8012084:	4630      	mov	r0, r6
 8012086:	402c      	ands	r4, r5
 8012088:	f001 ff0e 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 801208c:	4020      	ands	r0, r4
 801208e:	b2c0      	uxtb	r0, r0
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012094 <uxr_serialize_INFO_Payload>:
 8012094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012098:	2202      	movs	r2, #2
 801209a:	460c      	mov	r4, r1
 801209c:	4605      	mov	r5, r0
 801209e:	f001 fdf3 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80120a2:	2202      	movs	r2, #2
 80120a4:	4680      	mov	r8, r0
 80120a6:	4628      	mov	r0, r5
 80120a8:	18a1      	adds	r1, r4, r2
 80120aa:	f001 fded 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 80120ae:	4607      	mov	r7, r0
 80120b0:	7921      	ldrb	r1, [r4, #4]
 80120b2:	4628      	mov	r0, r5
 80120b4:	f001 fee2 	bl	8013e7c <ucdr_serialize_uint8_t>
 80120b8:	ea08 0807 	and.w	r8, r8, r7
 80120bc:	4606      	mov	r6, r0
 80120be:	7961      	ldrb	r1, [r4, #5]
 80120c0:	4628      	mov	r0, r5
 80120c2:	ea06 0608 	and.w	r6, r6, r8
 80120c6:	f001 fed9 	bl	8013e7c <ucdr_serialize_uint8_t>
 80120ca:	7a21      	ldrb	r1, [r4, #8]
 80120cc:	4030      	ands	r0, r6
 80120ce:	b2c7      	uxtb	r7, r0
 80120d0:	4628      	mov	r0, r5
 80120d2:	f001 fea5 	bl	8013e20 <ucdr_serialize_bool>
 80120d6:	7a23      	ldrb	r3, [r4, #8]
 80120d8:	4606      	mov	r6, r0
 80120da:	b96b      	cbnz	r3, 80120f8 <uxr_serialize_INFO_Payload+0x64>
 80120dc:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80120e0:	4628      	mov	r0, r5
 80120e2:	f001 fe9d 	bl	8013e20 <ucdr_serialize_bool>
 80120e6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80120ea:	4030      	ands	r0, r6
 80120ec:	b2c6      	uxtb	r6, r0
 80120ee:	b983      	cbnz	r3, 8012112 <uxr_serialize_INFO_Payload+0x7e>
 80120f0:	ea06 0007 	and.w	r0, r6, r7
 80120f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f8:	7b21      	ldrb	r1, [r4, #12]
 80120fa:	4628      	mov	r0, r5
 80120fc:	f001 febe 	bl	8013e7c <ucdr_serialize_uint8_t>
 8012100:	b188      	cbz	r0, 8012126 <uxr_serialize_INFO_Payload+0x92>
 8012102:	f104 010c 	add.w	r1, r4, #12
 8012106:	4628      	mov	r0, r5
 8012108:	f7ff faf8 	bl	80116fc <uxr_serialize_ObjectVariant.part.0>
 801210c:	4030      	ands	r0, r6
 801210e:	b2c6      	uxtb	r6, r0
 8012110:	e7e4      	b.n	80120dc <uxr_serialize_INFO_Payload+0x48>
 8012112:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012116:	4628      	mov	r0, r5
 8012118:	f7ff fdb8 	bl	8011c8c <uxr_serialize_ActivityInfoVariant>
 801211c:	4006      	ands	r6, r0
 801211e:	ea06 0007 	and.w	r0, r6, r7
 8012122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012126:	4606      	mov	r6, r0
 8012128:	e7d8      	b.n	80120dc <uxr_serialize_INFO_Payload+0x48>
 801212a:	bf00      	nop

0801212c <uxr_serialize_READ_DATA_Payload>:
 801212c:	b570      	push	{r4, r5, r6, lr}
 801212e:	2202      	movs	r2, #2
 8012130:	4605      	mov	r5, r0
 8012132:	460e      	mov	r6, r1
 8012134:	f001 fda8 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8012138:	2202      	movs	r2, #2
 801213a:	4604      	mov	r4, r0
 801213c:	4628      	mov	r0, r5
 801213e:	18b1      	adds	r1, r6, r2
 8012140:	f001 fda2 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8012144:	4603      	mov	r3, r0
 8012146:	1d31      	adds	r1, r6, #4
 8012148:	4628      	mov	r0, r5
 801214a:	401c      	ands	r4, r3
 801214c:	f7ff fe5e 	bl	8011e0c <uxr_serialize_ReadSpecification>
 8012150:	b2e4      	uxtb	r4, r4
 8012152:	4020      	ands	r0, r4
 8012154:	bd70      	pop	{r4, r5, r6, pc}
 8012156:	bf00      	nop

08012158 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	2202      	movs	r2, #2
 801215c:	4605      	mov	r5, r0
 801215e:	460e      	mov	r6, r1
 8012160:	f001 fd92 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8012164:	2202      	movs	r2, #2
 8012166:	4604      	mov	r4, r0
 8012168:	4628      	mov	r0, r5
 801216a:	18b1      	adds	r1, r6, r2
 801216c:	f001 fd8c 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8012170:	4020      	ands	r0, r4
 8012172:	b2c0      	uxtb	r0, r0
 8012174:	bd70      	pop	{r4, r5, r6, pc}
 8012176:	bf00      	nop

08012178 <uxr_serialize_ACKNACK_Payload>:
 8012178:	b570      	push	{r4, r5, r6, lr}
 801217a:	460c      	mov	r4, r1
 801217c:	4605      	mov	r5, r0
 801217e:	460e      	mov	r6, r1
 8012180:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012184:	f001 fea6 	bl	8013ed4 <ucdr_serialize_uint16_t>
 8012188:	2202      	movs	r2, #2
 801218a:	4621      	mov	r1, r4
 801218c:	4604      	mov	r4, r0
 801218e:	4628      	mov	r0, r5
 8012190:	f001 fd7a 	bl	8013c88 <ucdr_serialize_array_uint8_t>
 8012194:	4603      	mov	r3, r0
 8012196:	7931      	ldrb	r1, [r6, #4]
 8012198:	4628      	mov	r0, r5
 801219a:	401c      	ands	r4, r3
 801219c:	f001 fe6e 	bl	8013e7c <ucdr_serialize_uint8_t>
 80121a0:	b2e4      	uxtb	r4, r4
 80121a2:	4020      	ands	r0, r4
 80121a4:	bd70      	pop	{r4, r5, r6, pc}
 80121a6:	bf00      	nop

080121a8 <uxr_deserialize_ACKNACK_Payload>:
 80121a8:	b570      	push	{r4, r5, r6, lr}
 80121aa:	460e      	mov	r6, r1
 80121ac:	4605      	mov	r5, r0
 80121ae:	f001 ff91 	bl	80140d4 <ucdr_deserialize_uint16_t>
 80121b2:	2202      	movs	r2, #2
 80121b4:	4604      	mov	r4, r0
 80121b6:	4628      	mov	r0, r5
 80121b8:	18b1      	adds	r1, r6, r2
 80121ba:	f001 fdc9 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 80121be:	4603      	mov	r3, r0
 80121c0:	1d31      	adds	r1, r6, #4
 80121c2:	4628      	mov	r0, r5
 80121c4:	401c      	ands	r4, r3
 80121c6:	f001 fe6f 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 80121ca:	b2e4      	uxtb	r4, r4
 80121cc:	4020      	ands	r0, r4
 80121ce:	bd70      	pop	{r4, r5, r6, pc}

080121d0 <uxr_serialize_HEARTBEAT_Payload>:
 80121d0:	b570      	push	{r4, r5, r6, lr}
 80121d2:	460d      	mov	r5, r1
 80121d4:	4606      	mov	r6, r0
 80121d6:	8809      	ldrh	r1, [r1, #0]
 80121d8:	f001 fe7c 	bl	8013ed4 <ucdr_serialize_uint16_t>
 80121dc:	8869      	ldrh	r1, [r5, #2]
 80121de:	4604      	mov	r4, r0
 80121e0:	4630      	mov	r0, r6
 80121e2:	f001 fe77 	bl	8013ed4 <ucdr_serialize_uint16_t>
 80121e6:	4603      	mov	r3, r0
 80121e8:	7929      	ldrb	r1, [r5, #4]
 80121ea:	4630      	mov	r0, r6
 80121ec:	401c      	ands	r4, r3
 80121ee:	f001 fe45 	bl	8013e7c <ucdr_serialize_uint8_t>
 80121f2:	b2e4      	uxtb	r4, r4
 80121f4:	4020      	ands	r0, r4
 80121f6:	bd70      	pop	{r4, r5, r6, pc}

080121f8 <uxr_deserialize_HEARTBEAT_Payload>:
 80121f8:	b570      	push	{r4, r5, r6, lr}
 80121fa:	460e      	mov	r6, r1
 80121fc:	4605      	mov	r5, r0
 80121fe:	f001 ff69 	bl	80140d4 <ucdr_deserialize_uint16_t>
 8012202:	4604      	mov	r4, r0
 8012204:	1cb1      	adds	r1, r6, #2
 8012206:	4628      	mov	r0, r5
 8012208:	f001 ff64 	bl	80140d4 <ucdr_deserialize_uint16_t>
 801220c:	4603      	mov	r3, r0
 801220e:	1d31      	adds	r1, r6, #4
 8012210:	4628      	mov	r0, r5
 8012212:	401c      	ands	r4, r3
 8012214:	f001 fe48 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 8012218:	b2e4      	uxtb	r4, r4
 801221a:	4020      	ands	r0, r4
 801221c:	bd70      	pop	{r4, r5, r6, pc}
 801221e:	bf00      	nop

08012220 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012224:	460e      	mov	r6, r1
 8012226:	4605      	mov	r5, r0
 8012228:	f002 fc58 	bl	8014adc <ucdr_deserialize_int32_t>
 801222c:	4607      	mov	r7, r0
 801222e:	1d31      	adds	r1, r6, #4
 8012230:	4628      	mov	r0, r5
 8012232:	f002 f969 	bl	8014508 <ucdr_deserialize_uint32_t>
 8012236:	4680      	mov	r8, r0
 8012238:	f106 0108 	add.w	r1, r6, #8
 801223c:	4628      	mov	r0, r5
 801223e:	f002 fc4d 	bl	8014adc <ucdr_deserialize_int32_t>
 8012242:	ea07 0708 	and.w	r7, r7, r8
 8012246:	4604      	mov	r4, r0
 8012248:	f106 010c 	add.w	r1, r6, #12
 801224c:	4628      	mov	r0, r5
 801224e:	403c      	ands	r4, r7
 8012250:	f002 f95a 	bl	8014508 <ucdr_deserialize_uint32_t>
 8012254:	f106 0110 	add.w	r1, r6, #16
 8012258:	4004      	ands	r4, r0
 801225a:	4628      	mov	r0, r5
 801225c:	f002 fc3e 	bl	8014adc <ucdr_deserialize_int32_t>
 8012260:	4603      	mov	r3, r0
 8012262:	b2e4      	uxtb	r4, r4
 8012264:	4628      	mov	r0, r5
 8012266:	461d      	mov	r5, r3
 8012268:	f106 0114 	add.w	r1, r6, #20
 801226c:	f002 f94c 	bl	8014508 <ucdr_deserialize_uint32_t>
 8012270:	402c      	ands	r4, r5
 8012272:	4020      	ands	r0, r4
 8012274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012278 <uxr_deserialize_SampleIdentity>:
 8012278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801227c:	4604      	mov	r4, r0
 801227e:	460d      	mov	r5, r1
 8012280:	220c      	movs	r2, #12
 8012282:	f001 fd65 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012286:	2203      	movs	r2, #3
 8012288:	f105 010c 	add.w	r1, r5, #12
 801228c:	4607      	mov	r7, r0
 801228e:	4620      	mov	r0, r4
 8012290:	f001 fd5e 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8012294:	f105 010f 	add.w	r1, r5, #15
 8012298:	4680      	mov	r8, r0
 801229a:	4620      	mov	r0, r4
 801229c:	f001 fe04 	bl	8013ea8 <ucdr_deserialize_uint8_t>
 80122a0:	f105 0110 	add.w	r1, r5, #16
 80122a4:	4606      	mov	r6, r0
 80122a6:	4620      	mov	r0, r4
 80122a8:	f002 fc18 	bl	8014adc <ucdr_deserialize_int32_t>
 80122ac:	ea07 0708 	and.w	r7, r7, r8
 80122b0:	4603      	mov	r3, r0
 80122b2:	4620      	mov	r0, r4
 80122b4:	403e      	ands	r6, r7
 80122b6:	f105 0114 	add.w	r1, r5, #20
 80122ba:	461c      	mov	r4, r3
 80122bc:	f002 f924 	bl	8014508 <ucdr_deserialize_uint32_t>
 80122c0:	4034      	ands	r4, r6
 80122c2:	4020      	ands	r0, r4
 80122c4:	b2c0      	uxtb	r0, r0
 80122c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ca:	bf00      	nop

080122cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80122cc:	280b      	cmp	r0, #11
 80122ce:	dc0d      	bgt.n	80122ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	db09      	blt.n	80122e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80122d4:	280b      	cmp	r0, #11
 80122d6:	d807      	bhi.n	80122e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80122d8:	e8df f000 	tbb	[pc, r0]
 80122dc:	07060607 	.word	0x07060607
 80122e0:	06060606 	.word	0x06060606
 80122e4:	07070606 	.word	0x07070606
 80122e8:	2001      	movs	r0, #1
 80122ea:	4770      	bx	lr
 80122ec:	28cb      	cmp	r0, #203	@ 0xcb
 80122ee:	bf18      	it	ne
 80122f0:	2001      	movne	r0, #1
 80122f2:	4770      	bx	lr

080122f4 <rcl_get_zero_initialized_context>:
 80122f4:	4a03      	ldr	r2, [pc, #12]	@ (8012304 <rcl_get_zero_initialized_context+0x10>)
 80122f6:	4603      	mov	r3, r0
 80122f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8012300:	4618      	mov	r0, r3
 8012302:	4770      	bx	lr
 8012304:	08018810 	.word	0x08018810

08012308 <rcl_context_is_valid>:
 8012308:	b118      	cbz	r0, 8012312 <rcl_context_is_valid+0xa>
 801230a:	6840      	ldr	r0, [r0, #4]
 801230c:	3800      	subs	r0, #0
 801230e:	bf18      	it	ne
 8012310:	2001      	movne	r0, #1
 8012312:	4770      	bx	lr

08012314 <__cleanup_context>:
 8012314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012318:	4606      	mov	r6, r0
 801231a:	2300      	movs	r3, #0
 801231c:	6800      	ldr	r0, [r0, #0]
 801231e:	6073      	str	r3, [r6, #4]
 8012320:	2800      	cmp	r0, #0
 8012322:	d049      	beq.n	80123b8 <__cleanup_context+0xa4>
 8012324:	6947      	ldr	r7, [r0, #20]
 8012326:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801232a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801232e:	b137      	cbz	r7, 801233e <__cleanup_context+0x2a>
 8012330:	3014      	adds	r0, #20
 8012332:	f000 fa65 	bl	8012800 <rcl_init_options_fini>
 8012336:	4607      	mov	r7, r0
 8012338:	2800      	cmp	r0, #0
 801233a:	d144      	bne.n	80123c6 <__cleanup_context+0xb2>
 801233c:	6830      	ldr	r0, [r6, #0]
 801233e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012340:	b143      	cbz	r3, 8012354 <__cleanup_context+0x40>
 8012342:	3028      	adds	r0, #40	@ 0x28
 8012344:	f001 fb2c 	bl	80139a0 <rmw_context_fini>
 8012348:	b118      	cbz	r0, 8012352 <__cleanup_context+0x3e>
 801234a:	2f00      	cmp	r7, #0
 801234c:	d03e      	beq.n	80123cc <__cleanup_context+0xb8>
 801234e:	f7fb ff2b 	bl	800e1a8 <rcutils_reset_error>
 8012352:	6830      	ldr	r0, [r6, #0]
 8012354:	6a03      	ldr	r3, [r0, #32]
 8012356:	b1db      	cbz	r3, 8012390 <__cleanup_context+0x7c>
 8012358:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801235c:	2a01      	cmp	r2, #1
 801235e:	f17c 0100 	sbcs.w	r1, ip, #0
 8012362:	db11      	blt.n	8012388 <__cleanup_context+0x74>
 8012364:	2400      	movs	r4, #0
 8012366:	4625      	mov	r5, r4
 8012368:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801236c:	4649      	mov	r1, r9
 801236e:	b1b8      	cbz	r0, 80123a0 <__cleanup_context+0x8c>
 8012370:	47c0      	blx	r8
 8012372:	6833      	ldr	r3, [r6, #0]
 8012374:	3401      	adds	r4, #1
 8012376:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801237a:	f145 0500 	adc.w	r5, r5, #0
 801237e:	6a1b      	ldr	r3, [r3, #32]
 8012380:	4294      	cmp	r4, r2
 8012382:	eb75 010c 	sbcs.w	r1, r5, ip
 8012386:	dbef      	blt.n	8012368 <__cleanup_context+0x54>
 8012388:	4618      	mov	r0, r3
 801238a:	4649      	mov	r1, r9
 801238c:	47c0      	blx	r8
 801238e:	6830      	ldr	r0, [r6, #0]
 8012390:	4649      	mov	r1, r9
 8012392:	47c0      	blx	r8
 8012394:	2300      	movs	r3, #0
 8012396:	4638      	mov	r0, r7
 8012398:	e9c6 3300 	strd	r3, r3, [r6]
 801239c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123a0:	3401      	adds	r4, #1
 80123a2:	f145 0500 	adc.w	r5, r5, #0
 80123a6:	4294      	cmp	r4, r2
 80123a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80123ac:	dbdc      	blt.n	8012368 <__cleanup_context+0x54>
 80123ae:	4618      	mov	r0, r3
 80123b0:	4649      	mov	r1, r9
 80123b2:	47c0      	blx	r8
 80123b4:	6830      	ldr	r0, [r6, #0]
 80123b6:	e7eb      	b.n	8012390 <__cleanup_context+0x7c>
 80123b8:	4607      	mov	r7, r0
 80123ba:	2300      	movs	r3, #0
 80123bc:	4638      	mov	r0, r7
 80123be:	e9c6 3300 	strd	r3, r3, [r6]
 80123c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c6:	f7fb feef 	bl	800e1a8 <rcutils_reset_error>
 80123ca:	e7b7      	b.n	801233c <__cleanup_context+0x28>
 80123cc:	f7ff ff7e 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 80123d0:	4607      	mov	r7, r0
 80123d2:	e7bc      	b.n	801234e <__cleanup_context+0x3a>

080123d4 <rcl_get_zero_initialized_guard_condition>:
 80123d4:	4a03      	ldr	r2, [pc, #12]	@ (80123e4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80123d6:	4603      	mov	r3, r0
 80123d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80123e0:	4618      	mov	r0, r3
 80123e2:	4770      	bx	lr
 80123e4:	08018818 	.word	0x08018818

080123e8 <rcl_guard_condition_init_from_rmw>:
 80123e8:	b082      	sub	sp, #8
 80123ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	4604      	mov	r4, r0
 80123f2:	460e      	mov	r6, r1
 80123f4:	4615      	mov	r5, r2
 80123f6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80123fa:	f10d 0e04 	add.w	lr, sp, #4
 80123fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 8012402:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012406:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801240a:	f8dc 3000 	ldr.w	r3, [ip]
 801240e:	a801      	add	r0, sp, #4
 8012410:	f8ce 3000 	str.w	r3, [lr]
 8012414:	f7fb fe8c 	bl	800e130 <rcutils_allocator_is_valid>
 8012418:	f080 0301 	eor.w	r3, r0, #1
 801241c:	b2db      	uxtb	r3, r3
 801241e:	bb3b      	cbnz	r3, 8012470 <rcl_guard_condition_init_from_rmw+0x88>
 8012420:	b334      	cbz	r4, 8012470 <rcl_guard_condition_init_from_rmw+0x88>
 8012422:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012426:	f1b8 0f00 	cmp.w	r8, #0
 801242a:	d11a      	bne.n	8012462 <rcl_guard_condition_init_from_rmw+0x7a>
 801242c:	b305      	cbz	r5, 8012470 <rcl_guard_condition_init_from_rmw+0x88>
 801242e:	4628      	mov	r0, r5
 8012430:	f7ff ff6a 	bl	8012308 <rcl_context_is_valid>
 8012434:	b1f0      	cbz	r0, 8012474 <rcl_guard_condition_init_from_rmw+0x8c>
 8012436:	9b01      	ldr	r3, [sp, #4]
 8012438:	201c      	movs	r0, #28
 801243a:	9905      	ldr	r1, [sp, #20]
 801243c:	4798      	blx	r3
 801243e:	4607      	mov	r7, r0
 8012440:	6060      	str	r0, [r4, #4]
 8012442:	b320      	cbz	r0, 801248e <rcl_guard_condition_init_from_rmw+0xa6>
 8012444:	b1c6      	cbz	r6, 8012478 <rcl_guard_condition_init_from_rmw+0x90>
 8012446:	6006      	str	r6, [r0, #0]
 8012448:	f880 8004 	strb.w	r8, [r0, #4]
 801244c:	ac01      	add	r4, sp, #4
 801244e:	f107 0c08 	add.w	ip, r7, #8
 8012452:	2500      	movs	r5, #0
 8012454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012456:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801245a:	6823      	ldr	r3, [r4, #0]
 801245c:	f8cc 3000 	str.w	r3, [ip]
 8012460:	e000      	b.n	8012464 <rcl_guard_condition_init_from_rmw+0x7c>
 8012462:	2564      	movs	r5, #100	@ 0x64
 8012464:	4628      	mov	r0, r5
 8012466:	b006      	add	sp, #24
 8012468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801246c:	b002      	add	sp, #8
 801246e:	4770      	bx	lr
 8012470:	250b      	movs	r5, #11
 8012472:	e7f7      	b.n	8012464 <rcl_guard_condition_init_from_rmw+0x7c>
 8012474:	2565      	movs	r5, #101	@ 0x65
 8012476:	e7f5      	b.n	8012464 <rcl_guard_condition_init_from_rmw+0x7c>
 8012478:	6828      	ldr	r0, [r5, #0]
 801247a:	3028      	adds	r0, #40	@ 0x28
 801247c:	f001 f832 	bl	80134e4 <rmw_create_guard_condition>
 8012480:	6038      	str	r0, [r7, #0]
 8012482:	6867      	ldr	r7, [r4, #4]
 8012484:	683e      	ldr	r6, [r7, #0]
 8012486:	b126      	cbz	r6, 8012492 <rcl_guard_condition_init_from_rmw+0xaa>
 8012488:	2301      	movs	r3, #1
 801248a:	713b      	strb	r3, [r7, #4]
 801248c:	e7de      	b.n	801244c <rcl_guard_condition_init_from_rmw+0x64>
 801248e:	250a      	movs	r5, #10
 8012490:	e7e8      	b.n	8012464 <rcl_guard_condition_init_from_rmw+0x7c>
 8012492:	9b02      	ldr	r3, [sp, #8]
 8012494:	4638      	mov	r0, r7
 8012496:	9905      	ldr	r1, [sp, #20]
 8012498:	2501      	movs	r5, #1
 801249a:	4798      	blx	r3
 801249c:	6066      	str	r6, [r4, #4]
 801249e:	e7e1      	b.n	8012464 <rcl_guard_condition_init_from_rmw+0x7c>

080124a0 <rcl_guard_condition_fini>:
 80124a0:	b570      	push	{r4, r5, r6, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	b1f0      	cbz	r0, 80124e4 <rcl_guard_condition_fini+0x44>
 80124a6:	6843      	ldr	r3, [r0, #4]
 80124a8:	4604      	mov	r4, r0
 80124aa:	b163      	cbz	r3, 80124c6 <rcl_guard_condition_fini+0x26>
 80124ac:	6818      	ldr	r0, [r3, #0]
 80124ae:	68de      	ldr	r6, [r3, #12]
 80124b0:	6999      	ldr	r1, [r3, #24]
 80124b2:	b160      	cbz	r0, 80124ce <rcl_guard_condition_fini+0x2e>
 80124b4:	791d      	ldrb	r5, [r3, #4]
 80124b6:	b965      	cbnz	r5, 80124d2 <rcl_guard_condition_fini+0x32>
 80124b8:	4618      	mov	r0, r3
 80124ba:	47b0      	blx	r6
 80124bc:	2300      	movs	r3, #0
 80124be:	4628      	mov	r0, r5
 80124c0:	6063      	str	r3, [r4, #4]
 80124c2:	b002      	add	sp, #8
 80124c4:	bd70      	pop	{r4, r5, r6, pc}
 80124c6:	461d      	mov	r5, r3
 80124c8:	4628      	mov	r0, r5
 80124ca:	b002      	add	sp, #8
 80124cc:	bd70      	pop	{r4, r5, r6, pc}
 80124ce:	4605      	mov	r5, r0
 80124d0:	e7f2      	b.n	80124b8 <rcl_guard_condition_fini+0x18>
 80124d2:	9101      	str	r1, [sp, #4]
 80124d4:	f001 f81c 	bl	8013510 <rmw_destroy_guard_condition>
 80124d8:	1e05      	subs	r5, r0, #0
 80124da:	6863      	ldr	r3, [r4, #4]
 80124dc:	9901      	ldr	r1, [sp, #4]
 80124de:	bf18      	it	ne
 80124e0:	2501      	movne	r5, #1
 80124e2:	e7e9      	b.n	80124b8 <rcl_guard_condition_fini+0x18>
 80124e4:	250b      	movs	r5, #11
 80124e6:	4628      	mov	r0, r5
 80124e8:	b002      	add	sp, #8
 80124ea:	bd70      	pop	{r4, r5, r6, pc}

080124ec <rcl_guard_condition_get_default_options>:
 80124ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ee:	b087      	sub	sp, #28
 80124f0:	4606      	mov	r6, r0
 80124f2:	4c0b      	ldr	r4, [pc, #44]	@ (8012520 <rcl_guard_condition_get_default_options+0x34>)
 80124f4:	4668      	mov	r0, sp
 80124f6:	f7fb fe0d 	bl	800e114 <rcutils_get_default_allocator>
 80124fa:	46ee      	mov	lr, sp
 80124fc:	46a4      	mov	ip, r4
 80124fe:	4625      	mov	r5, r4
 8012500:	4634      	mov	r4, r6
 8012502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801250a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801250c:	f8de 7000 	ldr.w	r7, [lr]
 8012510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012512:	4630      	mov	r0, r6
 8012514:	f8cc 7000 	str.w	r7, [ip]
 8012518:	6027      	str	r7, [r4, #0]
 801251a:	b007      	add	sp, #28
 801251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801251e:	bf00      	nop
 8012520:	200124d4 	.word	0x200124d4

08012524 <rcl_init>:
 8012524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	1e05      	subs	r5, r0, #0
 801252a:	b09e      	sub	sp, #120	@ 0x78
 801252c:	460e      	mov	r6, r1
 801252e:	4690      	mov	r8, r2
 8012530:	461f      	mov	r7, r3
 8012532:	f340 809f 	ble.w	8012674 <rcl_init+0x150>
 8012536:	2900      	cmp	r1, #0
 8012538:	f000 809f 	beq.w	801267a <rcl_init+0x156>
 801253c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012540:	f04f 0c00 	mov.w	ip, #0
 8012544:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012548:	f10c 0c01 	add.w	ip, ip, #1
 801254c:	2c00      	cmp	r4, #0
 801254e:	f000 8094 	beq.w	801267a <rcl_init+0x156>
 8012552:	4565      	cmp	r5, ip
 8012554:	d1f6      	bne.n	8012544 <rcl_init+0x20>
 8012556:	f1b8 0f00 	cmp.w	r8, #0
 801255a:	f000 808e 	beq.w	801267a <rcl_init+0x156>
 801255e:	f8d8 4000 	ldr.w	r4, [r8]
 8012562:	2c00      	cmp	r4, #0
 8012564:	f000 8089 	beq.w	801267a <rcl_init+0x156>
 8012568:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801256e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012572:	6823      	ldr	r3, [r4, #0]
 8012574:	a819      	add	r0, sp, #100	@ 0x64
 8012576:	f8cc 3000 	str.w	r3, [ip]
 801257a:	f7fb fdd9 	bl	800e130 <rcutils_allocator_is_valid>
 801257e:	f080 0001 	eor.w	r0, r0, #1
 8012582:	b2c0      	uxtb	r0, r0
 8012584:	2800      	cmp	r0, #0
 8012586:	d178      	bne.n	801267a <rcl_init+0x156>
 8012588:	2f00      	cmp	r7, #0
 801258a:	d076      	beq.n	801267a <rcl_init+0x156>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d178      	bne.n	8012684 <rcl_init+0x160>
 8012592:	2178      	movs	r1, #120	@ 0x78
 8012594:	2001      	movs	r0, #1
 8012596:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801259a:	4798      	blx	r3
 801259c:	4604      	mov	r4, r0
 801259e:	6038      	str	r0, [r7, #0]
 80125a0:	2800      	cmp	r0, #0
 80125a2:	f000 80b6 	beq.w	8012712 <rcl_init+0x1ee>
 80125a6:	a802      	add	r0, sp, #8
 80125a8:	f000 fe8a 	bl	80132c0 <rmw_get_zero_initialized_context>
 80125ac:	a902      	add	r1, sp, #8
 80125ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80125b2:	2250      	movs	r2, #80	@ 0x50
 80125b4:	f004 feaf 	bl	8017316 <memcpy>
 80125b8:	ac19      	add	r4, sp, #100	@ 0x64
 80125ba:	f8d7 e000 	ldr.w	lr, [r7]
 80125be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125c0:	46f4      	mov	ip, lr
 80125c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125c6:	6823      	ldr	r3, [r4, #0]
 80125c8:	f10e 0114 	add.w	r1, lr, #20
 80125cc:	4640      	mov	r0, r8
 80125ce:	f8cc 3000 	str.w	r3, [ip]
 80125d2:	f000 f93f 	bl	8012854 <rcl_init_options_copy>
 80125d6:	4604      	mov	r4, r0
 80125d8:	2800      	cmp	r0, #0
 80125da:	d144      	bne.n	8012666 <rcl_init+0x142>
 80125dc:	f8d7 9000 	ldr.w	r9, [r7]
 80125e0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80125e4:	f8c9 0020 	str.w	r0, [r9, #32]
 80125e8:	f8c9 5018 	str.w	r5, [r9, #24]
 80125ec:	f8c9 801c 	str.w	r8, [r9, #28]
 80125f0:	2d00      	cmp	r5, #0
 80125f2:	d04e      	beq.n	8012692 <rcl_init+0x16e>
 80125f4:	2e00      	cmp	r6, #0
 80125f6:	d04c      	beq.n	8012692 <rcl_init+0x16e>
 80125f8:	2104      	movs	r1, #4
 80125fa:	4628      	mov	r0, r5
 80125fc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012600:	4798      	blx	r3
 8012602:	f8c9 0020 	str.w	r0, [r9, #32]
 8012606:	f8d7 9000 	ldr.w	r9, [r7]
 801260a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801260e:	46ca      	mov	sl, r9
 8012610:	b343      	cbz	r3, 8012664 <rcl_init+0x140>
 8012612:	2d01      	cmp	r5, #1
 8012614:	f178 0300 	sbcs.w	r3, r8, #0
 8012618:	db3b      	blt.n	8012692 <rcl_init+0x16e>
 801261a:	2400      	movs	r4, #0
 801261c:	3e04      	subs	r6, #4
 801261e:	46a1      	mov	r9, r4
 8012620:	e00b      	b.n	801263a <rcl_init+0x116>
 8012622:	6831      	ldr	r1, [r6, #0]
 8012624:	f004 fe77 	bl	8017316 <memcpy>
 8012628:	3401      	adds	r4, #1
 801262a:	f149 0900 	adc.w	r9, r9, #0
 801262e:	45c8      	cmp	r8, r9
 8012630:	bf08      	it	eq
 8012632:	42a5      	cmpeq	r5, r4
 8012634:	d02b      	beq.n	801268e <rcl_init+0x16a>
 8012636:	f8d7 a000 	ldr.w	sl, [r7]
 801263a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801263e:	f7ed fe09 	bl	8000254 <strlen>
 8012642:	1c42      	adds	r2, r0, #1
 8012644:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012646:	4610      	mov	r0, r2
 8012648:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801264a:	f8da a020 	ldr.w	sl, [sl, #32]
 801264e:	9201      	str	r2, [sp, #4]
 8012650:	4798      	blx	r3
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012658:	6a1b      	ldr	r3, [r3, #32]
 801265a:	9a01      	ldr	r2, [sp, #4]
 801265c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012660:	2800      	cmp	r0, #0
 8012662:	d1de      	bne.n	8012622 <rcl_init+0xfe>
 8012664:	240a      	movs	r4, #10
 8012666:	4638      	mov	r0, r7
 8012668:	f7ff fe54 	bl	8012314 <__cleanup_context>
 801266c:	4620      	mov	r0, r4
 801266e:	b01e      	add	sp, #120	@ 0x78
 8012670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012674:	2900      	cmp	r1, #0
 8012676:	f43f af6e 	beq.w	8012556 <rcl_init+0x32>
 801267a:	240b      	movs	r4, #11
 801267c:	4620      	mov	r0, r4
 801267e:	b01e      	add	sp, #120	@ 0x78
 8012680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012684:	2464      	movs	r4, #100	@ 0x64
 8012686:	4620      	mov	r0, r4
 8012688:	b01e      	add	sp, #120	@ 0x78
 801268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801268e:	f8d7 9000 	ldr.w	r9, [r7]
 8012692:	4926      	ldr	r1, [pc, #152]	@ (801272c <rcl_init+0x208>)
 8012694:	680b      	ldr	r3, [r1, #0]
 8012696:	3301      	adds	r3, #1
 8012698:	d036      	beq.n	8012708 <rcl_init+0x1e4>
 801269a:	461a      	mov	r2, r3
 801269c:	2400      	movs	r4, #0
 801269e:	600b      	str	r3, [r1, #0]
 80126a0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80126a4:	607b      	str	r3, [r7, #4]
 80126a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80126a8:	3301      	adds	r3, #1
 80126aa:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80126ae:	d034      	beq.n	801271a <rcl_init+0x1f6>
 80126b0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80126b4:	b93b      	cbnz	r3, 80126c6 <rcl_init+0x1a2>
 80126b6:	3030      	adds	r0, #48	@ 0x30
 80126b8:	f000 f93a 	bl	8012930 <rcl_get_localhost_only>
 80126bc:	4604      	mov	r4, r0
 80126be:	2800      	cmp	r0, #0
 80126c0:	d1d1      	bne.n	8012666 <rcl_init+0x142>
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	6958      	ldr	r0, [r3, #20]
 80126c6:	aa18      	add	r2, sp, #96	@ 0x60
 80126c8:	a917      	add	r1, sp, #92	@ 0x5c
 80126ca:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80126cc:	f000 fc24 	bl	8012f18 <rcl_validate_enclave_name>
 80126d0:	4604      	mov	r4, r0
 80126d2:	2800      	cmp	r0, #0
 80126d4:	d1c7      	bne.n	8012666 <rcl_init+0x142>
 80126d6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80126d8:	b9eb      	cbnz	r3, 8012716 <rcl_init+0x1f2>
 80126da:	6839      	ldr	r1, [r7, #0]
 80126dc:	694b      	ldr	r3, [r1, #20]
 80126de:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80126e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80126e4:	f000 fac8 	bl	8012c78 <rcl_get_security_options_from_environment>
 80126e8:	4604      	mov	r4, r0
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d1bb      	bne.n	8012666 <rcl_init+0x142>
 80126ee:	6839      	ldr	r1, [r7, #0]
 80126f0:	6948      	ldr	r0, [r1, #20]
 80126f2:	3128      	adds	r1, #40	@ 0x28
 80126f4:	3018      	adds	r0, #24
 80126f6:	f001 f81d 	bl	8013734 <rmw_init>
 80126fa:	4604      	mov	r4, r0
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d0bd      	beq.n	801267c <rcl_init+0x158>
 8012700:	f7ff fde4 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012704:	4604      	mov	r4, r0
 8012706:	e7ae      	b.n	8012666 <rcl_init+0x142>
 8012708:	2201      	movs	r2, #1
 801270a:	461c      	mov	r4, r3
 801270c:	600a      	str	r2, [r1, #0]
 801270e:	4613      	mov	r3, r2
 8012710:	e7c6      	b.n	80126a0 <rcl_init+0x17c>
 8012712:	240a      	movs	r4, #10
 8012714:	e7b2      	b.n	801267c <rcl_init+0x158>
 8012716:	2401      	movs	r4, #1
 8012718:	e7a5      	b.n	8012666 <rcl_init+0x142>
 801271a:	3024      	adds	r0, #36	@ 0x24
 801271c:	f003 fd2c 	bl	8016178 <rcl_get_default_domain_id>
 8012720:	4604      	mov	r4, r0
 8012722:	2800      	cmp	r0, #0
 8012724:	d19f      	bne.n	8012666 <rcl_init+0x142>
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	6958      	ldr	r0, [r3, #20]
 801272a:	e7c1      	b.n	80126b0 <rcl_init+0x18c>
 801272c:	200124e8 	.word	0x200124e8

08012730 <rcl_get_zero_initialized_init_options>:
 8012730:	2000      	movs	r0, #0
 8012732:	4770      	bx	lr

08012734 <rcl_init_options_init>:
 8012734:	b084      	sub	sp, #16
 8012736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012738:	b097      	sub	sp, #92	@ 0x5c
 801273a:	ae1d      	add	r6, sp, #116	@ 0x74
 801273c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012740:	2800      	cmp	r0, #0
 8012742:	d058      	beq.n	80127f6 <rcl_init_options_init+0xc2>
 8012744:	6803      	ldr	r3, [r0, #0]
 8012746:	4605      	mov	r5, r0
 8012748:	b133      	cbz	r3, 8012758 <rcl_init_options_init+0x24>
 801274a:	2464      	movs	r4, #100	@ 0x64
 801274c:	4620      	mov	r0, r4
 801274e:	b017      	add	sp, #92	@ 0x5c
 8012750:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012754:	b004      	add	sp, #16
 8012756:	4770      	bx	lr
 8012758:	4630      	mov	r0, r6
 801275a:	f7fb fce9 	bl	800e130 <rcutils_allocator_is_valid>
 801275e:	2800      	cmp	r0, #0
 8012760:	d049      	beq.n	80127f6 <rcl_init_options_init+0xc2>
 8012762:	46b4      	mov	ip, r6
 8012764:	ac11      	add	r4, sp, #68	@ 0x44
 8012766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801276c:	f8dc 3000 	ldr.w	r3, [ip]
 8012770:	2050      	movs	r0, #80	@ 0x50
 8012772:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012778:	4798      	blx	r3
 801277a:	4604      	mov	r4, r0
 801277c:	6028      	str	r0, [r5, #0]
 801277e:	2800      	cmp	r0, #0
 8012780:	d03b      	beq.n	80127fa <rcl_init_options_init+0xc6>
 8012782:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012786:	4686      	mov	lr, r0
 8012788:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801278c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012790:	f8dc 3000 	ldr.w	r3, [ip]
 8012794:	a802      	add	r0, sp, #8
 8012796:	f8ce 3000 	str.w	r3, [lr]
 801279a:	f000 fda5 	bl	80132e8 <rmw_get_zero_initialized_init_options>
 801279e:	f10d 0e08 	add.w	lr, sp, #8
 80127a2:	f104 0c18 	add.w	ip, r4, #24
 80127a6:	682f      	ldr	r7, [r5, #0]
 80127a8:	ac20      	add	r4, sp, #128	@ 0x80
 80127aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127c2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80127c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80127ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80127ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80127d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80127d6:	f107 0018 	add.w	r0, r7, #24
 80127da:	f000 fead 	bl	8013538 <rmw_init_options_init>
 80127de:	4604      	mov	r4, r0
 80127e0:	2800      	cmp	r0, #0
 80127e2:	d0b3      	beq.n	801274c <rcl_init_options_init+0x18>
 80127e4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80127e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80127e8:	6828      	ldr	r0, [r5, #0]
 80127ea:	4798      	blx	r3
 80127ec:	4620      	mov	r0, r4
 80127ee:	f7ff fd6d 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 80127f2:	4604      	mov	r4, r0
 80127f4:	e7aa      	b.n	801274c <rcl_init_options_init+0x18>
 80127f6:	240b      	movs	r4, #11
 80127f8:	e7a8      	b.n	801274c <rcl_init_options_init+0x18>
 80127fa:	240a      	movs	r4, #10
 80127fc:	e7a6      	b.n	801274c <rcl_init_options_init+0x18>
 80127fe:	bf00      	nop

08012800 <rcl_init_options_fini>:
 8012800:	b530      	push	{r4, r5, lr}
 8012802:	b087      	sub	sp, #28
 8012804:	b1f0      	cbz	r0, 8012844 <rcl_init_options_fini+0x44>
 8012806:	6803      	ldr	r3, [r0, #0]
 8012808:	4604      	mov	r4, r0
 801280a:	b1db      	cbz	r3, 8012844 <rcl_init_options_fini+0x44>
 801280c:	469c      	mov	ip, r3
 801280e:	f10d 0e04 	add.w	lr, sp, #4
 8012812:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012816:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801281a:	f8dc 3000 	ldr.w	r3, [ip]
 801281e:	a801      	add	r0, sp, #4
 8012820:	f8ce 3000 	str.w	r3, [lr]
 8012824:	f7fb fc84 	bl	800e130 <rcutils_allocator_is_valid>
 8012828:	b160      	cbz	r0, 8012844 <rcl_init_options_fini+0x44>
 801282a:	6820      	ldr	r0, [r4, #0]
 801282c:	3018      	adds	r0, #24
 801282e:	f000 ff3d 	bl	80136ac <rmw_init_options_fini>
 8012832:	4605      	mov	r5, r0
 8012834:	b950      	cbnz	r0, 801284c <rcl_init_options_fini+0x4c>
 8012836:	6820      	ldr	r0, [r4, #0]
 8012838:	9b02      	ldr	r3, [sp, #8]
 801283a:	9905      	ldr	r1, [sp, #20]
 801283c:	4798      	blx	r3
 801283e:	4628      	mov	r0, r5
 8012840:	b007      	add	sp, #28
 8012842:	bd30      	pop	{r4, r5, pc}
 8012844:	250b      	movs	r5, #11
 8012846:	4628      	mov	r0, r5
 8012848:	b007      	add	sp, #28
 801284a:	bd30      	pop	{r4, r5, pc}
 801284c:	f7ff fd3e 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012850:	4605      	mov	r5, r0
 8012852:	e7f8      	b.n	8012846 <rcl_init_options_fini+0x46>

08012854 <rcl_init_options_copy>:
 8012854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012858:	b094      	sub	sp, #80	@ 0x50
 801285a:	2800      	cmp	r0, #0
 801285c:	d05b      	beq.n	8012916 <rcl_init_options_copy+0xc2>
 801285e:	4604      	mov	r4, r0
 8012860:	6800      	ldr	r0, [r0, #0]
 8012862:	2800      	cmp	r0, #0
 8012864:	d057      	beq.n	8012916 <rcl_init_options_copy+0xc2>
 8012866:	460e      	mov	r6, r1
 8012868:	f7fb fc62 	bl	800e130 <rcutils_allocator_is_valid>
 801286c:	2e00      	cmp	r6, #0
 801286e:	d052      	beq.n	8012916 <rcl_init_options_copy+0xc2>
 8012870:	f080 0001 	eor.w	r0, r0, #1
 8012874:	b2c0      	uxtb	r0, r0
 8012876:	2800      	cmp	r0, #0
 8012878:	d14d      	bne.n	8012916 <rcl_init_options_copy+0xc2>
 801287a:	6833      	ldr	r3, [r6, #0]
 801287c:	b123      	cbz	r3, 8012888 <rcl_init_options_copy+0x34>
 801287e:	2464      	movs	r4, #100	@ 0x64
 8012880:	4620      	mov	r0, r4
 8012882:	b014      	add	sp, #80	@ 0x50
 8012884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012888:	6827      	ldr	r7, [r4, #0]
 801288a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801288c:	46bc      	mov	ip, r7
 801288e:	f8d7 8000 	ldr.w	r8, [r7]
 8012892:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012898:	f8dc 3000 	ldr.w	r3, [ip]
 801289c:	2050      	movs	r0, #80	@ 0x50
 801289e:	4619      	mov	r1, r3
 80128a0:	602b      	str	r3, [r5, #0]
 80128a2:	47c0      	blx	r8
 80128a4:	4605      	mov	r5, r0
 80128a6:	6030      	str	r0, [r6, #0]
 80128a8:	b3d0      	cbz	r0, 8012920 <rcl_init_options_copy+0xcc>
 80128aa:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80128ae:	4686      	mov	lr, r0
 80128b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80128b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80128b8:	f8dc 3000 	ldr.w	r3, [ip]
 80128bc:	4668      	mov	r0, sp
 80128be:	f8ce 3000 	str.w	r3, [lr]
 80128c2:	f000 fd11 	bl	80132e8 <rmw_get_zero_initialized_init_options>
 80128c6:	46ee      	mov	lr, sp
 80128c8:	f105 0c18 	add.w	ip, r5, #24
 80128cc:	6824      	ldr	r4, [r4, #0]
 80128ce:	6835      	ldr	r5, [r6, #0]
 80128d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80128ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80128f0:	f104 0018 	add.w	r0, r4, #24
 80128f4:	f105 0118 	add.w	r1, r5, #24
 80128f8:	f000 fe86 	bl	8013608 <rmw_init_options_copy>
 80128fc:	4604      	mov	r4, r0
 80128fe:	2800      	cmp	r0, #0
 8012900:	d0be      	beq.n	8012880 <rcl_init_options_copy+0x2c>
 8012902:	f7fb fc3b 	bl	800e17c <rcutils_get_error_string>
 8012906:	f7fb fc4f 	bl	800e1a8 <rcutils_reset_error>
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff ff78 	bl	8012800 <rcl_init_options_fini>
 8012910:	b140      	cbz	r0, 8012924 <rcl_init_options_copy+0xd0>
 8012912:	4604      	mov	r4, r0
 8012914:	e7b4      	b.n	8012880 <rcl_init_options_copy+0x2c>
 8012916:	240b      	movs	r4, #11
 8012918:	4620      	mov	r0, r4
 801291a:	b014      	add	sp, #80	@ 0x50
 801291c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012920:	240a      	movs	r4, #10
 8012922:	e7ad      	b.n	8012880 <rcl_init_options_copy+0x2c>
 8012924:	4620      	mov	r0, r4
 8012926:	b014      	add	sp, #80	@ 0x50
 8012928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801292c:	f7ff bcce 	b.w	80122cc <rcl_convert_rmw_ret_to_rcl_ret>

08012930 <rcl_get_localhost_only>:
 8012930:	b510      	push	{r4, lr}
 8012932:	2300      	movs	r3, #0
 8012934:	b082      	sub	sp, #8
 8012936:	9301      	str	r3, [sp, #4]
 8012938:	b1b8      	cbz	r0, 801296a <rcl_get_localhost_only+0x3a>
 801293a:	4604      	mov	r4, r0
 801293c:	a901      	add	r1, sp, #4
 801293e:	480c      	ldr	r0, [pc, #48]	@ (8012970 <rcl_get_localhost_only+0x40>)
 8012940:	f7fb fc04 	bl	800e14c <rcutils_get_env>
 8012944:	b110      	cbz	r0, 801294c <rcl_get_localhost_only+0x1c>
 8012946:	2001      	movs	r0, #1
 8012948:	b002      	add	sp, #8
 801294a:	bd10      	pop	{r4, pc}
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	b113      	cbz	r3, 8012956 <rcl_get_localhost_only+0x26>
 8012950:	781a      	ldrb	r2, [r3, #0]
 8012952:	2a31      	cmp	r2, #49	@ 0x31
 8012954:	d004      	beq.n	8012960 <rcl_get_localhost_only+0x30>
 8012956:	2302      	movs	r3, #2
 8012958:	2000      	movs	r0, #0
 801295a:	7023      	strb	r3, [r4, #0]
 801295c:	b002      	add	sp, #8
 801295e:	bd10      	pop	{r4, pc}
 8012960:	785b      	ldrb	r3, [r3, #1]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d1f7      	bne.n	8012956 <rcl_get_localhost_only+0x26>
 8012966:	2301      	movs	r3, #1
 8012968:	e7f6      	b.n	8012958 <rcl_get_localhost_only+0x28>
 801296a:	200b      	movs	r0, #11
 801296c:	b002      	add	sp, #8
 801296e:	bd10      	pop	{r4, pc}
 8012970:	08018820 	.word	0x08018820

08012974 <rcl_node_resolve_name>:
 8012974:	b082      	sub	sp, #8
 8012976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297a:	b091      	sub	sp, #68	@ 0x44
 801297c:	ac1a      	add	r4, sp, #104	@ 0x68
 801297e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012982:	e884 000c 	stmia.w	r4, {r2, r3}
 8012986:	2800      	cmp	r0, #0
 8012988:	d03d      	beq.n	8012a06 <rcl_node_resolve_name+0x92>
 801298a:	460c      	mov	r4, r1
 801298c:	4605      	mov	r5, r0
 801298e:	f7fb f997 	bl	800dcc0 <rcl_node_get_options>
 8012992:	2800      	cmp	r0, #0
 8012994:	d03a      	beq.n	8012a0c <rcl_node_resolve_name+0x98>
 8012996:	4628      	mov	r0, r5
 8012998:	f7fb f982 	bl	800dca0 <rcl_node_get_name>
 801299c:	4606      	mov	r6, r0
 801299e:	4628      	mov	r0, r5
 80129a0:	ad0b      	add	r5, sp, #44	@ 0x2c
 80129a2:	f7fb f985 	bl	800dcb0 <rcl_node_get_namespace>
 80129a6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80129aa:	4607      	mov	r7, r0
 80129ac:	46ac      	mov	ip, r5
 80129ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129b6:	f8de 3000 	ldr.w	r3, [lr]
 80129ba:	f8cc 3000 	str.w	r3, [ip]
 80129be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129c0:	b30b      	cbz	r3, 8012a06 <rcl_node_resolve_name+0x92>
 80129c2:	4689      	mov	r9, r1
 80129c4:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80129c8:	f000 fafe 	bl	8012fc8 <rcutils_get_zero_initialized_string_map>
 80129cc:	ab10      	add	r3, sp, #64	@ 0x40
 80129ce:	9008      	str	r0, [sp, #32]
 80129d0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80129d4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80129d8:	2100      	movs	r1, #0
 80129da:	a808      	add	r0, sp, #32
 80129dc:	e895 000c 	ldmia.w	r5, {r2, r3}
 80129e0:	f000 fb68 	bl	80130b4 <rcutils_string_map_init>
 80129e4:	4683      	mov	fp, r0
 80129e6:	b1a0      	cbz	r0, 8012a12 <rcl_node_resolve_name+0x9e>
 80129e8:	f7fb fbc8 	bl	800e17c <rcutils_get_error_string>
 80129ec:	f7fb fbdc 	bl	800e1a8 <rcutils_reset_error>
 80129f0:	f1bb 0f0a 	cmp.w	fp, #10
 80129f4:	bf18      	it	ne
 80129f6:	f04f 0b01 	movne.w	fp, #1
 80129fa:	4658      	mov	r0, fp
 80129fc:	b011      	add	sp, #68	@ 0x44
 80129fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a02:	b002      	add	sp, #8
 8012a04:	4770      	bx	lr
 8012a06:	f04f 0b0b 	mov.w	fp, #11
 8012a0a:	e7f6      	b.n	80129fa <rcl_node_resolve_name+0x86>
 8012a0c:	f04f 0b01 	mov.w	fp, #1
 8012a10:	e7f3      	b.n	80129fa <rcl_node_resolve_name+0x86>
 8012a12:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a14:	9007      	str	r0, [sp, #28]
 8012a16:	a808      	add	r0, sp, #32
 8012a18:	f003 fd42 	bl	80164a0 <rcl_get_default_topic_name_substitutions>
 8012a1c:	4683      	mov	fp, r0
 8012a1e:	b180      	cbz	r0, 8012a42 <rcl_node_resolve_name+0xce>
 8012a20:	280a      	cmp	r0, #10
 8012a22:	a808      	add	r0, sp, #32
 8012a24:	bf18      	it	ne
 8012a26:	f04f 0b01 	movne.w	fp, #1
 8012a2a:	f000 fb83 	bl	8013134 <rcutils_string_map_fini>
 8012a2e:	4604      	mov	r4, r0
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d15b      	bne.n	8012aec <rcl_node_resolve_name+0x178>
 8012a34:	4651      	mov	r1, sl
 8012a36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a38:	47c8      	blx	r9
 8012a3a:	4651      	mov	r1, sl
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	47c8      	blx	r9
 8012a40:	e7db      	b.n	80129fa <rcl_node_resolve_name+0x86>
 8012a42:	ab09      	add	r3, sp, #36	@ 0x24
 8012a44:	46ec      	mov	ip, sp
 8012a46:	9305      	str	r3, [sp, #20]
 8012a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a4e:	682b      	ldr	r3, [r5, #0]
 8012a50:	463a      	mov	r2, r7
 8012a52:	4631      	mov	r1, r6
 8012a54:	4620      	mov	r0, r4
 8012a56:	f8cc 3000 	str.w	r3, [ip]
 8012a5a:	ab08      	add	r3, sp, #32
 8012a5c:	f003 fbc0 	bl	80161e0 <rcl_expand_topic_name>
 8012a60:	4683      	mov	fp, r0
 8012a62:	b9d8      	cbnz	r0, 8012a9c <rcl_node_resolve_name+0x128>
 8012a64:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012a66:	4602      	mov	r2, r0
 8012a68:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a6a:	a90a      	add	r1, sp, #40	@ 0x28
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	f000 fc4f 	bl	8013310 <rmw_validate_full_topic_name>
 8012a72:	bb50      	cbnz	r0, 8012aca <rcl_node_resolve_name+0x156>
 8012a74:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012a76:	2d00      	cmp	r5, #0
 8012a78:	d140      	bne.n	8012afc <rcl_node_resolve_name+0x188>
 8012a7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012a7c:	a808      	add	r0, sp, #32
 8012a7e:	601c      	str	r4, [r3, #0]
 8012a80:	f000 fb58 	bl	8013134 <rcutils_string_map_fini>
 8012a84:	4683      	mov	fp, r0
 8012a86:	2800      	cmp	r0, #0
 8012a88:	d043      	beq.n	8012b12 <rcl_node_resolve_name+0x19e>
 8012a8a:	f7fb fb77 	bl	800e17c <rcutils_get_error_string>
 8012a8e:	46a8      	mov	r8, r5
 8012a90:	f04f 0b01 	mov.w	fp, #1
 8012a94:	462c      	mov	r4, r5
 8012a96:	f7fb fb87 	bl	800e1a8 <rcutils_reset_error>
 8012a9a:	e00a      	b.n	8012ab2 <rcl_node_resolve_name+0x13e>
 8012a9c:	2867      	cmp	r0, #103	@ 0x67
 8012a9e:	bf14      	ite	ne
 8012aa0:	f04f 0800 	movne.w	r8, #0
 8012aa4:	f008 0801 	andeq.w	r8, r8, #1
 8012aa8:	9c07      	ldr	r4, [sp, #28]
 8012aaa:	a808      	add	r0, sp, #32
 8012aac:	f000 fb42 	bl	8013134 <rcutils_string_map_fini>
 8012ab0:	bb50      	cbnz	r0, 8012b08 <rcl_node_resolve_name+0x194>
 8012ab2:	4651      	mov	r1, sl
 8012ab4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ab6:	47c8      	blx	r9
 8012ab8:	4651      	mov	r1, sl
 8012aba:	4620      	mov	r0, r4
 8012abc:	47c8      	blx	r9
 8012abe:	f1b8 0f00 	cmp.w	r8, #0
 8012ac2:	bf18      	it	ne
 8012ac4:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8012ac8:	e797      	b.n	80129fa <rcl_node_resolve_name+0x86>
 8012aca:	f7fb fb57 	bl	800e17c <rcutils_get_error_string>
 8012ace:	f7fb fb6b 	bl	800e1a8 <rcutils_reset_error>
 8012ad2:	a808      	add	r0, sp, #32
 8012ad4:	f000 fb2e 	bl	8013134 <rcutils_string_map_fini>
 8012ad8:	b998      	cbnz	r0, 8012b02 <rcl_node_resolve_name+0x18e>
 8012ada:	4651      	mov	r1, sl
 8012adc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ade:	47c8      	blx	r9
 8012ae0:	4651      	mov	r1, sl
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f04f 0b01 	mov.w	fp, #1
 8012ae8:	47c8      	blx	r9
 8012aea:	e786      	b.n	80129fa <rcl_node_resolve_name+0x86>
 8012aec:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012af0:	f7fb fb44 	bl	800e17c <rcutils_get_error_string>
 8012af4:	f7fb fb58 	bl	800e1a8 <rcutils_reset_error>
 8012af8:	4644      	mov	r4, r8
 8012afa:	e7da      	b.n	8012ab2 <rcl_node_resolve_name+0x13e>
 8012afc:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8012b00:	e7d3      	b.n	8012aaa <rcl_node_resolve_name+0x136>
 8012b02:	46d8      	mov	r8, fp
 8012b04:	f04f 0b01 	mov.w	fp, #1
 8012b08:	f7fb fb38 	bl	800e17c <rcutils_get_error_string>
 8012b0c:	f7fb fb4c 	bl	800e1a8 <rcutils_reset_error>
 8012b10:	e7cf      	b.n	8012ab2 <rcl_node_resolve_name+0x13e>
 8012b12:	4651      	mov	r1, sl
 8012b14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b16:	47c8      	blx	r9
 8012b18:	4651      	mov	r1, sl
 8012b1a:	4658      	mov	r0, fp
 8012b1c:	47c8      	blx	r9
 8012b1e:	e76c      	b.n	80129fa <rcl_node_resolve_name+0x86>

08012b20 <exact_match_lookup>:
 8012b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b22:	f102 0708 	add.w	r7, r2, #8
 8012b26:	460b      	mov	r3, r1
 8012b28:	b085      	sub	sp, #20
 8012b2a:	4614      	mov	r4, r2
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012b32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b36:	4618      	mov	r0, r3
 8012b38:	4919      	ldr	r1, [pc, #100]	@ (8012ba0 <exact_match_lookup+0x80>)
 8012b3a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012b3e:	f000 fa35 	bl	8012fac <rcutils_join_path>
 8012b42:	7833      	ldrb	r3, [r6, #0]
 8012b44:	4605      	mov	r5, r0
 8012b46:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b48:	d023      	beq.n	8012b92 <exact_match_lookup+0x72>
 8012b4a:	f104 030c 	add.w	r3, r4, #12
 8012b4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b56:	1c70      	adds	r0, r6, #1
 8012b58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012b5c:	f000 fa2c 	bl	8012fb8 <rcutils_to_native_path>
 8012b60:	4606      	mov	r6, r0
 8012b62:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012b66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b6a:	4631      	mov	r1, r6
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012b72:	f000 fa1b 	bl	8012fac <rcutils_join_path>
 8012b76:	4603      	mov	r3, r0
 8012b78:	4630      	mov	r0, r6
 8012b7a:	6862      	ldr	r2, [r4, #4]
 8012b7c:	461e      	mov	r6, r3
 8012b7e:	6921      	ldr	r1, [r4, #16]
 8012b80:	4790      	blx	r2
 8012b82:	4628      	mov	r0, r5
 8012b84:	4635      	mov	r5, r6
 8012b86:	6863      	ldr	r3, [r4, #4]
 8012b88:	6921      	ldr	r1, [r4, #16]
 8012b8a:	4798      	blx	r3
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	b005      	add	sp, #20
 8012b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b92:	7873      	ldrb	r3, [r6, #1]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d1d8      	bne.n	8012b4a <exact_match_lookup+0x2a>
 8012b98:	4628      	mov	r0, r5
 8012b9a:	b005      	add	sp, #20
 8012b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	08018870 	.word	0x08018870

08012ba4 <rcl_get_secure_root>:
 8012ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ba8:	b085      	sub	sp, #20
 8012baa:	b168      	cbz	r0, 8012bc8 <rcl_get_secure_root+0x24>
 8012bac:	4607      	mov	r7, r0
 8012bae:	4608      	mov	r0, r1
 8012bb0:	460c      	mov	r4, r1
 8012bb2:	f7fb fabd 	bl	800e130 <rcutils_allocator_is_valid>
 8012bb6:	b138      	cbz	r0, 8012bc8 <rcl_get_secure_root+0x24>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	482d      	ldr	r0, [pc, #180]	@ (8012c70 <rcl_get_secure_root+0xcc>)
 8012bbc:	a903      	add	r1, sp, #12
 8012bbe:	9303      	str	r3, [sp, #12]
 8012bc0:	f7fb fac4 	bl	800e14c <rcutils_get_env>
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	b120      	cbz	r0, 8012bd2 <rcl_get_secure_root+0x2e>
 8012bc8:	2500      	movs	r5, #0
 8012bca:	4628      	mov	r0, r5
 8012bcc:	b005      	add	sp, #20
 8012bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bd2:	9b03      	ldr	r3, [sp, #12]
 8012bd4:	781a      	ldrb	r2, [r3, #0]
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	d0f6      	beq.n	8012bc8 <rcl_get_secure_root+0x24>
 8012bda:	f104 090c 	add.w	r9, r4, #12
 8012bde:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012be2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012be6:	4618      	mov	r0, r3
 8012be8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012bec:	f7fb fc32 	bl	800e454 <rcutils_strdup>
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d0e8      	beq.n	8012bc8 <rcl_get_secure_root+0x24>
 8012bf6:	a903      	add	r1, sp, #12
 8012bf8:	481e      	ldr	r0, [pc, #120]	@ (8012c74 <rcl_get_secure_root+0xd0>)
 8012bfa:	9503      	str	r5, [sp, #12]
 8012bfc:	f7fb faa6 	bl	800e14c <rcutils_get_env>
 8012c00:	b160      	cbz	r0, 8012c1c <rcl_get_secure_root+0x78>
 8012c02:	2600      	movs	r6, #0
 8012c04:	4630      	mov	r0, r6
 8012c06:	6863      	ldr	r3, [r4, #4]
 8012c08:	6921      	ldr	r1, [r4, #16]
 8012c0a:	4798      	blx	r3
 8012c0c:	4640      	mov	r0, r8
 8012c0e:	6863      	ldr	r3, [r4, #4]
 8012c10:	6921      	ldr	r1, [r4, #16]
 8012c12:	4798      	blx	r3
 8012c14:	4628      	mov	r0, r5
 8012c16:	b005      	add	sp, #20
 8012c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	781e      	ldrb	r6, [r3, #0]
 8012c20:	b1f6      	cbz	r6, 8012c60 <rcl_get_secure_root+0xbc>
 8012c22:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012c26:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012c30:	f7fb fc10 	bl	800e454 <rcutils_strdup>
 8012c34:	4606      	mov	r6, r0
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d0e3      	beq.n	8012c02 <rcl_get_secure_root+0x5e>
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	4641      	mov	r1, r8
 8012c3e:	f7ff ff6f 	bl	8012b20 <exact_match_lookup>
 8012c42:	4605      	mov	r5, r0
 8012c44:	2d00      	cmp	r5, #0
 8012c46:	d0dd      	beq.n	8012c04 <rcl_get_secure_root+0x60>
 8012c48:	4628      	mov	r0, r5
 8012c4a:	f000 f9ad 	bl	8012fa8 <rcutils_is_directory>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d1d7      	bne.n	8012c04 <rcl_get_secure_root+0x60>
 8012c54:	4628      	mov	r0, r5
 8012c56:	6921      	ldr	r1, [r4, #16]
 8012c58:	461d      	mov	r5, r3
 8012c5a:	6863      	ldr	r3, [r4, #4]
 8012c5c:	4798      	blx	r3
 8012c5e:	e7d1      	b.n	8012c04 <rcl_get_secure_root+0x60>
 8012c60:	4622      	mov	r2, r4
 8012c62:	4638      	mov	r0, r7
 8012c64:	4641      	mov	r1, r8
 8012c66:	f7ff ff5b 	bl	8012b20 <exact_match_lookup>
 8012c6a:	4605      	mov	r5, r0
 8012c6c:	e7ea      	b.n	8012c44 <rcl_get_secure_root+0xa0>
 8012c6e:	bf00      	nop
 8012c70:	0801887c 	.word	0x0801887c
 8012c74:	08018894 	.word	0x08018894

08012c78 <rcl_get_security_options_from_environment>:
 8012c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c7c:	b082      	sub	sp, #8
 8012c7e:	2300      	movs	r3, #0
 8012c80:	4606      	mov	r6, r0
 8012c82:	460f      	mov	r7, r1
 8012c84:	4821      	ldr	r0, [pc, #132]	@ (8012d0c <rcl_get_security_options_from_environment+0x94>)
 8012c86:	a901      	add	r1, sp, #4
 8012c88:	4690      	mov	r8, r2
 8012c8a:	9301      	str	r3, [sp, #4]
 8012c8c:	f7fb fa5e 	bl	800e14c <rcutils_get_env>
 8012c90:	b120      	cbz	r0, 8012c9c <rcl_get_security_options_from_environment+0x24>
 8012c92:	2501      	movs	r5, #1
 8012c94:	4628      	mov	r0, r5
 8012c96:	b002      	add	sp, #8
 8012c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	491c      	ldr	r1, [pc, #112]	@ (8012d10 <rcl_get_security_options_from_environment+0x98>)
 8012ca0:	9801      	ldr	r0, [sp, #4]
 8012ca2:	f7ed facd 	bl	8000240 <strcmp>
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	b9f0      	cbnz	r0, 8012ce8 <rcl_get_security_options_from_environment+0x70>
 8012caa:	9001      	str	r0, [sp, #4]
 8012cac:	f1b8 0f00 	cmp.w	r8, #0
 8012cb0:	d021      	beq.n	8012cf6 <rcl_get_security_options_from_environment+0x7e>
 8012cb2:	a901      	add	r1, sp, #4
 8012cb4:	4817      	ldr	r0, [pc, #92]	@ (8012d14 <rcl_get_security_options_from_environment+0x9c>)
 8012cb6:	f7fb fa49 	bl	800e14c <rcutils_get_env>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	d1e9      	bne.n	8012c92 <rcl_get_security_options_from_environment+0x1a>
 8012cbe:	4916      	ldr	r1, [pc, #88]	@ (8012d18 <rcl_get_security_options_from_environment+0xa0>)
 8012cc0:	9801      	ldr	r0, [sp, #4]
 8012cc2:	f7ed fabd 	bl	8000240 <strcmp>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	4639      	mov	r1, r7
 8012cca:	4630      	mov	r0, r6
 8012ccc:	fab3 f383 	clz	r3, r3
 8012cd0:	095b      	lsrs	r3, r3, #5
 8012cd2:	f888 3000 	strb.w	r3, [r8]
 8012cd6:	f7ff ff65 	bl	8012ba4 <rcl_get_secure_root>
 8012cda:	b170      	cbz	r0, 8012cfa <rcl_get_security_options_from_environment+0x82>
 8012cdc:	f8c8 0004 	str.w	r0, [r8, #4]
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	b002      	add	sp, #8
 8012ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce8:	4625      	mov	r5, r4
 8012cea:	f888 4000 	strb.w	r4, [r8]
 8012cee:	4628      	mov	r0, r5
 8012cf0:	b002      	add	sp, #8
 8012cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf6:	250b      	movs	r5, #11
 8012cf8:	e7cc      	b.n	8012c94 <rcl_get_security_options_from_environment+0x1c>
 8012cfa:	f898 5000 	ldrb.w	r5, [r8]
 8012cfe:	f1a5 0501 	sub.w	r5, r5, #1
 8012d02:	fab5 f585 	clz	r5, r5
 8012d06:	096d      	lsrs	r5, r5, #5
 8012d08:	e7c4      	b.n	8012c94 <rcl_get_security_options_from_environment+0x1c>
 8012d0a:	bf00      	nop
 8012d0c:	08018834 	.word	0x08018834
 8012d10:	08018848 	.word	0x08018848
 8012d14:	08018850 	.word	0x08018850
 8012d18:	08018868 	.word	0x08018868

08012d1c <rcl_get_system_time>:
 8012d1c:	4608      	mov	r0, r1
 8012d1e:	f000 ba81 	b.w	8013224 <rcutils_system_time_now>
 8012d22:	bf00      	nop

08012d24 <rcl_get_steady_time>:
 8012d24:	4608      	mov	r0, r1
 8012d26:	f000 baa3 	b.w	8013270 <rcutils_steady_time_now>
 8012d2a:	bf00      	nop

08012d2c <rcl_get_ros_time>:
 8012d2c:	7a03      	ldrb	r3, [r0, #8]
 8012d2e:	b510      	push	{r4, lr}
 8012d30:	460c      	mov	r4, r1
 8012d32:	b143      	cbz	r3, 8012d46 <rcl_get_ros_time+0x1a>
 8012d34:	2105      	movs	r1, #5
 8012d36:	f000 f901 	bl	8012f3c <__atomic_load_8>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	2000      	movs	r0, #0
 8012d40:	e9c4 2300 	strd	r2, r3, [r4]
 8012d44:	bd10      	pop	{r4, pc}
 8012d46:	4608      	mov	r0, r1
 8012d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d4c:	f000 ba6a 	b.w	8013224 <rcutils_system_time_now>

08012d50 <rcl_clock_init>:
 8012d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d52:	4605      	mov	r5, r0
 8012d54:	4610      	mov	r0, r2
 8012d56:	4614      	mov	r4, r2
 8012d58:	460e      	mov	r6, r1
 8012d5a:	f7fb f9e9 	bl	800e130 <rcutils_allocator_is_valid>
 8012d5e:	b128      	cbz	r0, 8012d6c <rcl_clock_init+0x1c>
 8012d60:	2d03      	cmp	r5, #3
 8012d62:	d803      	bhi.n	8012d6c <rcl_clock_init+0x1c>
 8012d64:	e8df f005 	tbb	[pc, r5]
 8012d68:	0659301f 	.word	0x0659301f
 8012d6c:	f04f 0c0b 	mov.w	ip, #11
 8012d70:	4660      	mov	r0, ip
 8012d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d74:	2c00      	cmp	r4, #0
 8012d76:	d0f9      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012d78:	fab6 f386 	clz	r3, r6
 8012d7c:	095b      	lsrs	r3, r3, #5
 8012d7e:	2e00      	cmp	r6, #0
 8012d80:	d0f4      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012d82:	6133      	str	r3, [r6, #16]
 8012d84:	469c      	mov	ip, r3
 8012d86:	f106 0514 	add.w	r5, r6, #20
 8012d8a:	4f32      	ldr	r7, [pc, #200]	@ (8012e54 <rcl_clock_init+0x104>)
 8012d8c:	f04f 0e03 	mov.w	lr, #3
 8012d90:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	4660      	mov	r0, ip
 8012d9c:	602b      	str	r3, [r5, #0]
 8012d9e:	60f7      	str	r7, [r6, #12]
 8012da0:	f886 e000 	strb.w	lr, [r6]
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	d0e0      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012daa:	2300      	movs	r3, #0
 8012dac:	f106 0514 	add.w	r5, r6, #20
 8012db0:	7033      	strb	r3, [r6, #0]
 8012db2:	469c      	mov	ip, r3
 8012db4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012db8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dc0:	6823      	ldr	r3, [r4, #0]
 8012dc2:	4660      	mov	r0, ip
 8012dc4:	602b      	str	r3, [r5, #0]
 8012dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dc8:	2c00      	cmp	r4, #0
 8012dca:	d0cf      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012dcc:	fab6 f586 	clz	r5, r6
 8012dd0:	096d      	lsrs	r5, r5, #5
 8012dd2:	2e00      	cmp	r6, #0
 8012dd4:	d0ca      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012dd6:	46a6      	mov	lr, r4
 8012dd8:	7035      	strb	r5, [r6, #0]
 8012dda:	f106 0c14 	add.w	ip, r6, #20
 8012dde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012de2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012de6:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8012dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dee:	f8de 3000 	ldr.w	r3, [lr]
 8012df2:	2010      	movs	r0, #16
 8012df4:	f8cc 3000 	str.w	r3, [ip]
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	6921      	ldr	r1, [r4, #16]
 8012dfc:	4798      	blx	r3
 8012dfe:	6130      	str	r0, [r6, #16]
 8012e00:	b320      	cbz	r0, 8012e4c <rcl_clock_init+0xfc>
 8012e02:	2200      	movs	r2, #0
 8012e04:	2300      	movs	r3, #0
 8012e06:	46ac      	mov	ip, r5
 8012e08:	7205      	strb	r5, [r0, #8]
 8012e0a:	e9c0 2300 	strd	r2, r3, [r0]
 8012e0e:	4a12      	ldr	r2, [pc, #72]	@ (8012e58 <rcl_clock_init+0x108>)
 8012e10:	2301      	movs	r3, #1
 8012e12:	4660      	mov	r0, ip
 8012e14:	60f2      	str	r2, [r6, #12]
 8012e16:	7033      	strb	r3, [r6, #0]
 8012e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e1a:	2c00      	cmp	r4, #0
 8012e1c:	d0a6      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012e1e:	fab6 f386 	clz	r3, r6
 8012e22:	095b      	lsrs	r3, r3, #5
 8012e24:	2e00      	cmp	r6, #0
 8012e26:	d0a1      	beq.n	8012d6c <rcl_clock_init+0x1c>
 8012e28:	6133      	str	r3, [r6, #16]
 8012e2a:	469c      	mov	ip, r3
 8012e2c:	f106 0514 	add.w	r5, r6, #20
 8012e30:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8012e5c <rcl_clock_init+0x10c>
 8012e34:	2702      	movs	r7, #2
 8012e36:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e3e:	6823      	ldr	r3, [r4, #0]
 8012e40:	4660      	mov	r0, ip
 8012e42:	602b      	str	r3, [r5, #0]
 8012e44:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012e48:	7037      	strb	r7, [r6, #0]
 8012e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e4c:	f04f 0c0a 	mov.w	ip, #10
 8012e50:	e78e      	b.n	8012d70 <rcl_clock_init+0x20>
 8012e52:	bf00      	nop
 8012e54:	08012d25 	.word	0x08012d25
 8012e58:	08012d2d 	.word	0x08012d2d
 8012e5c:	08012d1d 	.word	0x08012d1d

08012e60 <rcl_validate_enclave_name_with_size>:
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d049      	beq.n	8012ef8 <rcl_validate_enclave_name_with_size+0x98>
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	4615      	mov	r5, r2
 8012e68:	b0c2      	sub	sp, #264	@ 0x108
 8012e6a:	b19a      	cbz	r2, 8012e94 <rcl_validate_enclave_name_with_size+0x34>
 8012e6c:	461e      	mov	r6, r3
 8012e6e:	466a      	mov	r2, sp
 8012e70:	ab01      	add	r3, sp, #4
 8012e72:	460c      	mov	r4, r1
 8012e74:	f7fb fb30 	bl	800e4d8 <rmw_validate_namespace_with_size>
 8012e78:	4684      	mov	ip, r0
 8012e7a:	b9b8      	cbnz	r0, 8012eac <rcl_validate_enclave_name_with_size+0x4c>
 8012e7c:	9900      	ldr	r1, [sp, #0]
 8012e7e:	b171      	cbz	r1, 8012e9e <rcl_validate_enclave_name_with_size+0x3e>
 8012e80:	2907      	cmp	r1, #7
 8012e82:	d019      	beq.n	8012eb8 <rcl_validate_enclave_name_with_size+0x58>
 8012e84:	1e4b      	subs	r3, r1, #1
 8012e86:	2b05      	cmp	r3, #5
 8012e88:	d83a      	bhi.n	8012f00 <rcl_validate_enclave_name_with_size+0xa0>
 8012e8a:	e8df f003 	tbb	[pc, r3]
 8012e8e:	2926      	.short	0x2926
 8012e90:	1d322f2c 	.word	0x1d322f2c
 8012e94:	f04f 0c0b 	mov.w	ip, #11
 8012e98:	4660      	mov	r0, ip
 8012e9a:	b042      	add	sp, #264	@ 0x108
 8012e9c:	bd70      	pop	{r4, r5, r6, pc}
 8012e9e:	2907      	cmp	r1, #7
 8012ea0:	d00a      	beq.n	8012eb8 <rcl_validate_enclave_name_with_size+0x58>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	4660      	mov	r0, ip
 8012ea6:	602b      	str	r3, [r5, #0]
 8012ea8:	b042      	add	sp, #264	@ 0x108
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	f7ff fa0e 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 8012eb0:	4684      	mov	ip, r0
 8012eb2:	4660      	mov	r0, ip
 8012eb4:	b042      	add	sp, #264	@ 0x108
 8012eb6:	bd70      	pop	{r4, r5, r6, pc}
 8012eb8:	2cff      	cmp	r4, #255	@ 0xff
 8012eba:	d9f2      	bls.n	8012ea2 <rcl_validate_enclave_name_with_size+0x42>
 8012ebc:	6029      	str	r1, [r5, #0]
 8012ebe:	2e00      	cmp	r6, #0
 8012ec0:	d0ea      	beq.n	8012e98 <rcl_validate_enclave_name_with_size+0x38>
 8012ec2:	23fe      	movs	r3, #254	@ 0xfe
 8012ec4:	6033      	str	r3, [r6, #0]
 8012ec6:	e7e7      	b.n	8012e98 <rcl_validate_enclave_name_with_size+0x38>
 8012ec8:	2306      	movs	r3, #6
 8012eca:	602b      	str	r3, [r5, #0]
 8012ecc:	2e00      	cmp	r6, #0
 8012ece:	d0e3      	beq.n	8012e98 <rcl_validate_enclave_name_with_size+0x38>
 8012ed0:	9b01      	ldr	r3, [sp, #4]
 8012ed2:	4660      	mov	r0, ip
 8012ed4:	6033      	str	r3, [r6, #0]
 8012ed6:	b042      	add	sp, #264	@ 0x108
 8012ed8:	bd70      	pop	{r4, r5, r6, pc}
 8012eda:	2301      	movs	r3, #1
 8012edc:	602b      	str	r3, [r5, #0]
 8012ede:	e7f5      	b.n	8012ecc <rcl_validate_enclave_name_with_size+0x6c>
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	602b      	str	r3, [r5, #0]
 8012ee4:	e7f2      	b.n	8012ecc <rcl_validate_enclave_name_with_size+0x6c>
 8012ee6:	2303      	movs	r3, #3
 8012ee8:	602b      	str	r3, [r5, #0]
 8012eea:	e7ef      	b.n	8012ecc <rcl_validate_enclave_name_with_size+0x6c>
 8012eec:	2304      	movs	r3, #4
 8012eee:	602b      	str	r3, [r5, #0]
 8012ef0:	e7ec      	b.n	8012ecc <rcl_validate_enclave_name_with_size+0x6c>
 8012ef2:	2305      	movs	r3, #5
 8012ef4:	602b      	str	r3, [r5, #0]
 8012ef6:	e7e9      	b.n	8012ecc <rcl_validate_enclave_name_with_size+0x6c>
 8012ef8:	f04f 0c0b 	mov.w	ip, #11
 8012efc:	4660      	mov	r0, ip
 8012efe:	4770      	bx	lr
 8012f00:	460b      	mov	r3, r1
 8012f02:	4a04      	ldr	r2, [pc, #16]	@ (8012f14 <rcl_validate_enclave_name_with_size+0xb4>)
 8012f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f08:	a802      	add	r0, sp, #8
 8012f0a:	f7fb fa55 	bl	800e3b8 <rcutils_snprintf>
 8012f0e:	f04f 0c01 	mov.w	ip, #1
 8012f12:	e7c1      	b.n	8012e98 <rcl_validate_enclave_name_with_size+0x38>
 8012f14:	080188b4 	.word	0x080188b4

08012f18 <rcl_validate_enclave_name>:
 8012f18:	b168      	cbz	r0, 8012f36 <rcl_validate_enclave_name+0x1e>
 8012f1a:	b570      	push	{r4, r5, r6, lr}
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	4616      	mov	r6, r2
 8012f20:	4604      	mov	r4, r0
 8012f22:	f7ed f997 	bl	8000254 <strlen>
 8012f26:	4633      	mov	r3, r6
 8012f28:	4601      	mov	r1, r0
 8012f2a:	462a      	mov	r2, r5
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f32:	f7ff bf95 	b.w	8012e60 <rcl_validate_enclave_name_with_size>
 8012f36:	200b      	movs	r0, #11
 8012f38:	4770      	bx	lr
 8012f3a:	bf00      	nop

08012f3c <__atomic_load_8>:
 8012f3c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f40:	4a16      	ldr	r2, [pc, #88]	@ (8012f9c <__atomic_load_8+0x60>)
 8012f42:	4b17      	ldr	r3, [pc, #92]	@ (8012fa0 <__atomic_load_8+0x64>)
 8012f44:	f04f 0c01 	mov.w	ip, #1
 8012f48:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f4c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f50:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f54:	fb02 f101 	mul.w	r1, r2, r1
 8012f58:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012f5c:	fba3 2301 	umull	r2, r3, r3, r1
 8012f60:	091b      	lsrs	r3, r3, #4
 8012f62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012f66:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012f6a:	b4d0      	push	{r4, r6, r7}
 8012f6c:	1ac9      	subs	r1, r1, r3
 8012f6e:	4c0d      	ldr	r4, [pc, #52]	@ (8012fa4 <__atomic_load_8+0x68>)
 8012f70:	1862      	adds	r2, r4, r1
 8012f72:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012f76:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012f7a:	2e00      	cmp	r6, #0
 8012f7c:	d1f9      	bne.n	8012f72 <__atomic_load_8+0x36>
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	f3bf 8f5b 	dmb	ish
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1f4      	bne.n	8012f72 <__atomic_load_8+0x36>
 8012f88:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012f8c:	f3bf 8f5b 	dmb	ish
 8012f90:	5463      	strb	r3, [r4, r1]
 8012f92:	4630      	mov	r0, r6
 8012f94:	4639      	mov	r1, r7
 8012f96:	bcd0      	pop	{r4, r6, r7}
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	27d4eb2d 	.word	0x27d4eb2d
 8012fa0:	b21642c9 	.word	0xb21642c9
 8012fa4:	200124ec 	.word	0x200124ec

08012fa8 <rcutils_is_directory>:
 8012fa8:	2000      	movs	r0, #0
 8012faa:	4770      	bx	lr

08012fac <rcutils_join_path>:
 8012fac:	b082      	sub	sp, #8
 8012fae:	2000      	movs	r0, #0
 8012fb0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012fb4:	b002      	add	sp, #8
 8012fb6:	4770      	bx	lr

08012fb8 <rcutils_to_native_path>:
 8012fb8:	b084      	sub	sp, #16
 8012fba:	2000      	movs	r0, #0
 8012fbc:	f10d 0c04 	add.w	ip, sp, #4
 8012fc0:	b004      	add	sp, #16
 8012fc2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012fc6:	4770      	bx	lr

08012fc8 <rcutils_get_zero_initialized_string_map>:
 8012fc8:	2000      	movs	r0, #0
 8012fca:	4b01      	ldr	r3, [pc, #4]	@ (8012fd0 <rcutils_get_zero_initialized_string_map+0x8>)
 8012fcc:	6018      	str	r0, [r3, #0]
 8012fce:	4770      	bx	lr
 8012fd0:	20012504 	.word	0x20012504

08012fd4 <rcutils_string_map_reserve>:
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d05e      	beq.n	8013096 <rcutils_string_map_reserve+0xc2>
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	460c      	mov	r4, r1
 8012fde:	6801      	ldr	r1, [r0, #0]
 8012fe0:	b082      	sub	sp, #8
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	b129      	cbz	r1, 8012ff2 <rcutils_string_map_reserve+0x1e>
 8012fe6:	68cb      	ldr	r3, [r1, #12]
 8012fe8:	42a3      	cmp	r3, r4
 8012fea:	d906      	bls.n	8012ffa <rcutils_string_map_reserve+0x26>
 8012fec:	461c      	mov	r4, r3
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	d1f9      	bne.n	8012fe6 <rcutils_string_map_reserve+0x12>
 8012ff2:	201f      	movs	r0, #31
 8012ff4:	b002      	add	sp, #8
 8012ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffa:	688b      	ldr	r3, [r1, #8]
 8012ffc:	42a3      	cmp	r3, r4
 8012ffe:	d046      	beq.n	801308e <rcutils_string_map_reserve+0xba>
 8013000:	6a0e      	ldr	r6, [r1, #32]
 8013002:	2c00      	cmp	r4, #0
 8013004:	d033      	beq.n	801306e <rcutils_string_map_reserve+0x9a>
 8013006:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801300a:	d242      	bcs.n	8013092 <rcutils_string_map_reserve+0xbe>
 801300c:	00a7      	lsls	r7, r4, #2
 801300e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013012:	6808      	ldr	r0, [r1, #0]
 8013014:	4632      	mov	r2, r6
 8013016:	4639      	mov	r1, r7
 8013018:	47c0      	blx	r8
 801301a:	2800      	cmp	r0, #0
 801301c:	d039      	beq.n	8013092 <rcutils_string_map_reserve+0xbe>
 801301e:	682b      	ldr	r3, [r5, #0]
 8013020:	4632      	mov	r2, r6
 8013022:	4639      	mov	r1, r7
 8013024:	6018      	str	r0, [r3, #0]
 8013026:	6858      	ldr	r0, [r3, #4]
 8013028:	47c0      	blx	r8
 801302a:	2800      	cmp	r0, #0
 801302c:	d031      	beq.n	8013092 <rcutils_string_map_reserve+0xbe>
 801302e:	682d      	ldr	r5, [r5, #0]
 8013030:	68ab      	ldr	r3, [r5, #8]
 8013032:	6068      	str	r0, [r5, #4]
 8013034:	42a3      	cmp	r3, r4
 8013036:	d225      	bcs.n	8013084 <rcutils_string_map_reserve+0xb0>
 8013038:	682a      	ldr	r2, [r5, #0]
 801303a:	eb00 0c07 	add.w	ip, r0, r7
 801303e:	0099      	lsls	r1, r3, #2
 8013040:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8013044:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013048:	45e6      	cmp	lr, ip
 801304a:	d203      	bcs.n	8013054 <rcutils_string_map_reserve+0x80>
 801304c:	eb02 0c07 	add.w	ip, r2, r7
 8013050:	4566      	cmp	r6, ip
 8013052:	d322      	bcc.n	801309a <rcutils_string_map_reserve+0xc6>
 8013054:	1ae3      	subs	r3, r4, r3
 8013056:	4670      	mov	r0, lr
 8013058:	2100      	movs	r1, #0
 801305a:	009a      	lsls	r2, r3, #2
 801305c:	9201      	str	r2, [sp, #4]
 801305e:	f004 f891 	bl	8017184 <memset>
 8013062:	9a01      	ldr	r2, [sp, #4]
 8013064:	2100      	movs	r1, #0
 8013066:	4630      	mov	r0, r6
 8013068:	f004 f88c 	bl	8017184 <memset>
 801306c:	e00a      	b.n	8013084 <rcutils_string_map_reserve+0xb0>
 801306e:	694f      	ldr	r7, [r1, #20]
 8013070:	6808      	ldr	r0, [r1, #0]
 8013072:	4631      	mov	r1, r6
 8013074:	47b8      	blx	r7
 8013076:	682b      	ldr	r3, [r5, #0]
 8013078:	4631      	mov	r1, r6
 801307a:	6858      	ldr	r0, [r3, #4]
 801307c:	601c      	str	r4, [r3, #0]
 801307e:	47b8      	blx	r7
 8013080:	682d      	ldr	r5, [r5, #0]
 8013082:	606c      	str	r4, [r5, #4]
 8013084:	2000      	movs	r0, #0
 8013086:	60ac      	str	r4, [r5, #8]
 8013088:	b002      	add	sp, #8
 801308a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801308e:	2000      	movs	r0, #0
 8013090:	e7b0      	b.n	8012ff4 <rcutils_string_map_reserve+0x20>
 8013092:	200a      	movs	r0, #10
 8013094:	e7ae      	b.n	8012ff4 <rcutils_string_map_reserve+0x20>
 8013096:	200b      	movs	r0, #11
 8013098:	4770      	bx	lr
 801309a:	1f0b      	subs	r3, r1, #4
 801309c:	4418      	add	r0, r3
 801309e:	4413      	add	r3, r2
 80130a0:	3a04      	subs	r2, #4
 80130a2:	4417      	add	r7, r2
 80130a4:	2200      	movs	r2, #0
 80130a6:	f843 2f04 	str.w	r2, [r3, #4]!
 80130aa:	42bb      	cmp	r3, r7
 80130ac:	f840 2f04 	str.w	r2, [r0, #4]!
 80130b0:	d1f9      	bne.n	80130a6 <rcutils_string_map_reserve+0xd2>
 80130b2:	e7e7      	b.n	8013084 <rcutils_string_map_reserve+0xb0>

080130b4 <rcutils_string_map_init>:
 80130b4:	b082      	sub	sp, #8
 80130b6:	b570      	push	{r4, r5, r6, lr}
 80130b8:	ac04      	add	r4, sp, #16
 80130ba:	e884 000c 	stmia.w	r4, {r2, r3}
 80130be:	b380      	cbz	r0, 8013122 <rcutils_string_map_init+0x6e>
 80130c0:	6806      	ldr	r6, [r0, #0]
 80130c2:	4604      	mov	r4, r0
 80130c4:	b12e      	cbz	r6, 80130d2 <rcutils_string_map_init+0x1e>
 80130c6:	251e      	movs	r5, #30
 80130c8:	4628      	mov	r0, r5
 80130ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130ce:	b002      	add	sp, #8
 80130d0:	4770      	bx	lr
 80130d2:	a804      	add	r0, sp, #16
 80130d4:	460d      	mov	r5, r1
 80130d6:	f7fb f82b 	bl	800e130 <rcutils_allocator_is_valid>
 80130da:	b310      	cbz	r0, 8013122 <rcutils_string_map_init+0x6e>
 80130dc:	9b04      	ldr	r3, [sp, #16]
 80130de:	2024      	movs	r0, #36	@ 0x24
 80130e0:	9908      	ldr	r1, [sp, #32]
 80130e2:	4798      	blx	r3
 80130e4:	6020      	str	r0, [r4, #0]
 80130e6:	b310      	cbz	r0, 801312e <rcutils_string_map_init+0x7a>
 80130e8:	f10d 0e10 	add.w	lr, sp, #16
 80130ec:	f100 0c10 	add.w	ip, r0, #16
 80130f0:	e9c0 6600 	strd	r6, r6, [r0]
 80130f4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80130f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013100:	f8de 3000 	ldr.w	r3, [lr]
 8013104:	4629      	mov	r1, r5
 8013106:	4620      	mov	r0, r4
 8013108:	f8cc 3000 	str.w	r3, [ip]
 801310c:	f7ff ff62 	bl	8012fd4 <rcutils_string_map_reserve>
 8013110:	4605      	mov	r5, r0
 8013112:	2800      	cmp	r0, #0
 8013114:	d0d8      	beq.n	80130c8 <rcutils_string_map_init+0x14>
 8013116:	9b05      	ldr	r3, [sp, #20]
 8013118:	9908      	ldr	r1, [sp, #32]
 801311a:	6820      	ldr	r0, [r4, #0]
 801311c:	4798      	blx	r3
 801311e:	6026      	str	r6, [r4, #0]
 8013120:	e7d2      	b.n	80130c8 <rcutils_string_map_init+0x14>
 8013122:	250b      	movs	r5, #11
 8013124:	4628      	mov	r0, r5
 8013126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801312a:	b002      	add	sp, #8
 801312c:	4770      	bx	lr
 801312e:	250a      	movs	r5, #10
 8013130:	e7ca      	b.n	80130c8 <rcutils_string_map_init+0x14>
 8013132:	bf00      	nop

08013134 <rcutils_string_map_fini>:
 8013134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013138:	b082      	sub	sp, #8
 801313a:	2800      	cmp	r0, #0
 801313c:	d03a      	beq.n	80131b4 <rcutils_string_map_fini+0x80>
 801313e:	6804      	ldr	r4, [r0, #0]
 8013140:	4606      	mov	r6, r0
 8013142:	2c00      	cmp	r4, #0
 8013144:	d032      	beq.n	80131ac <rcutils_string_map_fini+0x78>
 8013146:	68a3      	ldr	r3, [r4, #8]
 8013148:	b32b      	cbz	r3, 8013196 <rcutils_string_map_fini+0x62>
 801314a:	2500      	movs	r5, #0
 801314c:	6822      	ldr	r2, [r4, #0]
 801314e:	462f      	mov	r7, r5
 8013150:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013154:	b1e0      	cbz	r0, 8013190 <rcutils_string_map_fini+0x5c>
 8013156:	6a21      	ldr	r1, [r4, #32]
 8013158:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801315c:	9101      	str	r1, [sp, #4]
 801315e:	47c0      	blx	r8
 8013160:	9901      	ldr	r1, [sp, #4]
 8013162:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013166:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801316a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801316e:	47c0      	blx	r8
 8013170:	68e3      	ldr	r3, [r4, #12]
 8013172:	6862      	ldr	r2, [r4, #4]
 8013174:	3b01      	subs	r3, #1
 8013176:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801317a:	3501      	adds	r5, #1
 801317c:	60e3      	str	r3, [r4, #12]
 801317e:	6834      	ldr	r4, [r6, #0]
 8013180:	68a3      	ldr	r3, [r4, #8]
 8013182:	429d      	cmp	r5, r3
 8013184:	d207      	bcs.n	8013196 <rcutils_string_map_fini+0x62>
 8013186:	6822      	ldr	r2, [r4, #0]
 8013188:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801318c:	2800      	cmp	r0, #0
 801318e:	d1e2      	bne.n	8013156 <rcutils_string_map_fini+0x22>
 8013190:	3501      	adds	r5, #1
 8013192:	429d      	cmp	r5, r3
 8013194:	d3dc      	bcc.n	8013150 <rcutils_string_map_fini+0x1c>
 8013196:	2100      	movs	r1, #0
 8013198:	4630      	mov	r0, r6
 801319a:	f7ff ff1b 	bl	8012fd4 <rcutils_string_map_reserve>
 801319e:	4604      	mov	r4, r0
 80131a0:	b920      	cbnz	r0, 80131ac <rcutils_string_map_fini+0x78>
 80131a2:	6830      	ldr	r0, [r6, #0]
 80131a4:	6943      	ldr	r3, [r0, #20]
 80131a6:	6a01      	ldr	r1, [r0, #32]
 80131a8:	4798      	blx	r3
 80131aa:	6034      	str	r4, [r6, #0]
 80131ac:	4620      	mov	r0, r4
 80131ae:	b002      	add	sp, #8
 80131b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b4:	240b      	movs	r4, #11
 80131b6:	4620      	mov	r0, r4
 80131b8:	b002      	add	sp, #8
 80131ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131be:	bf00      	nop

080131c0 <rcutils_string_map_getn>:
 80131c0:	b378      	cbz	r0, 8013222 <rcutils_string_map_getn+0x62>
 80131c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c6:	f8d0 b000 	ldr.w	fp, [r0]
 80131ca:	f1bb 0f00 	cmp.w	fp, #0
 80131ce:	d01f      	beq.n	8013210 <rcutils_string_map_getn+0x50>
 80131d0:	fab1 f481 	clz	r4, r1
 80131d4:	4688      	mov	r8, r1
 80131d6:	0964      	lsrs	r4, r4, #5
 80131d8:	b1d1      	cbz	r1, 8013210 <rcutils_string_map_getn+0x50>
 80131da:	f8db 7008 	ldr.w	r7, [fp, #8]
 80131de:	f8db 6000 	ldr.w	r6, [fp]
 80131e2:	b1af      	cbz	r7, 8013210 <rcutils_string_map_getn+0x50>
 80131e4:	4691      	mov	r9, r2
 80131e6:	3e04      	subs	r6, #4
 80131e8:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80131ec:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80131f0:	3401      	adds	r4, #1
 80131f2:	4628      	mov	r0, r5
 80131f4:	b155      	cbz	r5, 801320c <rcutils_string_map_getn+0x4c>
 80131f6:	f7ed f82d 	bl	8000254 <strlen>
 80131fa:	4602      	mov	r2, r0
 80131fc:	4629      	mov	r1, r5
 80131fe:	4640      	mov	r0, r8
 8013200:	454a      	cmp	r2, r9
 8013202:	bf38      	it	cc
 8013204:	464a      	movcc	r2, r9
 8013206:	f003 ffd2 	bl	80171ae <strncmp>
 801320a:	b120      	cbz	r0, 8013216 <rcutils_string_map_getn+0x56>
 801320c:	42a7      	cmp	r7, r4
 801320e:	d1eb      	bne.n	80131e8 <rcutils_string_map_getn+0x28>
 8013210:	2000      	movs	r0, #0
 8013212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013216:	f8db 3004 	ldr.w	r3, [fp, #4]
 801321a:	f853 000a 	ldr.w	r0, [r3, sl]
 801321e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	4770      	bx	lr

08013224 <rcutils_system_time_now>:
 8013224:	b300      	cbz	r0, 8013268 <rcutils_system_time_now+0x44>
 8013226:	b570      	push	{r4, r5, r6, lr}
 8013228:	b084      	sub	sp, #16
 801322a:	4604      	mov	r4, r0
 801322c:	2001      	movs	r0, #1
 801322e:	4669      	mov	r1, sp
 8013230:	f7ee f89a 	bl	8001368 <clock_gettime>
 8013234:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013238:	2900      	cmp	r1, #0
 801323a:	db12      	blt.n	8013262 <rcutils_system_time_now+0x3e>
 801323c:	ea53 0201 	orrs.w	r2, r3, r1
 8013240:	9d02      	ldr	r5, [sp, #8]
 8013242:	d101      	bne.n	8013248 <rcutils_system_time_now+0x24>
 8013244:	2d00      	cmp	r5, #0
 8013246:	db0c      	blt.n	8013262 <rcutils_system_time_now+0x3e>
 8013248:	4e08      	ldr	r6, [pc, #32]	@ (801326c <rcutils_system_time_now+0x48>)
 801324a:	2000      	movs	r0, #0
 801324c:	fba3 3206 	umull	r3, r2, r3, r6
 8013250:	195b      	adds	r3, r3, r5
 8013252:	fb06 2201 	mla	r2, r6, r1, r2
 8013256:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801325a:	e9c4 3200 	strd	r3, r2, [r4]
 801325e:	b004      	add	sp, #16
 8013260:	bd70      	pop	{r4, r5, r6, pc}
 8013262:	2002      	movs	r0, #2
 8013264:	b004      	add	sp, #16
 8013266:	bd70      	pop	{r4, r5, r6, pc}
 8013268:	200b      	movs	r0, #11
 801326a:	4770      	bx	lr
 801326c:	3b9aca00 	.word	0x3b9aca00

08013270 <rcutils_steady_time_now>:
 8013270:	b300      	cbz	r0, 80132b4 <rcutils_steady_time_now+0x44>
 8013272:	b570      	push	{r4, r5, r6, lr}
 8013274:	b084      	sub	sp, #16
 8013276:	4604      	mov	r4, r0
 8013278:	2000      	movs	r0, #0
 801327a:	4669      	mov	r1, sp
 801327c:	f7ee f874 	bl	8001368 <clock_gettime>
 8013280:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013284:	2900      	cmp	r1, #0
 8013286:	db12      	blt.n	80132ae <rcutils_steady_time_now+0x3e>
 8013288:	ea53 0201 	orrs.w	r2, r3, r1
 801328c:	9d02      	ldr	r5, [sp, #8]
 801328e:	d101      	bne.n	8013294 <rcutils_steady_time_now+0x24>
 8013290:	2d00      	cmp	r5, #0
 8013292:	db0c      	blt.n	80132ae <rcutils_steady_time_now+0x3e>
 8013294:	4e08      	ldr	r6, [pc, #32]	@ (80132b8 <rcutils_steady_time_now+0x48>)
 8013296:	2000      	movs	r0, #0
 8013298:	fba3 3206 	umull	r3, r2, r3, r6
 801329c:	195b      	adds	r3, r3, r5
 801329e:	fb06 2201 	mla	r2, r6, r1, r2
 80132a2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80132a6:	e9c4 3200 	strd	r3, r2, [r4]
 80132aa:	b004      	add	sp, #16
 80132ac:	bd70      	pop	{r4, r5, r6, pc}
 80132ae:	2002      	movs	r0, #2
 80132b0:	b004      	add	sp, #16
 80132b2:	bd70      	pop	{r4, r5, r6, pc}
 80132b4:	200b      	movs	r0, #11
 80132b6:	4770      	bx	lr
 80132b8:	3b9aca00 	.word	0x3b9aca00
 80132bc:	00000000 	.word	0x00000000

080132c0 <rmw_get_zero_initialized_context>:
 80132c0:	b510      	push	{r4, lr}
 80132c2:	4604      	mov	r4, r0
 80132c4:	3010      	adds	r0, #16
 80132c6:	f000 f80f 	bl	80132e8 <rmw_get_zero_initialized_init_options>
 80132ca:	2300      	movs	r3, #0
 80132cc:	4620      	mov	r0, r4
 80132ce:	60a3      	str	r3, [r4, #8]
 80132d0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80132d2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80132d4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 80132e0 <rmw_get_zero_initialized_context+0x20>
 80132d8:	ed84 7b00 	vstr	d7, [r4]
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	bf00      	nop
	...

080132e8 <rmw_get_zero_initialized_init_options>:
 80132e8:	b510      	push	{r4, lr}
 80132ea:	4604      	mov	r4, r0
 80132ec:	2238      	movs	r2, #56	@ 0x38
 80132ee:	2100      	movs	r1, #0
 80132f0:	f003 ff48 	bl	8017184 <memset>
 80132f4:	f104 0010 	add.w	r0, r4, #16
 80132f8:	f000 f806 	bl	8013308 <rmw_get_default_security_options>
 80132fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013300:	4620      	mov	r0, r4
 8013302:	60e3      	str	r3, [r4, #12]
 8013304:	bd10      	pop	{r4, pc}
 8013306:	bf00      	nop

08013308 <rmw_get_default_security_options>:
 8013308:	2200      	movs	r2, #0
 801330a:	7002      	strb	r2, [r0, #0]
 801330c:	6042      	str	r2, [r0, #4]
 801330e:	4770      	bx	lr

08013310 <rmw_validate_full_topic_name>:
 8013310:	2800      	cmp	r0, #0
 8013312:	d05d      	beq.n	80133d0 <rmw_validate_full_topic_name+0xc0>
 8013314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013318:	460d      	mov	r5, r1
 801331a:	2900      	cmp	r1, #0
 801331c:	d05a      	beq.n	80133d4 <rmw_validate_full_topic_name+0xc4>
 801331e:	4604      	mov	r4, r0
 8013320:	4616      	mov	r6, r2
 8013322:	f7ec ff97 	bl	8000254 <strlen>
 8013326:	b150      	cbz	r0, 801333e <rmw_validate_full_topic_name+0x2e>
 8013328:	7823      	ldrb	r3, [r4, #0]
 801332a:	2b2f      	cmp	r3, #47	@ 0x2f
 801332c:	d00e      	beq.n	801334c <rmw_validate_full_topic_name+0x3c>
 801332e:	2302      	movs	r3, #2
 8013330:	602b      	str	r3, [r5, #0]
 8013332:	b146      	cbz	r6, 8013346 <rmw_validate_full_topic_name+0x36>
 8013334:	2300      	movs	r3, #0
 8013336:	4618      	mov	r0, r3
 8013338:	6033      	str	r3, [r6, #0]
 801333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801333e:	2301      	movs	r3, #1
 8013340:	602b      	str	r3, [r5, #0]
 8013342:	2e00      	cmp	r6, #0
 8013344:	d1f6      	bne.n	8013334 <rmw_validate_full_topic_name+0x24>
 8013346:	2000      	movs	r0, #0
 8013348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801334c:	1e43      	subs	r3, r0, #1
 801334e:	5ce2      	ldrb	r2, [r4, r3]
 8013350:	2a2f      	cmp	r2, #47	@ 0x2f
 8013352:	d041      	beq.n	80133d8 <rmw_validate_full_topic_name+0xc8>
 8013354:	1e62      	subs	r2, r4, #1
 8013356:	f1c4 0e01 	rsb	lr, r4, #1
 801335a:	eb02 0800 	add.w	r8, r2, r0
 801335e:	eb0e 0702 	add.w	r7, lr, r2
 8013362:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013366:	f023 0120 	bic.w	r1, r3, #32
 801336a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801336e:	3941      	subs	r1, #65	@ 0x41
 8013370:	2919      	cmp	r1, #25
 8013372:	d90f      	bls.n	8013394 <rmw_validate_full_topic_name+0x84>
 8013374:	f1bc 0f0a 	cmp.w	ip, #10
 8013378:	d90c      	bls.n	8013394 <rmw_validate_full_topic_name+0x84>
 801337a:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801337e:	fab3 f383 	clz	r3, r3
 8013382:	095b      	lsrs	r3, r3, #5
 8013384:	b933      	cbnz	r3, 8013394 <rmw_validate_full_topic_name+0x84>
 8013386:	2204      	movs	r2, #4
 8013388:	602a      	str	r2, [r5, #0]
 801338a:	2e00      	cmp	r6, #0
 801338c:	d0db      	beq.n	8013346 <rmw_validate_full_topic_name+0x36>
 801338e:	4618      	mov	r0, r3
 8013390:	6037      	str	r7, [r6, #0]
 8013392:	e7d2      	b.n	801333a <rmw_validate_full_topic_name+0x2a>
 8013394:	4542      	cmp	r2, r8
 8013396:	d1e2      	bne.n	801335e <rmw_validate_full_topic_name+0x4e>
 8013398:	2301      	movs	r3, #1
 801339a:	4f1a      	ldr	r7, [pc, #104]	@ (8013404 <rmw_validate_full_topic_name+0xf4>)
 801339c:	e004      	b.n	80133a8 <rmw_validate_full_topic_name+0x98>
 801339e:	4298      	cmp	r0, r3
 80133a0:	f104 0401 	add.w	r4, r4, #1
 80133a4:	4613      	mov	r3, r2
 80133a6:	d91c      	bls.n	80133e2 <rmw_validate_full_topic_name+0xd2>
 80133a8:	4298      	cmp	r0, r3
 80133aa:	f103 0201 	add.w	r2, r3, #1
 80133ae:	d0f6      	beq.n	801339e <rmw_validate_full_topic_name+0x8e>
 80133b0:	7821      	ldrb	r1, [r4, #0]
 80133b2:	292f      	cmp	r1, #47	@ 0x2f
 80133b4:	d1f3      	bne.n	801339e <rmw_validate_full_topic_name+0x8e>
 80133b6:	7861      	ldrb	r1, [r4, #1]
 80133b8:	292f      	cmp	r1, #47	@ 0x2f
 80133ba:	d01e      	beq.n	80133fa <rmw_validate_full_topic_name+0xea>
 80133bc:	5dc9      	ldrb	r1, [r1, r7]
 80133be:	0749      	lsls	r1, r1, #29
 80133c0:	d5ed      	bpl.n	801339e <rmw_validate_full_topic_name+0x8e>
 80133c2:	2206      	movs	r2, #6
 80133c4:	602a      	str	r2, [r5, #0]
 80133c6:	2e00      	cmp	r6, #0
 80133c8:	d0bd      	beq.n	8013346 <rmw_validate_full_topic_name+0x36>
 80133ca:	2000      	movs	r0, #0
 80133cc:	6033      	str	r3, [r6, #0]
 80133ce:	e7b4      	b.n	801333a <rmw_validate_full_topic_name+0x2a>
 80133d0:	200b      	movs	r0, #11
 80133d2:	4770      	bx	lr
 80133d4:	200b      	movs	r0, #11
 80133d6:	e7b0      	b.n	801333a <rmw_validate_full_topic_name+0x2a>
 80133d8:	2203      	movs	r2, #3
 80133da:	602a      	str	r2, [r5, #0]
 80133dc:	2e00      	cmp	r6, #0
 80133de:	d1f4      	bne.n	80133ca <rmw_validate_full_topic_name+0xba>
 80133e0:	e7b1      	b.n	8013346 <rmw_validate_full_topic_name+0x36>
 80133e2:	28f7      	cmp	r0, #247	@ 0xf7
 80133e4:	d803      	bhi.n	80133ee <rmw_validate_full_topic_name+0xde>
 80133e6:	2300      	movs	r3, #0
 80133e8:	4618      	mov	r0, r3
 80133ea:	602b      	str	r3, [r5, #0]
 80133ec:	e7a5      	b.n	801333a <rmw_validate_full_topic_name+0x2a>
 80133ee:	2307      	movs	r3, #7
 80133f0:	602b      	str	r3, [r5, #0]
 80133f2:	2e00      	cmp	r6, #0
 80133f4:	d0a7      	beq.n	8013346 <rmw_validate_full_topic_name+0x36>
 80133f6:	23f6      	movs	r3, #246	@ 0xf6
 80133f8:	e7e7      	b.n	80133ca <rmw_validate_full_topic_name+0xba>
 80133fa:	2205      	movs	r2, #5
 80133fc:	602a      	str	r2, [r5, #0]
 80133fe:	2e00      	cmp	r6, #0
 8013400:	d1e3      	bne.n	80133ca <rmw_validate_full_topic_name+0xba>
 8013402:	e7a0      	b.n	8013346 <rmw_validate_full_topic_name+0x36>
 8013404:	08018bec 	.word	0x08018bec

08013408 <get_memory>:
 8013408:	4603      	mov	r3, r0
 801340a:	6840      	ldr	r0, [r0, #4]
 801340c:	b158      	cbz	r0, 8013426 <get_memory+0x1e>
 801340e:	6842      	ldr	r2, [r0, #4]
 8013410:	605a      	str	r2, [r3, #4]
 8013412:	b10a      	cbz	r2, 8013418 <get_memory+0x10>
 8013414:	2100      	movs	r1, #0
 8013416:	6011      	str	r1, [r2, #0]
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	6042      	str	r2, [r0, #4]
 801341c:	b102      	cbz	r2, 8013420 <get_memory+0x18>
 801341e:	6010      	str	r0, [r2, #0]
 8013420:	2200      	movs	r2, #0
 8013422:	6002      	str	r2, [r0, #0]
 8013424:	6018      	str	r0, [r3, #0]
 8013426:	4770      	bx	lr

08013428 <put_memory>:
 8013428:	680b      	ldr	r3, [r1, #0]
 801342a:	b10b      	cbz	r3, 8013430 <put_memory+0x8>
 801342c:	684a      	ldr	r2, [r1, #4]
 801342e:	605a      	str	r2, [r3, #4]
 8013430:	684a      	ldr	r2, [r1, #4]
 8013432:	b102      	cbz	r2, 8013436 <put_memory+0xe>
 8013434:	6013      	str	r3, [r2, #0]
 8013436:	6803      	ldr	r3, [r0, #0]
 8013438:	428b      	cmp	r3, r1
 801343a:	6843      	ldr	r3, [r0, #4]
 801343c:	bf08      	it	eq
 801343e:	6002      	streq	r2, [r0, #0]
 8013440:	604b      	str	r3, [r1, #4]
 8013442:	b103      	cbz	r3, 8013446 <put_memory+0x1e>
 8013444:	6019      	str	r1, [r3, #0]
 8013446:	2300      	movs	r3, #0
 8013448:	600b      	str	r3, [r1, #0]
 801344a:	6041      	str	r1, [r0, #4]
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop

08013450 <rmw_destroy_client>:
 8013450:	b570      	push	{r4, r5, r6, lr}
 8013452:	b128      	cbz	r0, 8013460 <rmw_destroy_client+0x10>
 8013454:	4604      	mov	r4, r0
 8013456:	6800      	ldr	r0, [r0, #0]
 8013458:	460d      	mov	r5, r1
 801345a:	f7fb ff47 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 801345e:	b910      	cbnz	r0, 8013466 <rmw_destroy_client+0x16>
 8013460:	2401      	movs	r4, #1
 8013462:	4620      	mov	r0, r4
 8013464:	bd70      	pop	{r4, r5, r6, pc}
 8013466:	6863      	ldr	r3, [r4, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d0f9      	beq.n	8013460 <rmw_destroy_client+0x10>
 801346c:	2d00      	cmp	r5, #0
 801346e:	d0f7      	beq.n	8013460 <rmw_destroy_client+0x10>
 8013470:	6828      	ldr	r0, [r5, #0]
 8013472:	f7fb ff3b 	bl	800f2ec <is_uxrce_rmw_identifier_valid>
 8013476:	2800      	cmp	r0, #0
 8013478:	d0f2      	beq.n	8013460 <rmw_destroy_client+0x10>
 801347a:	686e      	ldr	r6, [r5, #4]
 801347c:	2e00      	cmp	r6, #0
 801347e:	d0ef      	beq.n	8013460 <rmw_destroy_client+0x10>
 8013480:	6864      	ldr	r4, [r4, #4]
 8013482:	6932      	ldr	r2, [r6, #16]
 8013484:	6920      	ldr	r0, [r4, #16]
 8013486:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801348a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801348e:	6819      	ldr	r1, [r3, #0]
 8013490:	f7fc fb12 	bl	800fab8 <uxr_buffer_cancel_data>
 8013494:	4602      	mov	r2, r0
 8013496:	6920      	ldr	r0, [r4, #16]
 8013498:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801349c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134a0:	f7fb feaa 	bl	800f1f8 <run_xrce_session>
 80134a4:	6920      	ldr	r0, [r4, #16]
 80134a6:	6932      	ldr	r2, [r6, #16]
 80134a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80134ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134b0:	6819      	ldr	r1, [r3, #0]
 80134b2:	f7fc f977 	bl	800f7a4 <uxr_buffer_delete_entity>
 80134b6:	4602      	mov	r2, r0
 80134b8:	6920      	ldr	r0, [r4, #16]
 80134ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80134be:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134c2:	f7fb fe99 	bl	800f1f8 <run_xrce_session>
 80134c6:	4603      	mov	r3, r0
 80134c8:	4628      	mov	r0, r5
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bf14      	ite	ne
 80134ce:	2400      	movne	r4, #0
 80134d0:	2402      	moveq	r4, #2
 80134d2:	f7fb fe15 	bl	800f100 <rmw_uxrce_fini_client_memory>
 80134d6:	e7c4      	b.n	8013462 <rmw_destroy_client+0x12>

080134d8 <rmw_get_implementation_identifier>:
 80134d8:	4b01      	ldr	r3, [pc, #4]	@ (80134e0 <rmw_get_implementation_identifier+0x8>)
 80134da:	6818      	ldr	r0, [r3, #0]
 80134dc:	4770      	bx	lr
 80134de:	bf00      	nop
 80134e0:	0801892c 	.word	0x0801892c

080134e4 <rmw_create_guard_condition>:
 80134e4:	b538      	push	{r3, r4, r5, lr}
 80134e6:	4605      	mov	r5, r0
 80134e8:	4808      	ldr	r0, [pc, #32]	@ (801350c <rmw_create_guard_condition+0x28>)
 80134ea:	f7ff ff8d 	bl	8013408 <get_memory>
 80134ee:	4603      	mov	r3, r0
 80134f0:	b148      	cbz	r0, 8013506 <rmw_create_guard_condition+0x22>
 80134f2:	6884      	ldr	r4, [r0, #8]
 80134f4:	2300      	movs	r3, #0
 80134f6:	61e5      	str	r5, [r4, #28]
 80134f8:	7423      	strb	r3, [r4, #16]
 80134fa:	f7ff ffed 	bl	80134d8 <rmw_get_implementation_identifier>
 80134fe:	f104 0314 	add.w	r3, r4, #20
 8013502:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013506:	4618      	mov	r0, r3
 8013508:	bd38      	pop	{r3, r4, r5, pc}
 801350a:	bf00      	nop
 801350c:	20012434 	.word	0x20012434

08013510 <rmw_destroy_guard_condition>:
 8013510:	b508      	push	{r3, lr}
 8013512:	4b08      	ldr	r3, [pc, #32]	@ (8013534 <rmw_destroy_guard_condition+0x24>)
 8013514:	6819      	ldr	r1, [r3, #0]
 8013516:	b911      	cbnz	r1, 801351e <rmw_destroy_guard_condition+0xe>
 8013518:	e00a      	b.n	8013530 <rmw_destroy_guard_condition+0x20>
 801351a:	6849      	ldr	r1, [r1, #4]
 801351c:	b141      	cbz	r1, 8013530 <rmw_destroy_guard_condition+0x20>
 801351e:	688b      	ldr	r3, [r1, #8]
 8013520:	3314      	adds	r3, #20
 8013522:	4298      	cmp	r0, r3
 8013524:	d1f9      	bne.n	801351a <rmw_destroy_guard_condition+0xa>
 8013526:	4803      	ldr	r0, [pc, #12]	@ (8013534 <rmw_destroy_guard_condition+0x24>)
 8013528:	f7ff ff7e 	bl	8013428 <put_memory>
 801352c:	2000      	movs	r0, #0
 801352e:	bd08      	pop	{r3, pc}
 8013530:	2001      	movs	r0, #1
 8013532:	bd08      	pop	{r3, pc}
 8013534:	20012434 	.word	0x20012434

08013538 <rmw_init_options_init>:
 8013538:	b084      	sub	sp, #16
 801353a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801353c:	b083      	sub	sp, #12
 801353e:	ad09      	add	r5, sp, #36	@ 0x24
 8013540:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013544:	b130      	cbz	r0, 8013554 <rmw_init_options_init+0x1c>
 8013546:	4604      	mov	r4, r0
 8013548:	4628      	mov	r0, r5
 801354a:	f7fa fdf1 	bl	800e130 <rcutils_allocator_is_valid>
 801354e:	b108      	cbz	r0, 8013554 <rmw_init_options_init+0x1c>
 8013550:	68a6      	ldr	r6, [r4, #8]
 8013552:	b12e      	cbz	r6, 8013560 <rmw_init_options_init+0x28>
 8013554:	200b      	movs	r0, #11
 8013556:	b003      	add	sp, #12
 8013558:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801355c:	b004      	add	sp, #16
 801355e:	4770      	bx	lr
 8013560:	2200      	movs	r2, #0
 8013562:	2300      	movs	r3, #0
 8013564:	f104 0c20 	add.w	ip, r4, #32
 8013568:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8013604 <rmw_init_options_init+0xcc>
 801356c:	466f      	mov	r7, sp
 801356e:	e9c4 2300 	strd	r2, r3, [r4]
 8013572:	4b20      	ldr	r3, [pc, #128]	@ (80135f4 <rmw_init_options_init+0xbc>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	60a3      	str	r3, [r4, #8]
 8013578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801357a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801357e:	682b      	ldr	r3, [r5, #0]
 8013580:	4638      	mov	r0, r7
 8013582:	f8cc 3000 	str.w	r3, [ip]
 8013586:	f8c4 e01c 	str.w	lr, [r4, #28]
 801358a:	60e6      	str	r6, [r4, #12]
 801358c:	f7ff febc 	bl	8013308 <rmw_get_default_security_options>
 8013590:	f104 0310 	add.w	r3, r4, #16
 8013594:	2203      	movs	r2, #3
 8013596:	e897 0003 	ldmia.w	r7, {r0, r1}
 801359a:	e883 0003 	stmia.w	r3, {r0, r1}
 801359e:	4816      	ldr	r0, [pc, #88]	@ (80135f8 <rmw_init_options_init+0xc0>)
 80135a0:	4916      	ldr	r1, [pc, #88]	@ (80135fc <rmw_init_options_init+0xc4>)
 80135a2:	7626      	strb	r6, [r4, #24]
 80135a4:	f7fb fcec 	bl	800ef80 <rmw_uxrce_init_init_options_impl_memory>
 80135a8:	4813      	ldr	r0, [pc, #76]	@ (80135f8 <rmw_init_options_init+0xc0>)
 80135aa:	f7ff ff2d 	bl	8013408 <get_memory>
 80135ae:	b1f0      	cbz	r0, 80135ee <rmw_init_options_init+0xb6>
 80135b0:	4a13      	ldr	r2, [pc, #76]	@ (8013600 <rmw_init_options_init+0xc8>)
 80135b2:	6883      	ldr	r3, [r0, #8]
 80135b4:	6851      	ldr	r1, [r2, #4]
 80135b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80135b8:	7810      	ldrb	r0, [r2, #0]
 80135ba:	6159      	str	r1, [r3, #20]
 80135bc:	68d1      	ldr	r1, [r2, #12]
 80135be:	7418      	strb	r0, [r3, #16]
 80135c0:	61d9      	str	r1, [r3, #28]
 80135c2:	6911      	ldr	r1, [r2, #16]
 80135c4:	6219      	str	r1, [r3, #32]
 80135c6:	6951      	ldr	r1, [r2, #20]
 80135c8:	6892      	ldr	r2, [r2, #8]
 80135ca:	6259      	str	r1, [r3, #36]	@ 0x24
 80135cc:	619a      	str	r2, [r3, #24]
 80135ce:	f7fd fd67 	bl	80110a0 <uxr_nanos>
 80135d2:	f003 fa4b 	bl	8016a6c <srand>
 80135d6:	f003 fa77 	bl	8016ac8 <rand>
 80135da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80135dc:	6298      	str	r0, [r3, #40]	@ 0x28
 80135de:	2800      	cmp	r0, #0
 80135e0:	d0f9      	beq.n	80135d6 <rmw_init_options_init+0x9e>
 80135e2:	2000      	movs	r0, #0
 80135e4:	b003      	add	sp, #12
 80135e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80135ea:	b004      	add	sp, #16
 80135ec:	4770      	bx	lr
 80135ee:	2001      	movs	r0, #1
 80135f0:	e7b1      	b.n	8013556 <rmw_init_options_init+0x1e>
 80135f2:	bf00      	nop
 80135f4:	0801892c 	.word	0x0801892c
 80135f8:	20012444 	.word	0x20012444
 80135fc:	2000dce0 	.word	0x2000dce0
 8013600:	2000db2c 	.word	0x2000db2c
 8013604:	08018158 	.word	0x08018158

08013608 <rmw_init_options_copy>:
 8013608:	2800      	cmp	r0, #0
 801360a:	d047      	beq.n	801369c <rmw_init_options_copy+0x94>
 801360c:	b570      	push	{r4, r5, r6, lr}
 801360e:	460d      	mov	r5, r1
 8013610:	b149      	cbz	r1, 8013626 <rmw_init_options_copy+0x1e>
 8013612:	4604      	mov	r4, r0
 8013614:	6880      	ldr	r0, [r0, #8]
 8013616:	b120      	cbz	r0, 8013622 <rmw_init_options_copy+0x1a>
 8013618:	4b22      	ldr	r3, [pc, #136]	@ (80136a4 <rmw_init_options_copy+0x9c>)
 801361a:	6819      	ldr	r1, [r3, #0]
 801361c:	f7ec fe10 	bl	8000240 <strcmp>
 8013620:	bba8      	cbnz	r0, 801368e <rmw_init_options_copy+0x86>
 8013622:	68ab      	ldr	r3, [r5, #8]
 8013624:	b11b      	cbz	r3, 801362e <rmw_init_options_copy+0x26>
 8013626:	f04f 0c0b 	mov.w	ip, #11
 801362a:	4660      	mov	r0, ip
 801362c:	bd70      	pop	{r4, r5, r6, pc}
 801362e:	4623      	mov	r3, r4
 8013630:	462a      	mov	r2, r5
 8013632:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013636:	f8d3 e000 	ldr.w	lr, [r3]
 801363a:	3310      	adds	r3, #16
 801363c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8013640:	3210      	adds	r2, #16
 8013642:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8013646:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801364a:	42b3      	cmp	r3, r6
 801364c:	f842 ec10 	str.w	lr, [r2, #-16]
 8013650:	f842 cc0c 	str.w	ip, [r2, #-12]
 8013654:	f842 0c08 	str.w	r0, [r2, #-8]
 8013658:	f842 1c04 	str.w	r1, [r2, #-4]
 801365c:	d1eb      	bne.n	8013636 <rmw_init_options_copy+0x2e>
 801365e:	6819      	ldr	r1, [r3, #0]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	4811      	ldr	r0, [pc, #68]	@ (80136a8 <rmw_init_options_copy+0xa0>)
 8013664:	6011      	str	r1, [r2, #0]
 8013666:	6053      	str	r3, [r2, #4]
 8013668:	f7ff fece 	bl	8013408 <get_memory>
 801366c:	b198      	cbz	r0, 8013696 <rmw_init_options_copy+0x8e>
 801366e:	6883      	ldr	r3, [r0, #8]
 8013670:	f04f 0c00 	mov.w	ip, #0
 8013674:	636b      	str	r3, [r5, #52]	@ 0x34
 8013676:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8013678:	f103 0410 	add.w	r4, r3, #16
 801367c:	3510      	adds	r5, #16
 801367e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801368a:	4660      	mov	r0, ip
 801368c:	bd70      	pop	{r4, r5, r6, pc}
 801368e:	f04f 0c0c 	mov.w	ip, #12
 8013692:	4660      	mov	r0, ip
 8013694:	bd70      	pop	{r4, r5, r6, pc}
 8013696:	f04f 0c01 	mov.w	ip, #1
 801369a:	e7c6      	b.n	801362a <rmw_init_options_copy+0x22>
 801369c:	f04f 0c0b 	mov.w	ip, #11
 80136a0:	4660      	mov	r0, ip
 80136a2:	4770      	bx	lr
 80136a4:	0801892c 	.word	0x0801892c
 80136a8:	20012444 	.word	0x20012444

080136ac <rmw_init_options_fini>:
 80136ac:	b510      	push	{r4, lr}
 80136ae:	b08e      	sub	sp, #56	@ 0x38
 80136b0:	b388      	cbz	r0, 8013716 <rmw_init_options_fini+0x6a>
 80136b2:	4604      	mov	r4, r0
 80136b4:	3020      	adds	r0, #32
 80136b6:	f7fa fd3b 	bl	800e130 <rcutils_allocator_is_valid>
 80136ba:	b360      	cbz	r0, 8013716 <rmw_init_options_fini+0x6a>
 80136bc:	68a0      	ldr	r0, [r4, #8]
 80136be:	b120      	cbz	r0, 80136ca <rmw_init_options_fini+0x1e>
 80136c0:	4b1a      	ldr	r3, [pc, #104]	@ (801372c <rmw_init_options_fini+0x80>)
 80136c2:	6819      	ldr	r1, [r3, #0]
 80136c4:	f7ec fdbc 	bl	8000240 <strcmp>
 80136c8:	bb68      	cbnz	r0, 8013726 <rmw_init_options_fini+0x7a>
 80136ca:	4b19      	ldr	r3, [pc, #100]	@ (8013730 <rmw_init_options_fini+0x84>)
 80136cc:	6819      	ldr	r1, [r3, #0]
 80136ce:	b331      	cbz	r1, 801371e <rmw_init_options_fini+0x72>
 80136d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80136d2:	e001      	b.n	80136d8 <rmw_init_options_fini+0x2c>
 80136d4:	6849      	ldr	r1, [r1, #4]
 80136d6:	b311      	cbz	r1, 801371e <rmw_init_options_fini+0x72>
 80136d8:	688b      	ldr	r3, [r1, #8]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d1fa      	bne.n	80136d4 <rmw_init_options_fini+0x28>
 80136de:	4814      	ldr	r0, [pc, #80]	@ (8013730 <rmw_init_options_fini+0x84>)
 80136e0:	f7ff fea2 	bl	8013428 <put_memory>
 80136e4:	4668      	mov	r0, sp
 80136e6:	f7ff fdff 	bl	80132e8 <rmw_get_zero_initialized_init_options>
 80136ea:	46ee      	mov	lr, sp
 80136ec:	46a4      	mov	ip, r4
 80136ee:	2400      	movs	r4, #0
 80136f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80136fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013700:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013708:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801370c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013710:	4620      	mov	r0, r4
 8013712:	b00e      	add	sp, #56	@ 0x38
 8013714:	bd10      	pop	{r4, pc}
 8013716:	240b      	movs	r4, #11
 8013718:	4620      	mov	r0, r4
 801371a:	b00e      	add	sp, #56	@ 0x38
 801371c:	bd10      	pop	{r4, pc}
 801371e:	2401      	movs	r4, #1
 8013720:	4620      	mov	r0, r4
 8013722:	b00e      	add	sp, #56	@ 0x38
 8013724:	bd10      	pop	{r4, pc}
 8013726:	240c      	movs	r4, #12
 8013728:	e7f2      	b.n	8013710 <rmw_init_options_fini+0x64>
 801372a:	bf00      	nop
 801372c:	0801892c 	.word	0x0801892c
 8013730:	20012444 	.word	0x20012444

08013734 <rmw_init>:
 8013734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013738:	b083      	sub	sp, #12
 801373a:	2800      	cmp	r0, #0
 801373c:	f000 80d3 	beq.w	80138e6 <rmw_init+0x1b2>
 8013740:	460e      	mov	r6, r1
 8013742:	2900      	cmp	r1, #0
 8013744:	f000 80cf 	beq.w	80138e6 <rmw_init+0x1b2>
 8013748:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801374a:	4605      	mov	r5, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80ca 	beq.w	80138e6 <rmw_init+0x1b2>
 8013752:	4b78      	ldr	r3, [pc, #480]	@ (8013934 <rmw_init+0x200>)
 8013754:	6880      	ldr	r0, [r0, #8]
 8013756:	681f      	ldr	r7, [r3, #0]
 8013758:	b128      	cbz	r0, 8013766 <rmw_init+0x32>
 801375a:	4639      	mov	r1, r7
 801375c:	f7ec fd70 	bl	8000240 <strcmp>
 8013760:	2800      	cmp	r0, #0
 8013762:	f040 80ca 	bne.w	80138fa <rmw_init+0x1c6>
 8013766:	4c74      	ldr	r4, [pc, #464]	@ (8013938 <rmw_init+0x204>)
 8013768:	f04f 0800 	mov.w	r8, #0
 801376c:	4973      	ldr	r1, [pc, #460]	@ (801393c <rmw_init+0x208>)
 801376e:	4874      	ldr	r0, [pc, #464]	@ (8013940 <rmw_init+0x20c>)
 8013770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013774:	60b7      	str	r7, [r6, #8]
 8013776:	e9c6 2300 	strd	r2, r3, [r6]
 801377a:	68eb      	ldr	r3, [r5, #12]
 801377c:	2201      	movs	r2, #1
 801377e:	64b3      	str	r3, [r6, #72]	@ 0x48
 8013780:	f7fb fb9e 	bl	800eec0 <rmw_uxrce_init_session_memory>
 8013784:	4620      	mov	r0, r4
 8013786:	2204      	movs	r2, #4
 8013788:	496e      	ldr	r1, [pc, #440]	@ (8013944 <rmw_init+0x210>)
 801378a:	f7fb fbd9 	bl	800ef40 <rmw_uxrce_init_static_input_buffer_memory>
 801378e:	486c      	ldr	r0, [pc, #432]	@ (8013940 <rmw_init+0x20c>)
 8013790:	f884 800d 	strb.w	r8, [r4, #13]
 8013794:	f7ff fe38 	bl	8013408 <get_memory>
 8013798:	2800      	cmp	r0, #0
 801379a:	f000 80a9 	beq.w	80138f0 <rmw_init+0x1bc>
 801379e:	6884      	ldr	r4, [r0, #8]
 80137a0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80137a2:	f104 0910 	add.w	r9, r4, #16
 80137a6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80137a8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80137ac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80137b0:	9101      	str	r1, [sp, #4]
 80137b2:	4661      	mov	r1, ip
 80137b4:	6a00      	ldr	r0, [r0, #32]
 80137b6:	9000      	str	r0, [sp, #0]
 80137b8:	4648      	mov	r0, r9
 80137ba:	f001 fab3 	bl	8014d24 <uxr_set_custom_transport_callbacks>
 80137be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80137c2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80137c6:	4960      	ldr	r1, [pc, #384]	@ (8013948 <rmw_init+0x214>)
 80137c8:	4860      	ldr	r0, [pc, #384]	@ (801394c <rmw_init+0x218>)
 80137ca:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80137ce:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80137d2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80137d6:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80137da:	2201      	movs	r2, #1
 80137dc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80137e0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80137e4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80137e8:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80137ec:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80137ee:	f7fb fb47 	bl	800ee80 <rmw_uxrce_init_node_memory>
 80137f2:	2205      	movs	r2, #5
 80137f4:	4956      	ldr	r1, [pc, #344]	@ (8013950 <rmw_init+0x21c>)
 80137f6:	4857      	ldr	r0, [pc, #348]	@ (8013954 <rmw_init+0x220>)
 80137f8:	f7fb fb22 	bl	800ee40 <rmw_uxrce_init_subscription_memory>
 80137fc:	220a      	movs	r2, #10
 80137fe:	4956      	ldr	r1, [pc, #344]	@ (8013958 <rmw_init+0x224>)
 8013800:	4856      	ldr	r0, [pc, #344]	@ (801395c <rmw_init+0x228>)
 8013802:	f7fb fafd 	bl	800ee00 <rmw_uxrce_init_publisher_memory>
 8013806:	2201      	movs	r2, #1
 8013808:	4955      	ldr	r1, [pc, #340]	@ (8013960 <rmw_init+0x22c>)
 801380a:	4856      	ldr	r0, [pc, #344]	@ (8013964 <rmw_init+0x230>)
 801380c:	f7fb fab8 	bl	800ed80 <rmw_uxrce_init_service_memory>
 8013810:	2201      	movs	r2, #1
 8013812:	4955      	ldr	r1, [pc, #340]	@ (8013968 <rmw_init+0x234>)
 8013814:	4855      	ldr	r0, [pc, #340]	@ (801396c <rmw_init+0x238>)
 8013816:	f7fb fad3 	bl	800edc0 <rmw_uxrce_init_client_memory>
 801381a:	220f      	movs	r2, #15
 801381c:	4954      	ldr	r1, [pc, #336]	@ (8013970 <rmw_init+0x23c>)
 801381e:	4855      	ldr	r0, [pc, #340]	@ (8013974 <rmw_init+0x240>)
 8013820:	f7fb fb6e 	bl	800ef00 <rmw_uxrce_init_topic_memory>
 8013824:	2203      	movs	r2, #3
 8013826:	4954      	ldr	r1, [pc, #336]	@ (8013978 <rmw_init+0x244>)
 8013828:	4854      	ldr	r0, [pc, #336]	@ (801397c <rmw_init+0x248>)
 801382a:	f7fb fba9 	bl	800ef80 <rmw_uxrce_init_init_options_impl_memory>
 801382e:	2204      	movs	r2, #4
 8013830:	4953      	ldr	r1, [pc, #332]	@ (8013980 <rmw_init+0x24c>)
 8013832:	4854      	ldr	r0, [pc, #336]	@ (8013984 <rmw_init+0x250>)
 8013834:	f7fb fbc4 	bl	800efc0 <rmw_uxrce_init_wait_set_memory>
 8013838:	4953      	ldr	r1, [pc, #332]	@ (8013988 <rmw_init+0x254>)
 801383a:	4854      	ldr	r0, [pc, #336]	@ (801398c <rmw_init+0x258>)
 801383c:	2204      	movs	r2, #4
 801383e:	f7fb fbdf 	bl	800f000 <rmw_uxrce_init_guard_condition_memory>
 8013842:	4642      	mov	r2, r8
 8013844:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013846:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013848:	f000 f94e 	bl	8013ae8 <rmw_uxrce_transport_init>
 801384c:	4607      	mov	r7, r0
 801384e:	2800      	cmp	r0, #0
 8013850:	d158      	bne.n	8013904 <rmw_init+0x1d0>
 8013852:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013854:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013858:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801385c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801385e:	4628      	mov	r0, r5
 8013860:	f7fc faae 	bl	800fdc0 <uxr_init_session>
 8013864:	4622      	mov	r2, r4
 8013866:	494a      	ldr	r1, [pc, #296]	@ (8013990 <rmw_init+0x25c>)
 8013868:	4628      	mov	r0, r5
 801386a:	f7fc facd 	bl	800fe08 <uxr_set_topic_callback>
 801386e:	463a      	mov	r2, r7
 8013870:	4948      	ldr	r1, [pc, #288]	@ (8013994 <rmw_init+0x260>)
 8013872:	4628      	mov	r0, r5
 8013874:	f7fc fac4 	bl	800fe00 <uxr_set_status_callback>
 8013878:	463a      	mov	r2, r7
 801387a:	4947      	ldr	r1, [pc, #284]	@ (8013998 <rmw_init+0x264>)
 801387c:	4628      	mov	r0, r5
 801387e:	f7fc fac7 	bl	800fe10 <uxr_set_request_callback>
 8013882:	463a      	mov	r2, r7
 8013884:	4945      	ldr	r1, [pc, #276]	@ (801399c <rmw_init+0x268>)
 8013886:	4628      	mov	r0, r5
 8013888:	f7fc fac6 	bl	800fe18 <uxr_set_reply_callback>
 801388c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8013890:	2304      	movs	r3, #4
 8013892:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8013896:	0092      	lsls	r2, r2, #2
 8013898:	4628      	mov	r0, r5
 801389a:	f7fc fafd 	bl	800fe98 <uxr_create_input_reliable_stream>
 801389e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80138a2:	2304      	movs	r3, #4
 80138a4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80138a8:	0092      	lsls	r2, r2, #2
 80138aa:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fc fac8 	bl	800fe44 <uxr_create_output_reliable_stream>
 80138b4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80138b8:	4628      	mov	r0, r5
 80138ba:	f7fc fae7 	bl	800fe8c <uxr_create_input_best_effort_stream>
 80138be:	f241 3194 	movw	r1, #5012	@ 0x1394
 80138c2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80138c6:	4628      	mov	r0, r5
 80138c8:	4421      	add	r1, r4
 80138ca:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80138ce:	f7fc faa7 	bl	800fe20 <uxr_create_output_best_effort_stream>
 80138d2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80138d6:	4628      	mov	r0, r5
 80138d8:	f7fc fff6 	bl	80108c8 <uxr_create_session>
 80138dc:	b1f8      	cbz	r0, 801391e <rmw_init+0x1ea>
 80138de:	4638      	mov	r0, r7
 80138e0:	b003      	add	sp, #12
 80138e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e6:	270b      	movs	r7, #11
 80138e8:	4638      	mov	r0, r7
 80138ea:	b003      	add	sp, #12
 80138ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138f0:	2701      	movs	r7, #1
 80138f2:	4638      	mov	r0, r7
 80138f4:	b003      	add	sp, #12
 80138f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138fa:	270c      	movs	r7, #12
 80138fc:	4638      	mov	r0, r7
 80138fe:	b003      	add	sp, #12
 8013900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013904:	4648      	mov	r0, r9
 8013906:	f001 fa4b 	bl	8014da0 <uxr_close_custom_transport>
 801390a:	4621      	mov	r1, r4
 801390c:	480c      	ldr	r0, [pc, #48]	@ (8013940 <rmw_init+0x20c>)
 801390e:	f7ff fd8b 	bl	8013428 <put_memory>
 8013912:	4638      	mov	r0, r7
 8013914:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013918:	b003      	add	sp, #12
 801391a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801391e:	4648      	mov	r0, r9
 8013920:	f001 fa3e 	bl	8014da0 <uxr_close_custom_transport>
 8013924:	4621      	mov	r1, r4
 8013926:	4806      	ldr	r0, [pc, #24]	@ (8013940 <rmw_init+0x20c>)
 8013928:	f7ff fd7e 	bl	8013428 <put_memory>
 801392c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801392e:	2701      	movs	r7, #1
 8013930:	e7d5      	b.n	80138de <rmw_init+0x1aa>
 8013932:	bf00      	nop
 8013934:	0801892c 	.word	0x0801892c
 8013938:	20012494 	.word	0x20012494
 801393c:	2000e740 	.word	0x2000e740
 8013940:	20012484 	.word	0x20012484
 8013944:	2000fce8 	.word	0x2000fce8
 8013948:	2000dd64 	.word	0x2000dd64
 801394c:	20012454 	.word	0x20012454
 8013950:	20011de8 	.word	0x20011de8
 8013954:	200124a4 	.word	0x200124a4
 8013958:	2000de08 	.word	0x2000de08
 801395c:	20012464 	.word	0x20012464
 8013960:	2000e678 	.word	0x2000e678
 8013964:	20012474 	.word	0x20012474
 8013968:	2000db98 	.word	0x2000db98
 801396c:	2000db84 	.word	0x2000db84
 8013970:	20012220 	.word	0x20012220
 8013974:	200124b4 	.word	0x200124b4
 8013978:	2000dce0 	.word	0x2000dce0
 801397c:	20012444 	.word	0x20012444
 8013980:	200123c4 	.word	0x200123c4
 8013984:	200124c4 	.word	0x200124c4
 8013988:	2000dc60 	.word	0x2000dc60
 801398c:	20012434 	.word	0x20012434
 8013990:	0801663d 	.word	0x0801663d
 8013994:	08016635 	.word	0x08016635
 8013998:	080166d5 	.word	0x080166d5
 801399c:	08016771 	.word	0x08016771

080139a0 <rmw_context_fini>:
 80139a0:	4b17      	ldr	r3, [pc, #92]	@ (8013a00 <rmw_context_fini+0x60>)
 80139a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80139a4:	b570      	push	{r4, r5, r6, lr}
 80139a6:	681c      	ldr	r4, [r3, #0]
 80139a8:	4605      	mov	r5, r0
 80139aa:	b334      	cbz	r4, 80139fa <rmw_context_fini+0x5a>
 80139ac:	2600      	movs	r6, #0
 80139ae:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80139b2:	6902      	ldr	r2, [r0, #16]
 80139b4:	428a      	cmp	r2, r1
 80139b6:	d018      	beq.n	80139ea <rmw_context_fini+0x4a>
 80139b8:	2c00      	cmp	r4, #0
 80139ba:	d1f8      	bne.n	80139ae <rmw_context_fini+0xe>
 80139bc:	b189      	cbz	r1, 80139e2 <rmw_context_fini+0x42>
 80139be:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80139c2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80139c6:	789b      	ldrb	r3, [r3, #2]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	bf14      	ite	ne
 80139cc:	210a      	movne	r1, #10
 80139ce:	2100      	moveq	r1, #0
 80139d0:	f7fc ff52 	bl	8010878 <uxr_delete_session_retries>
 80139d4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80139d6:	f7fb fb33 	bl	800f040 <rmw_uxrce_fini_session_memory>
 80139da:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80139dc:	3010      	adds	r0, #16
 80139de:	f001 f9df 	bl	8014da0 <uxr_close_custom_transport>
 80139e2:	2300      	movs	r3, #0
 80139e4:	4630      	mov	r0, r6
 80139e6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80139e8:	bd70      	pop	{r4, r5, r6, pc}
 80139ea:	3018      	adds	r0, #24
 80139ec:	f7fa feee 	bl	800e7cc <rmw_destroy_node>
 80139f0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80139f2:	4606      	mov	r6, r0
 80139f4:	2c00      	cmp	r4, #0
 80139f6:	d1da      	bne.n	80139ae <rmw_context_fini+0xe>
 80139f8:	e7e0      	b.n	80139bc <rmw_context_fini+0x1c>
 80139fa:	4626      	mov	r6, r4
 80139fc:	e7de      	b.n	80139bc <rmw_context_fini+0x1c>
 80139fe:	bf00      	nop
 8013a00:	20012454 	.word	0x20012454

08013a04 <create_topic>:
 8013a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a08:	4605      	mov	r5, r0
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	4822      	ldr	r0, [pc, #136]	@ (8013a98 <create_topic+0x94>)
 8013a0e:	460f      	mov	r7, r1
 8013a10:	4616      	mov	r6, r2
 8013a12:	f7ff fcf9 	bl	8013408 <get_memory>
 8013a16:	4604      	mov	r4, r0
 8013a18:	2800      	cmp	r0, #0
 8013a1a:	d039      	beq.n	8013a90 <create_topic+0x8c>
 8013a1c:	692b      	ldr	r3, [r5, #16]
 8013a1e:	2102      	movs	r1, #2
 8013a20:	6884      	ldr	r4, [r0, #8]
 8013a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013a26:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8013aa0 <create_topic+0x9c>
 8013a2a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013a2e:	1c42      	adds	r2, r0, #1
 8013a30:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013a34:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013a38:	f7fc f80e 	bl	800fa58 <uxr_object_id>
 8013a3c:	223c      	movs	r2, #60	@ 0x3c
 8013a3e:	6120      	str	r0, [r4, #16]
 8013a40:	4641      	mov	r1, r8
 8013a42:	4638      	mov	r0, r7
 8013a44:	f7fb fc3a 	bl	800f2bc <generate_topic_name>
 8013a48:	b1f0      	cbz	r0, 8013a88 <create_topic+0x84>
 8013a4a:	4f14      	ldr	r7, [pc, #80]	@ (8013a9c <create_topic+0x98>)
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	2264      	movs	r2, #100	@ 0x64
 8013a50:	4639      	mov	r1, r7
 8013a52:	f7fb fc05 	bl	800f260 <generate_type_name>
 8013a56:	b1b8      	cbz	r0, 8013a88 <create_topic+0x84>
 8013a58:	6928      	ldr	r0, [r5, #16]
 8013a5a:	2106      	movs	r1, #6
 8013a5c:	696b      	ldr	r3, [r5, #20]
 8013a5e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013a62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a66:	f8cd 8000 	str.w	r8, [sp]
 8013a6a:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8013a6e:	6811      	ldr	r1, [r2, #0]
 8013a70:	6922      	ldr	r2, [r4, #16]
 8013a72:	f7fb ff15 	bl	800f8a0 <uxr_buffer_create_topic_bin>
 8013a76:	4602      	mov	r2, r0
 8013a78:	6928      	ldr	r0, [r5, #16]
 8013a7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013a7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013a82:	f7fb fbb9 	bl	800f1f8 <run_xrce_session>
 8013a86:	b918      	cbnz	r0, 8013a90 <create_topic+0x8c>
 8013a88:	4620      	mov	r0, r4
 8013a8a:	2400      	movs	r4, #0
 8013a8c:	f7fb fb4e 	bl	800f12c <rmw_uxrce_fini_topic_memory>
 8013a90:	4620      	mov	r0, r4
 8013a92:	b004      	add	sp, #16
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	200124b4 	.word	0x200124b4
 8013a9c:	20012544 	.word	0x20012544
 8013aa0:	20012508 	.word	0x20012508

08013aa4 <destroy_topic>:
 8013aa4:	b538      	push	{r3, r4, r5, lr}
 8013aa6:	6985      	ldr	r5, [r0, #24]
 8013aa8:	b1dd      	cbz	r5, 8013ae2 <destroy_topic+0x3e>
 8013aaa:	4604      	mov	r4, r0
 8013aac:	6928      	ldr	r0, [r5, #16]
 8013aae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ab2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ab6:	6922      	ldr	r2, [r4, #16]
 8013ab8:	6819      	ldr	r1, [r3, #0]
 8013aba:	f7fb fe73 	bl	800f7a4 <uxr_buffer_delete_entity>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	6928      	ldr	r0, [r5, #16]
 8013ac2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013ac6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013aca:	f7fb fb95 	bl	800f1f8 <run_xrce_session>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	bf14      	ite	ne
 8013ad6:	2400      	movne	r4, #0
 8013ad8:	2402      	moveq	r4, #2
 8013ada:	f7fb fb27 	bl	800f12c <rmw_uxrce_fini_topic_memory>
 8013ade:	4620      	mov	r0, r4
 8013ae0:	bd38      	pop	{r3, r4, r5, pc}
 8013ae2:	2401      	movs	r4, #1
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	bd38      	pop	{r3, r4, r5, pc}

08013ae8 <rmw_uxrce_transport_init>:
 8013ae8:	b508      	push	{r3, lr}
 8013aea:	b108      	cbz	r0, 8013af0 <rmw_uxrce_transport_init+0x8>
 8013aec:	f100 0210 	add.w	r2, r0, #16
 8013af0:	b139      	cbz	r1, 8013b02 <rmw_uxrce_transport_init+0x1a>
 8013af2:	6949      	ldr	r1, [r1, #20]
 8013af4:	4610      	mov	r0, r2
 8013af6:	f001 f91f 	bl	8014d38 <uxr_init_custom_transport>
 8013afa:	f080 0001 	eor.w	r0, r0, #1
 8013afe:	b2c0      	uxtb	r0, r0
 8013b00:	bd08      	pop	{r3, pc}
 8013b02:	4b04      	ldr	r3, [pc, #16]	@ (8013b14 <rmw_uxrce_transport_init+0x2c>)
 8013b04:	4610      	mov	r0, r2
 8013b06:	6859      	ldr	r1, [r3, #4]
 8013b08:	f001 f916 	bl	8014d38 <uxr_init_custom_transport>
 8013b0c:	f080 0001 	eor.w	r0, r0, #1
 8013b10:	b2c0      	uxtb	r0, r0
 8013b12:	bd08      	pop	{r3, pc}
 8013b14:	2000db2c 	.word	0x2000db2c

08013b18 <rmw_uros_epoch_nanos>:
 8013b18:	4b05      	ldr	r3, [pc, #20]	@ (8013b30 <rmw_uros_epoch_nanos+0x18>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	b123      	cbz	r3, 8013b28 <rmw_uros_epoch_nanos+0x10>
 8013b1e:	6898      	ldr	r0, [r3, #8]
 8013b20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b24:	f7fc b9d4 	b.w	800fed0 <uxr_epoch_nanos>
 8013b28:	2000      	movs	r0, #0
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	20012484 	.word	0x20012484

08013b34 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b38:	6805      	ldr	r5, [r0, #0]
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	460e      	mov	r6, r1
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f7ec fb7e 	bl	8000240 <strcmp>
 8013b44:	b1c8      	cbz	r0, 8013b7a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013b46:	4b11      	ldr	r3, [pc, #68]	@ (8013b8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	429d      	cmp	r5, r3
 8013b4c:	d112      	bne.n	8013b74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013b52:	f8d8 4000 	ldr.w	r4, [r8]
 8013b56:	b16c      	cbz	r4, 8013b74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b58:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013b5c:	2700      	movs	r7, #0
 8013b5e:	3d04      	subs	r5, #4
 8013b60:	4631      	mov	r1, r6
 8013b62:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013b66:	f7ec fb6b 	bl	8000240 <strcmp>
 8013b6a:	00bb      	lsls	r3, r7, #2
 8013b6c:	b140      	cbz	r0, 8013b80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013b6e:	3701      	adds	r7, #1
 8013b70:	42bc      	cmp	r4, r7
 8013b72:	d1f5      	bne.n	8013b60 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013b74:	2000      	movs	r0, #0
 8013b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b88:	58d3      	ldr	r3, [r2, r3]
 8013b8a:	4718      	bx	r3
 8013b8c:	200001ac 	.word	0x200001ac

08013b90 <std_msgs__msg__String__init>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4604      	mov	r4, r0
 8013b94:	b128      	cbz	r0, 8013ba2 <std_msgs__msg__String__init+0x12>
 8013b96:	f7fb fbc3 	bl	800f320 <rosidl_runtime_c__String__init>
 8013b9a:	4605      	mov	r5, r0
 8013b9c:	b120      	cbz	r0, 8013ba8 <std_msgs__msg__String__init+0x18>
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	bd38      	pop	{r3, r4, r5, pc}
 8013ba2:	4605      	mov	r5, r0
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f7fb fbcf 	bl	800f34c <rosidl_runtime_c__String__fini>
 8013bae:	4628      	mov	r0, r5
 8013bb0:	bd38      	pop	{r3, r4, r5, pc}
 8013bb2:	bf00      	nop

08013bb4 <std_msgs__msg__String__fini>:
 8013bb4:	b108      	cbz	r0, 8013bba <std_msgs__msg__String__fini+0x6>
 8013bb6:	f7fb bbc9 	b.w	800f34c <rosidl_runtime_c__String__fini>
 8013bba:	4770      	bx	lr

08013bbc <ucdr_serialize_endian_array_char>:
 8013bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	461f      	mov	r7, r3
 8013bc4:	4605      	mov	r5, r0
 8013bc6:	4690      	mov	r8, r2
 8013bc8:	f7fb fccc 	bl	800f564 <ucdr_check_buffer_available_for>
 8013bcc:	b9e0      	cbnz	r0, 8013c08 <ucdr_serialize_endian_array_char+0x4c>
 8013bce:	463e      	mov	r6, r7
 8013bd0:	e00b      	b.n	8013bea <ucdr_serialize_endian_array_char+0x2e>
 8013bd2:	4441      	add	r1, r8
 8013bd4:	68a8      	ldr	r0, [r5, #8]
 8013bd6:	4622      	mov	r2, r4
 8013bd8:	1b36      	subs	r6, r6, r4
 8013bda:	f003 fb9c 	bl	8017316 <memcpy>
 8013bde:	68ab      	ldr	r3, [r5, #8]
 8013be0:	6928      	ldr	r0, [r5, #16]
 8013be2:	4423      	add	r3, r4
 8013be4:	4420      	add	r0, r4
 8013be6:	60ab      	str	r3, [r5, #8]
 8013be8:	6128      	str	r0, [r5, #16]
 8013bea:	4631      	mov	r1, r6
 8013bec:	2201      	movs	r2, #1
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f7fb fd42 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013bf4:	1bb9      	subs	r1, r7, r6
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d1ea      	bne.n	8013bd2 <ucdr_serialize_endian_array_char+0x16>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	7da8      	ldrb	r0, [r5, #22]
 8013c00:	756b      	strb	r3, [r5, #21]
 8013c02:	4058      	eors	r0, r3
 8013c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c08:	463a      	mov	r2, r7
 8013c0a:	4641      	mov	r1, r8
 8013c0c:	68a8      	ldr	r0, [r5, #8]
 8013c0e:	f003 fb82 	bl	8017316 <memcpy>
 8013c12:	68aa      	ldr	r2, [r5, #8]
 8013c14:	692b      	ldr	r3, [r5, #16]
 8013c16:	443a      	add	r2, r7
 8013c18:	443b      	add	r3, r7
 8013c1a:	60aa      	str	r2, [r5, #8]
 8013c1c:	612b      	str	r3, [r5, #16]
 8013c1e:	e7ed      	b.n	8013bfc <ucdr_serialize_endian_array_char+0x40>

08013c20 <ucdr_deserialize_endian_array_char>:
 8013c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c24:	4619      	mov	r1, r3
 8013c26:	461f      	mov	r7, r3
 8013c28:	4605      	mov	r5, r0
 8013c2a:	4690      	mov	r8, r2
 8013c2c:	f7fb fc9a 	bl	800f564 <ucdr_check_buffer_available_for>
 8013c30:	b9e8      	cbnz	r0, 8013c6e <ucdr_deserialize_endian_array_char+0x4e>
 8013c32:	463e      	mov	r6, r7
 8013c34:	e00c      	b.n	8013c50 <ucdr_deserialize_endian_array_char+0x30>
 8013c36:	eb08 0003 	add.w	r0, r8, r3
 8013c3a:	68a9      	ldr	r1, [r5, #8]
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	1b36      	subs	r6, r6, r4
 8013c40:	f003 fb69 	bl	8017316 <memcpy>
 8013c44:	68ab      	ldr	r3, [r5, #8]
 8013c46:	6928      	ldr	r0, [r5, #16]
 8013c48:	4423      	add	r3, r4
 8013c4a:	4420      	add	r0, r4
 8013c4c:	60ab      	str	r3, [r5, #8]
 8013c4e:	6128      	str	r0, [r5, #16]
 8013c50:	4631      	mov	r1, r6
 8013c52:	2201      	movs	r2, #1
 8013c54:	4628      	mov	r0, r5
 8013c56:	f7fb fd0f 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013c5a:	1bbb      	subs	r3, r7, r6
 8013c5c:	4604      	mov	r4, r0
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d1e9      	bne.n	8013c36 <ucdr_deserialize_endian_array_char+0x16>
 8013c62:	2301      	movs	r3, #1
 8013c64:	7da8      	ldrb	r0, [r5, #22]
 8013c66:	756b      	strb	r3, [r5, #21]
 8013c68:	4058      	eors	r0, r3
 8013c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c6e:	463a      	mov	r2, r7
 8013c70:	68a9      	ldr	r1, [r5, #8]
 8013c72:	4640      	mov	r0, r8
 8013c74:	f003 fb4f 	bl	8017316 <memcpy>
 8013c78:	68aa      	ldr	r2, [r5, #8]
 8013c7a:	692b      	ldr	r3, [r5, #16]
 8013c7c:	443a      	add	r2, r7
 8013c7e:	443b      	add	r3, r7
 8013c80:	60aa      	str	r2, [r5, #8]
 8013c82:	612b      	str	r3, [r5, #16]
 8013c84:	e7ed      	b.n	8013c62 <ucdr_deserialize_endian_array_char+0x42>
 8013c86:	bf00      	nop

08013c88 <ucdr_serialize_array_uint8_t>:
 8013c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c8c:	4688      	mov	r8, r1
 8013c8e:	4611      	mov	r1, r2
 8013c90:	4617      	mov	r7, r2
 8013c92:	4605      	mov	r5, r0
 8013c94:	f7fb fc66 	bl	800f564 <ucdr_check_buffer_available_for>
 8013c98:	b9e0      	cbnz	r0, 8013cd4 <ucdr_serialize_array_uint8_t+0x4c>
 8013c9a:	463e      	mov	r6, r7
 8013c9c:	e00b      	b.n	8013cb6 <ucdr_serialize_array_uint8_t+0x2e>
 8013c9e:	4441      	add	r1, r8
 8013ca0:	68a8      	ldr	r0, [r5, #8]
 8013ca2:	4622      	mov	r2, r4
 8013ca4:	1b36      	subs	r6, r6, r4
 8013ca6:	f003 fb36 	bl	8017316 <memcpy>
 8013caa:	68ab      	ldr	r3, [r5, #8]
 8013cac:	6928      	ldr	r0, [r5, #16]
 8013cae:	4423      	add	r3, r4
 8013cb0:	4420      	add	r0, r4
 8013cb2:	60ab      	str	r3, [r5, #8]
 8013cb4:	6128      	str	r0, [r5, #16]
 8013cb6:	4631      	mov	r1, r6
 8013cb8:	2201      	movs	r2, #1
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f7fb fcdc 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013cc0:	1bb9      	subs	r1, r7, r6
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d1ea      	bne.n	8013c9e <ucdr_serialize_array_uint8_t+0x16>
 8013cc8:	2301      	movs	r3, #1
 8013cca:	7da8      	ldrb	r0, [r5, #22]
 8013ccc:	756b      	strb	r3, [r5, #21]
 8013cce:	4058      	eors	r0, r3
 8013cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd4:	463a      	mov	r2, r7
 8013cd6:	4641      	mov	r1, r8
 8013cd8:	68a8      	ldr	r0, [r5, #8]
 8013cda:	f003 fb1c 	bl	8017316 <memcpy>
 8013cde:	68aa      	ldr	r2, [r5, #8]
 8013ce0:	692b      	ldr	r3, [r5, #16]
 8013ce2:	443a      	add	r2, r7
 8013ce4:	443b      	add	r3, r7
 8013ce6:	60aa      	str	r2, [r5, #8]
 8013ce8:	612b      	str	r3, [r5, #16]
 8013cea:	e7ed      	b.n	8013cc8 <ucdr_serialize_array_uint8_t+0x40>

08013cec <ucdr_serialize_endian_array_uint8_t>:
 8013cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	461f      	mov	r7, r3
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	4690      	mov	r8, r2
 8013cf8:	f7fb fc34 	bl	800f564 <ucdr_check_buffer_available_for>
 8013cfc:	b9e0      	cbnz	r0, 8013d38 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013cfe:	463e      	mov	r6, r7
 8013d00:	e00b      	b.n	8013d1a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8013d02:	4441      	add	r1, r8
 8013d04:	68a8      	ldr	r0, [r5, #8]
 8013d06:	4622      	mov	r2, r4
 8013d08:	1b36      	subs	r6, r6, r4
 8013d0a:	f003 fb04 	bl	8017316 <memcpy>
 8013d0e:	68ab      	ldr	r3, [r5, #8]
 8013d10:	6928      	ldr	r0, [r5, #16]
 8013d12:	4423      	add	r3, r4
 8013d14:	4420      	add	r0, r4
 8013d16:	60ab      	str	r3, [r5, #8]
 8013d18:	6128      	str	r0, [r5, #16]
 8013d1a:	4631      	mov	r1, r6
 8013d1c:	2201      	movs	r2, #1
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f7fb fcaa 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013d24:	1bb9      	subs	r1, r7, r6
 8013d26:	4604      	mov	r4, r0
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	d1ea      	bne.n	8013d02 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	7da8      	ldrb	r0, [r5, #22]
 8013d30:	756b      	strb	r3, [r5, #21]
 8013d32:	4058      	eors	r0, r3
 8013d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d38:	463a      	mov	r2, r7
 8013d3a:	4641      	mov	r1, r8
 8013d3c:	68a8      	ldr	r0, [r5, #8]
 8013d3e:	f003 faea 	bl	8017316 <memcpy>
 8013d42:	68aa      	ldr	r2, [r5, #8]
 8013d44:	692b      	ldr	r3, [r5, #16]
 8013d46:	443a      	add	r2, r7
 8013d48:	443b      	add	r3, r7
 8013d4a:	60aa      	str	r2, [r5, #8]
 8013d4c:	612b      	str	r3, [r5, #16]
 8013d4e:	e7ed      	b.n	8013d2c <ucdr_serialize_endian_array_uint8_t+0x40>

08013d50 <ucdr_deserialize_array_uint8_t>:
 8013d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	4688      	mov	r8, r1
 8013d56:	4611      	mov	r1, r2
 8013d58:	4617      	mov	r7, r2
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	f7fb fc02 	bl	800f564 <ucdr_check_buffer_available_for>
 8013d60:	b9e8      	cbnz	r0, 8013d9e <ucdr_deserialize_array_uint8_t+0x4e>
 8013d62:	463e      	mov	r6, r7
 8013d64:	e00c      	b.n	8013d80 <ucdr_deserialize_array_uint8_t+0x30>
 8013d66:	eb08 0003 	add.w	r0, r8, r3
 8013d6a:	68a9      	ldr	r1, [r5, #8]
 8013d6c:	4622      	mov	r2, r4
 8013d6e:	1b36      	subs	r6, r6, r4
 8013d70:	f003 fad1 	bl	8017316 <memcpy>
 8013d74:	68ab      	ldr	r3, [r5, #8]
 8013d76:	6928      	ldr	r0, [r5, #16]
 8013d78:	4423      	add	r3, r4
 8013d7a:	4420      	add	r0, r4
 8013d7c:	60ab      	str	r3, [r5, #8]
 8013d7e:	6128      	str	r0, [r5, #16]
 8013d80:	4631      	mov	r1, r6
 8013d82:	2201      	movs	r2, #1
 8013d84:	4628      	mov	r0, r5
 8013d86:	f7fb fc77 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013d8a:	1bbb      	subs	r3, r7, r6
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d1e9      	bne.n	8013d66 <ucdr_deserialize_array_uint8_t+0x16>
 8013d92:	2301      	movs	r3, #1
 8013d94:	7da8      	ldrb	r0, [r5, #22]
 8013d96:	756b      	strb	r3, [r5, #21]
 8013d98:	4058      	eors	r0, r3
 8013d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d9e:	463a      	mov	r2, r7
 8013da0:	68a9      	ldr	r1, [r5, #8]
 8013da2:	4640      	mov	r0, r8
 8013da4:	f003 fab7 	bl	8017316 <memcpy>
 8013da8:	68aa      	ldr	r2, [r5, #8]
 8013daa:	692b      	ldr	r3, [r5, #16]
 8013dac:	443a      	add	r2, r7
 8013dae:	443b      	add	r3, r7
 8013db0:	60aa      	str	r2, [r5, #8]
 8013db2:	612b      	str	r3, [r5, #16]
 8013db4:	e7ed      	b.n	8013d92 <ucdr_deserialize_array_uint8_t+0x42>
 8013db6:	bf00      	nop

08013db8 <ucdr_deserialize_endian_array_uint8_t>:
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	461f      	mov	r7, r3
 8013dc0:	4605      	mov	r5, r0
 8013dc2:	4690      	mov	r8, r2
 8013dc4:	f7fb fbce 	bl	800f564 <ucdr_check_buffer_available_for>
 8013dc8:	b9e8      	cbnz	r0, 8013e06 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8013dca:	463e      	mov	r6, r7
 8013dcc:	e00c      	b.n	8013de8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8013dce:	eb08 0003 	add.w	r0, r8, r3
 8013dd2:	68a9      	ldr	r1, [r5, #8]
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	1b36      	subs	r6, r6, r4
 8013dd8:	f003 fa9d 	bl	8017316 <memcpy>
 8013ddc:	68ab      	ldr	r3, [r5, #8]
 8013dde:	6928      	ldr	r0, [r5, #16]
 8013de0:	4423      	add	r3, r4
 8013de2:	4420      	add	r0, r4
 8013de4:	60ab      	str	r3, [r5, #8]
 8013de6:	6128      	str	r0, [r5, #16]
 8013de8:	4631      	mov	r1, r6
 8013dea:	2201      	movs	r2, #1
 8013dec:	4628      	mov	r0, r5
 8013dee:	f7fb fc43 	bl	800f678 <ucdr_check_final_buffer_behavior_array>
 8013df2:	1bbb      	subs	r3, r7, r6
 8013df4:	4604      	mov	r4, r0
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d1e9      	bne.n	8013dce <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	7da8      	ldrb	r0, [r5, #22]
 8013dfe:	756b      	strb	r3, [r5, #21]
 8013e00:	4058      	eors	r0, r3
 8013e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e06:	463a      	mov	r2, r7
 8013e08:	68a9      	ldr	r1, [r5, #8]
 8013e0a:	4640      	mov	r0, r8
 8013e0c:	f003 fa83 	bl	8017316 <memcpy>
 8013e10:	68aa      	ldr	r2, [r5, #8]
 8013e12:	692b      	ldr	r3, [r5, #16]
 8013e14:	443a      	add	r2, r7
 8013e16:	443b      	add	r3, r7
 8013e18:	60aa      	str	r2, [r5, #8]
 8013e1a:	612b      	str	r3, [r5, #16]
 8013e1c:	e7ed      	b.n	8013dfa <ucdr_deserialize_endian_array_uint8_t+0x42>
 8013e1e:	bf00      	nop

08013e20 <ucdr_serialize_bool>:
 8013e20:	b538      	push	{r3, r4, r5, lr}
 8013e22:	460d      	mov	r5, r1
 8013e24:	2101      	movs	r1, #1
 8013e26:	4604      	mov	r4, r0
 8013e28:	f7fb fba8 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013e2c:	b148      	cbz	r0, 8013e42 <ucdr_serialize_bool+0x22>
 8013e2e:	68a3      	ldr	r3, [r4, #8]
 8013e30:	2101      	movs	r1, #1
 8013e32:	701d      	strb	r5, [r3, #0]
 8013e34:	68a2      	ldr	r2, [r4, #8]
 8013e36:	6923      	ldr	r3, [r4, #16]
 8013e38:	440a      	add	r2, r1
 8013e3a:	7561      	strb	r1, [r4, #21]
 8013e3c:	440b      	add	r3, r1
 8013e3e:	60a2      	str	r2, [r4, #8]
 8013e40:	6123      	str	r3, [r4, #16]
 8013e42:	7da0      	ldrb	r0, [r4, #22]
 8013e44:	f080 0001 	eor.w	r0, r0, #1
 8013e48:	bd38      	pop	{r3, r4, r5, pc}
 8013e4a:	bf00      	nop

08013e4c <ucdr_deserialize_bool>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	460d      	mov	r5, r1
 8013e50:	2101      	movs	r1, #1
 8013e52:	4604      	mov	r4, r0
 8013e54:	f7fb fb92 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013e58:	b160      	cbz	r0, 8013e74 <ucdr_deserialize_bool+0x28>
 8013e5a:	68a2      	ldr	r2, [r4, #8]
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	6923      	ldr	r3, [r4, #16]
 8013e60:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013e64:	440b      	add	r3, r1
 8013e66:	3800      	subs	r0, #0
 8013e68:	bf18      	it	ne
 8013e6a:	2001      	movne	r0, #1
 8013e6c:	7028      	strb	r0, [r5, #0]
 8013e6e:	60a2      	str	r2, [r4, #8]
 8013e70:	6123      	str	r3, [r4, #16]
 8013e72:	7561      	strb	r1, [r4, #21]
 8013e74:	7da0      	ldrb	r0, [r4, #22]
 8013e76:	f080 0001 	eor.w	r0, r0, #1
 8013e7a:	bd38      	pop	{r3, r4, r5, pc}

08013e7c <ucdr_serialize_uint8_t>:
 8013e7c:	b538      	push	{r3, r4, r5, lr}
 8013e7e:	460d      	mov	r5, r1
 8013e80:	2101      	movs	r1, #1
 8013e82:	4604      	mov	r4, r0
 8013e84:	f7fb fb7a 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013e88:	b148      	cbz	r0, 8013e9e <ucdr_serialize_uint8_t+0x22>
 8013e8a:	68a3      	ldr	r3, [r4, #8]
 8013e8c:	2101      	movs	r1, #1
 8013e8e:	701d      	strb	r5, [r3, #0]
 8013e90:	68a2      	ldr	r2, [r4, #8]
 8013e92:	6923      	ldr	r3, [r4, #16]
 8013e94:	440a      	add	r2, r1
 8013e96:	7561      	strb	r1, [r4, #21]
 8013e98:	440b      	add	r3, r1
 8013e9a:	60a2      	str	r2, [r4, #8]
 8013e9c:	6123      	str	r3, [r4, #16]
 8013e9e:	7da0      	ldrb	r0, [r4, #22]
 8013ea0:	f080 0001 	eor.w	r0, r0, #1
 8013ea4:	bd38      	pop	{r3, r4, r5, pc}
 8013ea6:	bf00      	nop

08013ea8 <ucdr_deserialize_uint8_t>:
 8013ea8:	b538      	push	{r3, r4, r5, lr}
 8013eaa:	460d      	mov	r5, r1
 8013eac:	2101      	movs	r1, #1
 8013eae:	4604      	mov	r4, r0
 8013eb0:	f7fb fb64 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013eb4:	b150      	cbz	r0, 8013ecc <ucdr_deserialize_uint8_t+0x24>
 8013eb6:	68a3      	ldr	r3, [r4, #8]
 8013eb8:	2101      	movs	r1, #1
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	702b      	strb	r3, [r5, #0]
 8013ebe:	68a2      	ldr	r2, [r4, #8]
 8013ec0:	6923      	ldr	r3, [r4, #16]
 8013ec2:	440a      	add	r2, r1
 8013ec4:	7561      	strb	r1, [r4, #21]
 8013ec6:	440b      	add	r3, r1
 8013ec8:	60a2      	str	r2, [r4, #8]
 8013eca:	6123      	str	r3, [r4, #16]
 8013ecc:	7da0      	ldrb	r0, [r4, #22]
 8013ece:	f080 0001 	eor.w	r0, r0, #1
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}

08013ed4 <ucdr_serialize_uint16_t>:
 8013ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed8:	460b      	mov	r3, r1
 8013eda:	b082      	sub	sp, #8
 8013edc:	4604      	mov	r4, r0
 8013ede:	2102      	movs	r1, #2
 8013ee0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ee4:	f7fb fb9e 	bl	800f624 <ucdr_buffer_alignment>
 8013ee8:	4601      	mov	r1, r0
 8013eea:	4620      	mov	r0, r4
 8013eec:	7d67      	ldrb	r7, [r4, #21]
 8013eee:	f7fb fbe1 	bl	800f6b4 <ucdr_advance_buffer>
 8013ef2:	2102      	movs	r1, #2
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f7fb fb35 	bl	800f564 <ucdr_check_buffer_available_for>
 8013efa:	bb78      	cbnz	r0, 8013f5c <ucdr_serialize_uint16_t+0x88>
 8013efc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013f00:	42ab      	cmp	r3, r5
 8013f02:	d926      	bls.n	8013f52 <ucdr_serialize_uint16_t+0x7e>
 8013f04:	1b5e      	subs	r6, r3, r5
 8013f06:	60a3      	str	r3, [r4, #8]
 8013f08:	6923      	ldr	r3, [r4, #16]
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f1c6 0802 	rsb	r8, r6, #2
 8013f10:	4433      	add	r3, r6
 8013f12:	4641      	mov	r1, r8
 8013f14:	6123      	str	r3, [r4, #16]
 8013f16:	f7fb fb31 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	d03b      	beq.n	8013f96 <ucdr_serialize_uint16_t+0xc2>
 8013f1e:	7d23      	ldrb	r3, [r4, #20]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d04a      	beq.n	8013fba <ucdr_serialize_uint16_t+0xe6>
 8013f24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f28:	702b      	strb	r3, [r5, #0]
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	d040      	beq.n	8013fb0 <ucdr_serialize_uint16_t+0xdc>
 8013f2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f32:	706b      	strb	r3, [r5, #1]
 8013f34:	6923      	ldr	r3, [r4, #16]
 8013f36:	2102      	movs	r1, #2
 8013f38:	68a2      	ldr	r2, [r4, #8]
 8013f3a:	3302      	adds	r3, #2
 8013f3c:	7da0      	ldrb	r0, [r4, #22]
 8013f3e:	4442      	add	r2, r8
 8013f40:	7561      	strb	r1, [r4, #21]
 8013f42:	1b9e      	subs	r6, r3, r6
 8013f44:	f080 0001 	eor.w	r0, r0, #1
 8013f48:	60a2      	str	r2, [r4, #8]
 8013f4a:	6126      	str	r6, [r4, #16]
 8013f4c:	b002      	add	sp, #8
 8013f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f52:	2102      	movs	r1, #2
 8013f54:	4620      	mov	r0, r4
 8013f56:	f7fb fb11 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8013f5a:	b190      	cbz	r0, 8013f82 <ucdr_serialize_uint16_t+0xae>
 8013f5c:	7d23      	ldrb	r3, [r4, #20]
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	68a3      	ldr	r3, [r4, #8]
 8013f62:	d014      	beq.n	8013f8e <ucdr_serialize_uint16_t+0xba>
 8013f64:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013f68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f6c:	7019      	strb	r1, [r3, #0]
 8013f6e:	68a3      	ldr	r3, [r4, #8]
 8013f70:	705a      	strb	r2, [r3, #1]
 8013f72:	2102      	movs	r1, #2
 8013f74:	68a2      	ldr	r2, [r4, #8]
 8013f76:	6923      	ldr	r3, [r4, #16]
 8013f78:	440a      	add	r2, r1
 8013f7a:	7561      	strb	r1, [r4, #21]
 8013f7c:	440b      	add	r3, r1
 8013f7e:	60a2      	str	r2, [r4, #8]
 8013f80:	6123      	str	r3, [r4, #16]
 8013f82:	7da0      	ldrb	r0, [r4, #22]
 8013f84:	f080 0001 	eor.w	r0, r0, #1
 8013f88:	b002      	add	sp, #8
 8013f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013f92:	801a      	strh	r2, [r3, #0]
 8013f94:	e7ed      	b.n	8013f72 <ucdr_serialize_uint16_t+0x9e>
 8013f96:	68a2      	ldr	r2, [r4, #8]
 8013f98:	6923      	ldr	r3, [r4, #16]
 8013f9a:	7da0      	ldrb	r0, [r4, #22]
 8013f9c:	1b92      	subs	r2, r2, r6
 8013f9e:	1b9b      	subs	r3, r3, r6
 8013fa0:	7567      	strb	r7, [r4, #21]
 8013fa2:	f080 0001 	eor.w	r0, r0, #1
 8013fa6:	60a2      	str	r2, [r4, #8]
 8013fa8:	6123      	str	r3, [r4, #16]
 8013faa:	b002      	add	sp, #8
 8013fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb0:	68a3      	ldr	r3, [r4, #8]
 8013fb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fb6:	701a      	strb	r2, [r3, #0]
 8013fb8:	e7bc      	b.n	8013f34 <ucdr_serialize_uint16_t+0x60>
 8013fba:	4628      	mov	r0, r5
 8013fbc:	f10d 0506 	add.w	r5, sp, #6
 8013fc0:	4632      	mov	r2, r6
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	f003 f9a7 	bl	8017316 <memcpy>
 8013fc8:	4642      	mov	r2, r8
 8013fca:	19a9      	adds	r1, r5, r6
 8013fcc:	68a0      	ldr	r0, [r4, #8]
 8013fce:	f003 f9a2 	bl	8017316 <memcpy>
 8013fd2:	e7af      	b.n	8013f34 <ucdr_serialize_uint16_t+0x60>

08013fd4 <ucdr_serialize_endian_uint16_t>:
 8013fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fd8:	4604      	mov	r4, r0
 8013fda:	b083      	sub	sp, #12
 8013fdc:	460d      	mov	r5, r1
 8013fde:	2102      	movs	r1, #2
 8013fe0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013fe4:	f7fb fb1e 	bl	800f624 <ucdr_buffer_alignment>
 8013fe8:	4601      	mov	r1, r0
 8013fea:	4620      	mov	r0, r4
 8013fec:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013ff0:	f7fb fb60 	bl	800f6b4 <ucdr_advance_buffer>
 8013ff4:	2102      	movs	r1, #2
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7fb fab4 	bl	800f564 <ucdr_check_buffer_available_for>
 8013ffc:	bb70      	cbnz	r0, 801405c <ucdr_serialize_endian_uint16_t+0x88>
 8013ffe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014002:	42be      	cmp	r6, r7
 8014004:	d925      	bls.n	8014052 <ucdr_serialize_endian_uint16_t+0x7e>
 8014006:	6923      	ldr	r3, [r4, #16]
 8014008:	4620      	mov	r0, r4
 801400a:	60a6      	str	r6, [r4, #8]
 801400c:	1bf6      	subs	r6, r6, r7
 801400e:	4433      	add	r3, r6
 8014010:	f1c6 0902 	rsb	r9, r6, #2
 8014014:	6123      	str	r3, [r4, #16]
 8014016:	4649      	mov	r1, r9
 8014018:	f7fb fab0 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801401c:	2800      	cmp	r0, #0
 801401e:	d039      	beq.n	8014094 <ucdr_serialize_endian_uint16_t+0xc0>
 8014020:	2d01      	cmp	r5, #1
 8014022:	d04a      	beq.n	80140ba <ucdr_serialize_endian_uint16_t+0xe6>
 8014024:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014028:	703b      	strb	r3, [r7, #0]
 801402a:	2e00      	cmp	r6, #0
 801402c:	d040      	beq.n	80140b0 <ucdr_serialize_endian_uint16_t+0xdc>
 801402e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014032:	707b      	strb	r3, [r7, #1]
 8014034:	6923      	ldr	r3, [r4, #16]
 8014036:	2102      	movs	r1, #2
 8014038:	68a2      	ldr	r2, [r4, #8]
 801403a:	7da0      	ldrb	r0, [r4, #22]
 801403c:	3302      	adds	r3, #2
 801403e:	444a      	add	r2, r9
 8014040:	7561      	strb	r1, [r4, #21]
 8014042:	1b9b      	subs	r3, r3, r6
 8014044:	f080 0001 	eor.w	r0, r0, #1
 8014048:	60a2      	str	r2, [r4, #8]
 801404a:	6123      	str	r3, [r4, #16]
 801404c:	b003      	add	sp, #12
 801404e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014052:	2102      	movs	r1, #2
 8014054:	4620      	mov	r0, r4
 8014056:	f7fb fa91 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801405a:	b188      	cbz	r0, 8014080 <ucdr_serialize_endian_uint16_t+0xac>
 801405c:	2d01      	cmp	r5, #1
 801405e:	68a3      	ldr	r3, [r4, #8]
 8014060:	d014      	beq.n	801408c <ucdr_serialize_endian_uint16_t+0xb8>
 8014062:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014066:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801406a:	7019      	strb	r1, [r3, #0]
 801406c:	68a3      	ldr	r3, [r4, #8]
 801406e:	705a      	strb	r2, [r3, #1]
 8014070:	2102      	movs	r1, #2
 8014072:	68a2      	ldr	r2, [r4, #8]
 8014074:	6923      	ldr	r3, [r4, #16]
 8014076:	440a      	add	r2, r1
 8014078:	7561      	strb	r1, [r4, #21]
 801407a:	440b      	add	r3, r1
 801407c:	60a2      	str	r2, [r4, #8]
 801407e:	6123      	str	r3, [r4, #16]
 8014080:	7da0      	ldrb	r0, [r4, #22]
 8014082:	f080 0001 	eor.w	r0, r0, #1
 8014086:	b003      	add	sp, #12
 8014088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801408c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014090:	801a      	strh	r2, [r3, #0]
 8014092:	e7ed      	b.n	8014070 <ucdr_serialize_endian_uint16_t+0x9c>
 8014094:	68a2      	ldr	r2, [r4, #8]
 8014096:	6923      	ldr	r3, [r4, #16]
 8014098:	7da0      	ldrb	r0, [r4, #22]
 801409a:	1b92      	subs	r2, r2, r6
 801409c:	1b9b      	subs	r3, r3, r6
 801409e:	f884 8015 	strb.w	r8, [r4, #21]
 80140a2:	f080 0001 	eor.w	r0, r0, #1
 80140a6:	60a2      	str	r2, [r4, #8]
 80140a8:	6123      	str	r3, [r4, #16]
 80140aa:	b003      	add	sp, #12
 80140ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140b0:	68a3      	ldr	r3, [r4, #8]
 80140b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80140b6:	701a      	strb	r2, [r3, #0]
 80140b8:	e7bc      	b.n	8014034 <ucdr_serialize_endian_uint16_t+0x60>
 80140ba:	f10d 0506 	add.w	r5, sp, #6
 80140be:	4632      	mov	r2, r6
 80140c0:	4638      	mov	r0, r7
 80140c2:	4629      	mov	r1, r5
 80140c4:	f003 f927 	bl	8017316 <memcpy>
 80140c8:	464a      	mov	r2, r9
 80140ca:	19a9      	adds	r1, r5, r6
 80140cc:	68a0      	ldr	r0, [r4, #8]
 80140ce:	f003 f922 	bl	8017316 <memcpy>
 80140d2:	e7af      	b.n	8014034 <ucdr_serialize_endian_uint16_t+0x60>

080140d4 <ucdr_deserialize_uint16_t>:
 80140d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140d8:	4604      	mov	r4, r0
 80140da:	460d      	mov	r5, r1
 80140dc:	2102      	movs	r1, #2
 80140de:	f7fb faa1 	bl	800f624 <ucdr_buffer_alignment>
 80140e2:	4601      	mov	r1, r0
 80140e4:	4620      	mov	r0, r4
 80140e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80140ea:	f7fb fae3 	bl	800f6b4 <ucdr_advance_buffer>
 80140ee:	2102      	movs	r1, #2
 80140f0:	4620      	mov	r0, r4
 80140f2:	f7fb fa37 	bl	800f564 <ucdr_check_buffer_available_for>
 80140f6:	bb60      	cbnz	r0, 8014152 <ucdr_deserialize_uint16_t+0x7e>
 80140f8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80140fc:	42be      	cmp	r6, r7
 80140fe:	d923      	bls.n	8014148 <ucdr_deserialize_uint16_t+0x74>
 8014100:	6923      	ldr	r3, [r4, #16]
 8014102:	4620      	mov	r0, r4
 8014104:	60a6      	str	r6, [r4, #8]
 8014106:	1bf6      	subs	r6, r6, r7
 8014108:	4433      	add	r3, r6
 801410a:	f1c6 0902 	rsb	r9, r6, #2
 801410e:	6123      	str	r3, [r4, #16]
 8014110:	4649      	mov	r1, r9
 8014112:	f7fb fa33 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014116:	2800      	cmp	r0, #0
 8014118:	d034      	beq.n	8014184 <ucdr_deserialize_uint16_t+0xb0>
 801411a:	7d23      	ldrb	r3, [r4, #20]
 801411c:	2b01      	cmp	r3, #1
 801411e:	d042      	beq.n	80141a6 <ucdr_deserialize_uint16_t+0xd2>
 8014120:	787b      	ldrb	r3, [r7, #1]
 8014122:	702b      	strb	r3, [r5, #0]
 8014124:	2e00      	cmp	r6, #0
 8014126:	d03a      	beq.n	801419e <ucdr_deserialize_uint16_t+0xca>
 8014128:	783b      	ldrb	r3, [r7, #0]
 801412a:	706b      	strb	r3, [r5, #1]
 801412c:	6923      	ldr	r3, [r4, #16]
 801412e:	2102      	movs	r1, #2
 8014130:	68a2      	ldr	r2, [r4, #8]
 8014132:	3302      	adds	r3, #2
 8014134:	7da0      	ldrb	r0, [r4, #22]
 8014136:	444a      	add	r2, r9
 8014138:	7561      	strb	r1, [r4, #21]
 801413a:	1b9b      	subs	r3, r3, r6
 801413c:	f080 0001 	eor.w	r0, r0, #1
 8014140:	60a2      	str	r2, [r4, #8]
 8014142:	6123      	str	r3, [r4, #16]
 8014144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014148:	2102      	movs	r1, #2
 801414a:	4620      	mov	r0, r4
 801414c:	f7fb fa16 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014150:	b180      	cbz	r0, 8014174 <ucdr_deserialize_uint16_t+0xa0>
 8014152:	7d23      	ldrb	r3, [r4, #20]
 8014154:	2b01      	cmp	r3, #1
 8014156:	68a3      	ldr	r3, [r4, #8]
 8014158:	d011      	beq.n	801417e <ucdr_deserialize_uint16_t+0xaa>
 801415a:	785b      	ldrb	r3, [r3, #1]
 801415c:	702b      	strb	r3, [r5, #0]
 801415e:	68a3      	ldr	r3, [r4, #8]
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	706b      	strb	r3, [r5, #1]
 8014164:	2102      	movs	r1, #2
 8014166:	68a2      	ldr	r2, [r4, #8]
 8014168:	6923      	ldr	r3, [r4, #16]
 801416a:	440a      	add	r2, r1
 801416c:	7561      	strb	r1, [r4, #21]
 801416e:	440b      	add	r3, r1
 8014170:	60a2      	str	r2, [r4, #8]
 8014172:	6123      	str	r3, [r4, #16]
 8014174:	7da0      	ldrb	r0, [r4, #22]
 8014176:	f080 0001 	eor.w	r0, r0, #1
 801417a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801417e:	881b      	ldrh	r3, [r3, #0]
 8014180:	802b      	strh	r3, [r5, #0]
 8014182:	e7ef      	b.n	8014164 <ucdr_deserialize_uint16_t+0x90>
 8014184:	68a2      	ldr	r2, [r4, #8]
 8014186:	6923      	ldr	r3, [r4, #16]
 8014188:	1b92      	subs	r2, r2, r6
 801418a:	7da0      	ldrb	r0, [r4, #22]
 801418c:	1b9b      	subs	r3, r3, r6
 801418e:	f884 8015 	strb.w	r8, [r4, #21]
 8014192:	f080 0001 	eor.w	r0, r0, #1
 8014196:	60a2      	str	r2, [r4, #8]
 8014198:	6123      	str	r3, [r4, #16]
 801419a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801419e:	68a3      	ldr	r3, [r4, #8]
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	706b      	strb	r3, [r5, #1]
 80141a4:	e7c2      	b.n	801412c <ucdr_deserialize_uint16_t+0x58>
 80141a6:	4639      	mov	r1, r7
 80141a8:	4632      	mov	r2, r6
 80141aa:	4628      	mov	r0, r5
 80141ac:	f003 f8b3 	bl	8017316 <memcpy>
 80141b0:	464a      	mov	r2, r9
 80141b2:	19a8      	adds	r0, r5, r6
 80141b4:	68a1      	ldr	r1, [r4, #8]
 80141b6:	f003 f8ae 	bl	8017316 <memcpy>
 80141ba:	e7b7      	b.n	801412c <ucdr_deserialize_uint16_t+0x58>

080141bc <ucdr_deserialize_endian_uint16_t>:
 80141bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141c0:	4604      	mov	r4, r0
 80141c2:	460e      	mov	r6, r1
 80141c4:	2102      	movs	r1, #2
 80141c6:	4615      	mov	r5, r2
 80141c8:	f7fb fa2c 	bl	800f624 <ucdr_buffer_alignment>
 80141cc:	4601      	mov	r1, r0
 80141ce:	4620      	mov	r0, r4
 80141d0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80141d4:	f7fb fa6e 	bl	800f6b4 <ucdr_advance_buffer>
 80141d8:	2102      	movs	r1, #2
 80141da:	4620      	mov	r0, r4
 80141dc:	f7fb f9c2 	bl	800f564 <ucdr_check_buffer_available_for>
 80141e0:	bb70      	cbnz	r0, 8014240 <ucdr_deserialize_endian_uint16_t+0x84>
 80141e2:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80141e6:	454f      	cmp	r7, r9
 80141e8:	d925      	bls.n	8014236 <ucdr_deserialize_endian_uint16_t+0x7a>
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	4620      	mov	r0, r4
 80141ee:	60a7      	str	r7, [r4, #8]
 80141f0:	eba7 0709 	sub.w	r7, r7, r9
 80141f4:	443b      	add	r3, r7
 80141f6:	f1c7 0a02 	rsb	sl, r7, #2
 80141fa:	6123      	str	r3, [r4, #16]
 80141fc:	4651      	mov	r1, sl
 80141fe:	f7fb f9bd 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014202:	2800      	cmp	r0, #0
 8014204:	d034      	beq.n	8014270 <ucdr_deserialize_endian_uint16_t+0xb4>
 8014206:	2e01      	cmp	r6, #1
 8014208:	d043      	beq.n	8014292 <ucdr_deserialize_endian_uint16_t+0xd6>
 801420a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801420e:	702b      	strb	r3, [r5, #0]
 8014210:	2f00      	cmp	r7, #0
 8014212:	d03a      	beq.n	801428a <ucdr_deserialize_endian_uint16_t+0xce>
 8014214:	f899 3000 	ldrb.w	r3, [r9]
 8014218:	706b      	strb	r3, [r5, #1]
 801421a:	6923      	ldr	r3, [r4, #16]
 801421c:	2102      	movs	r1, #2
 801421e:	68a2      	ldr	r2, [r4, #8]
 8014220:	3302      	adds	r3, #2
 8014222:	7da0      	ldrb	r0, [r4, #22]
 8014224:	4452      	add	r2, sl
 8014226:	7561      	strb	r1, [r4, #21]
 8014228:	1bdb      	subs	r3, r3, r7
 801422a:	f080 0001 	eor.w	r0, r0, #1
 801422e:	60a2      	str	r2, [r4, #8]
 8014230:	6123      	str	r3, [r4, #16]
 8014232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014236:	2102      	movs	r1, #2
 8014238:	4620      	mov	r0, r4
 801423a:	f7fb f99f 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801423e:	b178      	cbz	r0, 8014260 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014240:	2e01      	cmp	r6, #1
 8014242:	68a3      	ldr	r3, [r4, #8]
 8014244:	d011      	beq.n	801426a <ucdr_deserialize_endian_uint16_t+0xae>
 8014246:	785b      	ldrb	r3, [r3, #1]
 8014248:	702b      	strb	r3, [r5, #0]
 801424a:	68a3      	ldr	r3, [r4, #8]
 801424c:	781b      	ldrb	r3, [r3, #0]
 801424e:	706b      	strb	r3, [r5, #1]
 8014250:	2102      	movs	r1, #2
 8014252:	68a2      	ldr	r2, [r4, #8]
 8014254:	6923      	ldr	r3, [r4, #16]
 8014256:	440a      	add	r2, r1
 8014258:	7561      	strb	r1, [r4, #21]
 801425a:	440b      	add	r3, r1
 801425c:	60a2      	str	r2, [r4, #8]
 801425e:	6123      	str	r3, [r4, #16]
 8014260:	7da0      	ldrb	r0, [r4, #22]
 8014262:	f080 0001 	eor.w	r0, r0, #1
 8014266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801426a:	881b      	ldrh	r3, [r3, #0]
 801426c:	802b      	strh	r3, [r5, #0]
 801426e:	e7ef      	b.n	8014250 <ucdr_deserialize_endian_uint16_t+0x94>
 8014270:	68a2      	ldr	r2, [r4, #8]
 8014272:	6923      	ldr	r3, [r4, #16]
 8014274:	1bd2      	subs	r2, r2, r7
 8014276:	7da0      	ldrb	r0, [r4, #22]
 8014278:	1bdb      	subs	r3, r3, r7
 801427a:	f884 8015 	strb.w	r8, [r4, #21]
 801427e:	f080 0001 	eor.w	r0, r0, #1
 8014282:	60a2      	str	r2, [r4, #8]
 8014284:	6123      	str	r3, [r4, #16]
 8014286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	706b      	strb	r3, [r5, #1]
 8014290:	e7c3      	b.n	801421a <ucdr_deserialize_endian_uint16_t+0x5e>
 8014292:	4649      	mov	r1, r9
 8014294:	463a      	mov	r2, r7
 8014296:	4628      	mov	r0, r5
 8014298:	f003 f83d 	bl	8017316 <memcpy>
 801429c:	4652      	mov	r2, sl
 801429e:	19e8      	adds	r0, r5, r7
 80142a0:	68a1      	ldr	r1, [r4, #8]
 80142a2:	f003 f838 	bl	8017316 <memcpy>
 80142a6:	e7b8      	b.n	801421a <ucdr_deserialize_endian_uint16_t+0x5e>

080142a8 <ucdr_serialize_uint32_t>:
 80142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	4604      	mov	r4, r0
 80142b0:	9101      	str	r1, [sp, #4]
 80142b2:	2104      	movs	r1, #4
 80142b4:	f7fb f9b6 	bl	800f624 <ucdr_buffer_alignment>
 80142b8:	4601      	mov	r1, r0
 80142ba:	4620      	mov	r0, r4
 80142bc:	7d67      	ldrb	r7, [r4, #21]
 80142be:	f7fb f9f9 	bl	800f6b4 <ucdr_advance_buffer>
 80142c2:	2104      	movs	r1, #4
 80142c4:	4620      	mov	r0, r4
 80142c6:	f7fb f94d 	bl	800f564 <ucdr_check_buffer_available_for>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d139      	bne.n	8014342 <ucdr_serialize_uint32_t+0x9a>
 80142ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80142d2:	42ab      	cmp	r3, r5
 80142d4:	d930      	bls.n	8014338 <ucdr_serialize_uint32_t+0x90>
 80142d6:	1b5e      	subs	r6, r3, r5
 80142d8:	60a3      	str	r3, [r4, #8]
 80142da:	6923      	ldr	r3, [r4, #16]
 80142dc:	4620      	mov	r0, r4
 80142de:	f1c6 0804 	rsb	r8, r6, #4
 80142e2:	4433      	add	r3, r6
 80142e4:	4641      	mov	r1, r8
 80142e6:	6123      	str	r3, [r4, #16]
 80142e8:	f7fb f948 	bl	800f57c <ucdr_check_final_buffer_behavior>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d04c      	beq.n	801438a <ucdr_serialize_uint32_t+0xe2>
 80142f0:	7d23      	ldrb	r3, [r4, #20]
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d063      	beq.n	80143be <ucdr_serialize_uint32_t+0x116>
 80142f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80142fa:	702b      	strb	r3, [r5, #0]
 80142fc:	2e00      	cmp	r6, #0
 80142fe:	d051      	beq.n	80143a4 <ucdr_serialize_uint32_t+0xfc>
 8014300:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014304:	2e01      	cmp	r6, #1
 8014306:	706b      	strb	r3, [r5, #1]
 8014308:	d050      	beq.n	80143ac <ucdr_serialize_uint32_t+0x104>
 801430a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801430e:	2e02      	cmp	r6, #2
 8014310:	70ab      	strb	r3, [r5, #2]
 8014312:	d04f      	beq.n	80143b4 <ucdr_serialize_uint32_t+0x10c>
 8014314:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014318:	70eb      	strb	r3, [r5, #3]
 801431a:	6923      	ldr	r3, [r4, #16]
 801431c:	2104      	movs	r1, #4
 801431e:	68a2      	ldr	r2, [r4, #8]
 8014320:	3304      	adds	r3, #4
 8014322:	7da0      	ldrb	r0, [r4, #22]
 8014324:	4442      	add	r2, r8
 8014326:	7561      	strb	r1, [r4, #21]
 8014328:	1b9e      	subs	r6, r3, r6
 801432a:	f080 0001 	eor.w	r0, r0, #1
 801432e:	60a2      	str	r2, [r4, #8]
 8014330:	6126      	str	r6, [r4, #16]
 8014332:	b002      	add	sp, #8
 8014334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014338:	2104      	movs	r1, #4
 801433a:	4620      	mov	r0, r4
 801433c:	f7fb f91e 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014340:	b1d0      	cbz	r0, 8014378 <ucdr_serialize_uint32_t+0xd0>
 8014342:	7d23      	ldrb	r3, [r4, #20]
 8014344:	2b01      	cmp	r3, #1
 8014346:	68a3      	ldr	r3, [r4, #8]
 8014348:	d01c      	beq.n	8014384 <ucdr_serialize_uint32_t+0xdc>
 801434a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801434e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014352:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014356:	7018      	strb	r0, [r3, #0]
 8014358:	68a3      	ldr	r3, [r4, #8]
 801435a:	705a      	strb	r2, [r3, #1]
 801435c:	68a3      	ldr	r3, [r4, #8]
 801435e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014362:	7099      	strb	r1, [r3, #2]
 8014364:	68a3      	ldr	r3, [r4, #8]
 8014366:	70da      	strb	r2, [r3, #3]
 8014368:	2104      	movs	r1, #4
 801436a:	68a2      	ldr	r2, [r4, #8]
 801436c:	6923      	ldr	r3, [r4, #16]
 801436e:	440a      	add	r2, r1
 8014370:	7561      	strb	r1, [r4, #21]
 8014372:	440b      	add	r3, r1
 8014374:	60a2      	str	r2, [r4, #8]
 8014376:	6123      	str	r3, [r4, #16]
 8014378:	7da0      	ldrb	r0, [r4, #22]
 801437a:	f080 0001 	eor.w	r0, r0, #1
 801437e:	b002      	add	sp, #8
 8014380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014384:	9a01      	ldr	r2, [sp, #4]
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	e7ee      	b.n	8014368 <ucdr_serialize_uint32_t+0xc0>
 801438a:	68a2      	ldr	r2, [r4, #8]
 801438c:	6923      	ldr	r3, [r4, #16]
 801438e:	7da0      	ldrb	r0, [r4, #22]
 8014390:	1b92      	subs	r2, r2, r6
 8014392:	1b9b      	subs	r3, r3, r6
 8014394:	7567      	strb	r7, [r4, #21]
 8014396:	f080 0001 	eor.w	r0, r0, #1
 801439a:	60a2      	str	r2, [r4, #8]
 801439c:	6123      	str	r3, [r4, #16]
 801439e:	b002      	add	sp, #8
 80143a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143a4:	68a3      	ldr	r3, [r4, #8]
 80143a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80143aa:	701a      	strb	r2, [r3, #0]
 80143ac:	68a3      	ldr	r3, [r4, #8]
 80143ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80143b2:	701a      	strb	r2, [r3, #0]
 80143b4:	68a3      	ldr	r3, [r4, #8]
 80143b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80143ba:	701a      	strb	r2, [r3, #0]
 80143bc:	e7ad      	b.n	801431a <ucdr_serialize_uint32_t+0x72>
 80143be:	4628      	mov	r0, r5
 80143c0:	ad01      	add	r5, sp, #4
 80143c2:	4632      	mov	r2, r6
 80143c4:	4629      	mov	r1, r5
 80143c6:	f002 ffa6 	bl	8017316 <memcpy>
 80143ca:	4642      	mov	r2, r8
 80143cc:	19a9      	adds	r1, r5, r6
 80143ce:	68a0      	ldr	r0, [r4, #8]
 80143d0:	f002 ffa1 	bl	8017316 <memcpy>
 80143d4:	e7a1      	b.n	801431a <ucdr_serialize_uint32_t+0x72>
 80143d6:	bf00      	nop

080143d8 <ucdr_serialize_endian_uint32_t>:
 80143d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143dc:	4604      	mov	r4, r0
 80143de:	b083      	sub	sp, #12
 80143e0:	460d      	mov	r5, r1
 80143e2:	2104      	movs	r1, #4
 80143e4:	9201      	str	r2, [sp, #4]
 80143e6:	f7fb f91d 	bl	800f624 <ucdr_buffer_alignment>
 80143ea:	4601      	mov	r1, r0
 80143ec:	4620      	mov	r0, r4
 80143ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 80143f2:	f7fb f95f 	bl	800f6b4 <ucdr_advance_buffer>
 80143f6:	2104      	movs	r1, #4
 80143f8:	4620      	mov	r0, r4
 80143fa:	f7fb f8b3 	bl	800f564 <ucdr_check_buffer_available_for>
 80143fe:	2800      	cmp	r0, #0
 8014400:	d138      	bne.n	8014474 <ucdr_serialize_endian_uint32_t+0x9c>
 8014402:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014406:	42b7      	cmp	r7, r6
 8014408:	d92f      	bls.n	801446a <ucdr_serialize_endian_uint32_t+0x92>
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	4620      	mov	r0, r4
 801440e:	60a7      	str	r7, [r4, #8]
 8014410:	1bbf      	subs	r7, r7, r6
 8014412:	443b      	add	r3, r7
 8014414:	f1c7 0904 	rsb	r9, r7, #4
 8014418:	6123      	str	r3, [r4, #16]
 801441a:	4649      	mov	r1, r9
 801441c:	f7fb f8ae 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014420:	2800      	cmp	r0, #0
 8014422:	d04a      	beq.n	80144ba <ucdr_serialize_endian_uint32_t+0xe2>
 8014424:	2d01      	cmp	r5, #1
 8014426:	d063      	beq.n	80144f0 <ucdr_serialize_endian_uint32_t+0x118>
 8014428:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801442c:	7033      	strb	r3, [r6, #0]
 801442e:	2f00      	cmp	r7, #0
 8014430:	d051      	beq.n	80144d6 <ucdr_serialize_endian_uint32_t+0xfe>
 8014432:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014436:	2f01      	cmp	r7, #1
 8014438:	7073      	strb	r3, [r6, #1]
 801443a:	d050      	beq.n	80144de <ucdr_serialize_endian_uint32_t+0x106>
 801443c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014440:	2f02      	cmp	r7, #2
 8014442:	70b3      	strb	r3, [r6, #2]
 8014444:	d04f      	beq.n	80144e6 <ucdr_serialize_endian_uint32_t+0x10e>
 8014446:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801444a:	70f3      	strb	r3, [r6, #3]
 801444c:	6923      	ldr	r3, [r4, #16]
 801444e:	2104      	movs	r1, #4
 8014450:	68a2      	ldr	r2, [r4, #8]
 8014452:	7da0      	ldrb	r0, [r4, #22]
 8014454:	3304      	adds	r3, #4
 8014456:	444a      	add	r2, r9
 8014458:	7561      	strb	r1, [r4, #21]
 801445a:	1bdb      	subs	r3, r3, r7
 801445c:	f080 0001 	eor.w	r0, r0, #1
 8014460:	60a2      	str	r2, [r4, #8]
 8014462:	6123      	str	r3, [r4, #16]
 8014464:	b003      	add	sp, #12
 8014466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801446a:	2104      	movs	r1, #4
 801446c:	4620      	mov	r0, r4
 801446e:	f7fb f885 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014472:	b1c8      	cbz	r0, 80144a8 <ucdr_serialize_endian_uint32_t+0xd0>
 8014474:	2d01      	cmp	r5, #1
 8014476:	68a3      	ldr	r3, [r4, #8]
 8014478:	d01c      	beq.n	80144b4 <ucdr_serialize_endian_uint32_t+0xdc>
 801447a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801447e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014482:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014486:	7018      	strb	r0, [r3, #0]
 8014488:	68a3      	ldr	r3, [r4, #8]
 801448a:	705a      	strb	r2, [r3, #1]
 801448c:	68a3      	ldr	r3, [r4, #8]
 801448e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014492:	7099      	strb	r1, [r3, #2]
 8014494:	68a3      	ldr	r3, [r4, #8]
 8014496:	70da      	strb	r2, [r3, #3]
 8014498:	2104      	movs	r1, #4
 801449a:	68a2      	ldr	r2, [r4, #8]
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	440a      	add	r2, r1
 80144a0:	7561      	strb	r1, [r4, #21]
 80144a2:	440b      	add	r3, r1
 80144a4:	60a2      	str	r2, [r4, #8]
 80144a6:	6123      	str	r3, [r4, #16]
 80144a8:	7da0      	ldrb	r0, [r4, #22]
 80144aa:	f080 0001 	eor.w	r0, r0, #1
 80144ae:	b003      	add	sp, #12
 80144b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144b4:	9a01      	ldr	r2, [sp, #4]
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	e7ee      	b.n	8014498 <ucdr_serialize_endian_uint32_t+0xc0>
 80144ba:	68a2      	ldr	r2, [r4, #8]
 80144bc:	6923      	ldr	r3, [r4, #16]
 80144be:	7da0      	ldrb	r0, [r4, #22]
 80144c0:	1bd2      	subs	r2, r2, r7
 80144c2:	1bdb      	subs	r3, r3, r7
 80144c4:	f884 8015 	strb.w	r8, [r4, #21]
 80144c8:	f080 0001 	eor.w	r0, r0, #1
 80144cc:	60a2      	str	r2, [r4, #8]
 80144ce:	6123      	str	r3, [r4, #16]
 80144d0:	b003      	add	sp, #12
 80144d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144d6:	68a3      	ldr	r3, [r4, #8]
 80144d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80144dc:	701a      	strb	r2, [r3, #0]
 80144de:	68a3      	ldr	r3, [r4, #8]
 80144e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	68a3      	ldr	r3, [r4, #8]
 80144e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144ec:	701a      	strb	r2, [r3, #0]
 80144ee:	e7ad      	b.n	801444c <ucdr_serialize_endian_uint32_t+0x74>
 80144f0:	ad01      	add	r5, sp, #4
 80144f2:	463a      	mov	r2, r7
 80144f4:	4630      	mov	r0, r6
 80144f6:	4629      	mov	r1, r5
 80144f8:	f002 ff0d 	bl	8017316 <memcpy>
 80144fc:	464a      	mov	r2, r9
 80144fe:	19e9      	adds	r1, r5, r7
 8014500:	68a0      	ldr	r0, [r4, #8]
 8014502:	f002 ff08 	bl	8017316 <memcpy>
 8014506:	e7a1      	b.n	801444c <ucdr_serialize_endian_uint32_t+0x74>

08014508 <ucdr_deserialize_uint32_t>:
 8014508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801450c:	4604      	mov	r4, r0
 801450e:	460d      	mov	r5, r1
 8014510:	2104      	movs	r1, #4
 8014512:	f7fb f887 	bl	800f624 <ucdr_buffer_alignment>
 8014516:	4601      	mov	r1, r0
 8014518:	4620      	mov	r0, r4
 801451a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801451e:	f7fb f8c9 	bl	800f6b4 <ucdr_advance_buffer>
 8014522:	2104      	movs	r1, #4
 8014524:	4620      	mov	r0, r4
 8014526:	f7fb f81d 	bl	800f564 <ucdr_check_buffer_available_for>
 801452a:	2800      	cmp	r0, #0
 801452c:	d138      	bne.n	80145a0 <ucdr_deserialize_uint32_t+0x98>
 801452e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014532:	42b7      	cmp	r7, r6
 8014534:	d92f      	bls.n	8014596 <ucdr_deserialize_uint32_t+0x8e>
 8014536:	6923      	ldr	r3, [r4, #16]
 8014538:	4620      	mov	r0, r4
 801453a:	60a7      	str	r7, [r4, #8]
 801453c:	1bbf      	subs	r7, r7, r6
 801453e:	443b      	add	r3, r7
 8014540:	f1c7 0904 	rsb	r9, r7, #4
 8014544:	6123      	str	r3, [r4, #16]
 8014546:	4649      	mov	r1, r9
 8014548:	f7fb f818 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801454c:	2800      	cmp	r0, #0
 801454e:	d046      	beq.n	80145de <ucdr_deserialize_uint32_t+0xd6>
 8014550:	7d23      	ldrb	r3, [r4, #20]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d05c      	beq.n	8014610 <ucdr_deserialize_uint32_t+0x108>
 8014556:	78f3      	ldrb	r3, [r6, #3]
 8014558:	702b      	strb	r3, [r5, #0]
 801455a:	2f00      	cmp	r7, #0
 801455c:	d04c      	beq.n	80145f8 <ucdr_deserialize_uint32_t+0xf0>
 801455e:	78b3      	ldrb	r3, [r6, #2]
 8014560:	2f01      	cmp	r7, #1
 8014562:	706b      	strb	r3, [r5, #1]
 8014564:	f105 0302 	add.w	r3, r5, #2
 8014568:	d04a      	beq.n	8014600 <ucdr_deserialize_uint32_t+0xf8>
 801456a:	7873      	ldrb	r3, [r6, #1]
 801456c:	2f02      	cmp	r7, #2
 801456e:	70ab      	strb	r3, [r5, #2]
 8014570:	f105 0303 	add.w	r3, r5, #3
 8014574:	d048      	beq.n	8014608 <ucdr_deserialize_uint32_t+0x100>
 8014576:	7833      	ldrb	r3, [r6, #0]
 8014578:	70eb      	strb	r3, [r5, #3]
 801457a:	6923      	ldr	r3, [r4, #16]
 801457c:	2104      	movs	r1, #4
 801457e:	68a2      	ldr	r2, [r4, #8]
 8014580:	3304      	adds	r3, #4
 8014582:	7da0      	ldrb	r0, [r4, #22]
 8014584:	444a      	add	r2, r9
 8014586:	7561      	strb	r1, [r4, #21]
 8014588:	1bdb      	subs	r3, r3, r7
 801458a:	f080 0001 	eor.w	r0, r0, #1
 801458e:	60a2      	str	r2, [r4, #8]
 8014590:	6123      	str	r3, [r4, #16]
 8014592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014596:	2104      	movs	r1, #4
 8014598:	4620      	mov	r0, r4
 801459a:	f7fa ffef 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801459e:	b1b0      	cbz	r0, 80145ce <ucdr_deserialize_uint32_t+0xc6>
 80145a0:	7d23      	ldrb	r3, [r4, #20]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	68a3      	ldr	r3, [r4, #8]
 80145a6:	d017      	beq.n	80145d8 <ucdr_deserialize_uint32_t+0xd0>
 80145a8:	78db      	ldrb	r3, [r3, #3]
 80145aa:	702b      	strb	r3, [r5, #0]
 80145ac:	68a3      	ldr	r3, [r4, #8]
 80145ae:	789b      	ldrb	r3, [r3, #2]
 80145b0:	706b      	strb	r3, [r5, #1]
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	785b      	ldrb	r3, [r3, #1]
 80145b6:	70ab      	strb	r3, [r5, #2]
 80145b8:	68a3      	ldr	r3, [r4, #8]
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	70eb      	strb	r3, [r5, #3]
 80145be:	2104      	movs	r1, #4
 80145c0:	68a2      	ldr	r2, [r4, #8]
 80145c2:	6923      	ldr	r3, [r4, #16]
 80145c4:	440a      	add	r2, r1
 80145c6:	7561      	strb	r1, [r4, #21]
 80145c8:	440b      	add	r3, r1
 80145ca:	60a2      	str	r2, [r4, #8]
 80145cc:	6123      	str	r3, [r4, #16]
 80145ce:	7da0      	ldrb	r0, [r4, #22]
 80145d0:	f080 0001 	eor.w	r0, r0, #1
 80145d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	602b      	str	r3, [r5, #0]
 80145dc:	e7ef      	b.n	80145be <ucdr_deserialize_uint32_t+0xb6>
 80145de:	68a2      	ldr	r2, [r4, #8]
 80145e0:	6923      	ldr	r3, [r4, #16]
 80145e2:	1bd2      	subs	r2, r2, r7
 80145e4:	7da0      	ldrb	r0, [r4, #22]
 80145e6:	1bdb      	subs	r3, r3, r7
 80145e8:	f884 8015 	strb.w	r8, [r4, #21]
 80145ec:	f080 0001 	eor.w	r0, r0, #1
 80145f0:	60a2      	str	r2, [r4, #8]
 80145f2:	6123      	str	r3, [r4, #16]
 80145f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145f8:	68a3      	ldr	r3, [r4, #8]
 80145fa:	789b      	ldrb	r3, [r3, #2]
 80145fc:	706b      	strb	r3, [r5, #1]
 80145fe:	1cab      	adds	r3, r5, #2
 8014600:	68a2      	ldr	r2, [r4, #8]
 8014602:	7852      	ldrb	r2, [r2, #1]
 8014604:	f803 2b01 	strb.w	r2, [r3], #1
 8014608:	68a2      	ldr	r2, [r4, #8]
 801460a:	7812      	ldrb	r2, [r2, #0]
 801460c:	701a      	strb	r2, [r3, #0]
 801460e:	e7b4      	b.n	801457a <ucdr_deserialize_uint32_t+0x72>
 8014610:	4631      	mov	r1, r6
 8014612:	463a      	mov	r2, r7
 8014614:	4628      	mov	r0, r5
 8014616:	f002 fe7e 	bl	8017316 <memcpy>
 801461a:	464a      	mov	r2, r9
 801461c:	19e8      	adds	r0, r5, r7
 801461e:	68a1      	ldr	r1, [r4, #8]
 8014620:	f002 fe79 	bl	8017316 <memcpy>
 8014624:	e7a9      	b.n	801457a <ucdr_deserialize_uint32_t+0x72>
 8014626:	bf00      	nop

08014628 <ucdr_deserialize_endian_uint32_t>:
 8014628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801462c:	4604      	mov	r4, r0
 801462e:	460e      	mov	r6, r1
 8014630:	2104      	movs	r1, #4
 8014632:	4615      	mov	r5, r2
 8014634:	f7fa fff6 	bl	800f624 <ucdr_buffer_alignment>
 8014638:	4601      	mov	r1, r0
 801463a:	4620      	mov	r0, r4
 801463c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014640:	f7fb f838 	bl	800f6b4 <ucdr_advance_buffer>
 8014644:	2104      	movs	r1, #4
 8014646:	4620      	mov	r0, r4
 8014648:	f7fa ff8c 	bl	800f564 <ucdr_check_buffer_available_for>
 801464c:	2800      	cmp	r0, #0
 801464e:	d13c      	bne.n	80146ca <ucdr_deserialize_endian_uint32_t+0xa2>
 8014650:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014654:	42bb      	cmp	r3, r7
 8014656:	d933      	bls.n	80146c0 <ucdr_deserialize_endian_uint32_t+0x98>
 8014658:	eba3 0907 	sub.w	r9, r3, r7
 801465c:	60a3      	str	r3, [r4, #8]
 801465e:	6923      	ldr	r3, [r4, #16]
 8014660:	4620      	mov	r0, r4
 8014662:	f1c9 0a04 	rsb	sl, r9, #4
 8014666:	444b      	add	r3, r9
 8014668:	4651      	mov	r1, sl
 801466a:	6123      	str	r3, [r4, #16]
 801466c:	f7fa ff86 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014670:	2800      	cmp	r0, #0
 8014672:	d048      	beq.n	8014706 <ucdr_deserialize_endian_uint32_t+0xde>
 8014674:	2e01      	cmp	r6, #1
 8014676:	d061      	beq.n	801473c <ucdr_deserialize_endian_uint32_t+0x114>
 8014678:	78fb      	ldrb	r3, [r7, #3]
 801467a:	702b      	strb	r3, [r5, #0]
 801467c:	f1b9 0f00 	cmp.w	r9, #0
 8014680:	d050      	beq.n	8014724 <ucdr_deserialize_endian_uint32_t+0xfc>
 8014682:	78bb      	ldrb	r3, [r7, #2]
 8014684:	f1b9 0f01 	cmp.w	r9, #1
 8014688:	706b      	strb	r3, [r5, #1]
 801468a:	f105 0302 	add.w	r3, r5, #2
 801468e:	d04d      	beq.n	801472c <ucdr_deserialize_endian_uint32_t+0x104>
 8014690:	787b      	ldrb	r3, [r7, #1]
 8014692:	f1b9 0f02 	cmp.w	r9, #2
 8014696:	70ab      	strb	r3, [r5, #2]
 8014698:	f105 0303 	add.w	r3, r5, #3
 801469c:	d04a      	beq.n	8014734 <ucdr_deserialize_endian_uint32_t+0x10c>
 801469e:	783b      	ldrb	r3, [r7, #0]
 80146a0:	70eb      	strb	r3, [r5, #3]
 80146a2:	6923      	ldr	r3, [r4, #16]
 80146a4:	2104      	movs	r1, #4
 80146a6:	68a2      	ldr	r2, [r4, #8]
 80146a8:	3304      	adds	r3, #4
 80146aa:	7da0      	ldrb	r0, [r4, #22]
 80146ac:	4452      	add	r2, sl
 80146ae:	7561      	strb	r1, [r4, #21]
 80146b0:	eba3 0309 	sub.w	r3, r3, r9
 80146b4:	f080 0001 	eor.w	r0, r0, #1
 80146b8:	60a2      	str	r2, [r4, #8]
 80146ba:	6123      	str	r3, [r4, #16]
 80146bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c0:	2104      	movs	r1, #4
 80146c2:	4620      	mov	r0, r4
 80146c4:	f7fa ff5a 	bl	800f57c <ucdr_check_final_buffer_behavior>
 80146c8:	b1a8      	cbz	r0, 80146f6 <ucdr_deserialize_endian_uint32_t+0xce>
 80146ca:	2e01      	cmp	r6, #1
 80146cc:	68a3      	ldr	r3, [r4, #8]
 80146ce:	d017      	beq.n	8014700 <ucdr_deserialize_endian_uint32_t+0xd8>
 80146d0:	78db      	ldrb	r3, [r3, #3]
 80146d2:	702b      	strb	r3, [r5, #0]
 80146d4:	68a3      	ldr	r3, [r4, #8]
 80146d6:	789b      	ldrb	r3, [r3, #2]
 80146d8:	706b      	strb	r3, [r5, #1]
 80146da:	68a3      	ldr	r3, [r4, #8]
 80146dc:	785b      	ldrb	r3, [r3, #1]
 80146de:	70ab      	strb	r3, [r5, #2]
 80146e0:	68a3      	ldr	r3, [r4, #8]
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	70eb      	strb	r3, [r5, #3]
 80146e6:	2104      	movs	r1, #4
 80146e8:	68a2      	ldr	r2, [r4, #8]
 80146ea:	6923      	ldr	r3, [r4, #16]
 80146ec:	440a      	add	r2, r1
 80146ee:	7561      	strb	r1, [r4, #21]
 80146f0:	440b      	add	r3, r1
 80146f2:	60a2      	str	r2, [r4, #8]
 80146f4:	6123      	str	r3, [r4, #16]
 80146f6:	7da0      	ldrb	r0, [r4, #22]
 80146f8:	f080 0001 	eor.w	r0, r0, #1
 80146fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	602b      	str	r3, [r5, #0]
 8014704:	e7ef      	b.n	80146e6 <ucdr_deserialize_endian_uint32_t+0xbe>
 8014706:	68a2      	ldr	r2, [r4, #8]
 8014708:	6923      	ldr	r3, [r4, #16]
 801470a:	eba2 0209 	sub.w	r2, r2, r9
 801470e:	7da0      	ldrb	r0, [r4, #22]
 8014710:	eba3 0309 	sub.w	r3, r3, r9
 8014714:	f884 8015 	strb.w	r8, [r4, #21]
 8014718:	f080 0001 	eor.w	r0, r0, #1
 801471c:	60a2      	str	r2, [r4, #8]
 801471e:	6123      	str	r3, [r4, #16]
 8014720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014724:	68a3      	ldr	r3, [r4, #8]
 8014726:	789b      	ldrb	r3, [r3, #2]
 8014728:	706b      	strb	r3, [r5, #1]
 801472a:	1cab      	adds	r3, r5, #2
 801472c:	68a2      	ldr	r2, [r4, #8]
 801472e:	7852      	ldrb	r2, [r2, #1]
 8014730:	f803 2b01 	strb.w	r2, [r3], #1
 8014734:	68a2      	ldr	r2, [r4, #8]
 8014736:	7812      	ldrb	r2, [r2, #0]
 8014738:	701a      	strb	r2, [r3, #0]
 801473a:	e7b2      	b.n	80146a2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801473c:	4639      	mov	r1, r7
 801473e:	464a      	mov	r2, r9
 8014740:	4628      	mov	r0, r5
 8014742:	f002 fde8 	bl	8017316 <memcpy>
 8014746:	4652      	mov	r2, sl
 8014748:	eb05 0009 	add.w	r0, r5, r9
 801474c:	68a1      	ldr	r1, [r4, #8]
 801474e:	f002 fde2 	bl	8017316 <memcpy>
 8014752:	e7a6      	b.n	80146a2 <ucdr_deserialize_endian_uint32_t+0x7a>

08014754 <ucdr_serialize_uint64_t>:
 8014754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014758:	4604      	mov	r4, r0
 801475a:	b082      	sub	sp, #8
 801475c:	2108      	movs	r1, #8
 801475e:	e9cd 2300 	strd	r2, r3, [sp]
 8014762:	f7fa ff5f 	bl	800f624 <ucdr_buffer_alignment>
 8014766:	4601      	mov	r1, r0
 8014768:	4620      	mov	r0, r4
 801476a:	7d67      	ldrb	r7, [r4, #21]
 801476c:	f7fa ffa2 	bl	800f6b4 <ucdr_advance_buffer>
 8014770:	2108      	movs	r1, #8
 8014772:	4620      	mov	r0, r4
 8014774:	f7fa fef6 	bl	800f564 <ucdr_check_buffer_available_for>
 8014778:	2800      	cmp	r0, #0
 801477a:	d14e      	bne.n	801481a <ucdr_serialize_uint64_t+0xc6>
 801477c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014780:	42ab      	cmp	r3, r5
 8014782:	d945      	bls.n	8014810 <ucdr_serialize_uint64_t+0xbc>
 8014784:	1b5e      	subs	r6, r3, r5
 8014786:	60a3      	str	r3, [r4, #8]
 8014788:	6923      	ldr	r3, [r4, #16]
 801478a:	4620      	mov	r0, r4
 801478c:	f1c6 0808 	rsb	r8, r6, #8
 8014790:	4433      	add	r3, r6
 8014792:	4641      	mov	r1, r8
 8014794:	6123      	str	r3, [r4, #16]
 8014796:	f7fa fef1 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801479a:	2800      	cmp	r0, #0
 801479c:	d074      	beq.n	8014888 <ucdr_serialize_uint64_t+0x134>
 801479e:	7d23      	ldrb	r3, [r4, #20]
 80147a0:	2b01      	cmp	r3, #1
 80147a2:	f000 809b 	beq.w	80148dc <ucdr_serialize_uint64_t+0x188>
 80147a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80147aa:	702b      	strb	r3, [r5, #0]
 80147ac:	2e00      	cmp	r6, #0
 80147ae:	d078      	beq.n	80148a2 <ucdr_serialize_uint64_t+0x14e>
 80147b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80147b4:	2e01      	cmp	r6, #1
 80147b6:	706b      	strb	r3, [r5, #1]
 80147b8:	d077      	beq.n	80148aa <ucdr_serialize_uint64_t+0x156>
 80147ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80147be:	2e02      	cmp	r6, #2
 80147c0:	70ab      	strb	r3, [r5, #2]
 80147c2:	d076      	beq.n	80148b2 <ucdr_serialize_uint64_t+0x15e>
 80147c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80147c8:	2e03      	cmp	r6, #3
 80147ca:	70eb      	strb	r3, [r5, #3]
 80147cc:	d075      	beq.n	80148ba <ucdr_serialize_uint64_t+0x166>
 80147ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80147d2:	2e04      	cmp	r6, #4
 80147d4:	712b      	strb	r3, [r5, #4]
 80147d6:	d074      	beq.n	80148c2 <ucdr_serialize_uint64_t+0x16e>
 80147d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80147dc:	2e05      	cmp	r6, #5
 80147de:	716b      	strb	r3, [r5, #5]
 80147e0:	d073      	beq.n	80148ca <ucdr_serialize_uint64_t+0x176>
 80147e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80147e6:	2e06      	cmp	r6, #6
 80147e8:	71ab      	strb	r3, [r5, #6]
 80147ea:	d072      	beq.n	80148d2 <ucdr_serialize_uint64_t+0x17e>
 80147ec:	f89d 3000 	ldrb.w	r3, [sp]
 80147f0:	71eb      	strb	r3, [r5, #7]
 80147f2:	6923      	ldr	r3, [r4, #16]
 80147f4:	2108      	movs	r1, #8
 80147f6:	68a2      	ldr	r2, [r4, #8]
 80147f8:	3308      	adds	r3, #8
 80147fa:	7da0      	ldrb	r0, [r4, #22]
 80147fc:	4442      	add	r2, r8
 80147fe:	7561      	strb	r1, [r4, #21]
 8014800:	1b9e      	subs	r6, r3, r6
 8014802:	f080 0001 	eor.w	r0, r0, #1
 8014806:	60a2      	str	r2, [r4, #8]
 8014808:	6126      	str	r6, [r4, #16]
 801480a:	b002      	add	sp, #8
 801480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014810:	2108      	movs	r1, #8
 8014812:	4620      	mov	r0, r4
 8014814:	f7fa feb2 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014818:	b350      	cbz	r0, 8014870 <ucdr_serialize_uint64_t+0x11c>
 801481a:	7d23      	ldrb	r3, [r4, #20]
 801481c:	2b01      	cmp	r3, #1
 801481e:	d02d      	beq.n	801487c <ucdr_serialize_uint64_t+0x128>
 8014820:	68a3      	ldr	r3, [r4, #8]
 8014822:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014826:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801482a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801482e:	7018      	strb	r0, [r3, #0]
 8014830:	68a3      	ldr	r3, [r4, #8]
 8014832:	705a      	strb	r2, [r3, #1]
 8014834:	68a3      	ldr	r3, [r4, #8]
 8014836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801483a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801483e:	7099      	strb	r1, [r3, #2]
 8014840:	68a3      	ldr	r3, [r4, #8]
 8014842:	70da      	strb	r2, [r3, #3]
 8014844:	68a3      	ldr	r3, [r4, #8]
 8014846:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801484a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801484e:	7118      	strb	r0, [r3, #4]
 8014850:	68a3      	ldr	r3, [r4, #8]
 8014852:	715a      	strb	r2, [r3, #5]
 8014854:	68a3      	ldr	r3, [r4, #8]
 8014856:	f89d 2000 	ldrb.w	r2, [sp]
 801485a:	7199      	strb	r1, [r3, #6]
 801485c:	68a3      	ldr	r3, [r4, #8]
 801485e:	71da      	strb	r2, [r3, #7]
 8014860:	2108      	movs	r1, #8
 8014862:	68a2      	ldr	r2, [r4, #8]
 8014864:	6923      	ldr	r3, [r4, #16]
 8014866:	440a      	add	r2, r1
 8014868:	7561      	strb	r1, [r4, #21]
 801486a:	440b      	add	r3, r1
 801486c:	60a2      	str	r2, [r4, #8]
 801486e:	6123      	str	r3, [r4, #16]
 8014870:	7da0      	ldrb	r0, [r4, #22]
 8014872:	f080 0001 	eor.w	r0, r0, #1
 8014876:	b002      	add	sp, #8
 8014878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487c:	466b      	mov	r3, sp
 801487e:	68a2      	ldr	r2, [r4, #8]
 8014880:	cb03      	ldmia	r3!, {r0, r1}
 8014882:	6010      	str	r0, [r2, #0]
 8014884:	6051      	str	r1, [r2, #4]
 8014886:	e7eb      	b.n	8014860 <ucdr_serialize_uint64_t+0x10c>
 8014888:	68a2      	ldr	r2, [r4, #8]
 801488a:	6923      	ldr	r3, [r4, #16]
 801488c:	7da0      	ldrb	r0, [r4, #22]
 801488e:	1b92      	subs	r2, r2, r6
 8014890:	1b9b      	subs	r3, r3, r6
 8014892:	7567      	strb	r7, [r4, #21]
 8014894:	f080 0001 	eor.w	r0, r0, #1
 8014898:	60a2      	str	r2, [r4, #8]
 801489a:	6123      	str	r3, [r4, #16]
 801489c:	b002      	add	sp, #8
 801489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80148a8:	701a      	strb	r2, [r3, #0]
 80148aa:	68a3      	ldr	r3, [r4, #8]
 80148ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80148b0:	701a      	strb	r2, [r3, #0]
 80148b2:	68a3      	ldr	r3, [r4, #8]
 80148b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80148b8:	701a      	strb	r2, [r3, #0]
 80148ba:	68a3      	ldr	r3, [r4, #8]
 80148bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80148c0:	701a      	strb	r2, [r3, #0]
 80148c2:	68a3      	ldr	r3, [r4, #8]
 80148c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80148c8:	701a      	strb	r2, [r3, #0]
 80148ca:	68a3      	ldr	r3, [r4, #8]
 80148cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80148d0:	701a      	strb	r2, [r3, #0]
 80148d2:	68a3      	ldr	r3, [r4, #8]
 80148d4:	f89d 2000 	ldrb.w	r2, [sp]
 80148d8:	701a      	strb	r2, [r3, #0]
 80148da:	e78a      	b.n	80147f2 <ucdr_serialize_uint64_t+0x9e>
 80148dc:	4628      	mov	r0, r5
 80148de:	466d      	mov	r5, sp
 80148e0:	4632      	mov	r2, r6
 80148e2:	4629      	mov	r1, r5
 80148e4:	f002 fd17 	bl	8017316 <memcpy>
 80148e8:	4642      	mov	r2, r8
 80148ea:	19a9      	adds	r1, r5, r6
 80148ec:	68a0      	ldr	r0, [r4, #8]
 80148ee:	f002 fd12 	bl	8017316 <memcpy>
 80148f2:	e77e      	b.n	80147f2 <ucdr_serialize_uint64_t+0x9e>

080148f4 <ucdr_serialize_int16_t>:
 80148f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f8:	460b      	mov	r3, r1
 80148fa:	b082      	sub	sp, #8
 80148fc:	4604      	mov	r4, r0
 80148fe:	2102      	movs	r1, #2
 8014900:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014904:	f7fa fe8e 	bl	800f624 <ucdr_buffer_alignment>
 8014908:	4601      	mov	r1, r0
 801490a:	4620      	mov	r0, r4
 801490c:	7d67      	ldrb	r7, [r4, #21]
 801490e:	f7fa fed1 	bl	800f6b4 <ucdr_advance_buffer>
 8014912:	2102      	movs	r1, #2
 8014914:	4620      	mov	r0, r4
 8014916:	f7fa fe25 	bl	800f564 <ucdr_check_buffer_available_for>
 801491a:	bb78      	cbnz	r0, 801497c <ucdr_serialize_int16_t+0x88>
 801491c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014920:	42ab      	cmp	r3, r5
 8014922:	d926      	bls.n	8014972 <ucdr_serialize_int16_t+0x7e>
 8014924:	1b5e      	subs	r6, r3, r5
 8014926:	60a3      	str	r3, [r4, #8]
 8014928:	6923      	ldr	r3, [r4, #16]
 801492a:	4620      	mov	r0, r4
 801492c:	f1c6 0802 	rsb	r8, r6, #2
 8014930:	4433      	add	r3, r6
 8014932:	4641      	mov	r1, r8
 8014934:	6123      	str	r3, [r4, #16]
 8014936:	f7fa fe21 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801493a:	2800      	cmp	r0, #0
 801493c:	d03b      	beq.n	80149b6 <ucdr_serialize_int16_t+0xc2>
 801493e:	7d23      	ldrb	r3, [r4, #20]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d04a      	beq.n	80149da <ucdr_serialize_int16_t+0xe6>
 8014944:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014948:	702b      	strb	r3, [r5, #0]
 801494a:	2e00      	cmp	r6, #0
 801494c:	d040      	beq.n	80149d0 <ucdr_serialize_int16_t+0xdc>
 801494e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014952:	706b      	strb	r3, [r5, #1]
 8014954:	6923      	ldr	r3, [r4, #16]
 8014956:	2102      	movs	r1, #2
 8014958:	68a2      	ldr	r2, [r4, #8]
 801495a:	3302      	adds	r3, #2
 801495c:	7da0      	ldrb	r0, [r4, #22]
 801495e:	4442      	add	r2, r8
 8014960:	7561      	strb	r1, [r4, #21]
 8014962:	1b9e      	subs	r6, r3, r6
 8014964:	f080 0001 	eor.w	r0, r0, #1
 8014968:	60a2      	str	r2, [r4, #8]
 801496a:	6126      	str	r6, [r4, #16]
 801496c:	b002      	add	sp, #8
 801496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014972:	2102      	movs	r1, #2
 8014974:	4620      	mov	r0, r4
 8014976:	f7fa fe01 	bl	800f57c <ucdr_check_final_buffer_behavior>
 801497a:	b190      	cbz	r0, 80149a2 <ucdr_serialize_int16_t+0xae>
 801497c:	7d23      	ldrb	r3, [r4, #20]
 801497e:	2b01      	cmp	r3, #1
 8014980:	68a3      	ldr	r3, [r4, #8]
 8014982:	d014      	beq.n	80149ae <ucdr_serialize_int16_t+0xba>
 8014984:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014988:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801498c:	7019      	strb	r1, [r3, #0]
 801498e:	68a3      	ldr	r3, [r4, #8]
 8014990:	705a      	strb	r2, [r3, #1]
 8014992:	2102      	movs	r1, #2
 8014994:	68a2      	ldr	r2, [r4, #8]
 8014996:	6923      	ldr	r3, [r4, #16]
 8014998:	440a      	add	r2, r1
 801499a:	7561      	strb	r1, [r4, #21]
 801499c:	440b      	add	r3, r1
 801499e:	60a2      	str	r2, [r4, #8]
 80149a0:	6123      	str	r3, [r4, #16]
 80149a2:	7da0      	ldrb	r0, [r4, #22]
 80149a4:	f080 0001 	eor.w	r0, r0, #1
 80149a8:	b002      	add	sp, #8
 80149aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80149b2:	801a      	strh	r2, [r3, #0]
 80149b4:	e7ed      	b.n	8014992 <ucdr_serialize_int16_t+0x9e>
 80149b6:	68a2      	ldr	r2, [r4, #8]
 80149b8:	6923      	ldr	r3, [r4, #16]
 80149ba:	7da0      	ldrb	r0, [r4, #22]
 80149bc:	1b92      	subs	r2, r2, r6
 80149be:	1b9b      	subs	r3, r3, r6
 80149c0:	7567      	strb	r7, [r4, #21]
 80149c2:	f080 0001 	eor.w	r0, r0, #1
 80149c6:	60a2      	str	r2, [r4, #8]
 80149c8:	6123      	str	r3, [r4, #16]
 80149ca:	b002      	add	sp, #8
 80149cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149d0:	68a3      	ldr	r3, [r4, #8]
 80149d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80149d6:	701a      	strb	r2, [r3, #0]
 80149d8:	e7bc      	b.n	8014954 <ucdr_serialize_int16_t+0x60>
 80149da:	4628      	mov	r0, r5
 80149dc:	f10d 0506 	add.w	r5, sp, #6
 80149e0:	4632      	mov	r2, r6
 80149e2:	4629      	mov	r1, r5
 80149e4:	f002 fc97 	bl	8017316 <memcpy>
 80149e8:	4642      	mov	r2, r8
 80149ea:	19a9      	adds	r1, r5, r6
 80149ec:	68a0      	ldr	r0, [r4, #8]
 80149ee:	f002 fc92 	bl	8017316 <memcpy>
 80149f2:	e7af      	b.n	8014954 <ucdr_serialize_int16_t+0x60>

080149f4 <ucdr_deserialize_int16_t>:
 80149f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149f8:	4604      	mov	r4, r0
 80149fa:	460d      	mov	r5, r1
 80149fc:	2102      	movs	r1, #2
 80149fe:	f7fa fe11 	bl	800f624 <ucdr_buffer_alignment>
 8014a02:	4601      	mov	r1, r0
 8014a04:	4620      	mov	r0, r4
 8014a06:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014a0a:	f7fa fe53 	bl	800f6b4 <ucdr_advance_buffer>
 8014a0e:	2102      	movs	r1, #2
 8014a10:	4620      	mov	r0, r4
 8014a12:	f7fa fda7 	bl	800f564 <ucdr_check_buffer_available_for>
 8014a16:	bb60      	cbnz	r0, 8014a72 <ucdr_deserialize_int16_t+0x7e>
 8014a18:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014a1c:	42be      	cmp	r6, r7
 8014a1e:	d923      	bls.n	8014a68 <ucdr_deserialize_int16_t+0x74>
 8014a20:	6923      	ldr	r3, [r4, #16]
 8014a22:	4620      	mov	r0, r4
 8014a24:	60a6      	str	r6, [r4, #8]
 8014a26:	1bf6      	subs	r6, r6, r7
 8014a28:	4433      	add	r3, r6
 8014a2a:	f1c6 0902 	rsb	r9, r6, #2
 8014a2e:	6123      	str	r3, [r4, #16]
 8014a30:	4649      	mov	r1, r9
 8014a32:	f7fa fda3 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d034      	beq.n	8014aa4 <ucdr_deserialize_int16_t+0xb0>
 8014a3a:	7d23      	ldrb	r3, [r4, #20]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d042      	beq.n	8014ac6 <ucdr_deserialize_int16_t+0xd2>
 8014a40:	787b      	ldrb	r3, [r7, #1]
 8014a42:	702b      	strb	r3, [r5, #0]
 8014a44:	2e00      	cmp	r6, #0
 8014a46:	d03a      	beq.n	8014abe <ucdr_deserialize_int16_t+0xca>
 8014a48:	783b      	ldrb	r3, [r7, #0]
 8014a4a:	706b      	strb	r3, [r5, #1]
 8014a4c:	6923      	ldr	r3, [r4, #16]
 8014a4e:	2102      	movs	r1, #2
 8014a50:	68a2      	ldr	r2, [r4, #8]
 8014a52:	3302      	adds	r3, #2
 8014a54:	7da0      	ldrb	r0, [r4, #22]
 8014a56:	444a      	add	r2, r9
 8014a58:	7561      	strb	r1, [r4, #21]
 8014a5a:	1b9b      	subs	r3, r3, r6
 8014a5c:	f080 0001 	eor.w	r0, r0, #1
 8014a60:	60a2      	str	r2, [r4, #8]
 8014a62:	6123      	str	r3, [r4, #16]
 8014a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a68:	2102      	movs	r1, #2
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	f7fa fd86 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014a70:	b180      	cbz	r0, 8014a94 <ucdr_deserialize_int16_t+0xa0>
 8014a72:	7d23      	ldrb	r3, [r4, #20]
 8014a74:	2b01      	cmp	r3, #1
 8014a76:	68a3      	ldr	r3, [r4, #8]
 8014a78:	d011      	beq.n	8014a9e <ucdr_deserialize_int16_t+0xaa>
 8014a7a:	785b      	ldrb	r3, [r3, #1]
 8014a7c:	702b      	strb	r3, [r5, #0]
 8014a7e:	68a3      	ldr	r3, [r4, #8]
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	706b      	strb	r3, [r5, #1]
 8014a84:	2102      	movs	r1, #2
 8014a86:	68a2      	ldr	r2, [r4, #8]
 8014a88:	6923      	ldr	r3, [r4, #16]
 8014a8a:	440a      	add	r2, r1
 8014a8c:	7561      	strb	r1, [r4, #21]
 8014a8e:	440b      	add	r3, r1
 8014a90:	60a2      	str	r2, [r4, #8]
 8014a92:	6123      	str	r3, [r4, #16]
 8014a94:	7da0      	ldrb	r0, [r4, #22]
 8014a96:	f080 0001 	eor.w	r0, r0, #1
 8014a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	802b      	strh	r3, [r5, #0]
 8014aa2:	e7ef      	b.n	8014a84 <ucdr_deserialize_int16_t+0x90>
 8014aa4:	68a2      	ldr	r2, [r4, #8]
 8014aa6:	6923      	ldr	r3, [r4, #16]
 8014aa8:	1b92      	subs	r2, r2, r6
 8014aaa:	7da0      	ldrb	r0, [r4, #22]
 8014aac:	1b9b      	subs	r3, r3, r6
 8014aae:	f884 8015 	strb.w	r8, [r4, #21]
 8014ab2:	f080 0001 	eor.w	r0, r0, #1
 8014ab6:	60a2      	str	r2, [r4, #8]
 8014ab8:	6123      	str	r3, [r4, #16]
 8014aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014abe:	68a3      	ldr	r3, [r4, #8]
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	706b      	strb	r3, [r5, #1]
 8014ac4:	e7c2      	b.n	8014a4c <ucdr_deserialize_int16_t+0x58>
 8014ac6:	4639      	mov	r1, r7
 8014ac8:	4632      	mov	r2, r6
 8014aca:	4628      	mov	r0, r5
 8014acc:	f002 fc23 	bl	8017316 <memcpy>
 8014ad0:	464a      	mov	r2, r9
 8014ad2:	19a8      	adds	r0, r5, r6
 8014ad4:	68a1      	ldr	r1, [r4, #8]
 8014ad6:	f002 fc1e 	bl	8017316 <memcpy>
 8014ada:	e7b7      	b.n	8014a4c <ucdr_deserialize_int16_t+0x58>

08014adc <ucdr_deserialize_int32_t>:
 8014adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	4604      	mov	r4, r0
 8014ae2:	460d      	mov	r5, r1
 8014ae4:	2104      	movs	r1, #4
 8014ae6:	f7fa fd9d 	bl	800f624 <ucdr_buffer_alignment>
 8014aea:	4601      	mov	r1, r0
 8014aec:	4620      	mov	r0, r4
 8014aee:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014af2:	f7fa fddf 	bl	800f6b4 <ucdr_advance_buffer>
 8014af6:	2104      	movs	r1, #4
 8014af8:	4620      	mov	r0, r4
 8014afa:	f7fa fd33 	bl	800f564 <ucdr_check_buffer_available_for>
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d138      	bne.n	8014b74 <ucdr_deserialize_int32_t+0x98>
 8014b02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014b06:	42b7      	cmp	r7, r6
 8014b08:	d92f      	bls.n	8014b6a <ucdr_deserialize_int32_t+0x8e>
 8014b0a:	6923      	ldr	r3, [r4, #16]
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	60a7      	str	r7, [r4, #8]
 8014b10:	1bbf      	subs	r7, r7, r6
 8014b12:	443b      	add	r3, r7
 8014b14:	f1c7 0904 	rsb	r9, r7, #4
 8014b18:	6123      	str	r3, [r4, #16]
 8014b1a:	4649      	mov	r1, r9
 8014b1c:	f7fa fd2e 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014b20:	2800      	cmp	r0, #0
 8014b22:	d046      	beq.n	8014bb2 <ucdr_deserialize_int32_t+0xd6>
 8014b24:	7d23      	ldrb	r3, [r4, #20]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d05c      	beq.n	8014be4 <ucdr_deserialize_int32_t+0x108>
 8014b2a:	78f3      	ldrb	r3, [r6, #3]
 8014b2c:	702b      	strb	r3, [r5, #0]
 8014b2e:	2f00      	cmp	r7, #0
 8014b30:	d04c      	beq.n	8014bcc <ucdr_deserialize_int32_t+0xf0>
 8014b32:	78b3      	ldrb	r3, [r6, #2]
 8014b34:	2f01      	cmp	r7, #1
 8014b36:	706b      	strb	r3, [r5, #1]
 8014b38:	f105 0302 	add.w	r3, r5, #2
 8014b3c:	d04a      	beq.n	8014bd4 <ucdr_deserialize_int32_t+0xf8>
 8014b3e:	7873      	ldrb	r3, [r6, #1]
 8014b40:	2f02      	cmp	r7, #2
 8014b42:	70ab      	strb	r3, [r5, #2]
 8014b44:	f105 0303 	add.w	r3, r5, #3
 8014b48:	d048      	beq.n	8014bdc <ucdr_deserialize_int32_t+0x100>
 8014b4a:	7833      	ldrb	r3, [r6, #0]
 8014b4c:	70eb      	strb	r3, [r5, #3]
 8014b4e:	6923      	ldr	r3, [r4, #16]
 8014b50:	2104      	movs	r1, #4
 8014b52:	68a2      	ldr	r2, [r4, #8]
 8014b54:	3304      	adds	r3, #4
 8014b56:	7da0      	ldrb	r0, [r4, #22]
 8014b58:	444a      	add	r2, r9
 8014b5a:	7561      	strb	r1, [r4, #21]
 8014b5c:	1bdb      	subs	r3, r3, r7
 8014b5e:	f080 0001 	eor.w	r0, r0, #1
 8014b62:	60a2      	str	r2, [r4, #8]
 8014b64:	6123      	str	r3, [r4, #16]
 8014b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b6a:	2104      	movs	r1, #4
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f7fa fd05 	bl	800f57c <ucdr_check_final_buffer_behavior>
 8014b72:	b1b0      	cbz	r0, 8014ba2 <ucdr_deserialize_int32_t+0xc6>
 8014b74:	7d23      	ldrb	r3, [r4, #20]
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	68a3      	ldr	r3, [r4, #8]
 8014b7a:	d017      	beq.n	8014bac <ucdr_deserialize_int32_t+0xd0>
 8014b7c:	78db      	ldrb	r3, [r3, #3]
 8014b7e:	702b      	strb	r3, [r5, #0]
 8014b80:	68a3      	ldr	r3, [r4, #8]
 8014b82:	789b      	ldrb	r3, [r3, #2]
 8014b84:	706b      	strb	r3, [r5, #1]
 8014b86:	68a3      	ldr	r3, [r4, #8]
 8014b88:	785b      	ldrb	r3, [r3, #1]
 8014b8a:	70ab      	strb	r3, [r5, #2]
 8014b8c:	68a3      	ldr	r3, [r4, #8]
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	70eb      	strb	r3, [r5, #3]
 8014b92:	2104      	movs	r1, #4
 8014b94:	68a2      	ldr	r2, [r4, #8]
 8014b96:	6923      	ldr	r3, [r4, #16]
 8014b98:	440a      	add	r2, r1
 8014b9a:	7561      	strb	r1, [r4, #21]
 8014b9c:	440b      	add	r3, r1
 8014b9e:	60a2      	str	r2, [r4, #8]
 8014ba0:	6123      	str	r3, [r4, #16]
 8014ba2:	7da0      	ldrb	r0, [r4, #22]
 8014ba4:	f080 0001 	eor.w	r0, r0, #1
 8014ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	602b      	str	r3, [r5, #0]
 8014bb0:	e7ef      	b.n	8014b92 <ucdr_deserialize_int32_t+0xb6>
 8014bb2:	68a2      	ldr	r2, [r4, #8]
 8014bb4:	6923      	ldr	r3, [r4, #16]
 8014bb6:	1bd2      	subs	r2, r2, r7
 8014bb8:	7da0      	ldrb	r0, [r4, #22]
 8014bba:	1bdb      	subs	r3, r3, r7
 8014bbc:	f884 8015 	strb.w	r8, [r4, #21]
 8014bc0:	f080 0001 	eor.w	r0, r0, #1
 8014bc4:	60a2      	str	r2, [r4, #8]
 8014bc6:	6123      	str	r3, [r4, #16]
 8014bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bcc:	68a3      	ldr	r3, [r4, #8]
 8014bce:	789b      	ldrb	r3, [r3, #2]
 8014bd0:	706b      	strb	r3, [r5, #1]
 8014bd2:	1cab      	adds	r3, r5, #2
 8014bd4:	68a2      	ldr	r2, [r4, #8]
 8014bd6:	7852      	ldrb	r2, [r2, #1]
 8014bd8:	f803 2b01 	strb.w	r2, [r3], #1
 8014bdc:	68a2      	ldr	r2, [r4, #8]
 8014bde:	7812      	ldrb	r2, [r2, #0]
 8014be0:	701a      	strb	r2, [r3, #0]
 8014be2:	e7b4      	b.n	8014b4e <ucdr_deserialize_int32_t+0x72>
 8014be4:	4631      	mov	r1, r6
 8014be6:	463a      	mov	r2, r7
 8014be8:	4628      	mov	r0, r5
 8014bea:	f002 fb94 	bl	8017316 <memcpy>
 8014bee:	464a      	mov	r2, r9
 8014bf0:	19e8      	adds	r0, r5, r7
 8014bf2:	68a1      	ldr	r1, [r4, #8]
 8014bf4:	f002 fb8f 	bl	8017316 <memcpy>
 8014bf8:	e7a9      	b.n	8014b4e <ucdr_deserialize_int32_t+0x72>
 8014bfa:	bf00      	nop

08014bfc <ucdr_serialize_string>:
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	4604      	mov	r4, r0
 8014c02:	4608      	mov	r0, r1
 8014c04:	9101      	str	r1, [sp, #4]
 8014c06:	f7eb fb25 	bl	8000254 <strlen>
 8014c0a:	4602      	mov	r2, r0
 8014c0c:	9901      	ldr	r1, [sp, #4]
 8014c0e:	4620      	mov	r0, r4
 8014c10:	3201      	adds	r2, #1
 8014c12:	b002      	add	sp, #8
 8014c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c18:	f7fa bd6c 	b.w	800f6f4 <ucdr_serialize_sequence_char>

08014c1c <ucdr_deserialize_string>:
 8014c1c:	b500      	push	{lr}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	ab01      	add	r3, sp, #4
 8014c22:	f7fa fd79 	bl	800f718 <ucdr_deserialize_sequence_char>
 8014c26:	b003      	add	sp, #12
 8014c28:	f85d fb04 	ldr.w	pc, [sp], #4

08014c2c <get_custom_error>:
 8014c2c:	4b01      	ldr	r3, [pc, #4]	@ (8014c34 <get_custom_error+0x8>)
 8014c2e:	7818      	ldrb	r0, [r3, #0]
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	200125a8 	.word	0x200125a8

08014c38 <recv_custom_msg>:
 8014c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	4693      	mov	fp, r2
 8014c3e:	b089      	sub	sp, #36	@ 0x24
 8014c40:	2200      	movs	r2, #0
 8014c42:	4604      	mov	r4, r0
 8014c44:	468a      	mov	sl, r1
 8014c46:	9305      	str	r3, [sp, #20]
 8014c48:	f88d 201e 	strb.w	r2, [sp, #30]
 8014c4c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014c50:	b322      	cbz	r2, 8014c9c <recv_custom_msg+0x64>
 8014c52:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014c56:	f10d 081f 	add.w	r8, sp, #31
 8014c5a:	af05      	add	r7, sp, #20
 8014c5c:	f10d 061e 	add.w	r6, sp, #30
 8014c60:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014c64:	e002      	b.n	8014c6c <recv_custom_msg+0x34>
 8014c66:	9b05      	ldr	r3, [sp, #20]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	dd0f      	ble.n	8014c8c <recv_custom_msg+0x54>
 8014c6c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014c70:	4623      	mov	r3, r4
 8014c72:	4622      	mov	r2, r4
 8014c74:	4648      	mov	r0, r9
 8014c76:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014c7a:	e9cd 5600 	strd	r5, r6, [sp]
 8014c7e:	f000 ffe3 	bl	8015c48 <uxr_read_framed_msg>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d0ef      	beq.n	8014c66 <recv_custom_msg+0x2e>
 8014c86:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014c8a:	b1b3      	cbz	r3, 8014cba <recv_custom_msg+0x82>
 8014c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8014ccc <recv_custom_msg+0x94>)
 8014c8e:	2000      	movs	r0, #0
 8014c90:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014c94:	701a      	strb	r2, [r3, #0]
 8014c96:	b009      	add	sp, #36	@ 0x24
 8014c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9c:	f10d 021f 	add.w	r2, sp, #31
 8014ca0:	4601      	mov	r1, r0
 8014ca2:	9200      	str	r2, [sp, #0]
 8014ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ca8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014cac:	47a8      	blx	r5
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	d0ec      	beq.n	8014c8c <recv_custom_msg+0x54>
 8014cb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1e8      	bne.n	8014c8c <recv_custom_msg+0x54>
 8014cba:	f8cb 0000 	str.w	r0, [fp]
 8014cbe:	2001      	movs	r0, #1
 8014cc0:	f8ca 4000 	str.w	r4, [sl]
 8014cc4:	b009      	add	sp, #36	@ 0x24
 8014cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cca:	bf00      	nop
 8014ccc:	200125a8 	.word	0x200125a8

08014cd0 <send_custom_msg>:
 8014cd0:	b530      	push	{r4, r5, lr}
 8014cd2:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014cd6:	b087      	sub	sp, #28
 8014cd8:	4614      	mov	r4, r2
 8014cda:	b995      	cbnz	r5, 8014d02 <send_custom_msg+0x32>
 8014cdc:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8014ce0:	f10d 0317 	add.w	r3, sp, #23
 8014ce4:	47a8      	blx	r5
 8014ce6:	1e03      	subs	r3, r0, #0
 8014ce8:	bf18      	it	ne
 8014cea:	2301      	movne	r3, #1
 8014cec:	42a0      	cmp	r0, r4
 8014cee:	bf18      	it	ne
 8014cf0:	2300      	movne	r3, #0
 8014cf2:	b91b      	cbnz	r3, 8014cfc <send_custom_msg+0x2c>
 8014cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8014d20 <send_custom_msg+0x50>)
 8014cf6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014cfa:	7011      	strb	r1, [r2, #0]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	b007      	add	sp, #28
 8014d00:	bd30      	pop	{r4, r5, pc}
 8014d02:	460b      	mov	r3, r1
 8014d04:	2200      	movs	r2, #0
 8014d06:	f10d 0117 	add.w	r1, sp, #23
 8014d0a:	9400      	str	r4, [sp, #0]
 8014d0c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014d10:	4602      	mov	r2, r0
 8014d12:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014d16:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014d1a:	f000 fdb7 	bl	801588c <uxr_write_framed_msg>
 8014d1e:	e7e2      	b.n	8014ce6 <send_custom_msg+0x16>
 8014d20:	200125a8 	.word	0x200125a8

08014d24 <uxr_set_custom_transport_callbacks>:
 8014d24:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014d28:	9901      	ldr	r1, [sp, #4]
 8014d2a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014d2e:	9b00      	ldr	r3, [sp, #0]
 8014d30:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8014d34:	4770      	bx	lr
 8014d36:	bf00      	nop

08014d38 <uxr_init_custom_transport>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014d3e:	b303      	cbz	r3, 8014d82 <uxr_init_custom_transport+0x4a>
 8014d40:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014d44:	4604      	mov	r4, r0
 8014d46:	b1e2      	cbz	r2, 8014d82 <uxr_init_custom_transport+0x4a>
 8014d48:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014d4c:	b1ca      	cbz	r2, 8014d82 <uxr_init_custom_transport+0x4a>
 8014d4e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014d52:	b1b2      	cbz	r2, 8014d82 <uxr_init_custom_transport+0x4a>
 8014d54:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014d58:	4798      	blx	r3
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	b188      	cbz	r0, 8014d82 <uxr_init_custom_transport+0x4a>
 8014d5e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014d62:	b98b      	cbnz	r3, 8014d88 <uxr_init_custom_transport+0x50>
 8014d64:	4b0b      	ldr	r3, [pc, #44]	@ (8014d94 <uxr_init_custom_transport+0x5c>)
 8014d66:	4628      	mov	r0, r5
 8014d68:	490b      	ldr	r1, [pc, #44]	@ (8014d98 <uxr_init_custom_transport+0x60>)
 8014d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8014d9c <uxr_init_custom_transport+0x64>)
 8014d6c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014d74:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014d78:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014d7c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014d80:	bd38      	pop	{r3, r4, r5, pc}
 8014d82:	2500      	movs	r5, #0
 8014d84:	4628      	mov	r0, r5
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	2100      	movs	r1, #0
 8014d8a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014d8e:	f000 fd77 	bl	8015880 <uxr_init_framing_io>
 8014d92:	e7e7      	b.n	8014d64 <uxr_init_custom_transport+0x2c>
 8014d94:	08014c39 	.word	0x08014c39
 8014d98:	08014cd1 	.word	0x08014cd1
 8014d9c:	08014c2d 	.word	0x08014c2d

08014da0 <uxr_close_custom_transport>:
 8014da0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014da4:	4718      	bx	r3
 8014da6:	bf00      	nop

08014da8 <uxr_init_input_best_effort_stream>:
 8014da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014dac:	8003      	strh	r3, [r0, #0]
 8014dae:	4770      	bx	lr

08014db0 <uxr_reset_input_best_effort_stream>:
 8014db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014db4:	8003      	strh	r3, [r0, #0]
 8014db6:	4770      	bx	lr

08014db8 <uxr_receive_best_effort_message>:
 8014db8:	b538      	push	{r3, r4, r5, lr}
 8014dba:	4604      	mov	r4, r0
 8014dbc:	8800      	ldrh	r0, [r0, #0]
 8014dbe:	460d      	mov	r5, r1
 8014dc0:	f000 fd46 	bl	8015850 <uxr_seq_num_cmp>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	0fc0      	lsrs	r0, r0, #31
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	bfb8      	it	lt
 8014dcc:	8025      	strhlt	r5, [r4, #0]
 8014dce:	bd38      	pop	{r3, r4, r5, pc}

08014dd0 <on_full_input_buffer>:
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	4605      	mov	r5, r0
 8014dd6:	8908      	ldrh	r0, [r1, #8]
 8014dd8:	682b      	ldr	r3, [r5, #0]
 8014dda:	7d26      	ldrb	r6, [r4, #20]
 8014ddc:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014de0:	fbb2 f2f0 	udiv	r2, r2, r0
 8014de4:	eba3 0c01 	sub.w	ip, r3, r1
 8014de8:	fbbc fcf2 	udiv	ip, ip, r2
 8014dec:	f10c 0c01 	add.w	ip, ip, #1
 8014df0:	fa1f f38c 	uxth.w	r3, ip
 8014df4:	fbb3 fcf0 	udiv	ip, r3, r0
 8014df8:	fb00 331c 	mls	r3, r0, ip, r3
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	fb02 f303 	mul.w	r3, r2, r3
 8014e02:	1d18      	adds	r0, r3, #4
 8014e04:	4408      	add	r0, r1
 8014e06:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014e0a:	b116      	cbz	r6, 8014e12 <on_full_input_buffer+0x42>
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	f840 6c04 	str.w	r6, [r0, #-4]
 8014e12:	2a03      	cmp	r2, #3
 8014e14:	d801      	bhi.n	8014e1a <on_full_input_buffer+0x4a>
 8014e16:	2001      	movs	r0, #1
 8014e18:	bd70      	pop	{r4, r5, r6, pc}
 8014e1a:	3308      	adds	r3, #8
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	3a04      	subs	r2, #4
 8014e20:	4419      	add	r1, r3
 8014e22:	692b      	ldr	r3, [r5, #16]
 8014e24:	f7fa fbea 	bl	800f5fc <ucdr_init_buffer_origin>
 8014e28:	4628      	mov	r0, r5
 8014e2a:	4622      	mov	r2, r4
 8014e2c:	4902      	ldr	r1, [pc, #8]	@ (8014e38 <on_full_input_buffer+0x68>)
 8014e2e:	f7fa fbc1 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 8014e32:	2000      	movs	r0, #0
 8014e34:	bd70      	pop	{r4, r5, r6, pc}
 8014e36:	bf00      	nop
 8014e38:	08014dd1 	.word	0x08014dd1

08014e3c <uxr_init_input_reliable_stream>:
 8014e3c:	b510      	push	{r4, lr}
 8014e3e:	e9c0 1200 	strd	r1, r2, [r0]
 8014e42:	2400      	movs	r4, #0
 8014e44:	9a02      	ldr	r2, [sp, #8]
 8014e46:	8103      	strh	r3, [r0, #8]
 8014e48:	6102      	str	r2, [r0, #16]
 8014e4a:	7504      	strb	r4, [r0, #20]
 8014e4c:	b1c3      	cbz	r3, 8014e80 <uxr_init_input_reliable_stream+0x44>
 8014e4e:	600c      	str	r4, [r1, #0]
 8014e50:	8901      	ldrh	r1, [r0, #8]
 8014e52:	2901      	cmp	r1, #1
 8014e54:	d914      	bls.n	8014e80 <uxr_init_input_reliable_stream+0x44>
 8014e56:	f04f 0c01 	mov.w	ip, #1
 8014e5a:	6843      	ldr	r3, [r0, #4]
 8014e5c:	f10c 0e01 	add.w	lr, ip, #1
 8014e60:	fbbc f2f1 	udiv	r2, ip, r1
 8014e64:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e68:	fb01 c212 	mls	r2, r1, r2, ip
 8014e6c:	fa1f fc8e 	uxth.w	ip, lr
 8014e70:	b292      	uxth	r2, r2
 8014e72:	fb02 f303 	mul.w	r3, r2, r3
 8014e76:	6802      	ldr	r2, [r0, #0]
 8014e78:	50d4      	str	r4, [r2, r3]
 8014e7a:	8901      	ldrh	r1, [r0, #8]
 8014e7c:	4561      	cmp	r1, ip
 8014e7e:	d8ec      	bhi.n	8014e5a <uxr_init_input_reliable_stream+0x1e>
 8014e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014e84:	60c3      	str	r3, [r0, #12]
 8014e86:	bd10      	pop	{r4, pc}

08014e88 <uxr_reset_input_reliable_stream>:
 8014e88:	8901      	ldrh	r1, [r0, #8]
 8014e8a:	b1d9      	cbz	r1, 8014ec4 <uxr_reset_input_reliable_stream+0x3c>
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	f04f 0e00 	mov.w	lr, #0
 8014e92:	46f4      	mov	ip, lr
 8014e94:	4674      	mov	r4, lr
 8014e96:	6843      	ldr	r3, [r0, #4]
 8014e98:	f10e 0e01 	add.w	lr, lr, #1
 8014e9c:	fbbc f2f1 	udiv	r2, ip, r1
 8014ea0:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ea4:	fb01 c212 	mls	r2, r1, r2, ip
 8014ea8:	fa1f fc8e 	uxth.w	ip, lr
 8014eac:	b292      	uxth	r2, r2
 8014eae:	fb02 f303 	mul.w	r3, r2, r3
 8014eb2:	6802      	ldr	r2, [r0, #0]
 8014eb4:	50d4      	str	r4, [r2, r3]
 8014eb6:	8901      	ldrh	r1, [r0, #8]
 8014eb8:	4561      	cmp	r1, ip
 8014eba:	d8ec      	bhi.n	8014e96 <uxr_reset_input_reliable_stream+0xe>
 8014ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014ec0:	60c3      	str	r3, [r0, #12]
 8014ec2:	bd10      	pop	{r4, pc}
 8014ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014ec8:	60c3      	str	r3, [r0, #12]
 8014eca:	4770      	bx	lr

08014ecc <uxr_receive_reliable_message>:
 8014ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	8901      	ldrh	r1, [r0, #8]
 8014ed6:	4617      	mov	r7, r2
 8014ed8:	8980      	ldrh	r0, [r0, #12]
 8014eda:	4698      	mov	r8, r3
 8014edc:	f000 fcb0 	bl	8015840 <uxr_seq_num_add>
 8014ee0:	4629      	mov	r1, r5
 8014ee2:	4606      	mov	r6, r0
 8014ee4:	89a0      	ldrh	r0, [r4, #12]
 8014ee6:	f000 fcb3 	bl	8015850 <uxr_seq_num_cmp>
 8014eea:	2800      	cmp	r0, #0
 8014eec:	db0a      	blt.n	8014f04 <uxr_receive_reliable_message+0x38>
 8014eee:	2600      	movs	r6, #0
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	89e0      	ldrh	r0, [r4, #14]
 8014ef4:	f000 fcac 	bl	8015850 <uxr_seq_num_cmp>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	da00      	bge.n	8014efe <uxr_receive_reliable_message+0x32>
 8014efc:	81e5      	strh	r5, [r4, #14]
 8014efe:	4630      	mov	r0, r6
 8014f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f04:	4630      	mov	r0, r6
 8014f06:	4629      	mov	r1, r5
 8014f08:	f000 fca2 	bl	8015850 <uxr_seq_num_cmp>
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	dbee      	blt.n	8014eee <uxr_receive_reliable_message+0x22>
 8014f10:	6923      	ldr	r3, [r4, #16]
 8014f12:	4638      	mov	r0, r7
 8014f14:	4798      	blx	r3
 8014f16:	4681      	mov	r9, r0
 8014f18:	2101      	movs	r1, #1
 8014f1a:	89a0      	ldrh	r0, [r4, #12]
 8014f1c:	f000 fc90 	bl	8015840 <uxr_seq_num_add>
 8014f20:	f1b9 0f00 	cmp.w	r9, #0
 8014f24:	bf08      	it	eq
 8014f26:	4285      	cmpeq	r5, r0
 8014f28:	bf0c      	ite	eq
 8014f2a:	2601      	moveq	r6, #1
 8014f2c:	2600      	movne	r6, #0
 8014f2e:	d104      	bne.n	8014f3a <uxr_receive_reliable_message+0x6e>
 8014f30:	2300      	movs	r3, #0
 8014f32:	9a08      	ldr	r2, [sp, #32]
 8014f34:	81a0      	strh	r0, [r4, #12]
 8014f36:	7013      	strb	r3, [r2, #0]
 8014f38:	e7da      	b.n	8014ef0 <uxr_receive_reliable_message+0x24>
 8014f3a:	8922      	ldrh	r2, [r4, #8]
 8014f3c:	6863      	ldr	r3, [r4, #4]
 8014f3e:	fbb5 f0f2 	udiv	r0, r5, r2
 8014f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f46:	fb02 5010 	mls	r0, r2, r0, r5
 8014f4a:	b280      	uxth	r0, r0
 8014f4c:	fb03 f000 	mul.w	r0, r3, r0
 8014f50:	6823      	ldr	r3, [r4, #0]
 8014f52:	3004      	adds	r0, #4
 8014f54:	4418      	add	r0, r3
 8014f56:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d1c7      	bne.n	8014eee <uxr_receive_reliable_message+0x22>
 8014f5e:	4639      	mov	r1, r7
 8014f60:	4642      	mov	r2, r8
 8014f62:	f002 f9d8 	bl	8017316 <memcpy>
 8014f66:	8921      	ldrh	r1, [r4, #8]
 8014f68:	6863      	ldr	r3, [r4, #4]
 8014f6a:	fbb5 f2f1 	udiv	r2, r5, r1
 8014f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f72:	fb01 5212 	mls	r2, r1, r2, r5
 8014f76:	b292      	uxth	r2, r2
 8014f78:	fb02 f303 	mul.w	r3, r2, r3
 8014f7c:	6822      	ldr	r2, [r4, #0]
 8014f7e:	f842 8003 	str.w	r8, [r2, r3]
 8014f82:	2301      	movs	r3, #1
 8014f84:	9a08      	ldr	r2, [sp, #32]
 8014f86:	7013      	strb	r3, [r2, #0]
 8014f88:	f1b9 0f00 	cmp.w	r9, #0
 8014f8c:	d0af      	beq.n	8014eee <uxr_receive_reliable_message+0x22>
 8014f8e:	89a6      	ldrh	r6, [r4, #12]
 8014f90:	2101      	movs	r1, #1
 8014f92:	4630      	mov	r0, r6
 8014f94:	f000 fc54 	bl	8015840 <uxr_seq_num_add>
 8014f98:	8921      	ldrh	r1, [r4, #8]
 8014f9a:	6863      	ldr	r3, [r4, #4]
 8014f9c:	4606      	mov	r6, r0
 8014f9e:	fbb0 f2f1 	udiv	r2, r0, r1
 8014fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fa6:	fb01 0212 	mls	r2, r1, r2, r0
 8014faa:	6820      	ldr	r0, [r4, #0]
 8014fac:	b292      	uxth	r2, r2
 8014fae:	fb02 f303 	mul.w	r3, r2, r3
 8014fb2:	3304      	adds	r3, #4
 8014fb4:	4418      	add	r0, r3
 8014fb6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d097      	beq.n	8014eee <uxr_receive_reliable_message+0x22>
 8014fbe:	6923      	ldr	r3, [r4, #16]
 8014fc0:	4798      	blx	r3
 8014fc2:	2802      	cmp	r0, #2
 8014fc4:	d002      	beq.n	8014fcc <uxr_receive_reliable_message+0x100>
 8014fc6:	2801      	cmp	r0, #1
 8014fc8:	d0e2      	beq.n	8014f90 <uxr_receive_reliable_message+0xc4>
 8014fca:	e790      	b.n	8014eee <uxr_receive_reliable_message+0x22>
 8014fcc:	2601      	movs	r6, #1
 8014fce:	e78f      	b.n	8014ef0 <uxr_receive_reliable_message+0x24>

08014fd0 <uxr_next_input_reliable_buffer_available>:
 8014fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	460f      	mov	r7, r1
 8014fd8:	8980      	ldrh	r0, [r0, #12]
 8014fda:	2101      	movs	r1, #1
 8014fdc:	4690      	mov	r8, r2
 8014fde:	f000 fc2f 	bl	8015840 <uxr_seq_num_add>
 8014fe2:	8922      	ldrh	r2, [r4, #8]
 8014fe4:	6866      	ldr	r6, [r4, #4]
 8014fe6:	fbb0 f3f2 	udiv	r3, r0, r2
 8014fea:	fbb6 f6f2 	udiv	r6, r6, r2
 8014fee:	fb02 0313 	mls	r3, r2, r3, r0
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	fb03 f606 	mul.w	r6, r3, r6
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	3604      	adds	r6, #4
 8014ffc:	441e      	add	r6, r3
 8014ffe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015002:	f1b9 0f00 	cmp.w	r9, #0
 8015006:	d023      	beq.n	8015050 <uxr_next_input_reliable_buffer_available+0x80>
 8015008:	4605      	mov	r5, r0
 801500a:	6923      	ldr	r3, [r4, #16]
 801500c:	4630      	mov	r0, r6
 801500e:	4798      	blx	r3
 8015010:	4682      	mov	sl, r0
 8015012:	b300      	cbz	r0, 8015056 <uxr_next_input_reliable_buffer_available+0x86>
 8015014:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015018:	2101      	movs	r1, #1
 801501a:	4650      	mov	r0, sl
 801501c:	f000 fc10 	bl	8015840 <uxr_seq_num_add>
 8015020:	8921      	ldrh	r1, [r4, #8]
 8015022:	4682      	mov	sl, r0
 8015024:	6863      	ldr	r3, [r4, #4]
 8015026:	6820      	ldr	r0, [r4, #0]
 8015028:	fbba f2f1 	udiv	r2, sl, r1
 801502c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015030:	fb01 a212 	mls	r2, r1, r2, sl
 8015034:	b292      	uxth	r2, r2
 8015036:	fb02 f303 	mul.w	r3, r2, r3
 801503a:	3304      	adds	r3, #4
 801503c:	4418      	add	r0, r3
 801503e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015042:	b12b      	cbz	r3, 8015050 <uxr_next_input_reliable_buffer_available+0x80>
 8015044:	6923      	ldr	r3, [r4, #16]
 8015046:	4798      	blx	r3
 8015048:	2802      	cmp	r0, #2
 801504a:	d01b      	beq.n	8015084 <uxr_next_input_reliable_buffer_available+0xb4>
 801504c:	2801      	cmp	r0, #1
 801504e:	d0e3      	beq.n	8015018 <uxr_next_input_reliable_buffer_available+0x48>
 8015050:	2000      	movs	r0, #0
 8015052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015056:	464a      	mov	r2, r9
 8015058:	4631      	mov	r1, r6
 801505a:	4638      	mov	r0, r7
 801505c:	f7fa fad6 	bl	800f60c <ucdr_init_buffer>
 8015060:	8921      	ldrh	r1, [r4, #8]
 8015062:	6863      	ldr	r3, [r4, #4]
 8015064:	2001      	movs	r0, #1
 8015066:	fbb5 f2f1 	udiv	r2, r5, r1
 801506a:	fbb3 f3f1 	udiv	r3, r3, r1
 801506e:	fb01 5212 	mls	r2, r1, r2, r5
 8015072:	b292      	uxth	r2, r2
 8015074:	fb02 f303 	mul.w	r3, r2, r3
 8015078:	6822      	ldr	r2, [r4, #0]
 801507a:	f842 a003 	str.w	sl, [r2, r3]
 801507e:	81a5      	strh	r5, [r4, #12]
 8015080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015084:	8920      	ldrh	r0, [r4, #8]
 8015086:	eb06 0108 	add.w	r1, r6, r8
 801508a:	6863      	ldr	r3, [r4, #4]
 801508c:	eba9 0208 	sub.w	r2, r9, r8
 8015090:	fbb5 f6f0 	udiv	r6, r5, r0
 8015094:	fbb3 f3f0 	udiv	r3, r3, r0
 8015098:	fb00 5516 	mls	r5, r0, r6, r5
 801509c:	2000      	movs	r0, #0
 801509e:	b2ad      	uxth	r5, r5
 80150a0:	fb03 f505 	mul.w	r5, r3, r5
 80150a4:	6823      	ldr	r3, [r4, #0]
 80150a6:	5158      	str	r0, [r3, r5]
 80150a8:	4638      	mov	r0, r7
 80150aa:	f7fa faaf 	bl	800f60c <ucdr_init_buffer>
 80150ae:	4638      	mov	r0, r7
 80150b0:	4622      	mov	r2, r4
 80150b2:	4903      	ldr	r1, [pc, #12]	@ (80150c0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80150b4:	f7fa fa7e 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 80150b8:	2001      	movs	r0, #1
 80150ba:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80150be:	e7c8      	b.n	8015052 <uxr_next_input_reliable_buffer_available+0x82>
 80150c0:	08014dd1 	.word	0x08014dd1

080150c4 <uxr_process_heartbeat>:
 80150c4:	b538      	push	{r3, r4, r5, lr}
 80150c6:	4611      	mov	r1, r2
 80150c8:	4604      	mov	r4, r0
 80150ca:	89c0      	ldrh	r0, [r0, #14]
 80150cc:	4615      	mov	r5, r2
 80150ce:	f000 fbbf 	bl	8015850 <uxr_seq_num_cmp>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	bfb8      	it	lt
 80150d6:	81e5      	strhlt	r5, [r4, #14]
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	bf00      	nop

080150dc <uxr_compute_acknack>:
 80150dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150e0:	8903      	ldrh	r3, [r0, #8]
 80150e2:	4604      	mov	r4, r0
 80150e4:	460f      	mov	r7, r1
 80150e6:	8985      	ldrh	r5, [r0, #12]
 80150e8:	b1db      	cbz	r3, 8015122 <uxr_compute_acknack+0x46>
 80150ea:	4628      	mov	r0, r5
 80150ec:	2601      	movs	r6, #1
 80150ee:	e004      	b.n	80150fa <uxr_compute_acknack+0x1e>
 80150f0:	4566      	cmp	r6, ip
 80150f2:	f106 0601 	add.w	r6, r6, #1
 80150f6:	d214      	bcs.n	8015122 <uxr_compute_acknack+0x46>
 80150f8:	89a0      	ldrh	r0, [r4, #12]
 80150fa:	b2b1      	uxth	r1, r6
 80150fc:	f000 fba0 	bl	8015840 <uxr_seq_num_add>
 8015100:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015104:	fbb0 f2fc 	udiv	r2, r0, ip
 8015108:	e9d4 1300 	ldrd	r1, r3, [r4]
 801510c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015110:	fbb3 f3fc 	udiv	r3, r3, ip
 8015114:	b292      	uxth	r2, r2
 8015116:	fb02 f303 	mul.w	r3, r2, r3
 801511a:	58cb      	ldr	r3, [r1, r3]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d1e7      	bne.n	80150f0 <uxr_compute_acknack+0x14>
 8015120:	4605      	mov	r5, r0
 8015122:	803d      	strh	r5, [r7, #0]
 8015124:	2101      	movs	r1, #1
 8015126:	89e6      	ldrh	r6, [r4, #14]
 8015128:	4628      	mov	r0, r5
 801512a:	f000 fb8d 	bl	8015848 <uxr_seq_num_sub>
 801512e:	4601      	mov	r1, r0
 8015130:	4630      	mov	r0, r6
 8015132:	f000 fb89 	bl	8015848 <uxr_seq_num_sub>
 8015136:	4606      	mov	r6, r0
 8015138:	b328      	cbz	r0, 8015186 <uxr_compute_acknack+0xaa>
 801513a:	f04f 0900 	mov.w	r9, #0
 801513e:	f04f 0801 	mov.w	r8, #1
 8015142:	464d      	mov	r5, r9
 8015144:	fa1f f189 	uxth.w	r1, r9
 8015148:	8838      	ldrh	r0, [r7, #0]
 801514a:	f000 fb79 	bl	8015840 <uxr_seq_num_add>
 801514e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015152:	6861      	ldr	r1, [r4, #4]
 8015154:	fa08 fe09 	lsl.w	lr, r8, r9
 8015158:	6822      	ldr	r2, [r4, #0]
 801515a:	f109 0901 	add.w	r9, r9, #1
 801515e:	ea4e 0e05 	orr.w	lr, lr, r5
 8015162:	fbb0 f3fc 	udiv	r3, r0, ip
 8015166:	fbb1 f1fc 	udiv	r1, r1, ip
 801516a:	fb03 001c 	mls	r0, r3, ip, r0
 801516e:	b283      	uxth	r3, r0
 8015170:	fb01 f303 	mul.w	r3, r1, r3
 8015174:	58d3      	ldr	r3, [r2, r3]
 8015176:	b90b      	cbnz	r3, 801517c <uxr_compute_acknack+0xa0>
 8015178:	fa1f f58e 	uxth.w	r5, lr
 801517c:	454e      	cmp	r6, r9
 801517e:	d1e1      	bne.n	8015144 <uxr_compute_acknack+0x68>
 8015180:	4628      	mov	r0, r5
 8015182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015186:	4605      	mov	r5, r0
 8015188:	4628      	mov	r0, r5
 801518a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801518e:	bf00      	nop

08015190 <uxr_init_output_best_effort_stream>:
 8015190:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015194:	6001      	str	r1, [r0, #0]
 8015196:	7303      	strb	r3, [r0, #12]
 8015198:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801519c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop

080151a4 <uxr_reset_output_best_effort_stream>:
 80151a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80151a8:	7b03      	ldrb	r3, [r0, #12]
 80151aa:	81c2      	strh	r2, [r0, #14]
 80151ac:	6043      	str	r3, [r0, #4]
 80151ae:	4770      	bx	lr

080151b0 <uxr_prepare_best_effort_buffer_to_write>:
 80151b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151b2:	4604      	mov	r4, r0
 80151b4:	b083      	sub	sp, #12
 80151b6:	6840      	ldr	r0, [r0, #4]
 80151b8:	460d      	mov	r5, r1
 80151ba:	4616      	mov	r6, r2
 80151bc:	f7fb ff4e 	bl	801105c <uxr_submessage_padding>
 80151c0:	6863      	ldr	r3, [r4, #4]
 80151c2:	4418      	add	r0, r3
 80151c4:	68a3      	ldr	r3, [r4, #8]
 80151c6:	1942      	adds	r2, r0, r5
 80151c8:	4293      	cmp	r3, r2
 80151ca:	bf2c      	ite	cs
 80151cc:	2701      	movcs	r7, #1
 80151ce:	2700      	movcc	r7, #0
 80151d0:	d202      	bcs.n	80151d8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80151d2:	4638      	mov	r0, r7
 80151d4:	b003      	add	sp, #12
 80151d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151d8:	9000      	str	r0, [sp, #0]
 80151da:	2300      	movs	r3, #0
 80151dc:	4630      	mov	r0, r6
 80151de:	6821      	ldr	r1, [r4, #0]
 80151e0:	f7fa fa02 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 80151e4:	6861      	ldr	r1, [r4, #4]
 80151e6:	4638      	mov	r0, r7
 80151e8:	4429      	add	r1, r5
 80151ea:	6061      	str	r1, [r4, #4]
 80151ec:	b003      	add	sp, #12
 80151ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151f0 <uxr_prepare_best_effort_buffer_to_send>:
 80151f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f4:	4604      	mov	r4, r0
 80151f6:	461d      	mov	r5, r3
 80151f8:	6840      	ldr	r0, [r0, #4]
 80151fa:	7b23      	ldrb	r3, [r4, #12]
 80151fc:	4298      	cmp	r0, r3
 80151fe:	bf8c      	ite	hi
 8015200:	2601      	movhi	r6, #1
 8015202:	2600      	movls	r6, #0
 8015204:	d802      	bhi.n	801520c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015206:	4630      	mov	r0, r6
 8015208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801520c:	4688      	mov	r8, r1
 801520e:	89e0      	ldrh	r0, [r4, #14]
 8015210:	2101      	movs	r1, #1
 8015212:	4617      	mov	r7, r2
 8015214:	f000 fb14 	bl	8015840 <uxr_seq_num_add>
 8015218:	6823      	ldr	r3, [r4, #0]
 801521a:	81e0      	strh	r0, [r4, #14]
 801521c:	8028      	strh	r0, [r5, #0]
 801521e:	4630      	mov	r0, r6
 8015220:	f8c8 3000 	str.w	r3, [r8]
 8015224:	6863      	ldr	r3, [r4, #4]
 8015226:	603b      	str	r3, [r7, #0]
 8015228:	7b23      	ldrb	r3, [r4, #12]
 801522a:	6063      	str	r3, [r4, #4]
 801522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015230 <on_full_output_buffer>:
 8015230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015232:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8015236:	460c      	mov	r4, r1
 8015238:	6803      	ldr	r3, [r0, #0]
 801523a:	4605      	mov	r5, r0
 801523c:	7b26      	ldrb	r6, [r4, #12]
 801523e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015242:	fbb2 f2fc 	udiv	r2, r2, ip
 8015246:	eba3 0e01 	sub.w	lr, r3, r1
 801524a:	6903      	ldr	r3, [r0, #16]
 801524c:	fbbe fef2 	udiv	lr, lr, r2
 8015250:	f10e 0e01 	add.w	lr, lr, #1
 8015254:	fa1f fe8e 	uxth.w	lr, lr
 8015258:	fbbe f7fc 	udiv	r7, lr, ip
 801525c:	fb0c ec17 	mls	ip, ip, r7, lr
 8015260:	fa1f fc8c 	uxth.w	ip, ip
 8015264:	fb02 fc0c 	mul.w	ip, r2, ip
 8015268:	f851 200c 	ldr.w	r2, [r1, ip]
 801526c:	44b4      	add	ip, r6
 801526e:	1b92      	subs	r2, r2, r6
 8015270:	f10c 0c08 	add.w	ip, ip, #8
 8015274:	3a04      	subs	r2, #4
 8015276:	4461      	add	r1, ip
 8015278:	f7fa f9c0 	bl	800f5fc <ucdr_init_buffer_origin>
 801527c:	4628      	mov	r0, r5
 801527e:	4622      	mov	r2, r4
 8015280:	4902      	ldr	r1, [pc, #8]	@ (801528c <on_full_output_buffer+0x5c>)
 8015282:	f7fa f997 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 8015286:	2000      	movs	r0, #0
 8015288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801528a:	bf00      	nop
 801528c:	08015231 	.word	0x08015231

08015290 <uxr_init_output_reliable_stream>:
 8015290:	b530      	push	{r4, r5, lr}
 8015292:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8015296:	8103      	strh	r3, [r0, #8]
 8015298:	7304      	strb	r4, [r0, #12]
 801529a:	e9c0 1200 	strd	r1, r2, [r0]
 801529e:	b1e3      	cbz	r3, 80152da <uxr_init_output_reliable_stream+0x4a>
 80152a0:	600c      	str	r4, [r1, #0]
 80152a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80152a6:	f1bc 0f01 	cmp.w	ip, #1
 80152aa:	d916      	bls.n	80152da <uxr_init_output_reliable_stream+0x4a>
 80152ac:	f04f 0e01 	mov.w	lr, #1
 80152b0:	6843      	ldr	r3, [r0, #4]
 80152b2:	f10e 0501 	add.w	r5, lr, #1
 80152b6:	7b04      	ldrb	r4, [r0, #12]
 80152b8:	6801      	ldr	r1, [r0, #0]
 80152ba:	fbbe f2fc 	udiv	r2, lr, ip
 80152be:	fbb3 f3fc 	udiv	r3, r3, ip
 80152c2:	fb0c e212 	mls	r2, ip, r2, lr
 80152c6:	fa1f fe85 	uxth.w	lr, r5
 80152ca:	b292      	uxth	r2, r2
 80152cc:	fb02 f303 	mul.w	r3, r2, r3
 80152d0:	50cc      	str	r4, [r1, r3]
 80152d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80152d6:	45f4      	cmp	ip, lr
 80152d8:	d8ea      	bhi.n	80152b0 <uxr_init_output_reliable_stream+0x20>
 80152da:	4b07      	ldr	r3, [pc, #28]	@ (80152f8 <uxr_init_output_reliable_stream+0x68>)
 80152dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80152e0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80152e4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80152e8:	f8c0 300e 	str.w	r3, [r0, #14]
 80152ec:	2300      	movs	r3, #0
 80152ee:	8242      	strh	r2, [r0, #18]
 80152f0:	8403      	strh	r3, [r0, #32]
 80152f2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80152f6:	bd30      	pop	{r4, r5, pc}
 80152f8:	ffff0000 	.word	0xffff0000
 80152fc:	00000000 	.word	0x00000000

08015300 <uxr_reset_output_reliable_stream>:
 8015300:	8901      	ldrh	r1, [r0, #8]
 8015302:	b510      	push	{r4, lr}
 8015304:	b1b1      	cbz	r1, 8015334 <uxr_reset_output_reliable_stream+0x34>
 8015306:	f04f 0e00 	mov.w	lr, #0
 801530a:	46f4      	mov	ip, lr
 801530c:	6843      	ldr	r3, [r0, #4]
 801530e:	f10e 0e01 	add.w	lr, lr, #1
 8015312:	7b04      	ldrb	r4, [r0, #12]
 8015314:	fbbc f2f1 	udiv	r2, ip, r1
 8015318:	fbb3 f3f1 	udiv	r3, r3, r1
 801531c:	fb01 c212 	mls	r2, r1, r2, ip
 8015320:	fa1f fc8e 	uxth.w	ip, lr
 8015324:	b292      	uxth	r2, r2
 8015326:	fb02 f303 	mul.w	r3, r2, r3
 801532a:	6802      	ldr	r2, [r0, #0]
 801532c:	50d4      	str	r4, [r2, r3]
 801532e:	8901      	ldrh	r1, [r0, #8]
 8015330:	4561      	cmp	r1, ip
 8015332:	d8eb      	bhi.n	801530c <uxr_reset_output_reliable_stream+0xc>
 8015334:	4b08      	ldr	r3, [pc, #32]	@ (8015358 <uxr_reset_output_reliable_stream+0x58>)
 8015336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801533a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8015350 <uxr_reset_output_reliable_stream+0x50>
 801533e:	f8c0 300e 	str.w	r3, [r0, #14]
 8015342:	2300      	movs	r3, #0
 8015344:	8242      	strh	r2, [r0, #18]
 8015346:	8403      	strh	r3, [r0, #32]
 8015348:	ed80 7b06 	vstr	d7, [r0, #24]
 801534c:	bd10      	pop	{r4, pc}
 801534e:	bf00      	nop
 8015350:	ffffffff 	.word	0xffffffff
 8015354:	7fffffff 	.word	0x7fffffff
 8015358:	ffff0000 	.word	0xffff0000

0801535c <uxr_prepare_reliable_buffer_to_write>:
 801535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015360:	4604      	mov	r4, r0
 8015362:	b091      	sub	sp, #68	@ 0x44
 8015364:	8900      	ldrh	r0, [r0, #8]
 8015366:	468b      	mov	fp, r1
 8015368:	89e6      	ldrh	r6, [r4, #14]
 801536a:	9204      	str	r2, [sp, #16]
 801536c:	6865      	ldr	r5, [r4, #4]
 801536e:	6823      	ldr	r3, [r4, #0]
 8015370:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015374:	fbb6 f2f0 	udiv	r2, r6, r0
 8015378:	fbb5 f5f0 	udiv	r5, r5, r0
 801537c:	fb00 6212 	mls	r2, r0, r2, r6
 8015380:	1f2f      	subs	r7, r5, #4
 8015382:	b292      	uxth	r2, r2
 8015384:	fb05 3202 	mla	r2, r5, r2, r3
 8015388:	1d11      	adds	r1, r2, #4
 801538a:	f8d2 8000 	ldr.w	r8, [r2]
 801538e:	9103      	str	r1, [sp, #12]
 8015390:	2800      	cmp	r0, #0
 8015392:	f000 814a 	beq.w	801562a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8015396:	f04f 0c00 	mov.w	ip, #0
 801539a:	46e2      	mov	sl, ip
 801539c:	4661      	mov	r1, ip
 801539e:	f10c 0c01 	add.w	ip, ip, #1
 80153a2:	fbb1 f2f0 	udiv	r2, r1, r0
 80153a6:	fb00 1212 	mls	r2, r0, r2, r1
 80153aa:	fa1f f18c 	uxth.w	r1, ip
 80153ae:	b292      	uxth	r2, r2
 80153b0:	fb05 f202 	mul.w	r2, r5, r2
 80153b4:	589a      	ldr	r2, [r3, r2]
 80153b6:	454a      	cmp	r2, r9
 80153b8:	d103      	bne.n	80153c2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80153ba:	f10a 0a01 	add.w	sl, sl, #1
 80153be:	fa1f fa8a 	uxth.w	sl, sl
 80153c2:	4281      	cmp	r1, r0
 80153c4:	d3eb      	bcc.n	801539e <uxr_prepare_reliable_buffer_to_write+0x42>
 80153c6:	4640      	mov	r0, r8
 80153c8:	2104      	movs	r1, #4
 80153ca:	f8cd a014 	str.w	sl, [sp, #20]
 80153ce:	f7fa f921 	bl	800f614 <ucdr_alignment>
 80153d2:	4480      	add	r8, r0
 80153d4:	eb08 020b 	add.w	r2, r8, fp
 80153d8:	42ba      	cmp	r2, r7
 80153da:	f240 80ca 	bls.w	8015572 <uxr_prepare_reliable_buffer_to_write+0x216>
 80153de:	7b22      	ldrb	r2, [r4, #12]
 80153e0:	445a      	add	r2, fp
 80153e2:	42ba      	cmp	r2, r7
 80153e4:	f240 80b2 	bls.w	801554c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80153e8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80153ec:	b2bb      	uxth	r3, r7
 80153ee:	eba2 0209 	sub.w	r2, r2, r9
 80153f2:	441a      	add	r2, r3
 80153f4:	b292      	uxth	r2, r2
 80153f6:	fb0a f902 	mul.w	r9, sl, r2
 80153fa:	9205      	str	r2, [sp, #20]
 80153fc:	45d9      	cmp	r9, fp
 80153fe:	9206      	str	r2, [sp, #24]
 8015400:	f0c0 80b3 	bcc.w	801556a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015404:	f108 0204 	add.w	r2, r8, #4
 8015408:	42ba      	cmp	r2, r7
 801540a:	f080 80da 	bcs.w	80155c2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801540e:	f1a3 0904 	sub.w	r9, r3, #4
 8015412:	9b05      	ldr	r3, [sp, #20]
 8015414:	eba9 0908 	sub.w	r9, r9, r8
 8015418:	fa1f f989 	uxth.w	r9, r9
 801541c:	ebab 0b09 	sub.w	fp, fp, r9
 8015420:	fbbb f2f3 	udiv	r2, fp, r3
 8015424:	fb03 b312 	mls	r3, r3, r2, fp
 8015428:	2b00      	cmp	r3, #0
 801542a:	f040 80c4 	bne.w	80155b6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801542e:	b293      	uxth	r3, r2
 8015430:	4553      	cmp	r3, sl
 8015432:	f200 809a 	bhi.w	801556a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015436:	2b00      	cmp	r3, #0
 8015438:	f000 80f9 	beq.w	801562e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801543c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015440:	f04f 0a00 	mov.w	sl, #0
 8015444:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015448:	f10d 0b20 	add.w	fp, sp, #32
 801544c:	9505      	str	r5, [sp, #20]
 801544e:	461d      	mov	r5, r3
 8015450:	e000      	b.n	8015454 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8015452:	46c1      	mov	r9, r8
 8015454:	8922      	ldrh	r2, [r4, #8]
 8015456:	4658      	mov	r0, fp
 8015458:	6863      	ldr	r3, [r4, #4]
 801545a:	f10a 0a01 	add.w	sl, sl, #1
 801545e:	fbb6 f1f2 	udiv	r1, r6, r2
 8015462:	fbb3 f3f2 	udiv	r3, r3, r2
 8015466:	fb02 6111 	mls	r1, r2, r1, r6
 801546a:	463a      	mov	r2, r7
 801546c:	b289      	uxth	r1, r1
 801546e:	fb03 f101 	mul.w	r1, r3, r1
 8015472:	6823      	ldr	r3, [r4, #0]
 8015474:	3104      	adds	r1, #4
 8015476:	4419      	add	r1, r3
 8015478:	2300      	movs	r3, #0
 801547a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801547e:	f8cd c000 	str.w	ip, [sp]
 8015482:	f7fa f8b1 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 8015486:	464a      	mov	r2, r9
 8015488:	2300      	movs	r3, #0
 801548a:	210d      	movs	r1, #13
 801548c:	4658      	mov	r0, fp
 801548e:	f7fb fda5 	bl	8010fdc <uxr_buffer_submessage_header>
 8015492:	8921      	ldrh	r1, [r4, #8]
 8015494:	6863      	ldr	r3, [r4, #4]
 8015496:	4630      	mov	r0, r6
 8015498:	fbb6 f2f1 	udiv	r2, r6, r1
 801549c:	fbb3 f3f1 	udiv	r3, r3, r1
 80154a0:	fb01 6212 	mls	r2, r1, r2, r6
 80154a4:	2101      	movs	r1, #1
 80154a6:	b292      	uxth	r2, r2
 80154a8:	fb02 f303 	mul.w	r3, r2, r3
 80154ac:	6822      	ldr	r2, [r4, #0]
 80154ae:	50d7      	str	r7, [r2, r3]
 80154b0:	f000 f9c6 	bl	8015840 <uxr_seq_num_add>
 80154b4:	4606      	mov	r6, r0
 80154b6:	fa1f f38a 	uxth.w	r3, sl
 80154ba:	429d      	cmp	r5, r3
 80154bc:	d8c9      	bhi.n	8015452 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80154be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80154c2:	9d05      	ldr	r5, [sp, #20]
 80154c4:	8920      	ldrh	r0, [r4, #8]
 80154c6:	463a      	mov	r2, r7
 80154c8:	6863      	ldr	r3, [r4, #4]
 80154ca:	fbb6 f1f0 	udiv	r1, r6, r0
 80154ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80154d2:	fb00 6111 	mls	r1, r0, r1, r6
 80154d6:	4658      	mov	r0, fp
 80154d8:	b289      	uxth	r1, r1
 80154da:	fb01 f303 	mul.w	r3, r1, r3
 80154de:	6821      	ldr	r1, [r4, #0]
 80154e0:	3304      	adds	r3, #4
 80154e2:	4419      	add	r1, r3
 80154e4:	2300      	movs	r3, #0
 80154e6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80154ea:	9700      	str	r7, [sp, #0]
 80154ec:	f7fa f87c 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 80154f0:	9f06      	ldr	r7, [sp, #24]
 80154f2:	4658      	mov	r0, fp
 80154f4:	2302      	movs	r3, #2
 80154f6:	b2ba      	uxth	r2, r7
 80154f8:	210d      	movs	r1, #13
 80154fa:	f7fb fd6f 	bl	8010fdc <uxr_buffer_submessage_header>
 80154fe:	f108 0104 	add.w	r1, r8, #4
 8015502:	9b03      	ldr	r3, [sp, #12]
 8015504:	f1a5 0208 	sub.w	r2, r5, #8
 8015508:	8925      	ldrh	r5, [r4, #8]
 801550a:	440b      	add	r3, r1
 801550c:	eba2 0208 	sub.w	r2, r2, r8
 8015510:	fbb6 f0f5 	udiv	r0, r6, r5
 8015514:	4619      	mov	r1, r3
 8015516:	6863      	ldr	r3, [r4, #4]
 8015518:	fb05 6010 	mls	r0, r5, r0, r6
 801551c:	fbb3 f3f5 	udiv	r3, r3, r5
 8015520:	b280      	uxth	r0, r0
 8015522:	6825      	ldr	r5, [r4, #0]
 8015524:	fb00 f303 	mul.w	r3, r0, r3
 8015528:	7b20      	ldrb	r0, [r4, #12]
 801552a:	3004      	adds	r0, #4
 801552c:	4438      	add	r0, r7
 801552e:	50e8      	str	r0, [r5, r3]
 8015530:	9d04      	ldr	r5, [sp, #16]
 8015532:	4628      	mov	r0, r5
 8015534:	f7fa f86a 	bl	800f60c <ucdr_init_buffer>
 8015538:	4628      	mov	r0, r5
 801553a:	4622      	mov	r2, r4
 801553c:	493d      	ldr	r1, [pc, #244]	@ (8015634 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801553e:	f7fa f839 	bl	800f5b4 <ucdr_set_on_full_buffer_callback>
 8015542:	2001      	movs	r0, #1
 8015544:	81e6      	strh	r6, [r4, #14]
 8015546:	b011      	add	sp, #68	@ 0x44
 8015548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554c:	2101      	movs	r1, #1
 801554e:	89e0      	ldrh	r0, [r4, #14]
 8015550:	f000 f976 	bl	8015840 <uxr_seq_num_add>
 8015554:	4605      	mov	r5, r0
 8015556:	8921      	ldrh	r1, [r4, #8]
 8015558:	8a60      	ldrh	r0, [r4, #18]
 801555a:	f000 f971 	bl	8015840 <uxr_seq_num_add>
 801555e:	4601      	mov	r1, r0
 8015560:	4628      	mov	r0, r5
 8015562:	f000 f975 	bl	8015850 <uxr_seq_num_cmp>
 8015566:	2800      	cmp	r0, #0
 8015568:	dd44      	ble.n	80155f4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801556a:	2000      	movs	r0, #0
 801556c:	b011      	add	sp, #68	@ 0x44
 801556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015572:	8921      	ldrh	r1, [r4, #8]
 8015574:	8a60      	ldrh	r0, [r4, #18]
 8015576:	9205      	str	r2, [sp, #20]
 8015578:	f000 f962 	bl	8015840 <uxr_seq_num_add>
 801557c:	4601      	mov	r1, r0
 801557e:	4630      	mov	r0, r6
 8015580:	f000 f966 	bl	8015850 <uxr_seq_num_cmp>
 8015584:	2800      	cmp	r0, #0
 8015586:	9a05      	ldr	r2, [sp, #20]
 8015588:	dcef      	bgt.n	801556a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801558a:	8925      	ldrh	r5, [r4, #8]
 801558c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8015590:	fbb6 f4f5 	udiv	r4, r6, r5
 8015594:	fbb3 f3f5 	udiv	r3, r3, r5
 8015598:	fb05 6414 	mls	r4, r5, r4, r6
 801559c:	b2a4      	uxth	r4, r4
 801559e:	fb04 f303 	mul.w	r3, r4, r3
 80155a2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80155a6:	50fa      	str	r2, [r7, r3]
 80155a8:	2300      	movs	r3, #0
 80155aa:	f8cd 8000 	str.w	r8, [sp]
 80155ae:	f7fa f81b 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 80155b2:	2001      	movs	r0, #1
 80155b4:	e7da      	b.n	801556c <uxr_prepare_reliable_buffer_to_write+0x210>
 80155b6:	3201      	adds	r2, #1
 80155b8:	9306      	str	r3, [sp, #24]
 80155ba:	b293      	uxth	r3, r2
 80155bc:	4553      	cmp	r3, sl
 80155be:	d8d4      	bhi.n	801556a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80155c0:	e739      	b.n	8015436 <uxr_prepare_reliable_buffer_to_write+0xda>
 80155c2:	4630      	mov	r0, r6
 80155c4:	2101      	movs	r1, #1
 80155c6:	9307      	str	r3, [sp, #28]
 80155c8:	f000 f93a 	bl	8015840 <uxr_seq_num_add>
 80155cc:	4606      	mov	r6, r0
 80155ce:	8920      	ldrh	r0, [r4, #8]
 80155d0:	6862      	ldr	r2, [r4, #4]
 80155d2:	fbb6 f1f0 	udiv	r1, r6, r0
 80155d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80155da:	fb00 6111 	mls	r1, r0, r1, r6
 80155de:	b289      	uxth	r1, r1
 80155e0:	fb01 f202 	mul.w	r2, r1, r2
 80155e4:	6821      	ldr	r1, [r4, #0]
 80155e6:	3204      	adds	r2, #4
 80155e8:	188b      	adds	r3, r1, r2
 80155ea:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80155ee:	9303      	str	r3, [sp, #12]
 80155f0:	9b07      	ldr	r3, [sp, #28]
 80155f2:	e70c      	b.n	801540e <uxr_prepare_reliable_buffer_to_write+0xb2>
 80155f4:	8921      	ldrh	r1, [r4, #8]
 80155f6:	6863      	ldr	r3, [r4, #4]
 80155f8:	9804      	ldr	r0, [sp, #16]
 80155fa:	fbb5 f2f1 	udiv	r2, r5, r1
 80155fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015602:	fb01 5212 	mls	r2, r1, r2, r5
 8015606:	6821      	ldr	r1, [r4, #0]
 8015608:	b292      	uxth	r2, r2
 801560a:	fb02 f303 	mul.w	r3, r2, r3
 801560e:	7b22      	ldrb	r2, [r4, #12]
 8015610:	3304      	adds	r3, #4
 8015612:	445a      	add	r2, fp
 8015614:	4419      	add	r1, r3
 8015616:	f841 2c04 	str.w	r2, [r1, #-4]
 801561a:	7b23      	ldrb	r3, [r4, #12]
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	2300      	movs	r3, #0
 8015620:	f7f9 ffe2 	bl	800f5e8 <ucdr_init_buffer_origin_offset>
 8015624:	2001      	movs	r0, #1
 8015626:	81e5      	strh	r5, [r4, #14]
 8015628:	e7a0      	b.n	801556c <uxr_prepare_reliable_buffer_to_write+0x210>
 801562a:	4682      	mov	sl, r0
 801562c:	e6cb      	b.n	80153c6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801562e:	f10d 0b20 	add.w	fp, sp, #32
 8015632:	e747      	b.n	80154c4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8015634:	08015231 	.word	0x08015231

08015638 <uxr_prepare_next_reliable_buffer_to_send>:
 8015638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563a:	4604      	mov	r4, r0
 801563c:	461d      	mov	r5, r3
 801563e:	460f      	mov	r7, r1
 8015640:	8a00      	ldrh	r0, [r0, #16]
 8015642:	2101      	movs	r1, #1
 8015644:	4616      	mov	r6, r2
 8015646:	f000 f8fb 	bl	8015840 <uxr_seq_num_add>
 801564a:	8028      	strh	r0, [r5, #0]
 801564c:	8922      	ldrh	r2, [r4, #8]
 801564e:	6863      	ldr	r3, [r4, #4]
 8015650:	fbb0 f1f2 	udiv	r1, r0, r2
 8015654:	fbb3 f3f2 	udiv	r3, r3, r2
 8015658:	fb02 0c11 	mls	ip, r2, r1, r0
 801565c:	89e1      	ldrh	r1, [r4, #14]
 801565e:	fa1f fc8c 	uxth.w	ip, ip
 8015662:	fb0c fc03 	mul.w	ip, ip, r3
 8015666:	6823      	ldr	r3, [r4, #0]
 8015668:	f10c 0c04 	add.w	ip, ip, #4
 801566c:	4463      	add	r3, ip
 801566e:	603b      	str	r3, [r7, #0]
 8015670:	6823      	ldr	r3, [r4, #0]
 8015672:	449c      	add	ip, r3
 8015674:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015678:	6033      	str	r3, [r6, #0]
 801567a:	f000 f8e9 	bl	8015850 <uxr_seq_num_cmp>
 801567e:	2800      	cmp	r0, #0
 8015680:	dd01      	ble.n	8015686 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015682:	2000      	movs	r0, #0
 8015684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015686:	7b23      	ldrb	r3, [r4, #12]
 8015688:	6832      	ldr	r2, [r6, #0]
 801568a:	429a      	cmp	r2, r3
 801568c:	d9f9      	bls.n	8015682 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801568e:	8a61      	ldrh	r1, [r4, #18]
 8015690:	8a20      	ldrh	r0, [r4, #16]
 8015692:	f000 f8d9 	bl	8015848 <uxr_seq_num_sub>
 8015696:	8923      	ldrh	r3, [r4, #8]
 8015698:	4283      	cmp	r3, r0
 801569a:	d0f2      	beq.n	8015682 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801569c:	8828      	ldrh	r0, [r5, #0]
 801569e:	89e3      	ldrh	r3, [r4, #14]
 80156a0:	8220      	strh	r0, [r4, #16]
 80156a2:	4298      	cmp	r0, r3
 80156a4:	d001      	beq.n	80156aa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80156a6:	2001      	movs	r0, #1
 80156a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156aa:	2101      	movs	r1, #1
 80156ac:	f000 f8c8 	bl	8015840 <uxr_seq_num_add>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2001      	movs	r0, #1
 80156b4:	81e3      	strh	r3, [r4, #14]
 80156b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156b8 <uxr_update_output_stream_heartbeat_timestamp>:
 80156b8:	b570      	push	{r4, r5, r6, lr}
 80156ba:	8a01      	ldrh	r1, [r0, #16]
 80156bc:	4604      	mov	r4, r0
 80156be:	8a40      	ldrh	r0, [r0, #18]
 80156c0:	4615      	mov	r5, r2
 80156c2:	461e      	mov	r6, r3
 80156c4:	f000 f8c4 	bl	8015850 <uxr_seq_num_cmp>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	db07      	blt.n	80156dc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80156cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80156d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80156d4:	2000      	movs	r0, #0
 80156d6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80156da:	bd70      	pop	{r4, r5, r6, pc}
 80156dc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80156e0:	b940      	cbnz	r0, 80156f4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80156e2:	2301      	movs	r3, #1
 80156e4:	f884 3020 	strb.w	r3, [r4, #32]
 80156e8:	3564      	adds	r5, #100	@ 0x64
 80156ea:	f146 0600 	adc.w	r6, r6, #0
 80156ee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80156f2:	bd70      	pop	{r4, r5, r6, pc}
 80156f4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80156f8:	4295      	cmp	r5, r2
 80156fa:	eb76 0303 	sbcs.w	r3, r6, r3
 80156fe:	db04      	blt.n	801570a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8015700:	1c43      	adds	r3, r0, #1
 8015702:	2001      	movs	r0, #1
 8015704:	f884 3020 	strb.w	r3, [r4, #32]
 8015708:	e7ee      	b.n	80156e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801570a:	2000      	movs	r0, #0
 801570c:	e7ec      	b.n	80156e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801570e:	bf00      	nop

08015710 <uxr_begin_output_nack_buffer_it>:
 8015710:	8a40      	ldrh	r0, [r0, #18]
 8015712:	4770      	bx	lr

08015714 <uxr_next_reliable_nack_buffer_to_send>:
 8015714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015718:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801571c:	b197      	cbz	r7, 8015744 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801571e:	4680      	mov	r8, r0
 8015720:	460d      	mov	r5, r1
 8015722:	4616      	mov	r6, r2
 8015724:	461c      	mov	r4, r3
 8015726:	8818      	ldrh	r0, [r3, #0]
 8015728:	2101      	movs	r1, #1
 801572a:	f000 f889 	bl	8015840 <uxr_seq_num_add>
 801572e:	8020      	strh	r0, [r4, #0]
 8015730:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8015734:	f000 f88c 	bl	8015850 <uxr_seq_num_cmp>
 8015738:	2800      	cmp	r0, #0
 801573a:	dd06      	ble.n	801574a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801573c:	2300      	movs	r3, #0
 801573e:	461f      	mov	r7, r3
 8015740:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8015744:	4638      	mov	r0, r7
 8015746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801574a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801574e:	8820      	ldrh	r0, [r4, #0]
 8015750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015754:	fbb0 f3f2 	udiv	r3, r0, r2
 8015758:	fbb1 fcf2 	udiv	ip, r1, r2
 801575c:	fb02 0313 	mls	r3, r2, r3, r0
 8015760:	b29b      	uxth	r3, r3
 8015762:	fb03 fc0c 	mul.w	ip, r3, ip
 8015766:	f8d8 3000 	ldr.w	r3, [r8]
 801576a:	f10c 0c04 	add.w	ip, ip, #4
 801576e:	4463      	add	r3, ip
 8015770:	602b      	str	r3, [r5, #0]
 8015772:	f8d8 3000 	ldr.w	r3, [r8]
 8015776:	4463      	add	r3, ip
 8015778:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801577c:	6033      	str	r3, [r6, #0]
 801577e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8015782:	429a      	cmp	r2, r3
 8015784:	d0d0      	beq.n	8015728 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8015786:	e7dd      	b.n	8015744 <uxr_next_reliable_nack_buffer_to_send+0x30>

08015788 <uxr_process_acknack>:
 8015788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801578a:	4604      	mov	r4, r0
 801578c:	460e      	mov	r6, r1
 801578e:	4610      	mov	r0, r2
 8015790:	2101      	movs	r1, #1
 8015792:	f000 f859 	bl	8015848 <uxr_seq_num_sub>
 8015796:	8a61      	ldrh	r1, [r4, #18]
 8015798:	f000 f856 	bl	8015848 <uxr_seq_num_sub>
 801579c:	b1c8      	cbz	r0, 80157d2 <uxr_process_acknack+0x4a>
 801579e:	4605      	mov	r5, r0
 80157a0:	2700      	movs	r7, #0
 80157a2:	2101      	movs	r1, #1
 80157a4:	8a60      	ldrh	r0, [r4, #18]
 80157a6:	f000 f84b 	bl	8015840 <uxr_seq_num_add>
 80157aa:	8923      	ldrh	r3, [r4, #8]
 80157ac:	6862      	ldr	r2, [r4, #4]
 80157ae:	3701      	adds	r7, #1
 80157b0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80157b4:	6821      	ldr	r1, [r4, #0]
 80157b6:	42bd      	cmp	r5, r7
 80157b8:	8260      	strh	r0, [r4, #18]
 80157ba:	fbb0 fef3 	udiv	lr, r0, r3
 80157be:	fbb2 f2f3 	udiv	r2, r2, r3
 80157c2:	fb03 031e 	mls	r3, r3, lr, r0
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	fb02 f303 	mul.w	r3, r2, r3
 80157cc:	f841 c003 	str.w	ip, [r1, r3]
 80157d0:	d1e7      	bne.n	80157a2 <uxr_process_acknack+0x1a>
 80157d2:	3e00      	subs	r6, #0
 80157d4:	f04f 0300 	mov.w	r3, #0
 80157d8:	bf18      	it	ne
 80157da:	2601      	movne	r6, #1
 80157dc:	f884 3020 	strb.w	r3, [r4, #32]
 80157e0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80157e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e6:	bf00      	nop

080157e8 <uxr_is_output_up_to_date>:
 80157e8:	8a01      	ldrh	r1, [r0, #16]
 80157ea:	8a40      	ldrh	r0, [r0, #18]
 80157ec:	b508      	push	{r3, lr}
 80157ee:	f000 f82f 	bl	8015850 <uxr_seq_num_cmp>
 80157f2:	fab0 f080 	clz	r0, r0
 80157f6:	0940      	lsrs	r0, r0, #5
 80157f8:	bd08      	pop	{r3, pc}
 80157fa:	bf00      	nop

080157fc <get_available_free_slots>:
 80157fc:	8901      	ldrh	r1, [r0, #8]
 80157fe:	b1e1      	cbz	r1, 801583a <get_available_free_slots+0x3e>
 8015800:	6843      	ldr	r3, [r0, #4]
 8015802:	f04f 0c00 	mov.w	ip, #0
 8015806:	b530      	push	{r4, r5, lr}
 8015808:	fbb3 fef1 	udiv	lr, r3, r1
 801580c:	6805      	ldr	r5, [r0, #0]
 801580e:	4662      	mov	r2, ip
 8015810:	7b04      	ldrb	r4, [r0, #12]
 8015812:	4660      	mov	r0, ip
 8015814:	f10c 0c01 	add.w	ip, ip, #1
 8015818:	fbb2 f3f1 	udiv	r3, r2, r1
 801581c:	fb01 2313 	mls	r3, r1, r3, r2
 8015820:	fa1f f28c 	uxth.w	r2, ip
 8015824:	b29b      	uxth	r3, r3
 8015826:	fb0e f303 	mul.w	r3, lr, r3
 801582a:	58eb      	ldr	r3, [r5, r3]
 801582c:	429c      	cmp	r4, r3
 801582e:	d101      	bne.n	8015834 <get_available_free_slots+0x38>
 8015830:	3001      	adds	r0, #1
 8015832:	b280      	uxth	r0, r0
 8015834:	428a      	cmp	r2, r1
 8015836:	d3ed      	bcc.n	8015814 <get_available_free_slots+0x18>
 8015838:	bd30      	pop	{r4, r5, pc}
 801583a:	4608      	mov	r0, r1
 801583c:	4770      	bx	lr
 801583e:	bf00      	nop

08015840 <uxr_seq_num_add>:
 8015840:	4408      	add	r0, r1
 8015842:	b280      	uxth	r0, r0
 8015844:	4770      	bx	lr
 8015846:	bf00      	nop

08015848 <uxr_seq_num_sub>:
 8015848:	1a40      	subs	r0, r0, r1
 801584a:	b280      	uxth	r0, r0
 801584c:	4770      	bx	lr
 801584e:	bf00      	nop

08015850 <uxr_seq_num_cmp>:
 8015850:	4288      	cmp	r0, r1
 8015852:	d011      	beq.n	8015878 <uxr_seq_num_cmp+0x28>
 8015854:	d309      	bcc.n	801586a <uxr_seq_num_cmp+0x1a>
 8015856:	4288      	cmp	r0, r1
 8015858:	d910      	bls.n	801587c <uxr_seq_num_cmp+0x2c>
 801585a:	1a40      	subs	r0, r0, r1
 801585c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015860:	bfd4      	ite	le
 8015862:	2001      	movle	r0, #1
 8015864:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015868:	4770      	bx	lr
 801586a:	1a0b      	subs	r3, r1, r0
 801586c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015870:	daf1      	bge.n	8015856 <uxr_seq_num_cmp+0x6>
 8015872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015876:	4770      	bx	lr
 8015878:	2000      	movs	r0, #0
 801587a:	4770      	bx	lr
 801587c:	2001      	movs	r0, #1
 801587e:	4770      	bx	lr

08015880 <uxr_init_framing_io>:
 8015880:	2300      	movs	r3, #0
 8015882:	7041      	strb	r1, [r0, #1]
 8015884:	7003      	strb	r3, [r0, #0]
 8015886:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop

0801588c <uxr_write_framed_msg>:
 801588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015890:	4617      	mov	r7, r2
 8015892:	7842      	ldrb	r2, [r0, #1]
 8015894:	460e      	mov	r6, r1
 8015896:	b083      	sub	sp, #12
 8015898:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801589c:	469b      	mov	fp, r3
 801589e:	237e      	movs	r3, #126	@ 0x7e
 80158a0:	4604      	mov	r4, r0
 80158a2:	2901      	cmp	r1, #1
 80158a4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80158a8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80158ac:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80158b0:	f240 8115 	bls.w	8015ade <uxr_write_framed_msg+0x252>
 80158b4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80158b8:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80158bc:	2202      	movs	r2, #2
 80158be:	2901      	cmp	r1, #1
 80158c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80158c4:	d952      	bls.n	801596c <uxr_write_framed_msg+0xe0>
 80158c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158c8:	2103      	movs	r1, #3
 80158ca:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80158ce:	b2dd      	uxtb	r5, r3
 80158d0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80158d4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80158d8:	2a01      	cmp	r2, #1
 80158da:	d95c      	bls.n	8015996 <uxr_write_framed_msg+0x10a>
 80158dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158de:	1862      	adds	r2, r4, r1
 80158e0:	3101      	adds	r1, #1
 80158e2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80158e6:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80158ea:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80158ee:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80158f2:	2a01      	cmp	r2, #1
 80158f4:	d961      	bls.n	80159ba <uxr_write_framed_msg+0x12e>
 80158f6:	1c4a      	adds	r2, r1, #1
 80158f8:	4421      	add	r1, r4
 80158fa:	b2d2      	uxtb	r2, r2
 80158fc:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015900:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015904:	2b00      	cmp	r3, #0
 8015906:	d06a      	beq.n	80159de <uxr_write_framed_msg+0x152>
 8015908:	f04f 0800 	mov.w	r8, #0
 801590c:	46c1      	mov	r9, r8
 801590e:	e016      	b.n	801593e <uxr_write_framed_msg+0xb2>
 8015910:	2a29      	cmp	r2, #41	@ 0x29
 8015912:	d868      	bhi.n	80159e6 <uxr_write_framed_msg+0x15a>
 8015914:	18a0      	adds	r0, r4, r2
 8015916:	3201      	adds	r2, #1
 8015918:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801591c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015920:	ea88 0101 	eor.w	r1, r8, r1
 8015924:	4b7d      	ldr	r3, [pc, #500]	@ (8015b1c <uxr_write_framed_msg+0x290>)
 8015926:	f109 0901 	add.w	r9, r9, #1
 801592a:	b2c9      	uxtb	r1, r1
 801592c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015930:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015936:	454b      	cmp	r3, r9
 8015938:	d969      	bls.n	8015a0e <uxr_write_framed_msg+0x182>
 801593a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801593e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015942:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015946:	2801      	cmp	r0, #1
 8015948:	d8e2      	bhi.n	8015910 <uxr_write_framed_msg+0x84>
 801594a:	1c50      	adds	r0, r2, #1
 801594c:	b2c0      	uxtb	r0, r0
 801594e:	2829      	cmp	r0, #41	@ 0x29
 8015950:	d849      	bhi.n	80159e6 <uxr_write_framed_msg+0x15a>
 8015952:	18a0      	adds	r0, r4, r2
 8015954:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015958:	3202      	adds	r2, #2
 801595a:	f081 0520 	eor.w	r5, r1, #32
 801595e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015962:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015966:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801596a:	e7d9      	b.n	8015920 <uxr_write_framed_msg+0x94>
 801596c:	2104      	movs	r1, #4
 801596e:	f04f 0c03 	mov.w	ip, #3
 8015972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015974:	4422      	add	r2, r4
 8015976:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801597a:	44a4      	add	ip, r4
 801597c:	b2dd      	uxtb	r5, r3
 801597e:	f080 0020 	eor.w	r0, r0, #32
 8015982:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8015986:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801598a:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801598e:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015992:	2a01      	cmp	r2, #1
 8015994:	d8a2      	bhi.n	80158dc <uxr_write_framed_msg+0x50>
 8015996:	1862      	adds	r2, r4, r1
 8015998:	207d      	movs	r0, #125	@ 0x7d
 801599a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801599c:	f085 0520 	eor.w	r5, r5, #32
 80159a0:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80159a4:	3102      	adds	r1, #2
 80159a6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80159aa:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80159ae:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80159b2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80159b6:	2a01      	cmp	r2, #1
 80159b8:	d89d      	bhi.n	80158f6 <uxr_write_framed_msg+0x6a>
 80159ba:	1c4d      	adds	r5, r1, #1
 80159bc:	1c8a      	adds	r2, r1, #2
 80159be:	f080 0020 	eor.w	r0, r0, #32
 80159c2:	4421      	add	r1, r4
 80159c4:	fa54 f585 	uxtab	r5, r4, r5
 80159c8:	b2d2      	uxtb	r2, r2
 80159ca:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80159ce:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80159d2:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80159d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d194      	bne.n	8015908 <uxr_write_framed_msg+0x7c>
 80159de:	4619      	mov	r1, r3
 80159e0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80159e4:	e019      	b.n	8015a1a <uxr_write_framed_msg+0x18e>
 80159e6:	2500      	movs	r5, #0
 80159e8:	e000      	b.n	80159ec <uxr_write_framed_msg+0x160>
 80159ea:	b160      	cbz	r0, 8015a06 <uxr_write_framed_msg+0x17a>
 80159ec:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80159f0:	1b52      	subs	r2, r2, r5
 80159f2:	4653      	mov	r3, sl
 80159f4:	4638      	mov	r0, r7
 80159f6:	4421      	add	r1, r4
 80159f8:	47b0      	blx	r6
 80159fa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80159fe:	4405      	add	r5, r0
 8015a00:	4295      	cmp	r5, r2
 8015a02:	d3f2      	bcc.n	80159ea <uxr_write_framed_msg+0x15e>
 8015a04:	d066      	beq.n	8015ad4 <uxr_write_framed_msg+0x248>
 8015a06:	2000      	movs	r0, #0
 8015a08:	b003      	add	sp, #12
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	fa5f f188 	uxtb.w	r1, r8
 8015a12:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a16:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015a1a:	f04f 0900 	mov.w	r9, #0
 8015a1e:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8015a22:	46c8      	mov	r8, r9
 8015a24:	e013      	b.n	8015a4e <uxr_write_framed_msg+0x1c2>
 8015a26:	2a29      	cmp	r2, #41	@ 0x29
 8015a28:	d824      	bhi.n	8015a74 <uxr_write_framed_msg+0x1e8>
 8015a2a:	18a3      	adds	r3, r4, r2
 8015a2c:	3201      	adds	r2, #1
 8015a2e:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8015a32:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a36:	f109 0901 	add.w	r9, r9, #1
 8015a3a:	f1b9 0f02 	cmp.w	r9, #2
 8015a3e:	d02d      	beq.n	8015a9c <uxr_write_framed_msg+0x210>
 8015a40:	f109 0308 	add.w	r3, r9, #8
 8015a44:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a48:	446b      	add	r3, sp
 8015a4a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015a4e:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d8e7      	bhi.n	8015a26 <uxr_write_framed_msg+0x19a>
 8015a56:	1c53      	adds	r3, r2, #1
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2b29      	cmp	r3, #41	@ 0x29
 8015a5c:	d80a      	bhi.n	8015a74 <uxr_write_framed_msg+0x1e8>
 8015a5e:	18a3      	adds	r3, r4, r2
 8015a60:	f081 0120 	eor.w	r1, r1, #32
 8015a64:	3202      	adds	r2, #2
 8015a66:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015a6a:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8015a6e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a72:	e7e0      	b.n	8015a36 <uxr_write_framed_msg+0x1aa>
 8015a74:	2500      	movs	r5, #0
 8015a76:	e001      	b.n	8015a7c <uxr_write_framed_msg+0x1f0>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d0c4      	beq.n	8015a06 <uxr_write_framed_msg+0x17a>
 8015a7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015a80:	1b52      	subs	r2, r2, r5
 8015a82:	4653      	mov	r3, sl
 8015a84:	4638      	mov	r0, r7
 8015a86:	4421      	add	r1, r4
 8015a88:	47b0      	blx	r6
 8015a8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a8e:	4405      	add	r5, r0
 8015a90:	4295      	cmp	r5, r2
 8015a92:	d3f1      	bcc.n	8015a78 <uxr_write_framed_msg+0x1ec>
 8015a94:	d1b7      	bne.n	8015a06 <uxr_write_framed_msg+0x17a>
 8015a96:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8015a9a:	e7d1      	b.n	8015a40 <uxr_write_framed_msg+0x1b4>
 8015a9c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015aa0:	b19a      	cbz	r2, 8015aca <uxr_write_framed_msg+0x23e>
 8015aa2:	2500      	movs	r5, #0
 8015aa4:	e001      	b.n	8015aaa <uxr_write_framed_msg+0x21e>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d0ad      	beq.n	8015a06 <uxr_write_framed_msg+0x17a>
 8015aaa:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015aae:	1b52      	subs	r2, r2, r5
 8015ab0:	4653      	mov	r3, sl
 8015ab2:	4638      	mov	r0, r7
 8015ab4:	4421      	add	r1, r4
 8015ab6:	47b0      	blx	r6
 8015ab8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015abc:	4405      	add	r5, r0
 8015abe:	4295      	cmp	r5, r2
 8015ac0:	d3f1      	bcc.n	8015aa6 <uxr_write_framed_msg+0x21a>
 8015ac2:	d1a0      	bne.n	8015a06 <uxr_write_framed_msg+0x17a>
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015aca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015acc:	b298      	uxth	r0, r3
 8015ace:	b003      	add	sp, #12
 8015ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad4:	f04f 0300 	mov.w	r3, #0
 8015ad8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015adc:	e72a      	b.n	8015934 <uxr_write_framed_msg+0xa8>
 8015ade:	217d      	movs	r1, #125	@ 0x7d
 8015ae0:	f082 0220 	eor.w	r2, r2, #32
 8015ae4:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015ae8:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015aec:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015af0:	2203      	movs	r2, #3
 8015af2:	2901      	cmp	r1, #1
 8015af4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015af8:	d803      	bhi.n	8015b02 <uxr_write_framed_msg+0x276>
 8015afa:	2105      	movs	r1, #5
 8015afc:	f04f 0c04 	mov.w	ip, #4
 8015b00:	e737      	b.n	8015972 <uxr_write_framed_msg+0xe6>
 8015b02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b04:	2104      	movs	r1, #4
 8015b06:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015b0a:	b2dd      	uxtb	r5, r3
 8015b0c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015b10:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015b14:	2a01      	cmp	r2, #1
 8015b16:	f63f aee1 	bhi.w	80158dc <uxr_write_framed_msg+0x50>
 8015b1a:	e73c      	b.n	8015996 <uxr_write_framed_msg+0x10a>
 8015b1c:	08018948 	.word	0x08018948

08015b20 <uxr_framing_read_transport>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	4604      	mov	r4, r0
 8015b26:	b085      	sub	sp, #20
 8015b28:	4692      	mov	sl, r2
 8015b2a:	4689      	mov	r9, r1
 8015b2c:	461d      	mov	r5, r3
 8015b2e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015b30:	f7fb fa9a 	bl	8011068 <uxr_millis>
 8015b34:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015b38:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015b3c:	4680      	mov	r8, r0
 8015b3e:	42ba      	cmp	r2, r7
 8015b40:	d05f      	beq.n	8015c02 <uxr_framing_read_transport+0xe2>
 8015b42:	d817      	bhi.n	8015b74 <uxr_framing_read_transport+0x54>
 8015b44:	3f01      	subs	r7, #1
 8015b46:	1aba      	subs	r2, r7, r2
 8015b48:	2700      	movs	r7, #0
 8015b4a:	b2d2      	uxtb	r2, r2
 8015b4c:	42b2      	cmp	r2, r6
 8015b4e:	d81a      	bhi.n	8015b86 <uxr_framing_read_transport+0x66>
 8015b50:	19d3      	adds	r3, r2, r7
 8015b52:	42b3      	cmp	r3, r6
 8015b54:	d852      	bhi.n	8015bfc <uxr_framing_read_transport+0xdc>
 8015b56:	b9d2      	cbnz	r2, 8015b8e <uxr_framing_read_transport+0x6e>
 8015b58:	2600      	movs	r6, #0
 8015b5a:	f7fb fa85 	bl	8011068 <uxr_millis>
 8015b5e:	682b      	ldr	r3, [r5, #0]
 8015b60:	eba0 0008 	sub.w	r0, r0, r8
 8015b64:	1a1b      	subs	r3, r3, r0
 8015b66:	4630      	mov	r0, r6
 8015b68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b6c:	602b      	str	r3, [r5, #0]
 8015b6e:	b005      	add	sp, #20
 8015b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b74:	2f00      	cmp	r7, #0
 8015b76:	d060      	beq.n	8015c3a <uxr_framing_read_transport+0x11a>
 8015b78:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8015b7c:	3f01      	subs	r7, #1
 8015b7e:	b2d2      	uxtb	r2, r2
 8015b80:	b2ff      	uxtb	r7, r7
 8015b82:	42b2      	cmp	r2, r6
 8015b84:	d9e4      	bls.n	8015b50 <uxr_framing_read_transport+0x30>
 8015b86:	b2f2      	uxtb	r2, r6
 8015b88:	2700      	movs	r7, #0
 8015b8a:	2a00      	cmp	r2, #0
 8015b8c:	d0e4      	beq.n	8015b58 <uxr_framing_read_transport+0x38>
 8015b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b90:	4650      	mov	r0, sl
 8015b92:	9203      	str	r2, [sp, #12]
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015b9a:	682b      	ldr	r3, [r5, #0]
 8015b9c:	3102      	adds	r1, #2
 8015b9e:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8015c44 <uxr_framing_read_transport+0x124>
 8015ba2:	4421      	add	r1, r4
 8015ba4:	47c8      	blx	r9
 8015ba6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015baa:	4606      	mov	r6, r0
 8015bac:	4403      	add	r3, r0
 8015bae:	0859      	lsrs	r1, r3, #1
 8015bb0:	fbab 2101 	umull	r2, r1, fp, r1
 8015bb4:	222a      	movs	r2, #42	@ 0x2a
 8015bb6:	0889      	lsrs	r1, r1, #2
 8015bb8:	fb02 3111 	mls	r1, r2, r1, r3
 8015bbc:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d0c9      	beq.n	8015b58 <uxr_framing_read_transport+0x38>
 8015bc4:	9a03      	ldr	r2, [sp, #12]
 8015bc6:	4290      	cmp	r0, r2
 8015bc8:	d1c7      	bne.n	8015b5a <uxr_framing_read_transport+0x3a>
 8015bca:	2f00      	cmp	r7, #0
 8015bcc:	d0c5      	beq.n	8015b5a <uxr_framing_read_transport+0x3a>
 8015bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bd0:	3102      	adds	r1, #2
 8015bd2:	463a      	mov	r2, r7
 8015bd4:	4650      	mov	r0, sl
 8015bd6:	4421      	add	r1, r4
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	2300      	movs	r3, #0
 8015bdc:	47c8      	blx	r9
 8015bde:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015be2:	4406      	add	r6, r0
 8015be4:	1813      	adds	r3, r2, r0
 8015be6:	085a      	lsrs	r2, r3, #1
 8015be8:	fbab 1b02 	umull	r1, fp, fp, r2
 8015bec:	222a      	movs	r2, #42	@ 0x2a
 8015bee:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015bf2:	fb02 331b 	mls	r3, r2, fp, r3
 8015bf6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015bfa:	e7ae      	b.n	8015b5a <uxr_framing_read_transport+0x3a>
 8015bfc:	1ab6      	subs	r6, r6, r2
 8015bfe:	b2f7      	uxtb	r7, r6
 8015c00:	e7a9      	b.n	8015b56 <uxr_framing_read_transport+0x36>
 8015c02:	2300      	movs	r3, #0
 8015c04:	2e28      	cmp	r6, #40	@ 0x28
 8015c06:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015c08:	d9bd      	bls.n	8015b86 <uxr_framing_read_transport+0x66>
 8015c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c0c:	2229      	movs	r2, #41	@ 0x29
 8015c0e:	1ca1      	adds	r1, r4, #2
 8015c10:	4650      	mov	r0, sl
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	682b      	ldr	r3, [r5, #0]
 8015c16:	47c8      	blx	r9
 8015c18:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015c1c:	4606      	mov	r6, r0
 8015c1e:	212a      	movs	r1, #42	@ 0x2a
 8015c20:	4403      	add	r3, r0
 8015c22:	4808      	ldr	r0, [pc, #32]	@ (8015c44 <uxr_framing_read_transport+0x124>)
 8015c24:	085a      	lsrs	r2, r3, #1
 8015c26:	fba0 0202 	umull	r0, r2, r0, r2
 8015c2a:	0892      	lsrs	r2, r2, #2
 8015c2c:	fb01 3312 	mls	r3, r1, r2, r3
 8015c30:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015c34:	2e00      	cmp	r6, #0
 8015c36:	d08f      	beq.n	8015b58 <uxr_framing_read_transport+0x38>
 8015c38:	e78f      	b.n	8015b5a <uxr_framing_read_transport+0x3a>
 8015c3a:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8015c3e:	b2d2      	uxtb	r2, r2
 8015c40:	e784      	b.n	8015b4c <uxr_framing_read_transport+0x2c>
 8015c42:	bf00      	nop
 8015c44:	30c30c31 	.word	0x30c30c31

08015c48 <uxr_read_framed_msg>:
 8015c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4c:	461e      	mov	r6, r3
 8015c4e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015c52:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015c56:	b083      	sub	sp, #12
 8015c58:	4604      	mov	r4, r0
 8015c5a:	4688      	mov	r8, r1
 8015c5c:	429d      	cmp	r5, r3
 8015c5e:	4691      	mov	r9, r2
 8015c60:	f000 818c 	beq.w	8015f7c <uxr_read_framed_msg+0x334>
 8015c64:	7823      	ldrb	r3, [r4, #0]
 8015c66:	4dc3      	ldr	r5, [pc, #780]	@ (8015f74 <uxr_read_framed_msg+0x32c>)
 8015c68:	4fc3      	ldr	r7, [pc, #780]	@ (8015f78 <uxr_read_framed_msg+0x330>)
 8015c6a:	2b07      	cmp	r3, #7
 8015c6c:	d8fd      	bhi.n	8015c6a <uxr_read_framed_msg+0x22>
 8015c6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015c72:	011c      	.short	0x011c
 8015c74:	00d900fb 	.word	0x00d900fb
 8015c78:	008f00ba 	.word	0x008f00ba
 8015c7c:	00320051 	.word	0x00320051
 8015c80:	0008      	.short	0x0008
 8015c82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015c86:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015c8a:	4299      	cmp	r1, r3
 8015c8c:	f000 814d 	beq.w	8015f2a <uxr_read_framed_msg+0x2e2>
 8015c90:	18e2      	adds	r2, r4, r3
 8015c92:	7892      	ldrb	r2, [r2, #2]
 8015c94:	2a7d      	cmp	r2, #125	@ 0x7d
 8015c96:	f000 81b8 	beq.w	801600a <uxr_read_framed_msg+0x3c2>
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	212a      	movs	r1, #42	@ 0x2a
 8015c9e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015ca0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015ca4:	fba5 c000 	umull	ip, r0, r5, r0
 8015ca8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015cac:	fb01 3310 	mls	r3, r1, r0, r3
 8015cb0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015cb4:	f000 8257 	beq.w	8016166 <uxr_read_framed_msg+0x51e>
 8015cb8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015cba:	2000      	movs	r0, #0
 8015cbc:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015cbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015cc2:	7020      	strb	r0, [r4, #0]
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	4299      	cmp	r1, r3
 8015cc8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015cca:	f000 8178 	beq.w	8015fbe <uxr_read_framed_msg+0x376>
 8015cce:	2000      	movs	r0, #0
 8015cd0:	b003      	add	sp, #12
 8015cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015cda:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015cde:	4298      	cmp	r0, r3
 8015ce0:	f000 8132 	beq.w	8015f48 <uxr_read_framed_msg+0x300>
 8015ce4:	18e2      	adds	r2, r4, r3
 8015ce6:	7891      	ldrb	r1, [r2, #2]
 8015ce8:	297d      	cmp	r1, #125	@ 0x7d
 8015cea:	f000 8170 	beq.w	8015fce <uxr_read_framed_msg+0x386>
 8015cee:	3301      	adds	r3, #1
 8015cf0:	202a      	movs	r0, #42	@ 0x2a
 8015cf2:	297e      	cmp	r1, #126	@ 0x7e
 8015cf4:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015cf8:	fba5 c202 	umull	ip, r2, r5, r2
 8015cfc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d00:	fb00 3312 	mls	r3, r0, r2, r3
 8015d04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015d08:	f000 821d 	beq.w	8016146 <uxr_read_framed_msg+0x4fe>
 8015d0c:	2307      	movs	r3, #7
 8015d0e:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8015d10:	7023      	strb	r3, [r4, #0]
 8015d12:	e7aa      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015d14:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015d16:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015d1a:	459e      	cmp	lr, r3
 8015d1c:	d827      	bhi.n	8015d6e <uxr_read_framed_msg+0x126>
 8015d1e:	e032      	b.n	8015d86 <uxr_read_framed_msg+0x13e>
 8015d20:	fba5 b101 	umull	fp, r1, r5, r1
 8015d24:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015d28:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015d2c:	0889      	lsrs	r1, r1, #2
 8015d2e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015d32:	fb0b 0111 	mls	r1, fp, r1, r0
 8015d36:	f000 80d4 	beq.w	8015ee2 <uxr_read_framed_msg+0x29a>
 8015d3a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015d3e:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8015d42:	f000 80cb 	beq.w	8015edc <uxr_read_framed_msg+0x294>
 8015d46:	f806 c003 	strb.w	ip, [r6, r3]
 8015d4a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015d4c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015d4e:	ea80 010c 	eor.w	r1, r0, ip
 8015d52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015d56:	3301      	adds	r3, #1
 8015d58:	b2c9      	uxtb	r1, r1
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015d60:	4573      	cmp	r3, lr
 8015d62:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015d64:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015d68:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015d6a:	f080 811d 	bcs.w	8015fa8 <uxr_read_framed_msg+0x360>
 8015d6e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015d72:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015d76:	1c50      	adds	r0, r2, #1
 8015d78:	eb04 0c02 	add.w	ip, r4, r2
 8015d7c:	4592      	cmp	sl, r2
 8015d7e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015d82:	d1cd      	bne.n	8015d20 <uxr_read_framed_msg+0xd8>
 8015d84:	459e      	cmp	lr, r3
 8015d86:	f040 8114 	bne.w	8015fb2 <uxr_read_framed_msg+0x36a>
 8015d8a:	2306      	movs	r3, #6
 8015d8c:	7023      	strb	r3, [r4, #0]
 8015d8e:	e76c      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015d90:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015d94:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015d98:	4298      	cmp	r0, r3
 8015d9a:	f000 80c6 	beq.w	8015f2a <uxr_read_framed_msg+0x2e2>
 8015d9e:	18e2      	adds	r2, r4, r3
 8015da0:	7891      	ldrb	r1, [r2, #2]
 8015da2:	297d      	cmp	r1, #125	@ 0x7d
 8015da4:	f000 8193 	beq.w	80160ce <uxr_read_framed_msg+0x486>
 8015da8:	3301      	adds	r3, #1
 8015daa:	202a      	movs	r0, #42	@ 0x2a
 8015dac:	297e      	cmp	r1, #126	@ 0x7e
 8015dae:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015db2:	fba5 c202 	umull	ip, r2, r5, r2
 8015db6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015dba:	fb00 3312 	mls	r3, r0, r2, r3
 8015dbe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015dc2:	f000 81d0 	beq.w	8016166 <uxr_read_framed_msg+0x51e>
 8015dc6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015dc8:	2000      	movs	r0, #0
 8015dca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015dce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015dd0:	8660      	strh	r0, [r4, #50]	@ 0x32
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015dd6:	428b      	cmp	r3, r1
 8015dd8:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015dda:	f240 80e2 	bls.w	8015fa2 <uxr_read_framed_msg+0x35a>
 8015dde:	7020      	strb	r0, [r4, #0]
 8015de0:	b003      	add	sp, #12
 8015de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015dea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015dee:	4298      	cmp	r0, r3
 8015df0:	f000 80aa 	beq.w	8015f48 <uxr_read_framed_msg+0x300>
 8015df4:	18e2      	adds	r2, r4, r3
 8015df6:	7891      	ldrb	r1, [r2, #2]
 8015df8:	297d      	cmp	r1, #125	@ 0x7d
 8015dfa:	f000 8186 	beq.w	801610a <uxr_read_framed_msg+0x4c2>
 8015dfe:	3301      	adds	r3, #1
 8015e00:	202a      	movs	r0, #42	@ 0x2a
 8015e02:	297e      	cmp	r1, #126	@ 0x7e
 8015e04:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015e08:	fba5 c202 	umull	ip, r2, r5, r2
 8015e0c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015e10:	fb00 3312 	mls	r3, r0, r2, r3
 8015e14:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015e18:	f000 8195 	beq.w	8016146 <uxr_read_framed_msg+0x4fe>
 8015e1c:	2304      	movs	r3, #4
 8015e1e:	8621      	strh	r1, [r4, #48]	@ 0x30
 8015e20:	7023      	strb	r3, [r4, #0]
 8015e22:	e722      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015e24:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015e28:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015e2c:	4290      	cmp	r0, r2
 8015e2e:	f000 80b4 	beq.w	8015f9a <uxr_read_framed_msg+0x352>
 8015e32:	18a3      	adds	r3, r4, r2
 8015e34:	7899      	ldrb	r1, [r3, #2]
 8015e36:	297d      	cmp	r1, #125	@ 0x7d
 8015e38:	f000 8107 	beq.w	801604a <uxr_read_framed_msg+0x402>
 8015e3c:	3201      	adds	r2, #1
 8015e3e:	232a      	movs	r3, #42	@ 0x2a
 8015e40:	297e      	cmp	r1, #126	@ 0x7e
 8015e42:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015e46:	fba5 c000 	umull	ip, r0, r5, r0
 8015e4a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015e4e:	fb03 2210 	mls	r2, r3, r0, r2
 8015e52:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015e56:	f000 818a 	beq.w	801616e <uxr_read_framed_msg+0x526>
 8015e5a:	7863      	ldrb	r3, [r4, #1]
 8015e5c:	428b      	cmp	r3, r1
 8015e5e:	bf0c      	ite	eq
 8015e60:	2303      	moveq	r3, #3
 8015e62:	2300      	movne	r3, #0
 8015e64:	7023      	strb	r3, [r4, #0]
 8015e66:	e700      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e6e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8015e72:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015e76:	4299      	cmp	r1, r3
 8015e78:	d06a      	beq.n	8015f50 <uxr_read_framed_msg+0x308>
 8015e7a:	18e2      	adds	r2, r4, r3
 8015e7c:	7890      	ldrb	r0, [r2, #2]
 8015e7e:	287d      	cmp	r0, #125	@ 0x7d
 8015e80:	f000 8100 	beq.w	8016084 <uxr_read_framed_msg+0x43c>
 8015e84:	3301      	adds	r3, #1
 8015e86:	212a      	movs	r1, #42	@ 0x2a
 8015e88:	287e      	cmp	r0, #126	@ 0x7e
 8015e8a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015e8e:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015e92:	fba5 c202 	umull	ip, r2, r5, r2
 8015e96:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015e9a:	fb01 3312 	mls	r3, r1, r2, r3
 8015e9e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ea2:	d055      	beq.n	8015f50 <uxr_read_framed_msg+0x308>
 8015ea4:	2302      	movs	r3, #2
 8015ea6:	7023      	strb	r3, [r4, #0]
 8015ea8:	e6df      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015eaa:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8015eae:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8015eb2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015eb6:	1c5a      	adds	r2, r3, #1
 8015eb8:	459c      	cmp	ip, r3
 8015eba:	eb04 0103 	add.w	r1, r4, r3
 8015ebe:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015ec2:	f43f af04 	beq.w	8015cce <uxr_read_framed_msg+0x86>
 8015ec6:	fba5 0303 	umull	r0, r3, r5, r3
 8015eca:	7889      	ldrb	r1, [r1, #2]
 8015ecc:	089b      	lsrs	r3, r3, #2
 8015ece:	297e      	cmp	r1, #126	@ 0x7e
 8015ed0:	fb0e 2313 	mls	r3, lr, r3, r2
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015eda:	d1ec      	bne.n	8015eb6 <uxr_read_framed_msg+0x26e>
 8015edc:	2301      	movs	r3, #1
 8015ede:	7023      	strb	r3, [r4, #0]
 8015ee0:	e6c3      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015ee2:	1c50      	adds	r0, r2, #1
 8015ee4:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015ee8:	3202      	adds	r2, #2
 8015eea:	0841      	lsrs	r1, r0, #1
 8015eec:	fba5 c101 	umull	ip, r1, r5, r1
 8015ef0:	0889      	lsrs	r1, r1, #2
 8015ef2:	fb0b 0111 	mls	r1, fp, r1, r0
 8015ef6:	1860      	adds	r0, r4, r1
 8015ef8:	b2c9      	uxtb	r1, r1
 8015efa:	458a      	cmp	sl, r1
 8015efc:	f43f af42 	beq.w	8015d84 <uxr_read_framed_msg+0x13c>
 8015f00:	0851      	lsrs	r1, r2, #1
 8015f02:	7880      	ldrb	r0, [r0, #2]
 8015f04:	fba5 a101 	umull	sl, r1, r5, r1
 8015f08:	287e      	cmp	r0, #126	@ 0x7e
 8015f0a:	f080 0c20 	eor.w	ip, r0, #32
 8015f0e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015f12:	fb0b 2211 	mls	r2, fp, r1, r2
 8015f16:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015f1a:	f47f af14 	bne.w	8015d46 <uxr_read_framed_msg+0xfe>
 8015f1e:	459e      	cmp	lr, r3
 8015f20:	f43f af33 	beq.w	8015d8a <uxr_read_framed_msg+0x142>
 8015f24:	2301      	movs	r3, #1
 8015f26:	7023      	strb	r3, [r4, #0]
 8015f28:	e69f      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f2c:	9300      	str	r3, [sp, #0]
 8015f2e:	2301      	movs	r3, #1
 8015f30:	9301      	str	r3, [sp, #4]
 8015f32:	464a      	mov	r2, r9
 8015f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f36:	4641      	mov	r1, r8
 8015f38:	4620      	mov	r0, r4
 8015f3a:	f7ff fdf1 	bl	8015b20 <uxr_framing_read_transport>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	f43f aec5 	beq.w	8015cce <uxr_read_framed_msg+0x86>
 8015f44:	7823      	ldrb	r3, [r4, #0]
 8015f46:	e690      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	2302      	movs	r3, #2
 8015f4e:	e7ef      	b.n	8015f30 <uxr_read_framed_msg+0x2e8>
 8015f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f52:	464a      	mov	r2, r9
 8015f54:	4641      	mov	r1, r8
 8015f56:	4620      	mov	r0, r4
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	2304      	movs	r3, #4
 8015f5c:	9301      	str	r3, [sp, #4]
 8015f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f60:	f7ff fdde 	bl	8015b20 <uxr_framing_read_transport>
 8015f64:	2800      	cmp	r0, #0
 8015f66:	d1ed      	bne.n	8015f44 <uxr_read_framed_msg+0x2fc>
 8015f68:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015f6c:	2b7e      	cmp	r3, #126	@ 0x7e
 8015f6e:	d0e9      	beq.n	8015f44 <uxr_read_framed_msg+0x2fc>
 8015f70:	e6ad      	b.n	8015cce <uxr_read_framed_msg+0x86>
 8015f72:	bf00      	nop
 8015f74:	30c30c31 	.word	0x30c30c31
 8015f78:	08018948 	.word	0x08018948
 8015f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	2305      	movs	r3, #5
 8015f82:	9301      	str	r3, [sp, #4]
 8015f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f86:	f7ff fdcb 	bl	8015b20 <uxr_framing_read_transport>
 8015f8a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015f8e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015f92:	429a      	cmp	r2, r3
 8015f94:	f43f ae9b 	beq.w	8015cce <uxr_read_framed_msg+0x86>
 8015f98:	e664      	b.n	8015c64 <uxr_read_framed_msg+0x1c>
 8015f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	2303      	movs	r3, #3
 8015fa0:	e7c6      	b.n	8015f30 <uxr_read_framed_msg+0x2e8>
 8015fa2:	2305      	movs	r3, #5
 8015fa4:	7023      	strb	r3, [r4, #0]
 8015fa6:	e660      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8015fa8:	f43f aeef 	beq.w	8015d8a <uxr_read_framed_msg+0x142>
 8015fac:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015fb0:	d094      	beq.n	8015edc <uxr_read_framed_msg+0x294>
 8015fb2:	ebae 0303 	sub.w	r3, lr, r3
 8015fb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015fb8:	3302      	adds	r3, #2
 8015fba:	9200      	str	r2, [sp, #0]
 8015fbc:	e7b8      	b.n	8015f30 <uxr_read_framed_msg+0x2e8>
 8015fbe:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015fc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015fc4:	7013      	strb	r3, [r2, #0]
 8015fc6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8015fc8:	b003      	add	sp, #12
 8015fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fce:	1c59      	adds	r1, r3, #1
 8015fd0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015fd4:	084a      	lsrs	r2, r1, #1
 8015fd6:	fba5 e202 	umull	lr, r2, r5, r2
 8015fda:	0892      	lsrs	r2, r2, #2
 8015fdc:	fb0c 1212 	mls	r2, ip, r2, r1
 8015fe0:	b2d1      	uxtb	r1, r2
 8015fe2:	4288      	cmp	r0, r1
 8015fe4:	d0b0      	beq.n	8015f48 <uxr_read_framed_msg+0x300>
 8015fe6:	3302      	adds	r3, #2
 8015fe8:	4422      	add	r2, r4
 8015fea:	7891      	ldrb	r1, [r2, #2]
 8015fec:	085a      	lsrs	r2, r3, #1
 8015fee:	fba5 0202 	umull	r0, r2, r5, r2
 8015ff2:	297e      	cmp	r1, #126	@ 0x7e
 8015ff4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015ff8:	fb0c 3312 	mls	r3, ip, r2, r3
 8015ffc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016000:	f000 80a1 	beq.w	8016146 <uxr_read_framed_msg+0x4fe>
 8016004:	f081 0120 	eor.w	r1, r1, #32
 8016008:	e680      	b.n	8015d0c <uxr_read_framed_msg+0xc4>
 801600a:	f103 0c01 	add.w	ip, r3, #1
 801600e:	202a      	movs	r0, #42	@ 0x2a
 8016010:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016014:	fba5 e202 	umull	lr, r2, r5, r2
 8016018:	0892      	lsrs	r2, r2, #2
 801601a:	fb00 c212 	mls	r2, r0, r2, ip
 801601e:	fa5f fc82 	uxtb.w	ip, r2
 8016022:	4561      	cmp	r1, ip
 8016024:	d081      	beq.n	8015f2a <uxr_read_framed_msg+0x2e2>
 8016026:	3302      	adds	r3, #2
 8016028:	4422      	add	r2, r4
 801602a:	0859      	lsrs	r1, r3, #1
 801602c:	7892      	ldrb	r2, [r2, #2]
 801602e:	fba5 c101 	umull	ip, r1, r5, r1
 8016032:	2a7e      	cmp	r2, #126	@ 0x7e
 8016034:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016038:	fb00 3311 	mls	r3, r0, r1, r3
 801603c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016040:	f000 8091 	beq.w	8016166 <uxr_read_framed_msg+0x51e>
 8016044:	f082 0220 	eor.w	r2, r2, #32
 8016048:	e636      	b.n	8015cb8 <uxr_read_framed_msg+0x70>
 801604a:	1c51      	adds	r1, r2, #1
 801604c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016050:	084b      	lsrs	r3, r1, #1
 8016052:	fba5 e303 	umull	lr, r3, r5, r3
 8016056:	089b      	lsrs	r3, r3, #2
 8016058:	fb0c 1313 	mls	r3, ip, r3, r1
 801605c:	b2d9      	uxtb	r1, r3
 801605e:	4288      	cmp	r0, r1
 8016060:	d09b      	beq.n	8015f9a <uxr_read_framed_msg+0x352>
 8016062:	3202      	adds	r2, #2
 8016064:	4423      	add	r3, r4
 8016066:	0850      	lsrs	r0, r2, #1
 8016068:	789b      	ldrb	r3, [r3, #2]
 801606a:	fba5 1000 	umull	r1, r0, r5, r0
 801606e:	2b7e      	cmp	r3, #126	@ 0x7e
 8016070:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016074:	fb0c 2210 	mls	r2, ip, r0, r2
 8016078:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801607c:	d077      	beq.n	801616e <uxr_read_framed_msg+0x526>
 801607e:	f083 0120 	eor.w	r1, r3, #32
 8016082:	e6ea      	b.n	8015e5a <uxr_read_framed_msg+0x212>
 8016084:	f103 0c01 	add.w	ip, r3, #1
 8016088:	202a      	movs	r0, #42	@ 0x2a
 801608a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801608e:	fba5 e202 	umull	lr, r2, r5, r2
 8016092:	0892      	lsrs	r2, r2, #2
 8016094:	fb00 c212 	mls	r2, r0, r2, ip
 8016098:	fa5f fc82 	uxtb.w	ip, r2
 801609c:	4561      	cmp	r1, ip
 801609e:	f43f af57 	beq.w	8015f50 <uxr_read_framed_msg+0x308>
 80160a2:	3302      	adds	r3, #2
 80160a4:	4422      	add	r2, r4
 80160a6:	7891      	ldrb	r1, [r2, #2]
 80160a8:	085a      	lsrs	r2, r3, #1
 80160aa:	fba5 c202 	umull	ip, r2, r5, r2
 80160ae:	297e      	cmp	r1, #126	@ 0x7e
 80160b0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80160b4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80160b8:	fb00 3312 	mls	r3, r0, r2, r3
 80160bc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80160c0:	f43f af46 	beq.w	8015f50 <uxr_read_framed_msg+0x308>
 80160c4:	f081 0120 	eor.w	r1, r1, #32
 80160c8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80160cc:	e6ea      	b.n	8015ea4 <uxr_read_framed_msg+0x25c>
 80160ce:	1c59      	adds	r1, r3, #1
 80160d0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80160d4:	084a      	lsrs	r2, r1, #1
 80160d6:	fba5 e202 	umull	lr, r2, r5, r2
 80160da:	0892      	lsrs	r2, r2, #2
 80160dc:	fb0c 1212 	mls	r2, ip, r2, r1
 80160e0:	b2d1      	uxtb	r1, r2
 80160e2:	4288      	cmp	r0, r1
 80160e4:	f43f af21 	beq.w	8015f2a <uxr_read_framed_msg+0x2e2>
 80160e8:	3302      	adds	r3, #2
 80160ea:	4422      	add	r2, r4
 80160ec:	7891      	ldrb	r1, [r2, #2]
 80160ee:	085a      	lsrs	r2, r3, #1
 80160f0:	fba5 0202 	umull	r0, r2, r5, r2
 80160f4:	297e      	cmp	r1, #126	@ 0x7e
 80160f6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80160fa:	fb0c 3312 	mls	r3, ip, r2, r3
 80160fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016102:	d030      	beq.n	8016166 <uxr_read_framed_msg+0x51e>
 8016104:	f081 0120 	eor.w	r1, r1, #32
 8016108:	e65d      	b.n	8015dc6 <uxr_read_framed_msg+0x17e>
 801610a:	1c59      	adds	r1, r3, #1
 801610c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016110:	084a      	lsrs	r2, r1, #1
 8016112:	fba5 e202 	umull	lr, r2, r5, r2
 8016116:	0892      	lsrs	r2, r2, #2
 8016118:	fb0c 1212 	mls	r2, ip, r2, r1
 801611c:	b2d1      	uxtb	r1, r2
 801611e:	4288      	cmp	r0, r1
 8016120:	f43f af12 	beq.w	8015f48 <uxr_read_framed_msg+0x300>
 8016124:	3302      	adds	r3, #2
 8016126:	4422      	add	r2, r4
 8016128:	7891      	ldrb	r1, [r2, #2]
 801612a:	085a      	lsrs	r2, r3, #1
 801612c:	fba5 0202 	umull	r0, r2, r5, r2
 8016130:	297e      	cmp	r1, #126	@ 0x7e
 8016132:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016136:	fb0c 3312 	mls	r3, ip, r2, r3
 801613a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801613e:	d002      	beq.n	8016146 <uxr_read_framed_msg+0x4fe>
 8016140:	f081 0120 	eor.w	r1, r1, #32
 8016144:	e66a      	b.n	8015e1c <uxr_read_framed_msg+0x1d4>
 8016146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	2302      	movs	r3, #2
 801614c:	9301      	str	r3, [sp, #4]
 801614e:	464a      	mov	r2, r9
 8016150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016152:	4641      	mov	r1, r8
 8016154:	4620      	mov	r0, r4
 8016156:	f7ff fce3 	bl	8015b20 <uxr_framing_read_transport>
 801615a:	2800      	cmp	r0, #0
 801615c:	f47f aef2 	bne.w	8015f44 <uxr_read_framed_msg+0x2fc>
 8016160:	2301      	movs	r3, #1
 8016162:	7023      	strb	r3, [r4, #0]
 8016164:	e581      	b.n	8015c6a <uxr_read_framed_msg+0x22>
 8016166:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	2301      	movs	r3, #1
 801616c:	e7ee      	b.n	801614c <uxr_read_framed_msg+0x504>
 801616e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016170:	9300      	str	r3, [sp, #0]
 8016172:	2303      	movs	r3, #3
 8016174:	e7ea      	b.n	801614c <uxr_read_framed_msg+0x504>
 8016176:	bf00      	nop

08016178 <rcl_get_default_domain_id>:
 8016178:	b530      	push	{r4, r5, lr}
 801617a:	2300      	movs	r3, #0
 801617c:	b083      	sub	sp, #12
 801617e:	9300      	str	r3, [sp, #0]
 8016180:	b1d0      	cbz	r0, 80161b8 <rcl_get_default_domain_id+0x40>
 8016182:	4604      	mov	r4, r0
 8016184:	4669      	mov	r1, sp
 8016186:	4815      	ldr	r0, [pc, #84]	@ (80161dc <rcl_get_default_domain_id+0x64>)
 8016188:	f7f7 ffe0 	bl	800e14c <rcutils_get_env>
 801618c:	4602      	mov	r2, r0
 801618e:	b110      	cbz	r0, 8016196 <rcl_get_default_domain_id+0x1e>
 8016190:	2001      	movs	r0, #1
 8016192:	b003      	add	sp, #12
 8016194:	bd30      	pop	{r4, r5, pc}
 8016196:	9b00      	ldr	r3, [sp, #0]
 8016198:	b18b      	cbz	r3, 80161be <rcl_get_default_domain_id+0x46>
 801619a:	7818      	ldrb	r0, [r3, #0]
 801619c:	2800      	cmp	r0, #0
 801619e:	d0f8      	beq.n	8016192 <rcl_get_default_domain_id+0x1a>
 80161a0:	a901      	add	r1, sp, #4
 80161a2:	4618      	mov	r0, r3
 80161a4:	9201      	str	r2, [sp, #4]
 80161a6:	f000 fd71 	bl	8016c8c <strtoul>
 80161aa:	4605      	mov	r5, r0
 80161ac:	b150      	cbz	r0, 80161c4 <rcl_get_default_domain_id+0x4c>
 80161ae:	1c43      	adds	r3, r0, #1
 80161b0:	d00d      	beq.n	80161ce <rcl_get_default_domain_id+0x56>
 80161b2:	2000      	movs	r0, #0
 80161b4:	6025      	str	r5, [r4, #0]
 80161b6:	e7ec      	b.n	8016192 <rcl_get_default_domain_id+0x1a>
 80161b8:	200b      	movs	r0, #11
 80161ba:	b003      	add	sp, #12
 80161bc:	bd30      	pop	{r4, r5, pc}
 80161be:	4618      	mov	r0, r3
 80161c0:	b003      	add	sp, #12
 80161c2:	bd30      	pop	{r4, r5, pc}
 80161c4:	9b01      	ldr	r3, [sp, #4]
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d0f2      	beq.n	80161b2 <rcl_get_default_domain_id+0x3a>
 80161cc:	e7e0      	b.n	8016190 <rcl_get_default_domain_id+0x18>
 80161ce:	f001 f86d 	bl	80172ac <__errno>
 80161d2:	6803      	ldr	r3, [r0, #0]
 80161d4:	2b22      	cmp	r3, #34	@ 0x22
 80161d6:	d1ec      	bne.n	80161b2 <rcl_get_default_domain_id+0x3a>
 80161d8:	e7da      	b.n	8016190 <rcl_get_default_domain_id+0x18>
 80161da:	bf00      	nop
 80161dc:	08018b48 	.word	0x08018b48

080161e0 <rcl_expand_topic_name>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	b08d      	sub	sp, #52	@ 0x34
 80161e6:	4698      	mov	r8, r3
 80161e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80161ea:	9207      	str	r2, [sp, #28]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	bf18      	it	ne
 80161f0:	f1b8 0f00 	cmpne.w	r8, #0
 80161f4:	bf0c      	ite	eq
 80161f6:	2301      	moveq	r3, #1
 80161f8:	2300      	movne	r3, #0
 80161fa:	2a00      	cmp	r2, #0
 80161fc:	bf08      	it	eq
 80161fe:	f043 0301 	orreq.w	r3, r3, #1
 8016202:	2900      	cmp	r1, #0
 8016204:	bf08      	it	eq
 8016206:	f043 0301 	orreq.w	r3, r3, #1
 801620a:	2b00      	cmp	r3, #0
 801620c:	d13d      	bne.n	801628a <rcl_expand_topic_name+0xaa>
 801620e:	fab0 f280 	clz	r2, r0
 8016212:	4604      	mov	r4, r0
 8016214:	0952      	lsrs	r2, r2, #5
 8016216:	2800      	cmp	r0, #0
 8016218:	d037      	beq.n	801628a <rcl_expand_topic_name+0xaa>
 801621a:	460f      	mov	r7, r1
 801621c:	a90b      	add	r1, sp, #44	@ 0x2c
 801621e:	f000 f945 	bl	80164ac <rcl_validate_topic_name>
 8016222:	4605      	mov	r5, r0
 8016224:	bb68      	cbnz	r0, 8016282 <rcl_expand_topic_name+0xa2>
 8016226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016228:	2b00      	cmp	r3, #0
 801622a:	d137      	bne.n	801629c <rcl_expand_topic_name+0xbc>
 801622c:	4602      	mov	r2, r0
 801622e:	a90b      	add	r1, sp, #44	@ 0x2c
 8016230:	4638      	mov	r0, r7
 8016232:	f7f8 f9c3 	bl	800e5bc <rmw_validate_node_name>
 8016236:	bb68      	cbnz	r0, 8016294 <rcl_expand_topic_name+0xb4>
 8016238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801623a:	2b00      	cmp	r3, #0
 801623c:	d133      	bne.n	80162a6 <rcl_expand_topic_name+0xc6>
 801623e:	462a      	mov	r2, r5
 8016240:	a90b      	add	r1, sp, #44	@ 0x2c
 8016242:	9807      	ldr	r0, [sp, #28]
 8016244:	f7f8 f99c 	bl	800e580 <rmw_validate_namespace>
 8016248:	bb20      	cbnz	r0, 8016294 <rcl_expand_topic_name+0xb4>
 801624a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801624c:	2d00      	cmp	r5, #0
 801624e:	f040 80a2 	bne.w	8016396 <rcl_expand_topic_name+0x1b6>
 8016252:	217b      	movs	r1, #123	@ 0x7b
 8016254:	4620      	mov	r0, r4
 8016256:	f000 ff9d 	bl	8017194 <strchr>
 801625a:	7823      	ldrb	r3, [r4, #0]
 801625c:	4681      	mov	r9, r0
 801625e:	bb20      	cbnz	r0, 80162aa <rcl_expand_topic_name+0xca>
 8016260:	2b2f      	cmp	r3, #47	@ 0x2f
 8016262:	d122      	bne.n	80162aa <rcl_expand_topic_name+0xca>
 8016264:	ab19      	add	r3, sp, #100	@ 0x64
 8016266:	e893 0003 	ldmia.w	r3, {r0, r1}
 801626a:	ab16      	add	r3, sp, #88	@ 0x58
 801626c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016270:	4620      	mov	r0, r4
 8016272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016274:	f7f8 f8ee 	bl	800e454 <rcutils_strdup>
 8016278:	2800      	cmp	r0, #0
 801627a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801627c:	bf08      	it	eq
 801627e:	250a      	moveq	r5, #10
 8016280:	6018      	str	r0, [r3, #0]
 8016282:	4628      	mov	r0, r5
 8016284:	b00d      	add	sp, #52	@ 0x34
 8016286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628a:	250b      	movs	r5, #11
 801628c:	4628      	mov	r0, r5
 801628e:	b00d      	add	sp, #52	@ 0x34
 8016290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016294:	f7fc f81a 	bl	80122cc <rcl_convert_rmw_ret_to_rcl_ret>
 8016298:	4605      	mov	r5, r0
 801629a:	e7f2      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 801629c:	2567      	movs	r5, #103	@ 0x67
 801629e:	4628      	mov	r0, r5
 80162a0:	b00d      	add	sp, #52	@ 0x34
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	25c9      	movs	r5, #201	@ 0xc9
 80162a8:	e7eb      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 80162aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80162ac:	d075      	beq.n	801639a <rcl_expand_topic_name+0x1ba>
 80162ae:	f1b9 0f00 	cmp.w	r9, #0
 80162b2:	f000 80c2 	beq.w	801643a <rcl_expand_topic_name+0x25a>
 80162b6:	2300      	movs	r3, #0
 80162b8:	46a2      	mov	sl, r4
 80162ba:	461e      	mov	r6, r3
 80162bc:	9508      	str	r5, [sp, #32]
 80162be:	4655      	mov	r5, sl
 80162c0:	9409      	str	r4, [sp, #36]	@ 0x24
 80162c2:	46b2      	mov	sl, r6
 80162c4:	464c      	mov	r4, r9
 80162c6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80162ca:	2c00      	cmp	r4, #0
 80162cc:	f000 80ae 	beq.w	801642c <rcl_expand_topic_name+0x24c>
 80162d0:	217d      	movs	r1, #125	@ 0x7d
 80162d2:	4628      	mov	r0, r5
 80162d4:	f000 ff5e 	bl	8017194 <strchr>
 80162d8:	eba0 0904 	sub.w	r9, r0, r4
 80162dc:	4621      	mov	r1, r4
 80162de:	4869      	ldr	r0, [pc, #420]	@ (8016484 <rcl_expand_topic_name+0x2a4>)
 80162e0:	f109 0601 	add.w	r6, r9, #1
 80162e4:	4632      	mov	r2, r6
 80162e6:	f000 ff62 	bl	80171ae <strncmp>
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d051      	beq.n	8016392 <rcl_expand_topic_name+0x1b2>
 80162ee:	4632      	mov	r2, r6
 80162f0:	4621      	mov	r1, r4
 80162f2:	4865      	ldr	r0, [pc, #404]	@ (8016488 <rcl_expand_topic_name+0x2a8>)
 80162f4:	f000 ff5b 	bl	80171ae <strncmp>
 80162f8:	b128      	cbz	r0, 8016306 <rcl_expand_topic_name+0x126>
 80162fa:	4632      	mov	r2, r6
 80162fc:	4621      	mov	r1, r4
 80162fe:	4863      	ldr	r0, [pc, #396]	@ (801648c <rcl_expand_topic_name+0x2ac>)
 8016300:	f000 ff55 	bl	80171ae <strncmp>
 8016304:	bb38      	cbnz	r0, 8016356 <rcl_expand_topic_name+0x176>
 8016306:	46d9      	mov	r9, fp
 8016308:	ab18      	add	r3, sp, #96	@ 0x60
 801630a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801630e:	ab16      	add	r3, sp, #88	@ 0x58
 8016310:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016314:	4620      	mov	r0, r4
 8016316:	4631      	mov	r1, r6
 8016318:	cb0c      	ldmia	r3, {r2, r3}
 801631a:	f7f8 f8bd 	bl	800e498 <rcutils_strndup>
 801631e:	4604      	mov	r4, r0
 8016320:	2800      	cmp	r0, #0
 8016322:	f000 80a3 	beq.w	801646c <rcl_expand_topic_name+0x28c>
 8016326:	464a      	mov	r2, r9
 8016328:	4628      	mov	r0, r5
 801632a:	ab16      	add	r3, sp, #88	@ 0x58
 801632c:	4621      	mov	r1, r4
 801632e:	f7f7 ff91 	bl	800e254 <rcutils_repl_str>
 8016332:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016334:	4605      	mov	r5, r0
 8016336:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016338:	4620      	mov	r0, r4
 801633a:	4798      	blx	r3
 801633c:	4650      	mov	r0, sl
 801633e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016342:	4798      	blx	r3
 8016344:	2d00      	cmp	r5, #0
 8016346:	d06c      	beq.n	8016422 <rcl_expand_topic_name+0x242>
 8016348:	217b      	movs	r1, #123	@ 0x7b
 801634a:	4628      	mov	r0, r5
 801634c:	f000 ff22 	bl	8017194 <strchr>
 8016350:	46aa      	mov	sl, r5
 8016352:	4604      	mov	r4, r0
 8016354:	e7b9      	b.n	80162ca <rcl_expand_topic_name+0xea>
 8016356:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801635a:	1c61      	adds	r1, r4, #1
 801635c:	4640      	mov	r0, r8
 801635e:	f7fc ff2f 	bl	80131c0 <rcutils_string_map_getn>
 8016362:	4681      	mov	r9, r0
 8016364:	2800      	cmp	r0, #0
 8016366:	d1cf      	bne.n	8016308 <rcl_expand_topic_name+0x128>
 8016368:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801636a:	aa18      	add	r2, sp, #96	@ 0x60
 801636c:	2569      	movs	r5, #105	@ 0x69
 801636e:	6018      	str	r0, [r3, #0]
 8016370:	ab16      	add	r3, sp, #88	@ 0x58
 8016372:	ca07      	ldmia	r2, {r0, r1, r2}
 8016374:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016378:	4631      	mov	r1, r6
 801637a:	4620      	mov	r0, r4
 801637c:	cb0c      	ldmia	r3, {r2, r3}
 801637e:	f7f8 f88b 	bl	800e498 <rcutils_strndup>
 8016382:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016384:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016386:	4798      	blx	r3
 8016388:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801638a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801638c:	4650      	mov	r0, sl
 801638e:	4798      	blx	r3
 8016390:	e777      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 8016392:	46b9      	mov	r9, r7
 8016394:	e7b8      	b.n	8016308 <rcl_expand_topic_name+0x128>
 8016396:	25ca      	movs	r5, #202	@ 0xca
 8016398:	e773      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 801639a:	9e07      	ldr	r6, [sp, #28]
 801639c:	4630      	mov	r0, r6
 801639e:	f7e9 ff59 	bl	8000254 <strlen>
 80163a2:	4a3b      	ldr	r2, [pc, #236]	@ (8016490 <rcl_expand_topic_name+0x2b0>)
 80163a4:	4b3b      	ldr	r3, [pc, #236]	@ (8016494 <rcl_expand_topic_name+0x2b4>)
 80163a6:	9603      	str	r6, [sp, #12]
 80163a8:	2801      	cmp	r0, #1
 80163aa:	bf18      	it	ne
 80163ac:	4613      	movne	r3, r2
 80163ae:	9704      	str	r7, [sp, #16]
 80163b0:	9302      	str	r3, [sp, #8]
 80163b2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	1c63      	adds	r3, r4, #1
 80163b8:	9305      	str	r3, [sp, #20]
 80163ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163be:	9301      	str	r3, [sp, #4]
 80163c0:	ab16      	add	r3, sp, #88	@ 0x58
 80163c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80163c4:	f7f7 ff0c 	bl	800e1e0 <rcutils_format_string_limit>
 80163c8:	4606      	mov	r6, r0
 80163ca:	b350      	cbz	r0, 8016422 <rcl_expand_topic_name+0x242>
 80163cc:	f1b9 0f00 	cmp.w	r9, #0
 80163d0:	d005      	beq.n	80163de <rcl_expand_topic_name+0x1fe>
 80163d2:	217b      	movs	r1, #123	@ 0x7b
 80163d4:	46b2      	mov	sl, r6
 80163d6:	f000 fedd 	bl	8017194 <strchr>
 80163da:	4681      	mov	r9, r0
 80163dc:	e76e      	b.n	80162bc <rcl_expand_topic_name+0xdc>
 80163de:	7833      	ldrb	r3, [r6, #0]
 80163e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80163e2:	d01b      	beq.n	801641c <rcl_expand_topic_name+0x23c>
 80163e4:	9c07      	ldr	r4, [sp, #28]
 80163e6:	4620      	mov	r0, r4
 80163e8:	f7e9 ff34 	bl	8000254 <strlen>
 80163ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163f0:	4a29      	ldr	r2, [pc, #164]	@ (8016498 <rcl_expand_topic_name+0x2b8>)
 80163f2:	9301      	str	r3, [sp, #4]
 80163f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80163f6:	9604      	str	r6, [sp, #16]
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	4b28      	ldr	r3, [pc, #160]	@ (801649c <rcl_expand_topic_name+0x2bc>)
 80163fc:	9403      	str	r4, [sp, #12]
 80163fe:	2801      	cmp	r0, #1
 8016400:	bf18      	it	ne
 8016402:	4613      	movne	r3, r2
 8016404:	9302      	str	r3, [sp, #8]
 8016406:	ab16      	add	r3, sp, #88	@ 0x58
 8016408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801640a:	f7f7 fee9 	bl	800e1e0 <rcutils_format_string_limit>
 801640e:	4603      	mov	r3, r0
 8016410:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016412:	4630      	mov	r0, r6
 8016414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016416:	461e      	mov	r6, r3
 8016418:	4790      	blx	r2
 801641a:	b116      	cbz	r6, 8016422 <rcl_expand_topic_name+0x242>
 801641c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801641e:	601e      	str	r6, [r3, #0]
 8016420:	e72f      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 8016422:	2300      	movs	r3, #0
 8016424:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016426:	250a      	movs	r5, #10
 8016428:	6013      	str	r3, [r2, #0]
 801642a:	e72a      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 801642c:	4653      	mov	r3, sl
 801642e:	4656      	mov	r6, sl
 8016430:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d1d2      	bne.n	80163de <rcl_expand_topic_name+0x1fe>
 8016438:	7823      	ldrb	r3, [r4, #0]
 801643a:	2b2f      	cmp	r3, #47	@ 0x2f
 801643c:	d01e      	beq.n	801647c <rcl_expand_topic_name+0x29c>
 801643e:	9e07      	ldr	r6, [sp, #28]
 8016440:	4630      	mov	r0, r6
 8016442:	f7e9 ff07 	bl	8000254 <strlen>
 8016446:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016448:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801644c:	9603      	str	r6, [sp, #12]
 801644e:	9404      	str	r4, [sp, #16]
 8016450:	e9cd 2300 	strd	r2, r3, [sp]
 8016454:	4a10      	ldr	r2, [pc, #64]	@ (8016498 <rcl_expand_topic_name+0x2b8>)
 8016456:	4b11      	ldr	r3, [pc, #68]	@ (801649c <rcl_expand_topic_name+0x2bc>)
 8016458:	2801      	cmp	r0, #1
 801645a:	bf18      	it	ne
 801645c:	4613      	movne	r3, r2
 801645e:	9302      	str	r3, [sp, #8]
 8016460:	ab16      	add	r3, sp, #88	@ 0x58
 8016462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016464:	f7f7 febc 	bl	800e1e0 <rcutils_format_string_limit>
 8016468:	4606      	mov	r6, r0
 801646a:	e7d6      	b.n	801641a <rcl_expand_topic_name+0x23a>
 801646c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 8016470:	4650      	mov	r0, sl
 8016472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016474:	6014      	str	r4, [r2, #0]
 8016476:	250a      	movs	r5, #10
 8016478:	4798      	blx	r3
 801647a:	e702      	b.n	8016282 <rcl_expand_topic_name+0xa2>
 801647c:	2300      	movs	r3, #0
 801647e:	461e      	mov	r6, r3
 8016480:	e7cc      	b.n	801641c <rcl_expand_topic_name+0x23c>
 8016482:	bf00      	nop
 8016484:	08018b60 	.word	0x08018b60
 8016488:	08018b68 	.word	0x08018b68
 801648c:	08018b70 	.word	0x08018b70
 8016490:	08018b58 	.word	0x08018b58
 8016494:	080185b8 	.word	0x080185b8
 8016498:	08018168 	.word	0x08018168
 801649c:	08018160 	.word	0x08018160

080164a0 <rcl_get_default_topic_name_substitutions>:
 80164a0:	2800      	cmp	r0, #0
 80164a2:	bf0c      	ite	eq
 80164a4:	200b      	moveq	r0, #11
 80164a6:	2000      	movne	r0, #0
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop

080164ac <rcl_validate_topic_name>:
 80164ac:	2800      	cmp	r0, #0
 80164ae:	f000 8089 	beq.w	80165c4 <rcl_validate_topic_name+0x118>
 80164b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b6:	460e      	mov	r6, r1
 80164b8:	2900      	cmp	r1, #0
 80164ba:	f000 8085 	beq.w	80165c8 <rcl_validate_topic_name+0x11c>
 80164be:	4604      	mov	r4, r0
 80164c0:	4617      	mov	r7, r2
 80164c2:	f7e9 fec7 	bl	8000254 <strlen>
 80164c6:	b1b0      	cbz	r0, 80164f6 <rcl_validate_topic_name+0x4a>
 80164c8:	f894 e000 	ldrb.w	lr, [r4]
 80164cc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8016630 <rcl_validate_topic_name+0x184>
 80164d0:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80164d4:	f013 0304 	ands.w	r3, r3, #4
 80164d8:	d139      	bne.n	801654e <rcl_validate_topic_name+0xa2>
 80164da:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80164de:	f814 2008 	ldrb.w	r2, [r4, r8]
 80164e2:	2a2f      	cmp	r2, #47	@ 0x2f
 80164e4:	d10f      	bne.n	8016506 <rcl_validate_topic_name+0x5a>
 80164e6:	2202      	movs	r2, #2
 80164e8:	6032      	str	r2, [r6, #0]
 80164ea:	b3a7      	cbz	r7, 8016556 <rcl_validate_topic_name+0xaa>
 80164ec:	4618      	mov	r0, r3
 80164ee:	f8c7 8000 	str.w	r8, [r7]
 80164f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f6:	2301      	movs	r3, #1
 80164f8:	6033      	str	r3, [r6, #0]
 80164fa:	b367      	cbz	r7, 8016556 <rcl_validate_topic_name+0xaa>
 80164fc:	2300      	movs	r3, #0
 80164fe:	4618      	mov	r0, r3
 8016500:	603b      	str	r3, [r7, #0]
 8016502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016506:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801650a:	461d      	mov	r5, r3
 801650c:	4619      	mov	r1, r3
 801650e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016512:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8016516:	f1b9 0f09 	cmp.w	r9, #9
 801651a:	d91f      	bls.n	801655c <rcl_validate_topic_name+0xb0>
 801651c:	f022 0920 	bic.w	r9, r2, #32
 8016520:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8016524:	f1b9 0f19 	cmp.w	r9, #25
 8016528:	d918      	bls.n	801655c <rcl_validate_topic_name+0xb0>
 801652a:	2a5f      	cmp	r2, #95	@ 0x5f
 801652c:	d024      	beq.n	8016578 <rcl_validate_topic_name+0xcc>
 801652e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016530:	d058      	beq.n	80165e4 <rcl_validate_topic_name+0x138>
 8016532:	2a7e      	cmp	r2, #126	@ 0x7e
 8016534:	d04a      	beq.n	80165cc <rcl_validate_topic_name+0x120>
 8016536:	2a7b      	cmp	r2, #123	@ 0x7b
 8016538:	d05b      	beq.n	80165f2 <rcl_validate_topic_name+0x146>
 801653a:	2a7d      	cmp	r2, #125	@ 0x7d
 801653c:	d169      	bne.n	8016612 <rcl_validate_topic_name+0x166>
 801653e:	2d00      	cmp	r5, #0
 8016540:	d15c      	bne.n	80165fc <rcl_validate_topic_name+0x150>
 8016542:	2305      	movs	r3, #5
 8016544:	6033      	str	r3, [r6, #0]
 8016546:	b137      	cbz	r7, 8016556 <rcl_validate_topic_name+0xaa>
 8016548:	2000      	movs	r0, #0
 801654a:	6039      	str	r1, [r7, #0]
 801654c:	e7d9      	b.n	8016502 <rcl_validate_topic_name+0x56>
 801654e:	2304      	movs	r3, #4
 8016550:	6033      	str	r3, [r6, #0]
 8016552:	2f00      	cmp	r7, #0
 8016554:	d1d2      	bne.n	80164fc <rcl_validate_topic_name+0x50>
 8016556:	2000      	movs	r0, #0
 8016558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801655c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016560:	0752      	lsls	r2, r2, #29
 8016562:	d509      	bpl.n	8016578 <rcl_validate_topic_name+0xcc>
 8016564:	2900      	cmp	r1, #0
 8016566:	bf0c      	ite	eq
 8016568:	2200      	moveq	r2, #0
 801656a:	f005 0201 	andne.w	r2, r5, #1
 801656e:	b11a      	cbz	r2, 8016578 <rcl_validate_topic_name+0xcc>
 8016570:	1e4d      	subs	r5, r1, #1
 8016572:	429d      	cmp	r5, r3
 8016574:	d031      	beq.n	80165da <rcl_validate_topic_name+0x12e>
 8016576:	4615      	mov	r5, r2
 8016578:	3101      	adds	r1, #1
 801657a:	4288      	cmp	r0, r1
 801657c:	d1c7      	bne.n	801650e <rcl_validate_topic_name+0x62>
 801657e:	2d00      	cmp	r5, #0
 8016580:	d142      	bne.n	8016608 <rcl_validate_topic_name+0x15c>
 8016582:	4628      	mov	r0, r5
 8016584:	2301      	movs	r3, #1
 8016586:	e00c      	b.n	80165a2 <rcl_validate_topic_name+0xf6>
 8016588:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801658c:	d101      	bne.n	8016592 <rcl_validate_topic_name+0xe6>
 801658e:	2801      	cmp	r0, #1
 8016590:	d047      	beq.n	8016622 <rcl_validate_topic_name+0x176>
 8016592:	1c5a      	adds	r2, r3, #1
 8016594:	428b      	cmp	r3, r1
 8016596:	f100 0001 	add.w	r0, r0, #1
 801659a:	f104 0401 	add.w	r4, r4, #1
 801659e:	4613      	mov	r3, r2
 80165a0:	d22e      	bcs.n	8016600 <rcl_validate_topic_name+0x154>
 80165a2:	4580      	cmp	r8, r0
 80165a4:	d0f5      	beq.n	8016592 <rcl_validate_topic_name+0xe6>
 80165a6:	7822      	ldrb	r2, [r4, #0]
 80165a8:	2a2f      	cmp	r2, #47	@ 0x2f
 80165aa:	d1ed      	bne.n	8016588 <rcl_validate_topic_name+0xdc>
 80165ac:	7862      	ldrb	r2, [r4, #1]
 80165ae:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165b2:	0752      	lsls	r2, r2, #29
 80165b4:	d5ed      	bpl.n	8016592 <rcl_validate_topic_name+0xe6>
 80165b6:	2204      	movs	r2, #4
 80165b8:	6032      	str	r2, [r6, #0]
 80165ba:	2f00      	cmp	r7, #0
 80165bc:	d0cb      	beq.n	8016556 <rcl_validate_topic_name+0xaa>
 80165be:	2000      	movs	r0, #0
 80165c0:	603b      	str	r3, [r7, #0]
 80165c2:	e79e      	b.n	8016502 <rcl_validate_topic_name+0x56>
 80165c4:	200b      	movs	r0, #11
 80165c6:	4770      	bx	lr
 80165c8:	200b      	movs	r0, #11
 80165ca:	e79a      	b.n	8016502 <rcl_validate_topic_name+0x56>
 80165cc:	2900      	cmp	r1, #0
 80165ce:	d0d3      	beq.n	8016578 <rcl_validate_topic_name+0xcc>
 80165d0:	2306      	movs	r3, #6
 80165d2:	6033      	str	r3, [r6, #0]
 80165d4:	2f00      	cmp	r7, #0
 80165d6:	d1b7      	bne.n	8016548 <rcl_validate_topic_name+0x9c>
 80165d8:	e7bd      	b.n	8016556 <rcl_validate_topic_name+0xaa>
 80165da:	2309      	movs	r3, #9
 80165dc:	6033      	str	r3, [r6, #0]
 80165de:	2f00      	cmp	r7, #0
 80165e0:	d1b2      	bne.n	8016548 <rcl_validate_topic_name+0x9c>
 80165e2:	e7b8      	b.n	8016556 <rcl_validate_topic_name+0xaa>
 80165e4:	2d00      	cmp	r5, #0
 80165e6:	d0c7      	beq.n	8016578 <rcl_validate_topic_name+0xcc>
 80165e8:	2308      	movs	r3, #8
 80165ea:	6033      	str	r3, [r6, #0]
 80165ec:	2f00      	cmp	r7, #0
 80165ee:	d1ab      	bne.n	8016548 <rcl_validate_topic_name+0x9c>
 80165f0:	e7b1      	b.n	8016556 <rcl_validate_topic_name+0xaa>
 80165f2:	2d00      	cmp	r5, #0
 80165f4:	d1f8      	bne.n	80165e8 <rcl_validate_topic_name+0x13c>
 80165f6:	460b      	mov	r3, r1
 80165f8:	2501      	movs	r5, #1
 80165fa:	e7bd      	b.n	8016578 <rcl_validate_topic_name+0xcc>
 80165fc:	2500      	movs	r5, #0
 80165fe:	e7bb      	b.n	8016578 <rcl_validate_topic_name+0xcc>
 8016600:	2300      	movs	r3, #0
 8016602:	4618      	mov	r0, r3
 8016604:	6033      	str	r3, [r6, #0]
 8016606:	e77c      	b.n	8016502 <rcl_validate_topic_name+0x56>
 8016608:	2205      	movs	r2, #5
 801660a:	6032      	str	r2, [r6, #0]
 801660c:	2f00      	cmp	r7, #0
 801660e:	d1d6      	bne.n	80165be <rcl_validate_topic_name+0x112>
 8016610:	e7a1      	b.n	8016556 <rcl_validate_topic_name+0xaa>
 8016612:	2d00      	cmp	r5, #0
 8016614:	bf14      	ite	ne
 8016616:	2308      	movne	r3, #8
 8016618:	2303      	moveq	r3, #3
 801661a:	6033      	str	r3, [r6, #0]
 801661c:	2f00      	cmp	r7, #0
 801661e:	d193      	bne.n	8016548 <rcl_validate_topic_name+0x9c>
 8016620:	e799      	b.n	8016556 <rcl_validate_topic_name+0xaa>
 8016622:	2307      	movs	r3, #7
 8016624:	6033      	str	r3, [r6, #0]
 8016626:	2f00      	cmp	r7, #0
 8016628:	d095      	beq.n	8016556 <rcl_validate_topic_name+0xaa>
 801662a:	2301      	movs	r3, #1
 801662c:	e7c7      	b.n	80165be <rcl_validate_topic_name+0x112>
 801662e:	bf00      	nop
 8016630:	08018bec 	.word	0x08018bec

08016634 <on_status>:
 8016634:	b082      	sub	sp, #8
 8016636:	b002      	add	sp, #8
 8016638:	4770      	bx	lr
 801663a:	bf00      	nop

0801663c <on_topic>:
 801663c:	4a23      	ldr	r2, [pc, #140]	@ (80166cc <on_topic+0x90>)
 801663e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016642:	6812      	ldr	r2, [r2, #0]
 8016644:	b094      	sub	sp, #80	@ 0x50
 8016646:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016648:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801664c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801664e:	9312      	str	r3, [sp, #72]	@ 0x48
 8016650:	b3c2      	cbz	r2, 80166c4 <on_topic+0x88>
 8016652:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016656:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801665a:	e001      	b.n	8016660 <on_topic+0x24>
 801665c:	6852      	ldr	r2, [r2, #4]
 801665e:	b38a      	cbz	r2, 80166c4 <on_topic+0x88>
 8016660:	6894      	ldr	r4, [r2, #8]
 8016662:	8aa3      	ldrh	r3, [r4, #20]
 8016664:	428b      	cmp	r3, r1
 8016666:	d1f9      	bne.n	801665c <on_topic+0x20>
 8016668:	7da3      	ldrb	r3, [r4, #22]
 801666a:	4283      	cmp	r3, r0
 801666c:	d1f6      	bne.n	801665c <on_topic+0x20>
 801666e:	2248      	movs	r2, #72	@ 0x48
 8016670:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016674:	4668      	mov	r0, sp
 8016676:	f000 fe4e 	bl	8017316 <memcpy>
 801667a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801667e:	4620      	mov	r0, r4
 8016680:	cb0c      	ldmia	r3, {r2, r3}
 8016682:	f7f8 fd5f 	bl	800f144 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016686:	4607      	mov	r7, r0
 8016688:	b1e0      	cbz	r0, 80166c4 <on_topic+0x88>
 801668a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801668e:	462a      	mov	r2, r5
 8016690:	4630      	mov	r0, r6
 8016692:	f108 0110 	add.w	r1, r8, #16
 8016696:	f7fd fb5b 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 801669a:	b930      	cbnz	r0, 80166aa <on_topic+0x6e>
 801669c:	4639      	mov	r1, r7
 801669e:	480c      	ldr	r0, [pc, #48]	@ (80166d0 <on_topic+0x94>)
 80166a0:	b014      	add	sp, #80	@ 0x50
 80166a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166a6:	f7fc bebf 	b.w	8013428 <put_memory>
 80166aa:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80166ae:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80166b2:	f7fd fa31 	bl	8013b18 <rmw_uros_epoch_nanos>
 80166b6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80166ba:	2305      	movs	r3, #5
 80166bc:	e942 0102 	strd	r0, r1, [r2, #-8]
 80166c0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80166c4:	b014      	add	sp, #80	@ 0x50
 80166c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ca:	bf00      	nop
 80166cc:	200124a4 	.word	0x200124a4
 80166d0:	20012494 	.word	0x20012494

080166d4 <on_request>:
 80166d4:	4824      	ldr	r0, [pc, #144]	@ (8016768 <on_request+0x94>)
 80166d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166da:	6800      	ldr	r0, [r0, #0]
 80166dc:	b094      	sub	sp, #80	@ 0x50
 80166de:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80166e0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80166e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80166e6:	2800      	cmp	r0, #0
 80166e8:	d03b      	beq.n	8016762 <on_request+0x8e>
 80166ea:	461d      	mov	r5, r3
 80166ec:	e001      	b.n	80166f2 <on_request+0x1e>
 80166ee:	6840      	ldr	r0, [r0, #4]
 80166f0:	b3b8      	cbz	r0, 8016762 <on_request+0x8e>
 80166f2:	6884      	ldr	r4, [r0, #8]
 80166f4:	8b21      	ldrh	r1, [r4, #24]
 80166f6:	4291      	cmp	r1, r2
 80166f8:	d1f9      	bne.n	80166ee <on_request+0x1a>
 80166fa:	2248      	movs	r2, #72	@ 0x48
 80166fc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016700:	4668      	mov	r0, sp
 8016702:	f000 fe08 	bl	8017316 <memcpy>
 8016706:	f104 0320 	add.w	r3, r4, #32
 801670a:	4620      	mov	r0, r4
 801670c:	cb0c      	ldmia	r3, {r2, r3}
 801670e:	f7f8 fd19 	bl	800f144 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016712:	4680      	mov	r8, r0
 8016714:	b328      	cbz	r0, 8016762 <on_request+0x8e>
 8016716:	4630      	mov	r0, r6
 8016718:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801671c:	463a      	mov	r2, r7
 801671e:	f106 0110 	add.w	r1, r6, #16
 8016722:	f7fd fb15 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 8016726:	b930      	cbnz	r0, 8016736 <on_request+0x62>
 8016728:	4641      	mov	r1, r8
 801672a:	4810      	ldr	r0, [pc, #64]	@ (801676c <on_request+0x98>)
 801672c:	b014      	add	sp, #80	@ 0x50
 801672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016732:	f7fc be79 	b.w	8013428 <put_memory>
 8016736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016738:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801673c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8016740:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8016744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016748:	e895 0003 	ldmia.w	r5, {r0, r1}
 801674c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016750:	f7fd f9e2 	bl	8013b18 <rmw_uros_epoch_nanos>
 8016754:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8016758:	2303      	movs	r3, #3
 801675a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801675e:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8016762:	b014      	add	sp, #80	@ 0x50
 8016764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016768:	20012474 	.word	0x20012474
 801676c:	20012494 	.word	0x20012494

08016770 <on_reply>:
 8016770:	4822      	ldr	r0, [pc, #136]	@ (80167fc <on_reply+0x8c>)
 8016772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016776:	6800      	ldr	r0, [r0, #0]
 8016778:	b094      	sub	sp, #80	@ 0x50
 801677a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801677c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8016780:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016782:	b3b8      	cbz	r0, 80167f4 <on_reply+0x84>
 8016784:	461d      	mov	r5, r3
 8016786:	e001      	b.n	801678c <on_reply+0x1c>
 8016788:	6840      	ldr	r0, [r0, #4]
 801678a:	b398      	cbz	r0, 80167f4 <on_reply+0x84>
 801678c:	6884      	ldr	r4, [r0, #8]
 801678e:	8b21      	ldrh	r1, [r4, #24]
 8016790:	4291      	cmp	r1, r2
 8016792:	d1f9      	bne.n	8016788 <on_reply+0x18>
 8016794:	2248      	movs	r2, #72	@ 0x48
 8016796:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801679a:	4668      	mov	r0, sp
 801679c:	f000 fdbb 	bl	8017316 <memcpy>
 80167a0:	f104 0320 	add.w	r3, r4, #32
 80167a4:	4620      	mov	r0, r4
 80167a6:	cb0c      	ldmia	r3, {r2, r3}
 80167a8:	f7f8 fccc 	bl	800f144 <rmw_uxrce_get_static_input_buffer_for_entity>
 80167ac:	4680      	mov	r8, r0
 80167ae:	b308      	cbz	r0, 80167f4 <on_reply+0x84>
 80167b0:	4630      	mov	r0, r6
 80167b2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80167b6:	463a      	mov	r2, r7
 80167b8:	f106 0110 	add.w	r1, r6, #16
 80167bc:	f7fd fac8 	bl	8013d50 <ucdr_deserialize_array_uint8_t>
 80167c0:	b930      	cbnz	r0, 80167d0 <on_reply+0x60>
 80167c2:	4641      	mov	r1, r8
 80167c4:	480e      	ldr	r0, [pc, #56]	@ (8016800 <on_reply+0x90>)
 80167c6:	b014      	add	sp, #80	@ 0x50
 80167c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167cc:	f7fc be2c 	b.w	8013428 <put_memory>
 80167d0:	2200      	movs	r2, #0
 80167d2:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80167d6:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80167da:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80167de:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80167e2:	f7fd f999 	bl	8013b18 <rmw_uros_epoch_nanos>
 80167e6:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80167ea:	2304      	movs	r3, #4
 80167ec:	e942 0102 	strd	r0, r1, [r2, #-8]
 80167f0:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80167f4:	b014      	add	sp, #80	@ 0x50
 80167f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167fa:	bf00      	nop
 80167fc:	2000db84 	.word	0x2000db84
 8016800:	20012494 	.word	0x20012494

08016804 <calloc>:
 8016804:	4b02      	ldr	r3, [pc, #8]	@ (8016810 <calloc+0xc>)
 8016806:	460a      	mov	r2, r1
 8016808:	4601      	mov	r1, r0
 801680a:	6818      	ldr	r0, [r3, #0]
 801680c:	f000 b802 	b.w	8016814 <_calloc_r>
 8016810:	200001c0 	.word	0x200001c0

08016814 <_calloc_r>:
 8016814:	b570      	push	{r4, r5, r6, lr}
 8016816:	fba1 5402 	umull	r5, r4, r1, r2
 801681a:	b93c      	cbnz	r4, 801682c <_calloc_r+0x18>
 801681c:	4629      	mov	r1, r5
 801681e:	f000 f899 	bl	8016954 <_malloc_r>
 8016822:	4606      	mov	r6, r0
 8016824:	b928      	cbnz	r0, 8016832 <_calloc_r+0x1e>
 8016826:	2600      	movs	r6, #0
 8016828:	4630      	mov	r0, r6
 801682a:	bd70      	pop	{r4, r5, r6, pc}
 801682c:	220c      	movs	r2, #12
 801682e:	6002      	str	r2, [r0, #0]
 8016830:	e7f9      	b.n	8016826 <_calloc_r+0x12>
 8016832:	462a      	mov	r2, r5
 8016834:	4621      	mov	r1, r4
 8016836:	f000 fca5 	bl	8017184 <memset>
 801683a:	e7f5      	b.n	8016828 <_calloc_r+0x14>

0801683c <exit>:
 801683c:	b508      	push	{r3, lr}
 801683e:	4b06      	ldr	r3, [pc, #24]	@ (8016858 <exit+0x1c>)
 8016840:	4604      	mov	r4, r0
 8016842:	b113      	cbz	r3, 801684a <exit+0xe>
 8016844:	2100      	movs	r1, #0
 8016846:	f3af 8000 	nop.w
 801684a:	4b04      	ldr	r3, [pc, #16]	@ (801685c <exit+0x20>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	b103      	cbz	r3, 8016852 <exit+0x16>
 8016850:	4798      	blx	r3
 8016852:	4620      	mov	r0, r4
 8016854:	f7ea ff00 	bl	8001658 <_exit>
 8016858:	00000000 	.word	0x00000000
 801685c:	200126ec 	.word	0x200126ec

08016860 <getenv>:
 8016860:	b507      	push	{r0, r1, r2, lr}
 8016862:	4b04      	ldr	r3, [pc, #16]	@ (8016874 <getenv+0x14>)
 8016864:	4601      	mov	r1, r0
 8016866:	aa01      	add	r2, sp, #4
 8016868:	6818      	ldr	r0, [r3, #0]
 801686a:	f000 f805 	bl	8016878 <_findenv_r>
 801686e:	b003      	add	sp, #12
 8016870:	f85d fb04 	ldr.w	pc, [sp], #4
 8016874:	200001c0 	.word	0x200001c0

08016878 <_findenv_r>:
 8016878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801687c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80168ec <_findenv_r+0x74>
 8016880:	4606      	mov	r6, r0
 8016882:	4689      	mov	r9, r1
 8016884:	4617      	mov	r7, r2
 8016886:	f000 fd73 	bl	8017370 <__env_lock>
 801688a:	f8da 4000 	ldr.w	r4, [sl]
 801688e:	b134      	cbz	r4, 801689e <_findenv_r+0x26>
 8016890:	464b      	mov	r3, r9
 8016892:	4698      	mov	r8, r3
 8016894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016898:	b13a      	cbz	r2, 80168aa <_findenv_r+0x32>
 801689a:	2a3d      	cmp	r2, #61	@ 0x3d
 801689c:	d1f9      	bne.n	8016892 <_findenv_r+0x1a>
 801689e:	4630      	mov	r0, r6
 80168a0:	f000 fd6c 	bl	801737c <__env_unlock>
 80168a4:	2000      	movs	r0, #0
 80168a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168aa:	eba8 0809 	sub.w	r8, r8, r9
 80168ae:	46a3      	mov	fp, r4
 80168b0:	f854 0b04 	ldr.w	r0, [r4], #4
 80168b4:	2800      	cmp	r0, #0
 80168b6:	d0f2      	beq.n	801689e <_findenv_r+0x26>
 80168b8:	4642      	mov	r2, r8
 80168ba:	4649      	mov	r1, r9
 80168bc:	f000 fc77 	bl	80171ae <strncmp>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d1f4      	bne.n	80168ae <_findenv_r+0x36>
 80168c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80168c8:	eb03 0508 	add.w	r5, r3, r8
 80168cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80168d0:	2b3d      	cmp	r3, #61	@ 0x3d
 80168d2:	d1ec      	bne.n	80168ae <_findenv_r+0x36>
 80168d4:	f8da 3000 	ldr.w	r3, [sl]
 80168d8:	ebab 0303 	sub.w	r3, fp, r3
 80168dc:	109b      	asrs	r3, r3, #2
 80168de:	4630      	mov	r0, r6
 80168e0:	603b      	str	r3, [r7, #0]
 80168e2:	f000 fd4b 	bl	801737c <__env_unlock>
 80168e6:	1c68      	adds	r0, r5, #1
 80168e8:	e7dd      	b.n	80168a6 <_findenv_r+0x2e>
 80168ea:	bf00      	nop
 80168ec:	20000000 	.word	0x20000000

080168f0 <malloc>:
 80168f0:	4b02      	ldr	r3, [pc, #8]	@ (80168fc <malloc+0xc>)
 80168f2:	4601      	mov	r1, r0
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	f000 b82d 	b.w	8016954 <_malloc_r>
 80168fa:	bf00      	nop
 80168fc:	200001c0 	.word	0x200001c0

08016900 <free>:
 8016900:	4b02      	ldr	r3, [pc, #8]	@ (801690c <free+0xc>)
 8016902:	4601      	mov	r1, r0
 8016904:	6818      	ldr	r0, [r3, #0]
 8016906:	f000 bd3f 	b.w	8017388 <_free_r>
 801690a:	bf00      	nop
 801690c:	200001c0 	.word	0x200001c0

08016910 <sbrk_aligned>:
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	4e0f      	ldr	r6, [pc, #60]	@ (8016950 <sbrk_aligned+0x40>)
 8016914:	460c      	mov	r4, r1
 8016916:	6831      	ldr	r1, [r6, #0]
 8016918:	4605      	mov	r5, r0
 801691a:	b911      	cbnz	r1, 8016922 <sbrk_aligned+0x12>
 801691c:	f000 fca4 	bl	8017268 <_sbrk_r>
 8016920:	6030      	str	r0, [r6, #0]
 8016922:	4621      	mov	r1, r4
 8016924:	4628      	mov	r0, r5
 8016926:	f000 fc9f 	bl	8017268 <_sbrk_r>
 801692a:	1c43      	adds	r3, r0, #1
 801692c:	d103      	bne.n	8016936 <sbrk_aligned+0x26>
 801692e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016932:	4620      	mov	r0, r4
 8016934:	bd70      	pop	{r4, r5, r6, pc}
 8016936:	1cc4      	adds	r4, r0, #3
 8016938:	f024 0403 	bic.w	r4, r4, #3
 801693c:	42a0      	cmp	r0, r4
 801693e:	d0f8      	beq.n	8016932 <sbrk_aligned+0x22>
 8016940:	1a21      	subs	r1, r4, r0
 8016942:	4628      	mov	r0, r5
 8016944:	f000 fc90 	bl	8017268 <_sbrk_r>
 8016948:	3001      	adds	r0, #1
 801694a:	d1f2      	bne.n	8016932 <sbrk_aligned+0x22>
 801694c:	e7ef      	b.n	801692e <sbrk_aligned+0x1e>
 801694e:	bf00      	nop
 8016950:	200125ac 	.word	0x200125ac

08016954 <_malloc_r>:
 8016954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016958:	1ccd      	adds	r5, r1, #3
 801695a:	f025 0503 	bic.w	r5, r5, #3
 801695e:	3508      	adds	r5, #8
 8016960:	2d0c      	cmp	r5, #12
 8016962:	bf38      	it	cc
 8016964:	250c      	movcc	r5, #12
 8016966:	2d00      	cmp	r5, #0
 8016968:	4606      	mov	r6, r0
 801696a:	db01      	blt.n	8016970 <_malloc_r+0x1c>
 801696c:	42a9      	cmp	r1, r5
 801696e:	d904      	bls.n	801697a <_malloc_r+0x26>
 8016970:	230c      	movs	r3, #12
 8016972:	6033      	str	r3, [r6, #0]
 8016974:	2000      	movs	r0, #0
 8016976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801697a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016a50 <_malloc_r+0xfc>
 801697e:	f000 f869 	bl	8016a54 <__malloc_lock>
 8016982:	f8d8 3000 	ldr.w	r3, [r8]
 8016986:	461c      	mov	r4, r3
 8016988:	bb44      	cbnz	r4, 80169dc <_malloc_r+0x88>
 801698a:	4629      	mov	r1, r5
 801698c:	4630      	mov	r0, r6
 801698e:	f7ff ffbf 	bl	8016910 <sbrk_aligned>
 8016992:	1c43      	adds	r3, r0, #1
 8016994:	4604      	mov	r4, r0
 8016996:	d158      	bne.n	8016a4a <_malloc_r+0xf6>
 8016998:	f8d8 4000 	ldr.w	r4, [r8]
 801699c:	4627      	mov	r7, r4
 801699e:	2f00      	cmp	r7, #0
 80169a0:	d143      	bne.n	8016a2a <_malloc_r+0xd6>
 80169a2:	2c00      	cmp	r4, #0
 80169a4:	d04b      	beq.n	8016a3e <_malloc_r+0xea>
 80169a6:	6823      	ldr	r3, [r4, #0]
 80169a8:	4639      	mov	r1, r7
 80169aa:	4630      	mov	r0, r6
 80169ac:	eb04 0903 	add.w	r9, r4, r3
 80169b0:	f000 fc5a 	bl	8017268 <_sbrk_r>
 80169b4:	4581      	cmp	r9, r0
 80169b6:	d142      	bne.n	8016a3e <_malloc_r+0xea>
 80169b8:	6821      	ldr	r1, [r4, #0]
 80169ba:	1a6d      	subs	r5, r5, r1
 80169bc:	4629      	mov	r1, r5
 80169be:	4630      	mov	r0, r6
 80169c0:	f7ff ffa6 	bl	8016910 <sbrk_aligned>
 80169c4:	3001      	adds	r0, #1
 80169c6:	d03a      	beq.n	8016a3e <_malloc_r+0xea>
 80169c8:	6823      	ldr	r3, [r4, #0]
 80169ca:	442b      	add	r3, r5
 80169cc:	6023      	str	r3, [r4, #0]
 80169ce:	f8d8 3000 	ldr.w	r3, [r8]
 80169d2:	685a      	ldr	r2, [r3, #4]
 80169d4:	bb62      	cbnz	r2, 8016a30 <_malloc_r+0xdc>
 80169d6:	f8c8 7000 	str.w	r7, [r8]
 80169da:	e00f      	b.n	80169fc <_malloc_r+0xa8>
 80169dc:	6822      	ldr	r2, [r4, #0]
 80169de:	1b52      	subs	r2, r2, r5
 80169e0:	d420      	bmi.n	8016a24 <_malloc_r+0xd0>
 80169e2:	2a0b      	cmp	r2, #11
 80169e4:	d917      	bls.n	8016a16 <_malloc_r+0xc2>
 80169e6:	1961      	adds	r1, r4, r5
 80169e8:	42a3      	cmp	r3, r4
 80169ea:	6025      	str	r5, [r4, #0]
 80169ec:	bf18      	it	ne
 80169ee:	6059      	strne	r1, [r3, #4]
 80169f0:	6863      	ldr	r3, [r4, #4]
 80169f2:	bf08      	it	eq
 80169f4:	f8c8 1000 	streq.w	r1, [r8]
 80169f8:	5162      	str	r2, [r4, r5]
 80169fa:	604b      	str	r3, [r1, #4]
 80169fc:	4630      	mov	r0, r6
 80169fe:	f000 f82f 	bl	8016a60 <__malloc_unlock>
 8016a02:	f104 000b 	add.w	r0, r4, #11
 8016a06:	1d23      	adds	r3, r4, #4
 8016a08:	f020 0007 	bic.w	r0, r0, #7
 8016a0c:	1ac2      	subs	r2, r0, r3
 8016a0e:	bf1c      	itt	ne
 8016a10:	1a1b      	subne	r3, r3, r0
 8016a12:	50a3      	strne	r3, [r4, r2]
 8016a14:	e7af      	b.n	8016976 <_malloc_r+0x22>
 8016a16:	6862      	ldr	r2, [r4, #4]
 8016a18:	42a3      	cmp	r3, r4
 8016a1a:	bf0c      	ite	eq
 8016a1c:	f8c8 2000 	streq.w	r2, [r8]
 8016a20:	605a      	strne	r2, [r3, #4]
 8016a22:	e7eb      	b.n	80169fc <_malloc_r+0xa8>
 8016a24:	4623      	mov	r3, r4
 8016a26:	6864      	ldr	r4, [r4, #4]
 8016a28:	e7ae      	b.n	8016988 <_malloc_r+0x34>
 8016a2a:	463c      	mov	r4, r7
 8016a2c:	687f      	ldr	r7, [r7, #4]
 8016a2e:	e7b6      	b.n	801699e <_malloc_r+0x4a>
 8016a30:	461a      	mov	r2, r3
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	42a3      	cmp	r3, r4
 8016a36:	d1fb      	bne.n	8016a30 <_malloc_r+0xdc>
 8016a38:	2300      	movs	r3, #0
 8016a3a:	6053      	str	r3, [r2, #4]
 8016a3c:	e7de      	b.n	80169fc <_malloc_r+0xa8>
 8016a3e:	230c      	movs	r3, #12
 8016a40:	6033      	str	r3, [r6, #0]
 8016a42:	4630      	mov	r0, r6
 8016a44:	f000 f80c 	bl	8016a60 <__malloc_unlock>
 8016a48:	e794      	b.n	8016974 <_malloc_r+0x20>
 8016a4a:	6005      	str	r5, [r0, #0]
 8016a4c:	e7d6      	b.n	80169fc <_malloc_r+0xa8>
 8016a4e:	bf00      	nop
 8016a50:	200125b0 	.word	0x200125b0

08016a54 <__malloc_lock>:
 8016a54:	4801      	ldr	r0, [pc, #4]	@ (8016a5c <__malloc_lock+0x8>)
 8016a56:	f000 bc54 	b.w	8017302 <__retarget_lock_acquire_recursive>
 8016a5a:	bf00      	nop
 8016a5c:	200126f5 	.word	0x200126f5

08016a60 <__malloc_unlock>:
 8016a60:	4801      	ldr	r0, [pc, #4]	@ (8016a68 <__malloc_unlock+0x8>)
 8016a62:	f000 bc4f 	b.w	8017304 <__retarget_lock_release_recursive>
 8016a66:	bf00      	nop
 8016a68:	200126f5 	.word	0x200126f5

08016a6c <srand>:
 8016a6c:	b538      	push	{r3, r4, r5, lr}
 8016a6e:	4b10      	ldr	r3, [pc, #64]	@ (8016ab0 <srand+0x44>)
 8016a70:	681d      	ldr	r5, [r3, #0]
 8016a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016a74:	4604      	mov	r4, r0
 8016a76:	b9b3      	cbnz	r3, 8016aa6 <srand+0x3a>
 8016a78:	2018      	movs	r0, #24
 8016a7a:	f7ff ff39 	bl	80168f0 <malloc>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	6328      	str	r0, [r5, #48]	@ 0x30
 8016a82:	b920      	cbnz	r0, 8016a8e <srand+0x22>
 8016a84:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab4 <srand+0x48>)
 8016a86:	480c      	ldr	r0, [pc, #48]	@ (8016ab8 <srand+0x4c>)
 8016a88:	2146      	movs	r1, #70	@ 0x46
 8016a8a:	f000 fc53 	bl	8017334 <__assert_func>
 8016a8e:	490b      	ldr	r1, [pc, #44]	@ (8016abc <srand+0x50>)
 8016a90:	4b0b      	ldr	r3, [pc, #44]	@ (8016ac0 <srand+0x54>)
 8016a92:	e9c0 1300 	strd	r1, r3, [r0]
 8016a96:	4b0b      	ldr	r3, [pc, #44]	@ (8016ac4 <srand+0x58>)
 8016a98:	6083      	str	r3, [r0, #8]
 8016a9a:	230b      	movs	r3, #11
 8016a9c:	8183      	strh	r3, [r0, #12]
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	2001      	movs	r0, #1
 8016aa2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016aa6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	611c      	str	r4, [r3, #16]
 8016aac:	615a      	str	r2, [r3, #20]
 8016aae:	bd38      	pop	{r3, r4, r5, pc}
 8016ab0:	200001c0 	.word	0x200001c0
 8016ab4:	08018b7c 	.word	0x08018b7c
 8016ab8:	08018b93 	.word	0x08018b93
 8016abc:	abcd330e 	.word	0xabcd330e
 8016ac0:	e66d1234 	.word	0xe66d1234
 8016ac4:	0005deec 	.word	0x0005deec

08016ac8 <rand>:
 8016ac8:	4b16      	ldr	r3, [pc, #88]	@ (8016b24 <rand+0x5c>)
 8016aca:	b510      	push	{r4, lr}
 8016acc:	681c      	ldr	r4, [r3, #0]
 8016ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ad0:	b9b3      	cbnz	r3, 8016b00 <rand+0x38>
 8016ad2:	2018      	movs	r0, #24
 8016ad4:	f7ff ff0c 	bl	80168f0 <malloc>
 8016ad8:	4602      	mov	r2, r0
 8016ada:	6320      	str	r0, [r4, #48]	@ 0x30
 8016adc:	b920      	cbnz	r0, 8016ae8 <rand+0x20>
 8016ade:	4b12      	ldr	r3, [pc, #72]	@ (8016b28 <rand+0x60>)
 8016ae0:	4812      	ldr	r0, [pc, #72]	@ (8016b2c <rand+0x64>)
 8016ae2:	2152      	movs	r1, #82	@ 0x52
 8016ae4:	f000 fc26 	bl	8017334 <__assert_func>
 8016ae8:	4911      	ldr	r1, [pc, #68]	@ (8016b30 <rand+0x68>)
 8016aea:	4b12      	ldr	r3, [pc, #72]	@ (8016b34 <rand+0x6c>)
 8016aec:	e9c0 1300 	strd	r1, r3, [r0]
 8016af0:	4b11      	ldr	r3, [pc, #68]	@ (8016b38 <rand+0x70>)
 8016af2:	6083      	str	r3, [r0, #8]
 8016af4:	230b      	movs	r3, #11
 8016af6:	8183      	strh	r3, [r0, #12]
 8016af8:	2100      	movs	r1, #0
 8016afa:	2001      	movs	r0, #1
 8016afc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b02:	480e      	ldr	r0, [pc, #56]	@ (8016b3c <rand+0x74>)
 8016b04:	690b      	ldr	r3, [r1, #16]
 8016b06:	694c      	ldr	r4, [r1, #20]
 8016b08:	4a0d      	ldr	r2, [pc, #52]	@ (8016b40 <rand+0x78>)
 8016b0a:	4358      	muls	r0, r3
 8016b0c:	fb02 0004 	mla	r0, r2, r4, r0
 8016b10:	fba3 3202 	umull	r3, r2, r3, r2
 8016b14:	3301      	adds	r3, #1
 8016b16:	eb40 0002 	adc.w	r0, r0, r2
 8016b1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b22:	bd10      	pop	{r4, pc}
 8016b24:	200001c0 	.word	0x200001c0
 8016b28:	08018b7c 	.word	0x08018b7c
 8016b2c:	08018b93 	.word	0x08018b93
 8016b30:	abcd330e 	.word	0xabcd330e
 8016b34:	e66d1234 	.word	0xe66d1234
 8016b38:	0005deec 	.word	0x0005deec
 8016b3c:	5851f42d 	.word	0x5851f42d
 8016b40:	4c957f2d 	.word	0x4c957f2d

08016b44 <realloc>:
 8016b44:	4b02      	ldr	r3, [pc, #8]	@ (8016b50 <realloc+0xc>)
 8016b46:	460a      	mov	r2, r1
 8016b48:	4601      	mov	r1, r0
 8016b4a:	6818      	ldr	r0, [r3, #0]
 8016b4c:	f000 b802 	b.w	8016b54 <_realloc_r>
 8016b50:	200001c0 	.word	0x200001c0

08016b54 <_realloc_r>:
 8016b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b58:	4680      	mov	r8, r0
 8016b5a:	4615      	mov	r5, r2
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	b921      	cbnz	r1, 8016b6a <_realloc_r+0x16>
 8016b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b64:	4611      	mov	r1, r2
 8016b66:	f7ff bef5 	b.w	8016954 <_malloc_r>
 8016b6a:	b92a      	cbnz	r2, 8016b78 <_realloc_r+0x24>
 8016b6c:	f000 fc0c 	bl	8017388 <_free_r>
 8016b70:	2400      	movs	r4, #0
 8016b72:	4620      	mov	r0, r4
 8016b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b78:	f000 fc50 	bl	801741c <_malloc_usable_size_r>
 8016b7c:	4285      	cmp	r5, r0
 8016b7e:	4606      	mov	r6, r0
 8016b80:	d802      	bhi.n	8016b88 <_realloc_r+0x34>
 8016b82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b86:	d8f4      	bhi.n	8016b72 <_realloc_r+0x1e>
 8016b88:	4629      	mov	r1, r5
 8016b8a:	4640      	mov	r0, r8
 8016b8c:	f7ff fee2 	bl	8016954 <_malloc_r>
 8016b90:	4607      	mov	r7, r0
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d0ec      	beq.n	8016b70 <_realloc_r+0x1c>
 8016b96:	42b5      	cmp	r5, r6
 8016b98:	462a      	mov	r2, r5
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	bf28      	it	cs
 8016b9e:	4632      	movcs	r2, r6
 8016ba0:	f000 fbb9 	bl	8017316 <memcpy>
 8016ba4:	4621      	mov	r1, r4
 8016ba6:	4640      	mov	r0, r8
 8016ba8:	f000 fbee 	bl	8017388 <_free_r>
 8016bac:	463c      	mov	r4, r7
 8016bae:	e7e0      	b.n	8016b72 <_realloc_r+0x1e>

08016bb0 <_strtoul_l.constprop.0>:
 8016bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bb4:	4e34      	ldr	r6, [pc, #208]	@ (8016c88 <_strtoul_l.constprop.0+0xd8>)
 8016bb6:	4686      	mov	lr, r0
 8016bb8:	460d      	mov	r5, r1
 8016bba:	4628      	mov	r0, r5
 8016bbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bc0:	5d37      	ldrb	r7, [r6, r4]
 8016bc2:	f017 0708 	ands.w	r7, r7, #8
 8016bc6:	d1f8      	bne.n	8016bba <_strtoul_l.constprop.0+0xa>
 8016bc8:	2c2d      	cmp	r4, #45	@ 0x2d
 8016bca:	d12f      	bne.n	8016c2c <_strtoul_l.constprop.0+0x7c>
 8016bcc:	782c      	ldrb	r4, [r5, #0]
 8016bce:	2701      	movs	r7, #1
 8016bd0:	1c85      	adds	r5, r0, #2
 8016bd2:	f033 0010 	bics.w	r0, r3, #16
 8016bd6:	d109      	bne.n	8016bec <_strtoul_l.constprop.0+0x3c>
 8016bd8:	2c30      	cmp	r4, #48	@ 0x30
 8016bda:	d12c      	bne.n	8016c36 <_strtoul_l.constprop.0+0x86>
 8016bdc:	7828      	ldrb	r0, [r5, #0]
 8016bde:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016be2:	2858      	cmp	r0, #88	@ 0x58
 8016be4:	d127      	bne.n	8016c36 <_strtoul_l.constprop.0+0x86>
 8016be6:	786c      	ldrb	r4, [r5, #1]
 8016be8:	2310      	movs	r3, #16
 8016bea:	3502      	adds	r5, #2
 8016bec:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016bf0:	2600      	movs	r6, #0
 8016bf2:	fbb8 f8f3 	udiv	r8, r8, r3
 8016bf6:	fb03 f908 	mul.w	r9, r3, r8
 8016bfa:	ea6f 0909 	mvn.w	r9, r9
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c04:	f1bc 0f09 	cmp.w	ip, #9
 8016c08:	d81c      	bhi.n	8016c44 <_strtoul_l.constprop.0+0x94>
 8016c0a:	4664      	mov	r4, ip
 8016c0c:	42a3      	cmp	r3, r4
 8016c0e:	dd2a      	ble.n	8016c66 <_strtoul_l.constprop.0+0xb6>
 8016c10:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016c14:	d007      	beq.n	8016c26 <_strtoul_l.constprop.0+0x76>
 8016c16:	4580      	cmp	r8, r0
 8016c18:	d322      	bcc.n	8016c60 <_strtoul_l.constprop.0+0xb0>
 8016c1a:	d101      	bne.n	8016c20 <_strtoul_l.constprop.0+0x70>
 8016c1c:	45a1      	cmp	r9, r4
 8016c1e:	db1f      	blt.n	8016c60 <_strtoul_l.constprop.0+0xb0>
 8016c20:	fb00 4003 	mla	r0, r0, r3, r4
 8016c24:	2601      	movs	r6, #1
 8016c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c2a:	e7e9      	b.n	8016c00 <_strtoul_l.constprop.0+0x50>
 8016c2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c2e:	bf04      	itt	eq
 8016c30:	782c      	ldrbeq	r4, [r5, #0]
 8016c32:	1c85      	addeq	r5, r0, #2
 8016c34:	e7cd      	b.n	8016bd2 <_strtoul_l.constprop.0+0x22>
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d1d8      	bne.n	8016bec <_strtoul_l.constprop.0+0x3c>
 8016c3a:	2c30      	cmp	r4, #48	@ 0x30
 8016c3c:	bf0c      	ite	eq
 8016c3e:	2308      	moveq	r3, #8
 8016c40:	230a      	movne	r3, #10
 8016c42:	e7d3      	b.n	8016bec <_strtoul_l.constprop.0+0x3c>
 8016c44:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016c48:	f1bc 0f19 	cmp.w	ip, #25
 8016c4c:	d801      	bhi.n	8016c52 <_strtoul_l.constprop.0+0xa2>
 8016c4e:	3c37      	subs	r4, #55	@ 0x37
 8016c50:	e7dc      	b.n	8016c0c <_strtoul_l.constprop.0+0x5c>
 8016c52:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016c56:	f1bc 0f19 	cmp.w	ip, #25
 8016c5a:	d804      	bhi.n	8016c66 <_strtoul_l.constprop.0+0xb6>
 8016c5c:	3c57      	subs	r4, #87	@ 0x57
 8016c5e:	e7d5      	b.n	8016c0c <_strtoul_l.constprop.0+0x5c>
 8016c60:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016c64:	e7df      	b.n	8016c26 <_strtoul_l.constprop.0+0x76>
 8016c66:	1c73      	adds	r3, r6, #1
 8016c68:	d106      	bne.n	8016c78 <_strtoul_l.constprop.0+0xc8>
 8016c6a:	2322      	movs	r3, #34	@ 0x22
 8016c6c:	f8ce 3000 	str.w	r3, [lr]
 8016c70:	4630      	mov	r0, r6
 8016c72:	b932      	cbnz	r2, 8016c82 <_strtoul_l.constprop.0+0xd2>
 8016c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c78:	b107      	cbz	r7, 8016c7c <_strtoul_l.constprop.0+0xcc>
 8016c7a:	4240      	negs	r0, r0
 8016c7c:	2a00      	cmp	r2, #0
 8016c7e:	d0f9      	beq.n	8016c74 <_strtoul_l.constprop.0+0xc4>
 8016c80:	b106      	cbz	r6, 8016c84 <_strtoul_l.constprop.0+0xd4>
 8016c82:	1e69      	subs	r1, r5, #1
 8016c84:	6011      	str	r1, [r2, #0]
 8016c86:	e7f5      	b.n	8016c74 <_strtoul_l.constprop.0+0xc4>
 8016c88:	08018bec 	.word	0x08018bec

08016c8c <strtoul>:
 8016c8c:	4613      	mov	r3, r2
 8016c8e:	460a      	mov	r2, r1
 8016c90:	4601      	mov	r1, r0
 8016c92:	4802      	ldr	r0, [pc, #8]	@ (8016c9c <strtoul+0x10>)
 8016c94:	6800      	ldr	r0, [r0, #0]
 8016c96:	f7ff bf8b 	b.w	8016bb0 <_strtoul_l.constprop.0>
 8016c9a:	bf00      	nop
 8016c9c:	200001c0 	.word	0x200001c0

08016ca0 <std>:
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	b510      	push	{r4, lr}
 8016ca4:	4604      	mov	r4, r0
 8016ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8016caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cae:	6083      	str	r3, [r0, #8]
 8016cb0:	8181      	strh	r1, [r0, #12]
 8016cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016cb4:	81c2      	strh	r2, [r0, #14]
 8016cb6:	6183      	str	r3, [r0, #24]
 8016cb8:	4619      	mov	r1, r3
 8016cba:	2208      	movs	r2, #8
 8016cbc:	305c      	adds	r0, #92	@ 0x5c
 8016cbe:	f000 fa61 	bl	8017184 <memset>
 8016cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8016cf8 <std+0x58>)
 8016cc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8016cfc <std+0x5c>)
 8016cc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cca:	4b0d      	ldr	r3, [pc, #52]	@ (8016d00 <std+0x60>)
 8016ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cce:	4b0d      	ldr	r3, [pc, #52]	@ (8016d04 <std+0x64>)
 8016cd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d08 <std+0x68>)
 8016cd4:	6224      	str	r4, [r4, #32]
 8016cd6:	429c      	cmp	r4, r3
 8016cd8:	d006      	beq.n	8016ce8 <std+0x48>
 8016cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016cde:	4294      	cmp	r4, r2
 8016ce0:	d002      	beq.n	8016ce8 <std+0x48>
 8016ce2:	33d0      	adds	r3, #208	@ 0xd0
 8016ce4:	429c      	cmp	r4, r3
 8016ce6:	d105      	bne.n	8016cf4 <std+0x54>
 8016ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cf0:	f000 bb06 	b.w	8017300 <__retarget_lock_init_recursive>
 8016cf4:	bd10      	pop	{r4, pc}
 8016cf6:	bf00      	nop
 8016cf8:	08016f65 	.word	0x08016f65
 8016cfc:	08016f87 	.word	0x08016f87
 8016d00:	08016fbf 	.word	0x08016fbf
 8016d04:	08016fe3 	.word	0x08016fe3
 8016d08:	200125b4 	.word	0x200125b4

08016d0c <stdio_exit_handler>:
 8016d0c:	4a02      	ldr	r2, [pc, #8]	@ (8016d18 <stdio_exit_handler+0xc>)
 8016d0e:	4903      	ldr	r1, [pc, #12]	@ (8016d1c <stdio_exit_handler+0x10>)
 8016d10:	4803      	ldr	r0, [pc, #12]	@ (8016d20 <stdio_exit_handler+0x14>)
 8016d12:	f000 b869 	b.w	8016de8 <_fwalk_sglue>
 8016d16:	bf00      	nop
 8016d18:	200001b4 	.word	0x200001b4
 8016d1c:	08017d85 	.word	0x08017d85
 8016d20:	200001c4 	.word	0x200001c4

08016d24 <cleanup_stdio>:
 8016d24:	6841      	ldr	r1, [r0, #4]
 8016d26:	4b0c      	ldr	r3, [pc, #48]	@ (8016d58 <cleanup_stdio+0x34>)
 8016d28:	4299      	cmp	r1, r3
 8016d2a:	b510      	push	{r4, lr}
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	d001      	beq.n	8016d34 <cleanup_stdio+0x10>
 8016d30:	f001 f828 	bl	8017d84 <_fflush_r>
 8016d34:	68a1      	ldr	r1, [r4, #8]
 8016d36:	4b09      	ldr	r3, [pc, #36]	@ (8016d5c <cleanup_stdio+0x38>)
 8016d38:	4299      	cmp	r1, r3
 8016d3a:	d002      	beq.n	8016d42 <cleanup_stdio+0x1e>
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f001 f821 	bl	8017d84 <_fflush_r>
 8016d42:	68e1      	ldr	r1, [r4, #12]
 8016d44:	4b06      	ldr	r3, [pc, #24]	@ (8016d60 <cleanup_stdio+0x3c>)
 8016d46:	4299      	cmp	r1, r3
 8016d48:	d004      	beq.n	8016d54 <cleanup_stdio+0x30>
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d50:	f001 b818 	b.w	8017d84 <_fflush_r>
 8016d54:	bd10      	pop	{r4, pc}
 8016d56:	bf00      	nop
 8016d58:	200125b4 	.word	0x200125b4
 8016d5c:	2001261c 	.word	0x2001261c
 8016d60:	20012684 	.word	0x20012684

08016d64 <global_stdio_init.part.0>:
 8016d64:	b510      	push	{r4, lr}
 8016d66:	4b0b      	ldr	r3, [pc, #44]	@ (8016d94 <global_stdio_init.part.0+0x30>)
 8016d68:	4c0b      	ldr	r4, [pc, #44]	@ (8016d98 <global_stdio_init.part.0+0x34>)
 8016d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8016d9c <global_stdio_init.part.0+0x38>)
 8016d6c:	601a      	str	r2, [r3, #0]
 8016d6e:	4620      	mov	r0, r4
 8016d70:	2200      	movs	r2, #0
 8016d72:	2104      	movs	r1, #4
 8016d74:	f7ff ff94 	bl	8016ca0 <std>
 8016d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	2109      	movs	r1, #9
 8016d80:	f7ff ff8e 	bl	8016ca0 <std>
 8016d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d88:	2202      	movs	r2, #2
 8016d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d8e:	2112      	movs	r1, #18
 8016d90:	f7ff bf86 	b.w	8016ca0 <std>
 8016d94:	200126ec 	.word	0x200126ec
 8016d98:	200125b4 	.word	0x200125b4
 8016d9c:	08016d0d 	.word	0x08016d0d

08016da0 <__sfp_lock_acquire>:
 8016da0:	4801      	ldr	r0, [pc, #4]	@ (8016da8 <__sfp_lock_acquire+0x8>)
 8016da2:	f000 baae 	b.w	8017302 <__retarget_lock_acquire_recursive>
 8016da6:	bf00      	nop
 8016da8:	200126f6 	.word	0x200126f6

08016dac <__sfp_lock_release>:
 8016dac:	4801      	ldr	r0, [pc, #4]	@ (8016db4 <__sfp_lock_release+0x8>)
 8016dae:	f000 baa9 	b.w	8017304 <__retarget_lock_release_recursive>
 8016db2:	bf00      	nop
 8016db4:	200126f6 	.word	0x200126f6

08016db8 <__sinit>:
 8016db8:	b510      	push	{r4, lr}
 8016dba:	4604      	mov	r4, r0
 8016dbc:	f7ff fff0 	bl	8016da0 <__sfp_lock_acquire>
 8016dc0:	6a23      	ldr	r3, [r4, #32]
 8016dc2:	b11b      	cbz	r3, 8016dcc <__sinit+0x14>
 8016dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dc8:	f7ff bff0 	b.w	8016dac <__sfp_lock_release>
 8016dcc:	4b04      	ldr	r3, [pc, #16]	@ (8016de0 <__sinit+0x28>)
 8016dce:	6223      	str	r3, [r4, #32]
 8016dd0:	4b04      	ldr	r3, [pc, #16]	@ (8016de4 <__sinit+0x2c>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1f5      	bne.n	8016dc4 <__sinit+0xc>
 8016dd8:	f7ff ffc4 	bl	8016d64 <global_stdio_init.part.0>
 8016ddc:	e7f2      	b.n	8016dc4 <__sinit+0xc>
 8016dde:	bf00      	nop
 8016de0:	08016d25 	.word	0x08016d25
 8016de4:	200126ec 	.word	0x200126ec

08016de8 <_fwalk_sglue>:
 8016de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dec:	4607      	mov	r7, r0
 8016dee:	4688      	mov	r8, r1
 8016df0:	4614      	mov	r4, r2
 8016df2:	2600      	movs	r6, #0
 8016df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016df8:	f1b9 0901 	subs.w	r9, r9, #1
 8016dfc:	d505      	bpl.n	8016e0a <_fwalk_sglue+0x22>
 8016dfe:	6824      	ldr	r4, [r4, #0]
 8016e00:	2c00      	cmp	r4, #0
 8016e02:	d1f7      	bne.n	8016df4 <_fwalk_sglue+0xc>
 8016e04:	4630      	mov	r0, r6
 8016e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e0a:	89ab      	ldrh	r3, [r5, #12]
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	d907      	bls.n	8016e20 <_fwalk_sglue+0x38>
 8016e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e14:	3301      	adds	r3, #1
 8016e16:	d003      	beq.n	8016e20 <_fwalk_sglue+0x38>
 8016e18:	4629      	mov	r1, r5
 8016e1a:	4638      	mov	r0, r7
 8016e1c:	47c0      	blx	r8
 8016e1e:	4306      	orrs	r6, r0
 8016e20:	3568      	adds	r5, #104	@ 0x68
 8016e22:	e7e9      	b.n	8016df8 <_fwalk_sglue+0x10>

08016e24 <_fwrite_r>:
 8016e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e28:	9c08      	ldr	r4, [sp, #32]
 8016e2a:	468a      	mov	sl, r1
 8016e2c:	4690      	mov	r8, r2
 8016e2e:	fb02 f903 	mul.w	r9, r2, r3
 8016e32:	4606      	mov	r6, r0
 8016e34:	b118      	cbz	r0, 8016e3e <_fwrite_r+0x1a>
 8016e36:	6a03      	ldr	r3, [r0, #32]
 8016e38:	b90b      	cbnz	r3, 8016e3e <_fwrite_r+0x1a>
 8016e3a:	f7ff ffbd 	bl	8016db8 <__sinit>
 8016e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016e40:	07dd      	lsls	r5, r3, #31
 8016e42:	d405      	bmi.n	8016e50 <_fwrite_r+0x2c>
 8016e44:	89a3      	ldrh	r3, [r4, #12]
 8016e46:	0598      	lsls	r0, r3, #22
 8016e48:	d402      	bmi.n	8016e50 <_fwrite_r+0x2c>
 8016e4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016e4c:	f000 fa59 	bl	8017302 <__retarget_lock_acquire_recursive>
 8016e50:	89a3      	ldrh	r3, [r4, #12]
 8016e52:	0719      	lsls	r1, r3, #28
 8016e54:	d516      	bpl.n	8016e84 <_fwrite_r+0x60>
 8016e56:	6923      	ldr	r3, [r4, #16]
 8016e58:	b1a3      	cbz	r3, 8016e84 <_fwrite_r+0x60>
 8016e5a:	2500      	movs	r5, #0
 8016e5c:	454d      	cmp	r5, r9
 8016e5e:	d01f      	beq.n	8016ea0 <_fwrite_r+0x7c>
 8016e60:	68a7      	ldr	r7, [r4, #8]
 8016e62:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8016e66:	3f01      	subs	r7, #1
 8016e68:	2f00      	cmp	r7, #0
 8016e6a:	60a7      	str	r7, [r4, #8]
 8016e6c:	da04      	bge.n	8016e78 <_fwrite_r+0x54>
 8016e6e:	69a3      	ldr	r3, [r4, #24]
 8016e70:	429f      	cmp	r7, r3
 8016e72:	db0f      	blt.n	8016e94 <_fwrite_r+0x70>
 8016e74:	290a      	cmp	r1, #10
 8016e76:	d00d      	beq.n	8016e94 <_fwrite_r+0x70>
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	1c5a      	adds	r2, r3, #1
 8016e7c:	6022      	str	r2, [r4, #0]
 8016e7e:	7019      	strb	r1, [r3, #0]
 8016e80:	3501      	adds	r5, #1
 8016e82:	e7eb      	b.n	8016e5c <_fwrite_r+0x38>
 8016e84:	4621      	mov	r1, r4
 8016e86:	4630      	mov	r0, r6
 8016e88:	f000 f926 	bl	80170d8 <__swsetup_r>
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	d0e4      	beq.n	8016e5a <_fwrite_r+0x36>
 8016e90:	2500      	movs	r5, #0
 8016e92:	e005      	b.n	8016ea0 <_fwrite_r+0x7c>
 8016e94:	4622      	mov	r2, r4
 8016e96:	4630      	mov	r0, r6
 8016e98:	f000 f8e0 	bl	801705c <__swbuf_r>
 8016e9c:	3001      	adds	r0, #1
 8016e9e:	d1ef      	bne.n	8016e80 <_fwrite_r+0x5c>
 8016ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ea2:	07da      	lsls	r2, r3, #31
 8016ea4:	d405      	bmi.n	8016eb2 <_fwrite_r+0x8e>
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	059b      	lsls	r3, r3, #22
 8016eaa:	d402      	bmi.n	8016eb2 <_fwrite_r+0x8e>
 8016eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016eae:	f000 fa29 	bl	8017304 <__retarget_lock_release_recursive>
 8016eb2:	fbb5 f0f8 	udiv	r0, r5, r8
 8016eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016ebc <fwrite>:
 8016ebc:	b507      	push	{r0, r1, r2, lr}
 8016ebe:	9300      	str	r3, [sp, #0]
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	460a      	mov	r2, r1
 8016ec4:	4601      	mov	r1, r0
 8016ec6:	4803      	ldr	r0, [pc, #12]	@ (8016ed4 <fwrite+0x18>)
 8016ec8:	6800      	ldr	r0, [r0, #0]
 8016eca:	f7ff ffab 	bl	8016e24 <_fwrite_r>
 8016ece:	b003      	add	sp, #12
 8016ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ed4:	200001c0 	.word	0x200001c0

08016ed8 <iprintf>:
 8016ed8:	b40f      	push	{r0, r1, r2, r3}
 8016eda:	b507      	push	{r0, r1, r2, lr}
 8016edc:	4906      	ldr	r1, [pc, #24]	@ (8016ef8 <iprintf+0x20>)
 8016ede:	ab04      	add	r3, sp, #16
 8016ee0:	6808      	ldr	r0, [r1, #0]
 8016ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ee6:	6881      	ldr	r1, [r0, #8]
 8016ee8:	9301      	str	r3, [sp, #4]
 8016eea:	f000 fc21 	bl	8017730 <_vfiprintf_r>
 8016eee:	b003      	add	sp, #12
 8016ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ef4:	b004      	add	sp, #16
 8016ef6:	4770      	bx	lr
 8016ef8:	200001c0 	.word	0x200001c0

08016efc <sniprintf>:
 8016efc:	b40c      	push	{r2, r3}
 8016efe:	b530      	push	{r4, r5, lr}
 8016f00:	4b17      	ldr	r3, [pc, #92]	@ (8016f60 <sniprintf+0x64>)
 8016f02:	1e0c      	subs	r4, r1, #0
 8016f04:	681d      	ldr	r5, [r3, #0]
 8016f06:	b09d      	sub	sp, #116	@ 0x74
 8016f08:	da08      	bge.n	8016f1c <sniprintf+0x20>
 8016f0a:	238b      	movs	r3, #139	@ 0x8b
 8016f0c:	602b      	str	r3, [r5, #0]
 8016f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f12:	b01d      	add	sp, #116	@ 0x74
 8016f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f18:	b002      	add	sp, #8
 8016f1a:	4770      	bx	lr
 8016f1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016f24:	bf14      	ite	ne
 8016f26:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016f2a:	4623      	moveq	r3, r4
 8016f2c:	9304      	str	r3, [sp, #16]
 8016f2e:	9307      	str	r3, [sp, #28]
 8016f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f34:	9002      	str	r0, [sp, #8]
 8016f36:	9006      	str	r0, [sp, #24]
 8016f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016f3e:	ab21      	add	r3, sp, #132	@ 0x84
 8016f40:	a902      	add	r1, sp, #8
 8016f42:	4628      	mov	r0, r5
 8016f44:	9301      	str	r3, [sp, #4]
 8016f46:	f000 facd 	bl	80174e4 <_svfiprintf_r>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	bfbc      	itt	lt
 8016f4e:	238b      	movlt	r3, #139	@ 0x8b
 8016f50:	602b      	strlt	r3, [r5, #0]
 8016f52:	2c00      	cmp	r4, #0
 8016f54:	d0dd      	beq.n	8016f12 <sniprintf+0x16>
 8016f56:	9b02      	ldr	r3, [sp, #8]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	701a      	strb	r2, [r3, #0]
 8016f5c:	e7d9      	b.n	8016f12 <sniprintf+0x16>
 8016f5e:	bf00      	nop
 8016f60:	200001c0 	.word	0x200001c0

08016f64 <__sread>:
 8016f64:	b510      	push	{r4, lr}
 8016f66:	460c      	mov	r4, r1
 8016f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f6c:	f000 f96a 	bl	8017244 <_read_r>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	bfab      	itete	ge
 8016f74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f76:	89a3      	ldrhlt	r3, [r4, #12]
 8016f78:	181b      	addge	r3, r3, r0
 8016f7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f7e:	bfac      	ite	ge
 8016f80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f82:	81a3      	strhlt	r3, [r4, #12]
 8016f84:	bd10      	pop	{r4, pc}

08016f86 <__swrite>:
 8016f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8a:	461f      	mov	r7, r3
 8016f8c:	898b      	ldrh	r3, [r1, #12]
 8016f8e:	05db      	lsls	r3, r3, #23
 8016f90:	4605      	mov	r5, r0
 8016f92:	460c      	mov	r4, r1
 8016f94:	4616      	mov	r6, r2
 8016f96:	d505      	bpl.n	8016fa4 <__swrite+0x1e>
 8016f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f9c:	2302      	movs	r3, #2
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	f000 f93e 	bl	8017220 <_lseek_r>
 8016fa4:	89a3      	ldrh	r3, [r4, #12]
 8016fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016fae:	81a3      	strh	r3, [r4, #12]
 8016fb0:	4632      	mov	r2, r6
 8016fb2:	463b      	mov	r3, r7
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fba:	f000 b965 	b.w	8017288 <_write_r>

08016fbe <__sseek>:
 8016fbe:	b510      	push	{r4, lr}
 8016fc0:	460c      	mov	r4, r1
 8016fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc6:	f000 f92b 	bl	8017220 <_lseek_r>
 8016fca:	1c43      	adds	r3, r0, #1
 8016fcc:	89a3      	ldrh	r3, [r4, #12]
 8016fce:	bf15      	itete	ne
 8016fd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016fd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016fda:	81a3      	strheq	r3, [r4, #12]
 8016fdc:	bf18      	it	ne
 8016fde:	81a3      	strhne	r3, [r4, #12]
 8016fe0:	bd10      	pop	{r4, pc}

08016fe2 <__sclose>:
 8016fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fe6:	f000 b90b 	b.w	8017200 <_close_r>

08016fea <_vsniprintf_r>:
 8016fea:	b530      	push	{r4, r5, lr}
 8016fec:	4614      	mov	r4, r2
 8016fee:	2c00      	cmp	r4, #0
 8016ff0:	b09b      	sub	sp, #108	@ 0x6c
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	da05      	bge.n	8017004 <_vsniprintf_r+0x1a>
 8016ff8:	238b      	movs	r3, #139	@ 0x8b
 8016ffa:	6003      	str	r3, [r0, #0]
 8016ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017000:	b01b      	add	sp, #108	@ 0x6c
 8017002:	bd30      	pop	{r4, r5, pc}
 8017004:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017008:	f8ad 300c 	strh.w	r3, [sp, #12]
 801700c:	bf14      	ite	ne
 801700e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017012:	4623      	moveq	r3, r4
 8017014:	9302      	str	r3, [sp, #8]
 8017016:	9305      	str	r3, [sp, #20]
 8017018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801701c:	9100      	str	r1, [sp, #0]
 801701e:	9104      	str	r1, [sp, #16]
 8017020:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017024:	4669      	mov	r1, sp
 8017026:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017028:	f000 fa5c 	bl	80174e4 <_svfiprintf_r>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	bfbc      	itt	lt
 8017030:	238b      	movlt	r3, #139	@ 0x8b
 8017032:	602b      	strlt	r3, [r5, #0]
 8017034:	2c00      	cmp	r4, #0
 8017036:	d0e3      	beq.n	8017000 <_vsniprintf_r+0x16>
 8017038:	9b00      	ldr	r3, [sp, #0]
 801703a:	2200      	movs	r2, #0
 801703c:	701a      	strb	r2, [r3, #0]
 801703e:	e7df      	b.n	8017000 <_vsniprintf_r+0x16>

08017040 <vsniprintf>:
 8017040:	b507      	push	{r0, r1, r2, lr}
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	4613      	mov	r3, r2
 8017046:	460a      	mov	r2, r1
 8017048:	4601      	mov	r1, r0
 801704a:	4803      	ldr	r0, [pc, #12]	@ (8017058 <vsniprintf+0x18>)
 801704c:	6800      	ldr	r0, [r0, #0]
 801704e:	f7ff ffcc 	bl	8016fea <_vsniprintf_r>
 8017052:	b003      	add	sp, #12
 8017054:	f85d fb04 	ldr.w	pc, [sp], #4
 8017058:	200001c0 	.word	0x200001c0

0801705c <__swbuf_r>:
 801705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801705e:	460e      	mov	r6, r1
 8017060:	4614      	mov	r4, r2
 8017062:	4605      	mov	r5, r0
 8017064:	b118      	cbz	r0, 801706e <__swbuf_r+0x12>
 8017066:	6a03      	ldr	r3, [r0, #32]
 8017068:	b90b      	cbnz	r3, 801706e <__swbuf_r+0x12>
 801706a:	f7ff fea5 	bl	8016db8 <__sinit>
 801706e:	69a3      	ldr	r3, [r4, #24]
 8017070:	60a3      	str	r3, [r4, #8]
 8017072:	89a3      	ldrh	r3, [r4, #12]
 8017074:	071a      	lsls	r2, r3, #28
 8017076:	d501      	bpl.n	801707c <__swbuf_r+0x20>
 8017078:	6923      	ldr	r3, [r4, #16]
 801707a:	b943      	cbnz	r3, 801708e <__swbuf_r+0x32>
 801707c:	4621      	mov	r1, r4
 801707e:	4628      	mov	r0, r5
 8017080:	f000 f82a 	bl	80170d8 <__swsetup_r>
 8017084:	b118      	cbz	r0, 801708e <__swbuf_r+0x32>
 8017086:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801708a:	4638      	mov	r0, r7
 801708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801708e:	6823      	ldr	r3, [r4, #0]
 8017090:	6922      	ldr	r2, [r4, #16]
 8017092:	1a98      	subs	r0, r3, r2
 8017094:	6963      	ldr	r3, [r4, #20]
 8017096:	b2f6      	uxtb	r6, r6
 8017098:	4283      	cmp	r3, r0
 801709a:	4637      	mov	r7, r6
 801709c:	dc05      	bgt.n	80170aa <__swbuf_r+0x4e>
 801709e:	4621      	mov	r1, r4
 80170a0:	4628      	mov	r0, r5
 80170a2:	f000 fe6f 	bl	8017d84 <_fflush_r>
 80170a6:	2800      	cmp	r0, #0
 80170a8:	d1ed      	bne.n	8017086 <__swbuf_r+0x2a>
 80170aa:	68a3      	ldr	r3, [r4, #8]
 80170ac:	3b01      	subs	r3, #1
 80170ae:	60a3      	str	r3, [r4, #8]
 80170b0:	6823      	ldr	r3, [r4, #0]
 80170b2:	1c5a      	adds	r2, r3, #1
 80170b4:	6022      	str	r2, [r4, #0]
 80170b6:	701e      	strb	r6, [r3, #0]
 80170b8:	6962      	ldr	r2, [r4, #20]
 80170ba:	1c43      	adds	r3, r0, #1
 80170bc:	429a      	cmp	r2, r3
 80170be:	d004      	beq.n	80170ca <__swbuf_r+0x6e>
 80170c0:	89a3      	ldrh	r3, [r4, #12]
 80170c2:	07db      	lsls	r3, r3, #31
 80170c4:	d5e1      	bpl.n	801708a <__swbuf_r+0x2e>
 80170c6:	2e0a      	cmp	r6, #10
 80170c8:	d1df      	bne.n	801708a <__swbuf_r+0x2e>
 80170ca:	4621      	mov	r1, r4
 80170cc:	4628      	mov	r0, r5
 80170ce:	f000 fe59 	bl	8017d84 <_fflush_r>
 80170d2:	2800      	cmp	r0, #0
 80170d4:	d0d9      	beq.n	801708a <__swbuf_r+0x2e>
 80170d6:	e7d6      	b.n	8017086 <__swbuf_r+0x2a>

080170d8 <__swsetup_r>:
 80170d8:	b538      	push	{r3, r4, r5, lr}
 80170da:	4b29      	ldr	r3, [pc, #164]	@ (8017180 <__swsetup_r+0xa8>)
 80170dc:	4605      	mov	r5, r0
 80170de:	6818      	ldr	r0, [r3, #0]
 80170e0:	460c      	mov	r4, r1
 80170e2:	b118      	cbz	r0, 80170ec <__swsetup_r+0x14>
 80170e4:	6a03      	ldr	r3, [r0, #32]
 80170e6:	b90b      	cbnz	r3, 80170ec <__swsetup_r+0x14>
 80170e8:	f7ff fe66 	bl	8016db8 <__sinit>
 80170ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170f0:	0719      	lsls	r1, r3, #28
 80170f2:	d422      	bmi.n	801713a <__swsetup_r+0x62>
 80170f4:	06da      	lsls	r2, r3, #27
 80170f6:	d407      	bmi.n	8017108 <__swsetup_r+0x30>
 80170f8:	2209      	movs	r2, #9
 80170fa:	602a      	str	r2, [r5, #0]
 80170fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017100:	81a3      	strh	r3, [r4, #12]
 8017102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017106:	e033      	b.n	8017170 <__swsetup_r+0x98>
 8017108:	0758      	lsls	r0, r3, #29
 801710a:	d512      	bpl.n	8017132 <__swsetup_r+0x5a>
 801710c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801710e:	b141      	cbz	r1, 8017122 <__swsetup_r+0x4a>
 8017110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017114:	4299      	cmp	r1, r3
 8017116:	d002      	beq.n	801711e <__swsetup_r+0x46>
 8017118:	4628      	mov	r0, r5
 801711a:	f000 f935 	bl	8017388 <_free_r>
 801711e:	2300      	movs	r3, #0
 8017120:	6363      	str	r3, [r4, #52]	@ 0x34
 8017122:	89a3      	ldrh	r3, [r4, #12]
 8017124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017128:	81a3      	strh	r3, [r4, #12]
 801712a:	2300      	movs	r3, #0
 801712c:	6063      	str	r3, [r4, #4]
 801712e:	6923      	ldr	r3, [r4, #16]
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	89a3      	ldrh	r3, [r4, #12]
 8017134:	f043 0308 	orr.w	r3, r3, #8
 8017138:	81a3      	strh	r3, [r4, #12]
 801713a:	6923      	ldr	r3, [r4, #16]
 801713c:	b94b      	cbnz	r3, 8017152 <__swsetup_r+0x7a>
 801713e:	89a3      	ldrh	r3, [r4, #12]
 8017140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017148:	d003      	beq.n	8017152 <__swsetup_r+0x7a>
 801714a:	4621      	mov	r1, r4
 801714c:	4628      	mov	r0, r5
 801714e:	f000 fe79 	bl	8017e44 <__smakebuf_r>
 8017152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017156:	f013 0201 	ands.w	r2, r3, #1
 801715a:	d00a      	beq.n	8017172 <__swsetup_r+0x9a>
 801715c:	2200      	movs	r2, #0
 801715e:	60a2      	str	r2, [r4, #8]
 8017160:	6962      	ldr	r2, [r4, #20]
 8017162:	4252      	negs	r2, r2
 8017164:	61a2      	str	r2, [r4, #24]
 8017166:	6922      	ldr	r2, [r4, #16]
 8017168:	b942      	cbnz	r2, 801717c <__swsetup_r+0xa4>
 801716a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801716e:	d1c5      	bne.n	80170fc <__swsetup_r+0x24>
 8017170:	bd38      	pop	{r3, r4, r5, pc}
 8017172:	0799      	lsls	r1, r3, #30
 8017174:	bf58      	it	pl
 8017176:	6962      	ldrpl	r2, [r4, #20]
 8017178:	60a2      	str	r2, [r4, #8]
 801717a:	e7f4      	b.n	8017166 <__swsetup_r+0x8e>
 801717c:	2000      	movs	r0, #0
 801717e:	e7f7      	b.n	8017170 <__swsetup_r+0x98>
 8017180:	200001c0 	.word	0x200001c0

08017184 <memset>:
 8017184:	4402      	add	r2, r0
 8017186:	4603      	mov	r3, r0
 8017188:	4293      	cmp	r3, r2
 801718a:	d100      	bne.n	801718e <memset+0xa>
 801718c:	4770      	bx	lr
 801718e:	f803 1b01 	strb.w	r1, [r3], #1
 8017192:	e7f9      	b.n	8017188 <memset+0x4>

08017194 <strchr>:
 8017194:	b2c9      	uxtb	r1, r1
 8017196:	4603      	mov	r3, r0
 8017198:	4618      	mov	r0, r3
 801719a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801719e:	b112      	cbz	r2, 80171a6 <strchr+0x12>
 80171a0:	428a      	cmp	r2, r1
 80171a2:	d1f9      	bne.n	8017198 <strchr+0x4>
 80171a4:	4770      	bx	lr
 80171a6:	2900      	cmp	r1, #0
 80171a8:	bf18      	it	ne
 80171aa:	2000      	movne	r0, #0
 80171ac:	4770      	bx	lr

080171ae <strncmp>:
 80171ae:	b510      	push	{r4, lr}
 80171b0:	b16a      	cbz	r2, 80171ce <strncmp+0x20>
 80171b2:	3901      	subs	r1, #1
 80171b4:	1884      	adds	r4, r0, r2
 80171b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80171be:	429a      	cmp	r2, r3
 80171c0:	d103      	bne.n	80171ca <strncmp+0x1c>
 80171c2:	42a0      	cmp	r0, r4
 80171c4:	d001      	beq.n	80171ca <strncmp+0x1c>
 80171c6:	2a00      	cmp	r2, #0
 80171c8:	d1f5      	bne.n	80171b6 <strncmp+0x8>
 80171ca:	1ad0      	subs	r0, r2, r3
 80171cc:	bd10      	pop	{r4, pc}
 80171ce:	4610      	mov	r0, r2
 80171d0:	e7fc      	b.n	80171cc <strncmp+0x1e>

080171d2 <strstr>:
 80171d2:	780a      	ldrb	r2, [r1, #0]
 80171d4:	b570      	push	{r4, r5, r6, lr}
 80171d6:	b96a      	cbnz	r2, 80171f4 <strstr+0x22>
 80171d8:	bd70      	pop	{r4, r5, r6, pc}
 80171da:	429a      	cmp	r2, r3
 80171dc:	d109      	bne.n	80171f2 <strstr+0x20>
 80171de:	460c      	mov	r4, r1
 80171e0:	4605      	mov	r5, r0
 80171e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d0f6      	beq.n	80171d8 <strstr+0x6>
 80171ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80171ee:	429e      	cmp	r6, r3
 80171f0:	d0f7      	beq.n	80171e2 <strstr+0x10>
 80171f2:	3001      	adds	r0, #1
 80171f4:	7803      	ldrb	r3, [r0, #0]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d1ef      	bne.n	80171da <strstr+0x8>
 80171fa:	4618      	mov	r0, r3
 80171fc:	e7ec      	b.n	80171d8 <strstr+0x6>
	...

08017200 <_close_r>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	4d06      	ldr	r5, [pc, #24]	@ (801721c <_close_r+0x1c>)
 8017204:	2300      	movs	r3, #0
 8017206:	4604      	mov	r4, r0
 8017208:	4608      	mov	r0, r1
 801720a:	602b      	str	r3, [r5, #0]
 801720c:	f7ea fa68 	bl	80016e0 <_close>
 8017210:	1c43      	adds	r3, r0, #1
 8017212:	d102      	bne.n	801721a <_close_r+0x1a>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	b103      	cbz	r3, 801721a <_close_r+0x1a>
 8017218:	6023      	str	r3, [r4, #0]
 801721a:	bd38      	pop	{r3, r4, r5, pc}
 801721c:	200126f0 	.word	0x200126f0

08017220 <_lseek_r>:
 8017220:	b538      	push	{r3, r4, r5, lr}
 8017222:	4d07      	ldr	r5, [pc, #28]	@ (8017240 <_lseek_r+0x20>)
 8017224:	4604      	mov	r4, r0
 8017226:	4608      	mov	r0, r1
 8017228:	4611      	mov	r1, r2
 801722a:	2200      	movs	r2, #0
 801722c:	602a      	str	r2, [r5, #0]
 801722e:	461a      	mov	r2, r3
 8017230:	f7ea fa7d 	bl	800172e <_lseek>
 8017234:	1c43      	adds	r3, r0, #1
 8017236:	d102      	bne.n	801723e <_lseek_r+0x1e>
 8017238:	682b      	ldr	r3, [r5, #0]
 801723a:	b103      	cbz	r3, 801723e <_lseek_r+0x1e>
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	bd38      	pop	{r3, r4, r5, pc}
 8017240:	200126f0 	.word	0x200126f0

08017244 <_read_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	4d07      	ldr	r5, [pc, #28]	@ (8017264 <_read_r+0x20>)
 8017248:	4604      	mov	r4, r0
 801724a:	4608      	mov	r0, r1
 801724c:	4611      	mov	r1, r2
 801724e:	2200      	movs	r2, #0
 8017250:	602a      	str	r2, [r5, #0]
 8017252:	461a      	mov	r2, r3
 8017254:	f7ea fa0b 	bl	800166e <_read>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_read_r+0x1e>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_read_r+0x1e>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	200126f0 	.word	0x200126f0

08017268 <_sbrk_r>:
 8017268:	b538      	push	{r3, r4, r5, lr}
 801726a:	4d06      	ldr	r5, [pc, #24]	@ (8017284 <_sbrk_r+0x1c>)
 801726c:	2300      	movs	r3, #0
 801726e:	4604      	mov	r4, r0
 8017270:	4608      	mov	r0, r1
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	f7ea fa68 	bl	8001748 <_sbrk>
 8017278:	1c43      	adds	r3, r0, #1
 801727a:	d102      	bne.n	8017282 <_sbrk_r+0x1a>
 801727c:	682b      	ldr	r3, [r5, #0]
 801727e:	b103      	cbz	r3, 8017282 <_sbrk_r+0x1a>
 8017280:	6023      	str	r3, [r4, #0]
 8017282:	bd38      	pop	{r3, r4, r5, pc}
 8017284:	200126f0 	.word	0x200126f0

08017288 <_write_r>:
 8017288:	b538      	push	{r3, r4, r5, lr}
 801728a:	4d07      	ldr	r5, [pc, #28]	@ (80172a8 <_write_r+0x20>)
 801728c:	4604      	mov	r4, r0
 801728e:	4608      	mov	r0, r1
 8017290:	4611      	mov	r1, r2
 8017292:	2200      	movs	r2, #0
 8017294:	602a      	str	r2, [r5, #0]
 8017296:	461a      	mov	r2, r3
 8017298:	f7ea fa06 	bl	80016a8 <_write>
 801729c:	1c43      	adds	r3, r0, #1
 801729e:	d102      	bne.n	80172a6 <_write_r+0x1e>
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	b103      	cbz	r3, 80172a6 <_write_r+0x1e>
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	bd38      	pop	{r3, r4, r5, pc}
 80172a8:	200126f0 	.word	0x200126f0

080172ac <__errno>:
 80172ac:	4b01      	ldr	r3, [pc, #4]	@ (80172b4 <__errno+0x8>)
 80172ae:	6818      	ldr	r0, [r3, #0]
 80172b0:	4770      	bx	lr
 80172b2:	bf00      	nop
 80172b4:	200001c0 	.word	0x200001c0

080172b8 <__libc_init_array>:
 80172b8:	b570      	push	{r4, r5, r6, lr}
 80172ba:	4d0d      	ldr	r5, [pc, #52]	@ (80172f0 <__libc_init_array+0x38>)
 80172bc:	4c0d      	ldr	r4, [pc, #52]	@ (80172f4 <__libc_init_array+0x3c>)
 80172be:	1b64      	subs	r4, r4, r5
 80172c0:	10a4      	asrs	r4, r4, #2
 80172c2:	2600      	movs	r6, #0
 80172c4:	42a6      	cmp	r6, r4
 80172c6:	d109      	bne.n	80172dc <__libc_init_array+0x24>
 80172c8:	4d0b      	ldr	r5, [pc, #44]	@ (80172f8 <__libc_init_array+0x40>)
 80172ca:	4c0c      	ldr	r4, [pc, #48]	@ (80172fc <__libc_init_array+0x44>)
 80172cc:	f000 fe7e 	bl	8017fcc <_init>
 80172d0:	1b64      	subs	r4, r4, r5
 80172d2:	10a4      	asrs	r4, r4, #2
 80172d4:	2600      	movs	r6, #0
 80172d6:	42a6      	cmp	r6, r4
 80172d8:	d105      	bne.n	80172e6 <__libc_init_array+0x2e>
 80172da:	bd70      	pop	{r4, r5, r6, pc}
 80172dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80172e0:	4798      	blx	r3
 80172e2:	3601      	adds	r6, #1
 80172e4:	e7ee      	b.n	80172c4 <__libc_init_array+0xc>
 80172e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80172ea:	4798      	blx	r3
 80172ec:	3601      	adds	r6, #1
 80172ee:	e7f2      	b.n	80172d6 <__libc_init_array+0x1e>
 80172f0:	08018d64 	.word	0x08018d64
 80172f4:	08018d64 	.word	0x08018d64
 80172f8:	08018d64 	.word	0x08018d64
 80172fc:	08018d6c 	.word	0x08018d6c

08017300 <__retarget_lock_init_recursive>:
 8017300:	4770      	bx	lr

08017302 <__retarget_lock_acquire_recursive>:
 8017302:	4770      	bx	lr

08017304 <__retarget_lock_release_recursive>:
 8017304:	4770      	bx	lr

08017306 <strcpy>:
 8017306:	4603      	mov	r3, r0
 8017308:	f811 2b01 	ldrb.w	r2, [r1], #1
 801730c:	f803 2b01 	strb.w	r2, [r3], #1
 8017310:	2a00      	cmp	r2, #0
 8017312:	d1f9      	bne.n	8017308 <strcpy+0x2>
 8017314:	4770      	bx	lr

08017316 <memcpy>:
 8017316:	440a      	add	r2, r1
 8017318:	4291      	cmp	r1, r2
 801731a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801731e:	d100      	bne.n	8017322 <memcpy+0xc>
 8017320:	4770      	bx	lr
 8017322:	b510      	push	{r4, lr}
 8017324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017328:	f803 4f01 	strb.w	r4, [r3, #1]!
 801732c:	4291      	cmp	r1, r2
 801732e:	d1f9      	bne.n	8017324 <memcpy+0xe>
 8017330:	bd10      	pop	{r4, pc}
	...

08017334 <__assert_func>:
 8017334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017336:	4614      	mov	r4, r2
 8017338:	461a      	mov	r2, r3
 801733a:	4b09      	ldr	r3, [pc, #36]	@ (8017360 <__assert_func+0x2c>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	4605      	mov	r5, r0
 8017340:	68d8      	ldr	r0, [r3, #12]
 8017342:	b954      	cbnz	r4, 801735a <__assert_func+0x26>
 8017344:	4b07      	ldr	r3, [pc, #28]	@ (8017364 <__assert_func+0x30>)
 8017346:	461c      	mov	r4, r3
 8017348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801734c:	9100      	str	r1, [sp, #0]
 801734e:	462b      	mov	r3, r5
 8017350:	4905      	ldr	r1, [pc, #20]	@ (8017368 <__assert_func+0x34>)
 8017352:	f000 fd3f 	bl	8017dd4 <fiprintf>
 8017356:	f000 fded 	bl	8017f34 <abort>
 801735a:	4b04      	ldr	r3, [pc, #16]	@ (801736c <__assert_func+0x38>)
 801735c:	e7f4      	b.n	8017348 <__assert_func+0x14>
 801735e:	bf00      	nop
 8017360:	200001c0 	.word	0x200001c0
 8017364:	08018d27 	.word	0x08018d27
 8017368:	08018cf9 	.word	0x08018cf9
 801736c:	08018cec 	.word	0x08018cec

08017370 <__env_lock>:
 8017370:	4801      	ldr	r0, [pc, #4]	@ (8017378 <__env_lock+0x8>)
 8017372:	f7ff bfc6 	b.w	8017302 <__retarget_lock_acquire_recursive>
 8017376:	bf00      	nop
 8017378:	200126f4 	.word	0x200126f4

0801737c <__env_unlock>:
 801737c:	4801      	ldr	r0, [pc, #4]	@ (8017384 <__env_unlock+0x8>)
 801737e:	f7ff bfc1 	b.w	8017304 <__retarget_lock_release_recursive>
 8017382:	bf00      	nop
 8017384:	200126f4 	.word	0x200126f4

08017388 <_free_r>:
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	4605      	mov	r5, r0
 801738c:	2900      	cmp	r1, #0
 801738e:	d041      	beq.n	8017414 <_free_r+0x8c>
 8017390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017394:	1f0c      	subs	r4, r1, #4
 8017396:	2b00      	cmp	r3, #0
 8017398:	bfb8      	it	lt
 801739a:	18e4      	addlt	r4, r4, r3
 801739c:	f7ff fb5a 	bl	8016a54 <__malloc_lock>
 80173a0:	4a1d      	ldr	r2, [pc, #116]	@ (8017418 <_free_r+0x90>)
 80173a2:	6813      	ldr	r3, [r2, #0]
 80173a4:	b933      	cbnz	r3, 80173b4 <_free_r+0x2c>
 80173a6:	6063      	str	r3, [r4, #4]
 80173a8:	6014      	str	r4, [r2, #0]
 80173aa:	4628      	mov	r0, r5
 80173ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173b0:	f7ff bb56 	b.w	8016a60 <__malloc_unlock>
 80173b4:	42a3      	cmp	r3, r4
 80173b6:	d908      	bls.n	80173ca <_free_r+0x42>
 80173b8:	6820      	ldr	r0, [r4, #0]
 80173ba:	1821      	adds	r1, r4, r0
 80173bc:	428b      	cmp	r3, r1
 80173be:	bf01      	itttt	eq
 80173c0:	6819      	ldreq	r1, [r3, #0]
 80173c2:	685b      	ldreq	r3, [r3, #4]
 80173c4:	1809      	addeq	r1, r1, r0
 80173c6:	6021      	streq	r1, [r4, #0]
 80173c8:	e7ed      	b.n	80173a6 <_free_r+0x1e>
 80173ca:	461a      	mov	r2, r3
 80173cc:	685b      	ldr	r3, [r3, #4]
 80173ce:	b10b      	cbz	r3, 80173d4 <_free_r+0x4c>
 80173d0:	42a3      	cmp	r3, r4
 80173d2:	d9fa      	bls.n	80173ca <_free_r+0x42>
 80173d4:	6811      	ldr	r1, [r2, #0]
 80173d6:	1850      	adds	r0, r2, r1
 80173d8:	42a0      	cmp	r0, r4
 80173da:	d10b      	bne.n	80173f4 <_free_r+0x6c>
 80173dc:	6820      	ldr	r0, [r4, #0]
 80173de:	4401      	add	r1, r0
 80173e0:	1850      	adds	r0, r2, r1
 80173e2:	4283      	cmp	r3, r0
 80173e4:	6011      	str	r1, [r2, #0]
 80173e6:	d1e0      	bne.n	80173aa <_free_r+0x22>
 80173e8:	6818      	ldr	r0, [r3, #0]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	6053      	str	r3, [r2, #4]
 80173ee:	4408      	add	r0, r1
 80173f0:	6010      	str	r0, [r2, #0]
 80173f2:	e7da      	b.n	80173aa <_free_r+0x22>
 80173f4:	d902      	bls.n	80173fc <_free_r+0x74>
 80173f6:	230c      	movs	r3, #12
 80173f8:	602b      	str	r3, [r5, #0]
 80173fa:	e7d6      	b.n	80173aa <_free_r+0x22>
 80173fc:	6820      	ldr	r0, [r4, #0]
 80173fe:	1821      	adds	r1, r4, r0
 8017400:	428b      	cmp	r3, r1
 8017402:	bf04      	itt	eq
 8017404:	6819      	ldreq	r1, [r3, #0]
 8017406:	685b      	ldreq	r3, [r3, #4]
 8017408:	6063      	str	r3, [r4, #4]
 801740a:	bf04      	itt	eq
 801740c:	1809      	addeq	r1, r1, r0
 801740e:	6021      	streq	r1, [r4, #0]
 8017410:	6054      	str	r4, [r2, #4]
 8017412:	e7ca      	b.n	80173aa <_free_r+0x22>
 8017414:	bd38      	pop	{r3, r4, r5, pc}
 8017416:	bf00      	nop
 8017418:	200125b0 	.word	0x200125b0

0801741c <_malloc_usable_size_r>:
 801741c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017420:	1f18      	subs	r0, r3, #4
 8017422:	2b00      	cmp	r3, #0
 8017424:	bfbc      	itt	lt
 8017426:	580b      	ldrlt	r3, [r1, r0]
 8017428:	18c0      	addlt	r0, r0, r3
 801742a:	4770      	bx	lr

0801742c <__ssputs_r>:
 801742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017430:	688e      	ldr	r6, [r1, #8]
 8017432:	461f      	mov	r7, r3
 8017434:	42be      	cmp	r6, r7
 8017436:	680b      	ldr	r3, [r1, #0]
 8017438:	4682      	mov	sl, r0
 801743a:	460c      	mov	r4, r1
 801743c:	4690      	mov	r8, r2
 801743e:	d82d      	bhi.n	801749c <__ssputs_r+0x70>
 8017440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017448:	d026      	beq.n	8017498 <__ssputs_r+0x6c>
 801744a:	6965      	ldr	r5, [r4, #20]
 801744c:	6909      	ldr	r1, [r1, #16]
 801744e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017452:	eba3 0901 	sub.w	r9, r3, r1
 8017456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801745a:	1c7b      	adds	r3, r7, #1
 801745c:	444b      	add	r3, r9
 801745e:	106d      	asrs	r5, r5, #1
 8017460:	429d      	cmp	r5, r3
 8017462:	bf38      	it	cc
 8017464:	461d      	movcc	r5, r3
 8017466:	0553      	lsls	r3, r2, #21
 8017468:	d527      	bpl.n	80174ba <__ssputs_r+0x8e>
 801746a:	4629      	mov	r1, r5
 801746c:	f7ff fa72 	bl	8016954 <_malloc_r>
 8017470:	4606      	mov	r6, r0
 8017472:	b360      	cbz	r0, 80174ce <__ssputs_r+0xa2>
 8017474:	6921      	ldr	r1, [r4, #16]
 8017476:	464a      	mov	r2, r9
 8017478:	f7ff ff4d 	bl	8017316 <memcpy>
 801747c:	89a3      	ldrh	r3, [r4, #12]
 801747e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017486:	81a3      	strh	r3, [r4, #12]
 8017488:	6126      	str	r6, [r4, #16]
 801748a:	6165      	str	r5, [r4, #20]
 801748c:	444e      	add	r6, r9
 801748e:	eba5 0509 	sub.w	r5, r5, r9
 8017492:	6026      	str	r6, [r4, #0]
 8017494:	60a5      	str	r5, [r4, #8]
 8017496:	463e      	mov	r6, r7
 8017498:	42be      	cmp	r6, r7
 801749a:	d900      	bls.n	801749e <__ssputs_r+0x72>
 801749c:	463e      	mov	r6, r7
 801749e:	6820      	ldr	r0, [r4, #0]
 80174a0:	4632      	mov	r2, r6
 80174a2:	4641      	mov	r1, r8
 80174a4:	f000 fd0a 	bl	8017ebc <memmove>
 80174a8:	68a3      	ldr	r3, [r4, #8]
 80174aa:	1b9b      	subs	r3, r3, r6
 80174ac:	60a3      	str	r3, [r4, #8]
 80174ae:	6823      	ldr	r3, [r4, #0]
 80174b0:	4433      	add	r3, r6
 80174b2:	6023      	str	r3, [r4, #0]
 80174b4:	2000      	movs	r0, #0
 80174b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ba:	462a      	mov	r2, r5
 80174bc:	f7ff fb4a 	bl	8016b54 <_realloc_r>
 80174c0:	4606      	mov	r6, r0
 80174c2:	2800      	cmp	r0, #0
 80174c4:	d1e0      	bne.n	8017488 <__ssputs_r+0x5c>
 80174c6:	6921      	ldr	r1, [r4, #16]
 80174c8:	4650      	mov	r0, sl
 80174ca:	f7ff ff5d 	bl	8017388 <_free_r>
 80174ce:	230c      	movs	r3, #12
 80174d0:	f8ca 3000 	str.w	r3, [sl]
 80174d4:	89a3      	ldrh	r3, [r4, #12]
 80174d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80174da:	81a3      	strh	r3, [r4, #12]
 80174dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174e0:	e7e9      	b.n	80174b6 <__ssputs_r+0x8a>
	...

080174e4 <_svfiprintf_r>:
 80174e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e8:	4698      	mov	r8, r3
 80174ea:	898b      	ldrh	r3, [r1, #12]
 80174ec:	061b      	lsls	r3, r3, #24
 80174ee:	b09d      	sub	sp, #116	@ 0x74
 80174f0:	4607      	mov	r7, r0
 80174f2:	460d      	mov	r5, r1
 80174f4:	4614      	mov	r4, r2
 80174f6:	d510      	bpl.n	801751a <_svfiprintf_r+0x36>
 80174f8:	690b      	ldr	r3, [r1, #16]
 80174fa:	b973      	cbnz	r3, 801751a <_svfiprintf_r+0x36>
 80174fc:	2140      	movs	r1, #64	@ 0x40
 80174fe:	f7ff fa29 	bl	8016954 <_malloc_r>
 8017502:	6028      	str	r0, [r5, #0]
 8017504:	6128      	str	r0, [r5, #16]
 8017506:	b930      	cbnz	r0, 8017516 <_svfiprintf_r+0x32>
 8017508:	230c      	movs	r3, #12
 801750a:	603b      	str	r3, [r7, #0]
 801750c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017510:	b01d      	add	sp, #116	@ 0x74
 8017512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017516:	2340      	movs	r3, #64	@ 0x40
 8017518:	616b      	str	r3, [r5, #20]
 801751a:	2300      	movs	r3, #0
 801751c:	9309      	str	r3, [sp, #36]	@ 0x24
 801751e:	2320      	movs	r3, #32
 8017520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017524:	f8cd 800c 	str.w	r8, [sp, #12]
 8017528:	2330      	movs	r3, #48	@ 0x30
 801752a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80176c8 <_svfiprintf_r+0x1e4>
 801752e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017532:	f04f 0901 	mov.w	r9, #1
 8017536:	4623      	mov	r3, r4
 8017538:	469a      	mov	sl, r3
 801753a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801753e:	b10a      	cbz	r2, 8017544 <_svfiprintf_r+0x60>
 8017540:	2a25      	cmp	r2, #37	@ 0x25
 8017542:	d1f9      	bne.n	8017538 <_svfiprintf_r+0x54>
 8017544:	ebba 0b04 	subs.w	fp, sl, r4
 8017548:	d00b      	beq.n	8017562 <_svfiprintf_r+0x7e>
 801754a:	465b      	mov	r3, fp
 801754c:	4622      	mov	r2, r4
 801754e:	4629      	mov	r1, r5
 8017550:	4638      	mov	r0, r7
 8017552:	f7ff ff6b 	bl	801742c <__ssputs_r>
 8017556:	3001      	adds	r0, #1
 8017558:	f000 80a7 	beq.w	80176aa <_svfiprintf_r+0x1c6>
 801755c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801755e:	445a      	add	r2, fp
 8017560:	9209      	str	r2, [sp, #36]	@ 0x24
 8017562:	f89a 3000 	ldrb.w	r3, [sl]
 8017566:	2b00      	cmp	r3, #0
 8017568:	f000 809f 	beq.w	80176aa <_svfiprintf_r+0x1c6>
 801756c:	2300      	movs	r3, #0
 801756e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017576:	f10a 0a01 	add.w	sl, sl, #1
 801757a:	9304      	str	r3, [sp, #16]
 801757c:	9307      	str	r3, [sp, #28]
 801757e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017582:	931a      	str	r3, [sp, #104]	@ 0x68
 8017584:	4654      	mov	r4, sl
 8017586:	2205      	movs	r2, #5
 8017588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801758c:	484e      	ldr	r0, [pc, #312]	@ (80176c8 <_svfiprintf_r+0x1e4>)
 801758e:	f7e8 fe6f 	bl	8000270 <memchr>
 8017592:	9a04      	ldr	r2, [sp, #16]
 8017594:	b9d8      	cbnz	r0, 80175ce <_svfiprintf_r+0xea>
 8017596:	06d0      	lsls	r0, r2, #27
 8017598:	bf44      	itt	mi
 801759a:	2320      	movmi	r3, #32
 801759c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175a0:	0711      	lsls	r1, r2, #28
 80175a2:	bf44      	itt	mi
 80175a4:	232b      	movmi	r3, #43	@ 0x2b
 80175a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175aa:	f89a 3000 	ldrb.w	r3, [sl]
 80175ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80175b0:	d015      	beq.n	80175de <_svfiprintf_r+0xfa>
 80175b2:	9a07      	ldr	r2, [sp, #28]
 80175b4:	4654      	mov	r4, sl
 80175b6:	2000      	movs	r0, #0
 80175b8:	f04f 0c0a 	mov.w	ip, #10
 80175bc:	4621      	mov	r1, r4
 80175be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175c2:	3b30      	subs	r3, #48	@ 0x30
 80175c4:	2b09      	cmp	r3, #9
 80175c6:	d94b      	bls.n	8017660 <_svfiprintf_r+0x17c>
 80175c8:	b1b0      	cbz	r0, 80175f8 <_svfiprintf_r+0x114>
 80175ca:	9207      	str	r2, [sp, #28]
 80175cc:	e014      	b.n	80175f8 <_svfiprintf_r+0x114>
 80175ce:	eba0 0308 	sub.w	r3, r0, r8
 80175d2:	fa09 f303 	lsl.w	r3, r9, r3
 80175d6:	4313      	orrs	r3, r2
 80175d8:	9304      	str	r3, [sp, #16]
 80175da:	46a2      	mov	sl, r4
 80175dc:	e7d2      	b.n	8017584 <_svfiprintf_r+0xa0>
 80175de:	9b03      	ldr	r3, [sp, #12]
 80175e0:	1d19      	adds	r1, r3, #4
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	9103      	str	r1, [sp, #12]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	bfbb      	ittet	lt
 80175ea:	425b      	neglt	r3, r3
 80175ec:	f042 0202 	orrlt.w	r2, r2, #2
 80175f0:	9307      	strge	r3, [sp, #28]
 80175f2:	9307      	strlt	r3, [sp, #28]
 80175f4:	bfb8      	it	lt
 80175f6:	9204      	strlt	r2, [sp, #16]
 80175f8:	7823      	ldrb	r3, [r4, #0]
 80175fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80175fc:	d10a      	bne.n	8017614 <_svfiprintf_r+0x130>
 80175fe:	7863      	ldrb	r3, [r4, #1]
 8017600:	2b2a      	cmp	r3, #42	@ 0x2a
 8017602:	d132      	bne.n	801766a <_svfiprintf_r+0x186>
 8017604:	9b03      	ldr	r3, [sp, #12]
 8017606:	1d1a      	adds	r2, r3, #4
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	9203      	str	r2, [sp, #12]
 801760c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017610:	3402      	adds	r4, #2
 8017612:	9305      	str	r3, [sp, #20]
 8017614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80176d8 <_svfiprintf_r+0x1f4>
 8017618:	7821      	ldrb	r1, [r4, #0]
 801761a:	2203      	movs	r2, #3
 801761c:	4650      	mov	r0, sl
 801761e:	f7e8 fe27 	bl	8000270 <memchr>
 8017622:	b138      	cbz	r0, 8017634 <_svfiprintf_r+0x150>
 8017624:	9b04      	ldr	r3, [sp, #16]
 8017626:	eba0 000a 	sub.w	r0, r0, sl
 801762a:	2240      	movs	r2, #64	@ 0x40
 801762c:	4082      	lsls	r2, r0
 801762e:	4313      	orrs	r3, r2
 8017630:	3401      	adds	r4, #1
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017638:	4824      	ldr	r0, [pc, #144]	@ (80176cc <_svfiprintf_r+0x1e8>)
 801763a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801763e:	2206      	movs	r2, #6
 8017640:	f7e8 fe16 	bl	8000270 <memchr>
 8017644:	2800      	cmp	r0, #0
 8017646:	d036      	beq.n	80176b6 <_svfiprintf_r+0x1d2>
 8017648:	4b21      	ldr	r3, [pc, #132]	@ (80176d0 <_svfiprintf_r+0x1ec>)
 801764a:	bb1b      	cbnz	r3, 8017694 <_svfiprintf_r+0x1b0>
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	3307      	adds	r3, #7
 8017650:	f023 0307 	bic.w	r3, r3, #7
 8017654:	3308      	adds	r3, #8
 8017656:	9303      	str	r3, [sp, #12]
 8017658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801765a:	4433      	add	r3, r6
 801765c:	9309      	str	r3, [sp, #36]	@ 0x24
 801765e:	e76a      	b.n	8017536 <_svfiprintf_r+0x52>
 8017660:	fb0c 3202 	mla	r2, ip, r2, r3
 8017664:	460c      	mov	r4, r1
 8017666:	2001      	movs	r0, #1
 8017668:	e7a8      	b.n	80175bc <_svfiprintf_r+0xd8>
 801766a:	2300      	movs	r3, #0
 801766c:	3401      	adds	r4, #1
 801766e:	9305      	str	r3, [sp, #20]
 8017670:	4619      	mov	r1, r3
 8017672:	f04f 0c0a 	mov.w	ip, #10
 8017676:	4620      	mov	r0, r4
 8017678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801767c:	3a30      	subs	r2, #48	@ 0x30
 801767e:	2a09      	cmp	r2, #9
 8017680:	d903      	bls.n	801768a <_svfiprintf_r+0x1a6>
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0c6      	beq.n	8017614 <_svfiprintf_r+0x130>
 8017686:	9105      	str	r1, [sp, #20]
 8017688:	e7c4      	b.n	8017614 <_svfiprintf_r+0x130>
 801768a:	fb0c 2101 	mla	r1, ip, r1, r2
 801768e:	4604      	mov	r4, r0
 8017690:	2301      	movs	r3, #1
 8017692:	e7f0      	b.n	8017676 <_svfiprintf_r+0x192>
 8017694:	ab03      	add	r3, sp, #12
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	462a      	mov	r2, r5
 801769a:	4b0e      	ldr	r3, [pc, #56]	@ (80176d4 <_svfiprintf_r+0x1f0>)
 801769c:	a904      	add	r1, sp, #16
 801769e:	4638      	mov	r0, r7
 80176a0:	f3af 8000 	nop.w
 80176a4:	1c42      	adds	r2, r0, #1
 80176a6:	4606      	mov	r6, r0
 80176a8:	d1d6      	bne.n	8017658 <_svfiprintf_r+0x174>
 80176aa:	89ab      	ldrh	r3, [r5, #12]
 80176ac:	065b      	lsls	r3, r3, #25
 80176ae:	f53f af2d 	bmi.w	801750c <_svfiprintf_r+0x28>
 80176b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176b4:	e72c      	b.n	8017510 <_svfiprintf_r+0x2c>
 80176b6:	ab03      	add	r3, sp, #12
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	462a      	mov	r2, r5
 80176bc:	4b05      	ldr	r3, [pc, #20]	@ (80176d4 <_svfiprintf_r+0x1f0>)
 80176be:	a904      	add	r1, sp, #16
 80176c0:	4638      	mov	r0, r7
 80176c2:	f000 f9bb 	bl	8017a3c <_printf_i>
 80176c6:	e7ed      	b.n	80176a4 <_svfiprintf_r+0x1c0>
 80176c8:	08018d28 	.word	0x08018d28
 80176cc:	08018d32 	.word	0x08018d32
 80176d0:	00000000 	.word	0x00000000
 80176d4:	0801742d 	.word	0x0801742d
 80176d8:	08018d2e 	.word	0x08018d2e

080176dc <__sfputc_r>:
 80176dc:	6893      	ldr	r3, [r2, #8]
 80176de:	3b01      	subs	r3, #1
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	b410      	push	{r4}
 80176e4:	6093      	str	r3, [r2, #8]
 80176e6:	da08      	bge.n	80176fa <__sfputc_r+0x1e>
 80176e8:	6994      	ldr	r4, [r2, #24]
 80176ea:	42a3      	cmp	r3, r4
 80176ec:	db01      	blt.n	80176f2 <__sfputc_r+0x16>
 80176ee:	290a      	cmp	r1, #10
 80176f0:	d103      	bne.n	80176fa <__sfputc_r+0x1e>
 80176f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176f6:	f7ff bcb1 	b.w	801705c <__swbuf_r>
 80176fa:	6813      	ldr	r3, [r2, #0]
 80176fc:	1c58      	adds	r0, r3, #1
 80176fe:	6010      	str	r0, [r2, #0]
 8017700:	7019      	strb	r1, [r3, #0]
 8017702:	4608      	mov	r0, r1
 8017704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017708:	4770      	bx	lr

0801770a <__sfputs_r>:
 801770a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801770c:	4606      	mov	r6, r0
 801770e:	460f      	mov	r7, r1
 8017710:	4614      	mov	r4, r2
 8017712:	18d5      	adds	r5, r2, r3
 8017714:	42ac      	cmp	r4, r5
 8017716:	d101      	bne.n	801771c <__sfputs_r+0x12>
 8017718:	2000      	movs	r0, #0
 801771a:	e007      	b.n	801772c <__sfputs_r+0x22>
 801771c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017720:	463a      	mov	r2, r7
 8017722:	4630      	mov	r0, r6
 8017724:	f7ff ffda 	bl	80176dc <__sfputc_r>
 8017728:	1c43      	adds	r3, r0, #1
 801772a:	d1f3      	bne.n	8017714 <__sfputs_r+0xa>
 801772c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017730 <_vfiprintf_r>:
 8017730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017734:	460d      	mov	r5, r1
 8017736:	b09d      	sub	sp, #116	@ 0x74
 8017738:	4614      	mov	r4, r2
 801773a:	4698      	mov	r8, r3
 801773c:	4606      	mov	r6, r0
 801773e:	b118      	cbz	r0, 8017748 <_vfiprintf_r+0x18>
 8017740:	6a03      	ldr	r3, [r0, #32]
 8017742:	b90b      	cbnz	r3, 8017748 <_vfiprintf_r+0x18>
 8017744:	f7ff fb38 	bl	8016db8 <__sinit>
 8017748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801774a:	07d9      	lsls	r1, r3, #31
 801774c:	d405      	bmi.n	801775a <_vfiprintf_r+0x2a>
 801774e:	89ab      	ldrh	r3, [r5, #12]
 8017750:	059a      	lsls	r2, r3, #22
 8017752:	d402      	bmi.n	801775a <_vfiprintf_r+0x2a>
 8017754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017756:	f7ff fdd4 	bl	8017302 <__retarget_lock_acquire_recursive>
 801775a:	89ab      	ldrh	r3, [r5, #12]
 801775c:	071b      	lsls	r3, r3, #28
 801775e:	d501      	bpl.n	8017764 <_vfiprintf_r+0x34>
 8017760:	692b      	ldr	r3, [r5, #16]
 8017762:	b99b      	cbnz	r3, 801778c <_vfiprintf_r+0x5c>
 8017764:	4629      	mov	r1, r5
 8017766:	4630      	mov	r0, r6
 8017768:	f7ff fcb6 	bl	80170d8 <__swsetup_r>
 801776c:	b170      	cbz	r0, 801778c <_vfiprintf_r+0x5c>
 801776e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017770:	07dc      	lsls	r4, r3, #31
 8017772:	d504      	bpl.n	801777e <_vfiprintf_r+0x4e>
 8017774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017778:	b01d      	add	sp, #116	@ 0x74
 801777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777e:	89ab      	ldrh	r3, [r5, #12]
 8017780:	0598      	lsls	r0, r3, #22
 8017782:	d4f7      	bmi.n	8017774 <_vfiprintf_r+0x44>
 8017784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017786:	f7ff fdbd 	bl	8017304 <__retarget_lock_release_recursive>
 801778a:	e7f3      	b.n	8017774 <_vfiprintf_r+0x44>
 801778c:	2300      	movs	r3, #0
 801778e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017790:	2320      	movs	r3, #32
 8017792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017796:	f8cd 800c 	str.w	r8, [sp, #12]
 801779a:	2330      	movs	r3, #48	@ 0x30
 801779c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801794c <_vfiprintf_r+0x21c>
 80177a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80177a4:	f04f 0901 	mov.w	r9, #1
 80177a8:	4623      	mov	r3, r4
 80177aa:	469a      	mov	sl, r3
 80177ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177b0:	b10a      	cbz	r2, 80177b6 <_vfiprintf_r+0x86>
 80177b2:	2a25      	cmp	r2, #37	@ 0x25
 80177b4:	d1f9      	bne.n	80177aa <_vfiprintf_r+0x7a>
 80177b6:	ebba 0b04 	subs.w	fp, sl, r4
 80177ba:	d00b      	beq.n	80177d4 <_vfiprintf_r+0xa4>
 80177bc:	465b      	mov	r3, fp
 80177be:	4622      	mov	r2, r4
 80177c0:	4629      	mov	r1, r5
 80177c2:	4630      	mov	r0, r6
 80177c4:	f7ff ffa1 	bl	801770a <__sfputs_r>
 80177c8:	3001      	adds	r0, #1
 80177ca:	f000 80a7 	beq.w	801791c <_vfiprintf_r+0x1ec>
 80177ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80177d0:	445a      	add	r2, fp
 80177d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80177d4:	f89a 3000 	ldrb.w	r3, [sl]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	f000 809f 	beq.w	801791c <_vfiprintf_r+0x1ec>
 80177de:	2300      	movs	r3, #0
 80177e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80177e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177e8:	f10a 0a01 	add.w	sl, sl, #1
 80177ec:	9304      	str	r3, [sp, #16]
 80177ee:	9307      	str	r3, [sp, #28]
 80177f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80177f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80177f6:	4654      	mov	r4, sl
 80177f8:	2205      	movs	r2, #5
 80177fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177fe:	4853      	ldr	r0, [pc, #332]	@ (801794c <_vfiprintf_r+0x21c>)
 8017800:	f7e8 fd36 	bl	8000270 <memchr>
 8017804:	9a04      	ldr	r2, [sp, #16]
 8017806:	b9d8      	cbnz	r0, 8017840 <_vfiprintf_r+0x110>
 8017808:	06d1      	lsls	r1, r2, #27
 801780a:	bf44      	itt	mi
 801780c:	2320      	movmi	r3, #32
 801780e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017812:	0713      	lsls	r3, r2, #28
 8017814:	bf44      	itt	mi
 8017816:	232b      	movmi	r3, #43	@ 0x2b
 8017818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801781c:	f89a 3000 	ldrb.w	r3, [sl]
 8017820:	2b2a      	cmp	r3, #42	@ 0x2a
 8017822:	d015      	beq.n	8017850 <_vfiprintf_r+0x120>
 8017824:	9a07      	ldr	r2, [sp, #28]
 8017826:	4654      	mov	r4, sl
 8017828:	2000      	movs	r0, #0
 801782a:	f04f 0c0a 	mov.w	ip, #10
 801782e:	4621      	mov	r1, r4
 8017830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017834:	3b30      	subs	r3, #48	@ 0x30
 8017836:	2b09      	cmp	r3, #9
 8017838:	d94b      	bls.n	80178d2 <_vfiprintf_r+0x1a2>
 801783a:	b1b0      	cbz	r0, 801786a <_vfiprintf_r+0x13a>
 801783c:	9207      	str	r2, [sp, #28]
 801783e:	e014      	b.n	801786a <_vfiprintf_r+0x13a>
 8017840:	eba0 0308 	sub.w	r3, r0, r8
 8017844:	fa09 f303 	lsl.w	r3, r9, r3
 8017848:	4313      	orrs	r3, r2
 801784a:	9304      	str	r3, [sp, #16]
 801784c:	46a2      	mov	sl, r4
 801784e:	e7d2      	b.n	80177f6 <_vfiprintf_r+0xc6>
 8017850:	9b03      	ldr	r3, [sp, #12]
 8017852:	1d19      	adds	r1, r3, #4
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	9103      	str	r1, [sp, #12]
 8017858:	2b00      	cmp	r3, #0
 801785a:	bfbb      	ittet	lt
 801785c:	425b      	neglt	r3, r3
 801785e:	f042 0202 	orrlt.w	r2, r2, #2
 8017862:	9307      	strge	r3, [sp, #28]
 8017864:	9307      	strlt	r3, [sp, #28]
 8017866:	bfb8      	it	lt
 8017868:	9204      	strlt	r2, [sp, #16]
 801786a:	7823      	ldrb	r3, [r4, #0]
 801786c:	2b2e      	cmp	r3, #46	@ 0x2e
 801786e:	d10a      	bne.n	8017886 <_vfiprintf_r+0x156>
 8017870:	7863      	ldrb	r3, [r4, #1]
 8017872:	2b2a      	cmp	r3, #42	@ 0x2a
 8017874:	d132      	bne.n	80178dc <_vfiprintf_r+0x1ac>
 8017876:	9b03      	ldr	r3, [sp, #12]
 8017878:	1d1a      	adds	r2, r3, #4
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	9203      	str	r2, [sp, #12]
 801787e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017882:	3402      	adds	r4, #2
 8017884:	9305      	str	r3, [sp, #20]
 8017886:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801795c <_vfiprintf_r+0x22c>
 801788a:	7821      	ldrb	r1, [r4, #0]
 801788c:	2203      	movs	r2, #3
 801788e:	4650      	mov	r0, sl
 8017890:	f7e8 fcee 	bl	8000270 <memchr>
 8017894:	b138      	cbz	r0, 80178a6 <_vfiprintf_r+0x176>
 8017896:	9b04      	ldr	r3, [sp, #16]
 8017898:	eba0 000a 	sub.w	r0, r0, sl
 801789c:	2240      	movs	r2, #64	@ 0x40
 801789e:	4082      	lsls	r2, r0
 80178a0:	4313      	orrs	r3, r2
 80178a2:	3401      	adds	r4, #1
 80178a4:	9304      	str	r3, [sp, #16]
 80178a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178aa:	4829      	ldr	r0, [pc, #164]	@ (8017950 <_vfiprintf_r+0x220>)
 80178ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80178b0:	2206      	movs	r2, #6
 80178b2:	f7e8 fcdd 	bl	8000270 <memchr>
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d03f      	beq.n	801793a <_vfiprintf_r+0x20a>
 80178ba:	4b26      	ldr	r3, [pc, #152]	@ (8017954 <_vfiprintf_r+0x224>)
 80178bc:	bb1b      	cbnz	r3, 8017906 <_vfiprintf_r+0x1d6>
 80178be:	9b03      	ldr	r3, [sp, #12]
 80178c0:	3307      	adds	r3, #7
 80178c2:	f023 0307 	bic.w	r3, r3, #7
 80178c6:	3308      	adds	r3, #8
 80178c8:	9303      	str	r3, [sp, #12]
 80178ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178cc:	443b      	add	r3, r7
 80178ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80178d0:	e76a      	b.n	80177a8 <_vfiprintf_r+0x78>
 80178d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80178d6:	460c      	mov	r4, r1
 80178d8:	2001      	movs	r0, #1
 80178da:	e7a8      	b.n	801782e <_vfiprintf_r+0xfe>
 80178dc:	2300      	movs	r3, #0
 80178de:	3401      	adds	r4, #1
 80178e0:	9305      	str	r3, [sp, #20]
 80178e2:	4619      	mov	r1, r3
 80178e4:	f04f 0c0a 	mov.w	ip, #10
 80178e8:	4620      	mov	r0, r4
 80178ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178ee:	3a30      	subs	r2, #48	@ 0x30
 80178f0:	2a09      	cmp	r2, #9
 80178f2:	d903      	bls.n	80178fc <_vfiprintf_r+0x1cc>
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d0c6      	beq.n	8017886 <_vfiprintf_r+0x156>
 80178f8:	9105      	str	r1, [sp, #20]
 80178fa:	e7c4      	b.n	8017886 <_vfiprintf_r+0x156>
 80178fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017900:	4604      	mov	r4, r0
 8017902:	2301      	movs	r3, #1
 8017904:	e7f0      	b.n	80178e8 <_vfiprintf_r+0x1b8>
 8017906:	ab03      	add	r3, sp, #12
 8017908:	9300      	str	r3, [sp, #0]
 801790a:	462a      	mov	r2, r5
 801790c:	4b12      	ldr	r3, [pc, #72]	@ (8017958 <_vfiprintf_r+0x228>)
 801790e:	a904      	add	r1, sp, #16
 8017910:	4630      	mov	r0, r6
 8017912:	f3af 8000 	nop.w
 8017916:	4607      	mov	r7, r0
 8017918:	1c78      	adds	r0, r7, #1
 801791a:	d1d6      	bne.n	80178ca <_vfiprintf_r+0x19a>
 801791c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801791e:	07d9      	lsls	r1, r3, #31
 8017920:	d405      	bmi.n	801792e <_vfiprintf_r+0x1fe>
 8017922:	89ab      	ldrh	r3, [r5, #12]
 8017924:	059a      	lsls	r2, r3, #22
 8017926:	d402      	bmi.n	801792e <_vfiprintf_r+0x1fe>
 8017928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801792a:	f7ff fceb 	bl	8017304 <__retarget_lock_release_recursive>
 801792e:	89ab      	ldrh	r3, [r5, #12]
 8017930:	065b      	lsls	r3, r3, #25
 8017932:	f53f af1f 	bmi.w	8017774 <_vfiprintf_r+0x44>
 8017936:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017938:	e71e      	b.n	8017778 <_vfiprintf_r+0x48>
 801793a:	ab03      	add	r3, sp, #12
 801793c:	9300      	str	r3, [sp, #0]
 801793e:	462a      	mov	r2, r5
 8017940:	4b05      	ldr	r3, [pc, #20]	@ (8017958 <_vfiprintf_r+0x228>)
 8017942:	a904      	add	r1, sp, #16
 8017944:	4630      	mov	r0, r6
 8017946:	f000 f879 	bl	8017a3c <_printf_i>
 801794a:	e7e4      	b.n	8017916 <_vfiprintf_r+0x1e6>
 801794c:	08018d28 	.word	0x08018d28
 8017950:	08018d32 	.word	0x08018d32
 8017954:	00000000 	.word	0x00000000
 8017958:	0801770b 	.word	0x0801770b
 801795c:	08018d2e 	.word	0x08018d2e

08017960 <_printf_common>:
 8017960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017964:	4616      	mov	r6, r2
 8017966:	4698      	mov	r8, r3
 8017968:	688a      	ldr	r2, [r1, #8]
 801796a:	690b      	ldr	r3, [r1, #16]
 801796c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017970:	4293      	cmp	r3, r2
 8017972:	bfb8      	it	lt
 8017974:	4613      	movlt	r3, r2
 8017976:	6033      	str	r3, [r6, #0]
 8017978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801797c:	4607      	mov	r7, r0
 801797e:	460c      	mov	r4, r1
 8017980:	b10a      	cbz	r2, 8017986 <_printf_common+0x26>
 8017982:	3301      	adds	r3, #1
 8017984:	6033      	str	r3, [r6, #0]
 8017986:	6823      	ldr	r3, [r4, #0]
 8017988:	0699      	lsls	r1, r3, #26
 801798a:	bf42      	ittt	mi
 801798c:	6833      	ldrmi	r3, [r6, #0]
 801798e:	3302      	addmi	r3, #2
 8017990:	6033      	strmi	r3, [r6, #0]
 8017992:	6825      	ldr	r5, [r4, #0]
 8017994:	f015 0506 	ands.w	r5, r5, #6
 8017998:	d106      	bne.n	80179a8 <_printf_common+0x48>
 801799a:	f104 0a19 	add.w	sl, r4, #25
 801799e:	68e3      	ldr	r3, [r4, #12]
 80179a0:	6832      	ldr	r2, [r6, #0]
 80179a2:	1a9b      	subs	r3, r3, r2
 80179a4:	42ab      	cmp	r3, r5
 80179a6:	dc26      	bgt.n	80179f6 <_printf_common+0x96>
 80179a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80179ac:	6822      	ldr	r2, [r4, #0]
 80179ae:	3b00      	subs	r3, #0
 80179b0:	bf18      	it	ne
 80179b2:	2301      	movne	r3, #1
 80179b4:	0692      	lsls	r2, r2, #26
 80179b6:	d42b      	bmi.n	8017a10 <_printf_common+0xb0>
 80179b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80179bc:	4641      	mov	r1, r8
 80179be:	4638      	mov	r0, r7
 80179c0:	47c8      	blx	r9
 80179c2:	3001      	adds	r0, #1
 80179c4:	d01e      	beq.n	8017a04 <_printf_common+0xa4>
 80179c6:	6823      	ldr	r3, [r4, #0]
 80179c8:	6922      	ldr	r2, [r4, #16]
 80179ca:	f003 0306 	and.w	r3, r3, #6
 80179ce:	2b04      	cmp	r3, #4
 80179d0:	bf02      	ittt	eq
 80179d2:	68e5      	ldreq	r5, [r4, #12]
 80179d4:	6833      	ldreq	r3, [r6, #0]
 80179d6:	1aed      	subeq	r5, r5, r3
 80179d8:	68a3      	ldr	r3, [r4, #8]
 80179da:	bf0c      	ite	eq
 80179dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179e0:	2500      	movne	r5, #0
 80179e2:	4293      	cmp	r3, r2
 80179e4:	bfc4      	itt	gt
 80179e6:	1a9b      	subgt	r3, r3, r2
 80179e8:	18ed      	addgt	r5, r5, r3
 80179ea:	2600      	movs	r6, #0
 80179ec:	341a      	adds	r4, #26
 80179ee:	42b5      	cmp	r5, r6
 80179f0:	d11a      	bne.n	8017a28 <_printf_common+0xc8>
 80179f2:	2000      	movs	r0, #0
 80179f4:	e008      	b.n	8017a08 <_printf_common+0xa8>
 80179f6:	2301      	movs	r3, #1
 80179f8:	4652      	mov	r2, sl
 80179fa:	4641      	mov	r1, r8
 80179fc:	4638      	mov	r0, r7
 80179fe:	47c8      	blx	r9
 8017a00:	3001      	adds	r0, #1
 8017a02:	d103      	bne.n	8017a0c <_printf_common+0xac>
 8017a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a0c:	3501      	adds	r5, #1
 8017a0e:	e7c6      	b.n	801799e <_printf_common+0x3e>
 8017a10:	18e1      	adds	r1, r4, r3
 8017a12:	1c5a      	adds	r2, r3, #1
 8017a14:	2030      	movs	r0, #48	@ 0x30
 8017a16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a1a:	4422      	add	r2, r4
 8017a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017a20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017a24:	3302      	adds	r3, #2
 8017a26:	e7c7      	b.n	80179b8 <_printf_common+0x58>
 8017a28:	2301      	movs	r3, #1
 8017a2a:	4622      	mov	r2, r4
 8017a2c:	4641      	mov	r1, r8
 8017a2e:	4638      	mov	r0, r7
 8017a30:	47c8      	blx	r9
 8017a32:	3001      	adds	r0, #1
 8017a34:	d0e6      	beq.n	8017a04 <_printf_common+0xa4>
 8017a36:	3601      	adds	r6, #1
 8017a38:	e7d9      	b.n	80179ee <_printf_common+0x8e>
	...

08017a3c <_printf_i>:
 8017a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a40:	7e0f      	ldrb	r7, [r1, #24]
 8017a42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017a44:	2f78      	cmp	r7, #120	@ 0x78
 8017a46:	4691      	mov	r9, r2
 8017a48:	4680      	mov	r8, r0
 8017a4a:	460c      	mov	r4, r1
 8017a4c:	469a      	mov	sl, r3
 8017a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017a52:	d807      	bhi.n	8017a64 <_printf_i+0x28>
 8017a54:	2f62      	cmp	r7, #98	@ 0x62
 8017a56:	d80a      	bhi.n	8017a6e <_printf_i+0x32>
 8017a58:	2f00      	cmp	r7, #0
 8017a5a:	f000 80d2 	beq.w	8017c02 <_printf_i+0x1c6>
 8017a5e:	2f58      	cmp	r7, #88	@ 0x58
 8017a60:	f000 80b9 	beq.w	8017bd6 <_printf_i+0x19a>
 8017a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017a6c:	e03a      	b.n	8017ae4 <_printf_i+0xa8>
 8017a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017a72:	2b15      	cmp	r3, #21
 8017a74:	d8f6      	bhi.n	8017a64 <_printf_i+0x28>
 8017a76:	a101      	add	r1, pc, #4	@ (adr r1, 8017a7c <_printf_i+0x40>)
 8017a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a7c:	08017ad5 	.word	0x08017ad5
 8017a80:	08017ae9 	.word	0x08017ae9
 8017a84:	08017a65 	.word	0x08017a65
 8017a88:	08017a65 	.word	0x08017a65
 8017a8c:	08017a65 	.word	0x08017a65
 8017a90:	08017a65 	.word	0x08017a65
 8017a94:	08017ae9 	.word	0x08017ae9
 8017a98:	08017a65 	.word	0x08017a65
 8017a9c:	08017a65 	.word	0x08017a65
 8017aa0:	08017a65 	.word	0x08017a65
 8017aa4:	08017a65 	.word	0x08017a65
 8017aa8:	08017be9 	.word	0x08017be9
 8017aac:	08017b13 	.word	0x08017b13
 8017ab0:	08017ba3 	.word	0x08017ba3
 8017ab4:	08017a65 	.word	0x08017a65
 8017ab8:	08017a65 	.word	0x08017a65
 8017abc:	08017c0b 	.word	0x08017c0b
 8017ac0:	08017a65 	.word	0x08017a65
 8017ac4:	08017b13 	.word	0x08017b13
 8017ac8:	08017a65 	.word	0x08017a65
 8017acc:	08017a65 	.word	0x08017a65
 8017ad0:	08017bab 	.word	0x08017bab
 8017ad4:	6833      	ldr	r3, [r6, #0]
 8017ad6:	1d1a      	adds	r2, r3, #4
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	6032      	str	r2, [r6, #0]
 8017adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	e09d      	b.n	8017c24 <_printf_i+0x1e8>
 8017ae8:	6833      	ldr	r3, [r6, #0]
 8017aea:	6820      	ldr	r0, [r4, #0]
 8017aec:	1d19      	adds	r1, r3, #4
 8017aee:	6031      	str	r1, [r6, #0]
 8017af0:	0606      	lsls	r6, r0, #24
 8017af2:	d501      	bpl.n	8017af8 <_printf_i+0xbc>
 8017af4:	681d      	ldr	r5, [r3, #0]
 8017af6:	e003      	b.n	8017b00 <_printf_i+0xc4>
 8017af8:	0645      	lsls	r5, r0, #25
 8017afa:	d5fb      	bpl.n	8017af4 <_printf_i+0xb8>
 8017afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017b00:	2d00      	cmp	r5, #0
 8017b02:	da03      	bge.n	8017b0c <_printf_i+0xd0>
 8017b04:	232d      	movs	r3, #45	@ 0x2d
 8017b06:	426d      	negs	r5, r5
 8017b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b0c:	4859      	ldr	r0, [pc, #356]	@ (8017c74 <_printf_i+0x238>)
 8017b0e:	230a      	movs	r3, #10
 8017b10:	e011      	b.n	8017b36 <_printf_i+0xfa>
 8017b12:	6821      	ldr	r1, [r4, #0]
 8017b14:	6833      	ldr	r3, [r6, #0]
 8017b16:	0608      	lsls	r0, r1, #24
 8017b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8017b1c:	d402      	bmi.n	8017b24 <_printf_i+0xe8>
 8017b1e:	0649      	lsls	r1, r1, #25
 8017b20:	bf48      	it	mi
 8017b22:	b2ad      	uxthmi	r5, r5
 8017b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8017b26:	4853      	ldr	r0, [pc, #332]	@ (8017c74 <_printf_i+0x238>)
 8017b28:	6033      	str	r3, [r6, #0]
 8017b2a:	bf14      	ite	ne
 8017b2c:	230a      	movne	r3, #10
 8017b2e:	2308      	moveq	r3, #8
 8017b30:	2100      	movs	r1, #0
 8017b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017b36:	6866      	ldr	r6, [r4, #4]
 8017b38:	60a6      	str	r6, [r4, #8]
 8017b3a:	2e00      	cmp	r6, #0
 8017b3c:	bfa2      	ittt	ge
 8017b3e:	6821      	ldrge	r1, [r4, #0]
 8017b40:	f021 0104 	bicge.w	r1, r1, #4
 8017b44:	6021      	strge	r1, [r4, #0]
 8017b46:	b90d      	cbnz	r5, 8017b4c <_printf_i+0x110>
 8017b48:	2e00      	cmp	r6, #0
 8017b4a:	d04b      	beq.n	8017be4 <_printf_i+0x1a8>
 8017b4c:	4616      	mov	r6, r2
 8017b4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b52:	fb03 5711 	mls	r7, r3, r1, r5
 8017b56:	5dc7      	ldrb	r7, [r0, r7]
 8017b58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b5c:	462f      	mov	r7, r5
 8017b5e:	42bb      	cmp	r3, r7
 8017b60:	460d      	mov	r5, r1
 8017b62:	d9f4      	bls.n	8017b4e <_printf_i+0x112>
 8017b64:	2b08      	cmp	r3, #8
 8017b66:	d10b      	bne.n	8017b80 <_printf_i+0x144>
 8017b68:	6823      	ldr	r3, [r4, #0]
 8017b6a:	07df      	lsls	r7, r3, #31
 8017b6c:	d508      	bpl.n	8017b80 <_printf_i+0x144>
 8017b6e:	6923      	ldr	r3, [r4, #16]
 8017b70:	6861      	ldr	r1, [r4, #4]
 8017b72:	4299      	cmp	r1, r3
 8017b74:	bfde      	ittt	le
 8017b76:	2330      	movle	r3, #48	@ 0x30
 8017b78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017b80:	1b92      	subs	r2, r2, r6
 8017b82:	6122      	str	r2, [r4, #16]
 8017b84:	f8cd a000 	str.w	sl, [sp]
 8017b88:	464b      	mov	r3, r9
 8017b8a:	aa03      	add	r2, sp, #12
 8017b8c:	4621      	mov	r1, r4
 8017b8e:	4640      	mov	r0, r8
 8017b90:	f7ff fee6 	bl	8017960 <_printf_common>
 8017b94:	3001      	adds	r0, #1
 8017b96:	d14a      	bne.n	8017c2e <_printf_i+0x1f2>
 8017b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b9c:	b004      	add	sp, #16
 8017b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ba2:	6823      	ldr	r3, [r4, #0]
 8017ba4:	f043 0320 	orr.w	r3, r3, #32
 8017ba8:	6023      	str	r3, [r4, #0]
 8017baa:	4833      	ldr	r0, [pc, #204]	@ (8017c78 <_printf_i+0x23c>)
 8017bac:	2778      	movs	r7, #120	@ 0x78
 8017bae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017bb2:	6823      	ldr	r3, [r4, #0]
 8017bb4:	6831      	ldr	r1, [r6, #0]
 8017bb6:	061f      	lsls	r7, r3, #24
 8017bb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8017bbc:	d402      	bmi.n	8017bc4 <_printf_i+0x188>
 8017bbe:	065f      	lsls	r7, r3, #25
 8017bc0:	bf48      	it	mi
 8017bc2:	b2ad      	uxthmi	r5, r5
 8017bc4:	6031      	str	r1, [r6, #0]
 8017bc6:	07d9      	lsls	r1, r3, #31
 8017bc8:	bf44      	itt	mi
 8017bca:	f043 0320 	orrmi.w	r3, r3, #32
 8017bce:	6023      	strmi	r3, [r4, #0]
 8017bd0:	b11d      	cbz	r5, 8017bda <_printf_i+0x19e>
 8017bd2:	2310      	movs	r3, #16
 8017bd4:	e7ac      	b.n	8017b30 <_printf_i+0xf4>
 8017bd6:	4827      	ldr	r0, [pc, #156]	@ (8017c74 <_printf_i+0x238>)
 8017bd8:	e7e9      	b.n	8017bae <_printf_i+0x172>
 8017bda:	6823      	ldr	r3, [r4, #0]
 8017bdc:	f023 0320 	bic.w	r3, r3, #32
 8017be0:	6023      	str	r3, [r4, #0]
 8017be2:	e7f6      	b.n	8017bd2 <_printf_i+0x196>
 8017be4:	4616      	mov	r6, r2
 8017be6:	e7bd      	b.n	8017b64 <_printf_i+0x128>
 8017be8:	6833      	ldr	r3, [r6, #0]
 8017bea:	6825      	ldr	r5, [r4, #0]
 8017bec:	6961      	ldr	r1, [r4, #20]
 8017bee:	1d18      	adds	r0, r3, #4
 8017bf0:	6030      	str	r0, [r6, #0]
 8017bf2:	062e      	lsls	r6, r5, #24
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	d501      	bpl.n	8017bfc <_printf_i+0x1c0>
 8017bf8:	6019      	str	r1, [r3, #0]
 8017bfa:	e002      	b.n	8017c02 <_printf_i+0x1c6>
 8017bfc:	0668      	lsls	r0, r5, #25
 8017bfe:	d5fb      	bpl.n	8017bf8 <_printf_i+0x1bc>
 8017c00:	8019      	strh	r1, [r3, #0]
 8017c02:	2300      	movs	r3, #0
 8017c04:	6123      	str	r3, [r4, #16]
 8017c06:	4616      	mov	r6, r2
 8017c08:	e7bc      	b.n	8017b84 <_printf_i+0x148>
 8017c0a:	6833      	ldr	r3, [r6, #0]
 8017c0c:	1d1a      	adds	r2, r3, #4
 8017c0e:	6032      	str	r2, [r6, #0]
 8017c10:	681e      	ldr	r6, [r3, #0]
 8017c12:	6862      	ldr	r2, [r4, #4]
 8017c14:	2100      	movs	r1, #0
 8017c16:	4630      	mov	r0, r6
 8017c18:	f7e8 fb2a 	bl	8000270 <memchr>
 8017c1c:	b108      	cbz	r0, 8017c22 <_printf_i+0x1e6>
 8017c1e:	1b80      	subs	r0, r0, r6
 8017c20:	6060      	str	r0, [r4, #4]
 8017c22:	6863      	ldr	r3, [r4, #4]
 8017c24:	6123      	str	r3, [r4, #16]
 8017c26:	2300      	movs	r3, #0
 8017c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c2c:	e7aa      	b.n	8017b84 <_printf_i+0x148>
 8017c2e:	6923      	ldr	r3, [r4, #16]
 8017c30:	4632      	mov	r2, r6
 8017c32:	4649      	mov	r1, r9
 8017c34:	4640      	mov	r0, r8
 8017c36:	47d0      	blx	sl
 8017c38:	3001      	adds	r0, #1
 8017c3a:	d0ad      	beq.n	8017b98 <_printf_i+0x15c>
 8017c3c:	6823      	ldr	r3, [r4, #0]
 8017c3e:	079b      	lsls	r3, r3, #30
 8017c40:	d413      	bmi.n	8017c6a <_printf_i+0x22e>
 8017c42:	68e0      	ldr	r0, [r4, #12]
 8017c44:	9b03      	ldr	r3, [sp, #12]
 8017c46:	4298      	cmp	r0, r3
 8017c48:	bfb8      	it	lt
 8017c4a:	4618      	movlt	r0, r3
 8017c4c:	e7a6      	b.n	8017b9c <_printf_i+0x160>
 8017c4e:	2301      	movs	r3, #1
 8017c50:	4632      	mov	r2, r6
 8017c52:	4649      	mov	r1, r9
 8017c54:	4640      	mov	r0, r8
 8017c56:	47d0      	blx	sl
 8017c58:	3001      	adds	r0, #1
 8017c5a:	d09d      	beq.n	8017b98 <_printf_i+0x15c>
 8017c5c:	3501      	adds	r5, #1
 8017c5e:	68e3      	ldr	r3, [r4, #12]
 8017c60:	9903      	ldr	r1, [sp, #12]
 8017c62:	1a5b      	subs	r3, r3, r1
 8017c64:	42ab      	cmp	r3, r5
 8017c66:	dcf2      	bgt.n	8017c4e <_printf_i+0x212>
 8017c68:	e7eb      	b.n	8017c42 <_printf_i+0x206>
 8017c6a:	2500      	movs	r5, #0
 8017c6c:	f104 0619 	add.w	r6, r4, #25
 8017c70:	e7f5      	b.n	8017c5e <_printf_i+0x222>
 8017c72:	bf00      	nop
 8017c74:	08018d39 	.word	0x08018d39
 8017c78:	08018d4a 	.word	0x08018d4a

08017c7c <__sflush_r>:
 8017c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c84:	0716      	lsls	r6, r2, #28
 8017c86:	4605      	mov	r5, r0
 8017c88:	460c      	mov	r4, r1
 8017c8a:	d454      	bmi.n	8017d36 <__sflush_r+0xba>
 8017c8c:	684b      	ldr	r3, [r1, #4]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	dc02      	bgt.n	8017c98 <__sflush_r+0x1c>
 8017c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	dd48      	ble.n	8017d2a <__sflush_r+0xae>
 8017c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c9a:	2e00      	cmp	r6, #0
 8017c9c:	d045      	beq.n	8017d2a <__sflush_r+0xae>
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ca4:	682f      	ldr	r7, [r5, #0]
 8017ca6:	6a21      	ldr	r1, [r4, #32]
 8017ca8:	602b      	str	r3, [r5, #0]
 8017caa:	d030      	beq.n	8017d0e <__sflush_r+0x92>
 8017cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	0759      	lsls	r1, r3, #29
 8017cb2:	d505      	bpl.n	8017cc0 <__sflush_r+0x44>
 8017cb4:	6863      	ldr	r3, [r4, #4]
 8017cb6:	1ad2      	subs	r2, r2, r3
 8017cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017cba:	b10b      	cbz	r3, 8017cc0 <__sflush_r+0x44>
 8017cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017cbe:	1ad2      	subs	r2, r2, r3
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017cc4:	6a21      	ldr	r1, [r4, #32]
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	47b0      	blx	r6
 8017cca:	1c43      	adds	r3, r0, #1
 8017ccc:	89a3      	ldrh	r3, [r4, #12]
 8017cce:	d106      	bne.n	8017cde <__sflush_r+0x62>
 8017cd0:	6829      	ldr	r1, [r5, #0]
 8017cd2:	291d      	cmp	r1, #29
 8017cd4:	d82b      	bhi.n	8017d2e <__sflush_r+0xb2>
 8017cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8017d80 <__sflush_r+0x104>)
 8017cd8:	410a      	asrs	r2, r1
 8017cda:	07d6      	lsls	r6, r2, #31
 8017cdc:	d427      	bmi.n	8017d2e <__sflush_r+0xb2>
 8017cde:	2200      	movs	r2, #0
 8017ce0:	6062      	str	r2, [r4, #4]
 8017ce2:	04d9      	lsls	r1, r3, #19
 8017ce4:	6922      	ldr	r2, [r4, #16]
 8017ce6:	6022      	str	r2, [r4, #0]
 8017ce8:	d504      	bpl.n	8017cf4 <__sflush_r+0x78>
 8017cea:	1c42      	adds	r2, r0, #1
 8017cec:	d101      	bne.n	8017cf2 <__sflush_r+0x76>
 8017cee:	682b      	ldr	r3, [r5, #0]
 8017cf0:	b903      	cbnz	r3, 8017cf4 <__sflush_r+0x78>
 8017cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8017cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017cf6:	602f      	str	r7, [r5, #0]
 8017cf8:	b1b9      	cbz	r1, 8017d2a <__sflush_r+0xae>
 8017cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017cfe:	4299      	cmp	r1, r3
 8017d00:	d002      	beq.n	8017d08 <__sflush_r+0x8c>
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7ff fb40 	bl	8017388 <_free_r>
 8017d08:	2300      	movs	r3, #0
 8017d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d0c:	e00d      	b.n	8017d2a <__sflush_r+0xae>
 8017d0e:	2301      	movs	r3, #1
 8017d10:	4628      	mov	r0, r5
 8017d12:	47b0      	blx	r6
 8017d14:	4602      	mov	r2, r0
 8017d16:	1c50      	adds	r0, r2, #1
 8017d18:	d1c9      	bne.n	8017cae <__sflush_r+0x32>
 8017d1a:	682b      	ldr	r3, [r5, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d0c6      	beq.n	8017cae <__sflush_r+0x32>
 8017d20:	2b1d      	cmp	r3, #29
 8017d22:	d001      	beq.n	8017d28 <__sflush_r+0xac>
 8017d24:	2b16      	cmp	r3, #22
 8017d26:	d11e      	bne.n	8017d66 <__sflush_r+0xea>
 8017d28:	602f      	str	r7, [r5, #0]
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	e022      	b.n	8017d74 <__sflush_r+0xf8>
 8017d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d32:	b21b      	sxth	r3, r3
 8017d34:	e01b      	b.n	8017d6e <__sflush_r+0xf2>
 8017d36:	690f      	ldr	r7, [r1, #16]
 8017d38:	2f00      	cmp	r7, #0
 8017d3a:	d0f6      	beq.n	8017d2a <__sflush_r+0xae>
 8017d3c:	0793      	lsls	r3, r2, #30
 8017d3e:	680e      	ldr	r6, [r1, #0]
 8017d40:	bf08      	it	eq
 8017d42:	694b      	ldreq	r3, [r1, #20]
 8017d44:	600f      	str	r7, [r1, #0]
 8017d46:	bf18      	it	ne
 8017d48:	2300      	movne	r3, #0
 8017d4a:	eba6 0807 	sub.w	r8, r6, r7
 8017d4e:	608b      	str	r3, [r1, #8]
 8017d50:	f1b8 0f00 	cmp.w	r8, #0
 8017d54:	dde9      	ble.n	8017d2a <__sflush_r+0xae>
 8017d56:	6a21      	ldr	r1, [r4, #32]
 8017d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017d5a:	4643      	mov	r3, r8
 8017d5c:	463a      	mov	r2, r7
 8017d5e:	4628      	mov	r0, r5
 8017d60:	47b0      	blx	r6
 8017d62:	2800      	cmp	r0, #0
 8017d64:	dc08      	bgt.n	8017d78 <__sflush_r+0xfc>
 8017d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d6e:	81a3      	strh	r3, [r4, #12]
 8017d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d78:	4407      	add	r7, r0
 8017d7a:	eba8 0800 	sub.w	r8, r8, r0
 8017d7e:	e7e7      	b.n	8017d50 <__sflush_r+0xd4>
 8017d80:	dfbffffe 	.word	0xdfbffffe

08017d84 <_fflush_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	690b      	ldr	r3, [r1, #16]
 8017d88:	4605      	mov	r5, r0
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	b913      	cbnz	r3, 8017d94 <_fflush_r+0x10>
 8017d8e:	2500      	movs	r5, #0
 8017d90:	4628      	mov	r0, r5
 8017d92:	bd38      	pop	{r3, r4, r5, pc}
 8017d94:	b118      	cbz	r0, 8017d9e <_fflush_r+0x1a>
 8017d96:	6a03      	ldr	r3, [r0, #32]
 8017d98:	b90b      	cbnz	r3, 8017d9e <_fflush_r+0x1a>
 8017d9a:	f7ff f80d 	bl	8016db8 <__sinit>
 8017d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d0f3      	beq.n	8017d8e <_fflush_r+0xa>
 8017da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017da8:	07d0      	lsls	r0, r2, #31
 8017daa:	d404      	bmi.n	8017db6 <_fflush_r+0x32>
 8017dac:	0599      	lsls	r1, r3, #22
 8017dae:	d402      	bmi.n	8017db6 <_fflush_r+0x32>
 8017db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017db2:	f7ff faa6 	bl	8017302 <__retarget_lock_acquire_recursive>
 8017db6:	4628      	mov	r0, r5
 8017db8:	4621      	mov	r1, r4
 8017dba:	f7ff ff5f 	bl	8017c7c <__sflush_r>
 8017dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017dc0:	07da      	lsls	r2, r3, #31
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	d4e4      	bmi.n	8017d90 <_fflush_r+0xc>
 8017dc6:	89a3      	ldrh	r3, [r4, #12]
 8017dc8:	059b      	lsls	r3, r3, #22
 8017dca:	d4e1      	bmi.n	8017d90 <_fflush_r+0xc>
 8017dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017dce:	f7ff fa99 	bl	8017304 <__retarget_lock_release_recursive>
 8017dd2:	e7dd      	b.n	8017d90 <_fflush_r+0xc>

08017dd4 <fiprintf>:
 8017dd4:	b40e      	push	{r1, r2, r3}
 8017dd6:	b503      	push	{r0, r1, lr}
 8017dd8:	4601      	mov	r1, r0
 8017dda:	ab03      	add	r3, sp, #12
 8017ddc:	4805      	ldr	r0, [pc, #20]	@ (8017df4 <fiprintf+0x20>)
 8017dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017de2:	6800      	ldr	r0, [r0, #0]
 8017de4:	9301      	str	r3, [sp, #4]
 8017de6:	f7ff fca3 	bl	8017730 <_vfiprintf_r>
 8017dea:	b002      	add	sp, #8
 8017dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017df0:	b003      	add	sp, #12
 8017df2:	4770      	bx	lr
 8017df4:	200001c0 	.word	0x200001c0

08017df8 <__swhatbuf_r>:
 8017df8:	b570      	push	{r4, r5, r6, lr}
 8017dfa:	460c      	mov	r4, r1
 8017dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e00:	2900      	cmp	r1, #0
 8017e02:	b096      	sub	sp, #88	@ 0x58
 8017e04:	4615      	mov	r5, r2
 8017e06:	461e      	mov	r6, r3
 8017e08:	da0d      	bge.n	8017e26 <__swhatbuf_r+0x2e>
 8017e0a:	89a3      	ldrh	r3, [r4, #12]
 8017e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017e10:	f04f 0100 	mov.w	r1, #0
 8017e14:	bf14      	ite	ne
 8017e16:	2340      	movne	r3, #64	@ 0x40
 8017e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017e1c:	2000      	movs	r0, #0
 8017e1e:	6031      	str	r1, [r6, #0]
 8017e20:	602b      	str	r3, [r5, #0]
 8017e22:	b016      	add	sp, #88	@ 0x58
 8017e24:	bd70      	pop	{r4, r5, r6, pc}
 8017e26:	466a      	mov	r2, sp
 8017e28:	f000 f862 	bl	8017ef0 <_fstat_r>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	dbec      	blt.n	8017e0a <__swhatbuf_r+0x12>
 8017e30:	9901      	ldr	r1, [sp, #4]
 8017e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017e3a:	4259      	negs	r1, r3
 8017e3c:	4159      	adcs	r1, r3
 8017e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e42:	e7eb      	b.n	8017e1c <__swhatbuf_r+0x24>

08017e44 <__smakebuf_r>:
 8017e44:	898b      	ldrh	r3, [r1, #12]
 8017e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e48:	079d      	lsls	r5, r3, #30
 8017e4a:	4606      	mov	r6, r0
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	d507      	bpl.n	8017e60 <__smakebuf_r+0x1c>
 8017e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	6123      	str	r3, [r4, #16]
 8017e58:	2301      	movs	r3, #1
 8017e5a:	6163      	str	r3, [r4, #20]
 8017e5c:	b003      	add	sp, #12
 8017e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e60:	ab01      	add	r3, sp, #4
 8017e62:	466a      	mov	r2, sp
 8017e64:	f7ff ffc8 	bl	8017df8 <__swhatbuf_r>
 8017e68:	9f00      	ldr	r7, [sp, #0]
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	4630      	mov	r0, r6
 8017e70:	f7fe fd70 	bl	8016954 <_malloc_r>
 8017e74:	b948      	cbnz	r0, 8017e8a <__smakebuf_r+0x46>
 8017e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e7a:	059a      	lsls	r2, r3, #22
 8017e7c:	d4ee      	bmi.n	8017e5c <__smakebuf_r+0x18>
 8017e7e:	f023 0303 	bic.w	r3, r3, #3
 8017e82:	f043 0302 	orr.w	r3, r3, #2
 8017e86:	81a3      	strh	r3, [r4, #12]
 8017e88:	e7e2      	b.n	8017e50 <__smakebuf_r+0xc>
 8017e8a:	89a3      	ldrh	r3, [r4, #12]
 8017e8c:	6020      	str	r0, [r4, #0]
 8017e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e92:	81a3      	strh	r3, [r4, #12]
 8017e94:	9b01      	ldr	r3, [sp, #4]
 8017e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e9a:	b15b      	cbz	r3, 8017eb4 <__smakebuf_r+0x70>
 8017e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f000 f837 	bl	8017f14 <_isatty_r>
 8017ea6:	b128      	cbz	r0, 8017eb4 <__smakebuf_r+0x70>
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	f023 0303 	bic.w	r3, r3, #3
 8017eae:	f043 0301 	orr.w	r3, r3, #1
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	89a3      	ldrh	r3, [r4, #12]
 8017eb6:	431d      	orrs	r5, r3
 8017eb8:	81a5      	strh	r5, [r4, #12]
 8017eba:	e7cf      	b.n	8017e5c <__smakebuf_r+0x18>

08017ebc <memmove>:
 8017ebc:	4288      	cmp	r0, r1
 8017ebe:	b510      	push	{r4, lr}
 8017ec0:	eb01 0402 	add.w	r4, r1, r2
 8017ec4:	d902      	bls.n	8017ecc <memmove+0x10>
 8017ec6:	4284      	cmp	r4, r0
 8017ec8:	4623      	mov	r3, r4
 8017eca:	d807      	bhi.n	8017edc <memmove+0x20>
 8017ecc:	1e43      	subs	r3, r0, #1
 8017ece:	42a1      	cmp	r1, r4
 8017ed0:	d008      	beq.n	8017ee4 <memmove+0x28>
 8017ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017eda:	e7f8      	b.n	8017ece <memmove+0x12>
 8017edc:	4402      	add	r2, r0
 8017ede:	4601      	mov	r1, r0
 8017ee0:	428a      	cmp	r2, r1
 8017ee2:	d100      	bne.n	8017ee6 <memmove+0x2a>
 8017ee4:	bd10      	pop	{r4, pc}
 8017ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017eee:	e7f7      	b.n	8017ee0 <memmove+0x24>

08017ef0 <_fstat_r>:
 8017ef0:	b538      	push	{r3, r4, r5, lr}
 8017ef2:	4d07      	ldr	r5, [pc, #28]	@ (8017f10 <_fstat_r+0x20>)
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	4608      	mov	r0, r1
 8017efa:	4611      	mov	r1, r2
 8017efc:	602b      	str	r3, [r5, #0]
 8017efe:	f7e9 fbfb 	bl	80016f8 <_fstat>
 8017f02:	1c43      	adds	r3, r0, #1
 8017f04:	d102      	bne.n	8017f0c <_fstat_r+0x1c>
 8017f06:	682b      	ldr	r3, [r5, #0]
 8017f08:	b103      	cbz	r3, 8017f0c <_fstat_r+0x1c>
 8017f0a:	6023      	str	r3, [r4, #0]
 8017f0c:	bd38      	pop	{r3, r4, r5, pc}
 8017f0e:	bf00      	nop
 8017f10:	200126f0 	.word	0x200126f0

08017f14 <_isatty_r>:
 8017f14:	b538      	push	{r3, r4, r5, lr}
 8017f16:	4d06      	ldr	r5, [pc, #24]	@ (8017f30 <_isatty_r+0x1c>)
 8017f18:	2300      	movs	r3, #0
 8017f1a:	4604      	mov	r4, r0
 8017f1c:	4608      	mov	r0, r1
 8017f1e:	602b      	str	r3, [r5, #0]
 8017f20:	f7e9 fbfa 	bl	8001718 <_isatty>
 8017f24:	1c43      	adds	r3, r0, #1
 8017f26:	d102      	bne.n	8017f2e <_isatty_r+0x1a>
 8017f28:	682b      	ldr	r3, [r5, #0]
 8017f2a:	b103      	cbz	r3, 8017f2e <_isatty_r+0x1a>
 8017f2c:	6023      	str	r3, [r4, #0]
 8017f2e:	bd38      	pop	{r3, r4, r5, pc}
 8017f30:	200126f0 	.word	0x200126f0

08017f34 <abort>:
 8017f34:	b508      	push	{r3, lr}
 8017f36:	2006      	movs	r0, #6
 8017f38:	f000 f82c 	bl	8017f94 <raise>
 8017f3c:	2001      	movs	r0, #1
 8017f3e:	f7e9 fb8b 	bl	8001658 <_exit>

08017f42 <_raise_r>:
 8017f42:	291f      	cmp	r1, #31
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	4605      	mov	r5, r0
 8017f48:	460c      	mov	r4, r1
 8017f4a:	d904      	bls.n	8017f56 <_raise_r+0x14>
 8017f4c:	2316      	movs	r3, #22
 8017f4e:	6003      	str	r3, [r0, #0]
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f54:	bd38      	pop	{r3, r4, r5, pc}
 8017f56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017f58:	b112      	cbz	r2, 8017f60 <_raise_r+0x1e>
 8017f5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f5e:	b94b      	cbnz	r3, 8017f74 <_raise_r+0x32>
 8017f60:	4628      	mov	r0, r5
 8017f62:	f000 f831 	bl	8017fc8 <_getpid_r>
 8017f66:	4622      	mov	r2, r4
 8017f68:	4601      	mov	r1, r0
 8017f6a:	4628      	mov	r0, r5
 8017f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f70:	f000 b818 	b.w	8017fa4 <_kill_r>
 8017f74:	2b01      	cmp	r3, #1
 8017f76:	d00a      	beq.n	8017f8e <_raise_r+0x4c>
 8017f78:	1c59      	adds	r1, r3, #1
 8017f7a:	d103      	bne.n	8017f84 <_raise_r+0x42>
 8017f7c:	2316      	movs	r3, #22
 8017f7e:	6003      	str	r3, [r0, #0]
 8017f80:	2001      	movs	r0, #1
 8017f82:	e7e7      	b.n	8017f54 <_raise_r+0x12>
 8017f84:	2100      	movs	r1, #0
 8017f86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	4798      	blx	r3
 8017f8e:	2000      	movs	r0, #0
 8017f90:	e7e0      	b.n	8017f54 <_raise_r+0x12>
	...

08017f94 <raise>:
 8017f94:	4b02      	ldr	r3, [pc, #8]	@ (8017fa0 <raise+0xc>)
 8017f96:	4601      	mov	r1, r0
 8017f98:	6818      	ldr	r0, [r3, #0]
 8017f9a:	f7ff bfd2 	b.w	8017f42 <_raise_r>
 8017f9e:	bf00      	nop
 8017fa0:	200001c0 	.word	0x200001c0

08017fa4 <_kill_r>:
 8017fa4:	b538      	push	{r3, r4, r5, lr}
 8017fa6:	4d07      	ldr	r5, [pc, #28]	@ (8017fc4 <_kill_r+0x20>)
 8017fa8:	2300      	movs	r3, #0
 8017faa:	4604      	mov	r4, r0
 8017fac:	4608      	mov	r0, r1
 8017fae:	4611      	mov	r1, r2
 8017fb0:	602b      	str	r3, [r5, #0]
 8017fb2:	f7e9 fb41 	bl	8001638 <_kill>
 8017fb6:	1c43      	adds	r3, r0, #1
 8017fb8:	d102      	bne.n	8017fc0 <_kill_r+0x1c>
 8017fba:	682b      	ldr	r3, [r5, #0]
 8017fbc:	b103      	cbz	r3, 8017fc0 <_kill_r+0x1c>
 8017fbe:	6023      	str	r3, [r4, #0]
 8017fc0:	bd38      	pop	{r3, r4, r5, pc}
 8017fc2:	bf00      	nop
 8017fc4:	200126f0 	.word	0x200126f0

08017fc8 <_getpid_r>:
 8017fc8:	f7e9 bb2e 	b.w	8001628 <_getpid>

08017fcc <_init>:
 8017fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fce:	bf00      	nop
 8017fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fd2:	bc08      	pop	{r3}
 8017fd4:	469e      	mov	lr, r3
 8017fd6:	4770      	bx	lr

08017fd8 <_fini>:
 8017fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fda:	bf00      	nop
 8017fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fde:	bc08      	pop	{r3}
 8017fe0:	469e      	mov	lr, r3
 8017fe2:	4770      	bx	lr
