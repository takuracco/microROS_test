
uros_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e54  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  08018058  08018058  00019058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018dcc  08018dcc  0001a210  2**0
                  CONTENTS
  4 .ARM          00000008  08018dcc  08018dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018dd4  08018dd4  0001a210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018dd4  08018dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018ddc  08018ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  08018de0  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000124e8  20000210  08018ff0  0001a210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200126f8  08018ff0  0001a6f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000273b9  00000000  00000000  0001a23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d60  00000000  00000000  000415f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00047358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f4  00000000  00000000  00049150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ea5  00000000  00000000  0004a844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028782  00000000  00000000  0007b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114bb6  00000000  00000000  000a3e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b8a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a40  00000000  00000000  001b8a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001c14d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000210 	.word	0x20000210
 800021c:	00000000 	.word	0x00000000
 8000220:	0801803c 	.word	0x0801803c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000214 	.word	0x20000214
 800023c:	0801803c 	.word	0x0801803c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006ac:	f00a ffa2 	bl	800b5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006b8:	f000 f990 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 8094 	bne.w	80007f2 <pvPortMallocMicroROS+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d020      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
			{
				xWantedSize += xHeapStructSize;
 80006d0:	2208      	movs	r2, #8
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d017      	beq.n	8000712 <pvPortMallocMicroROS+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f023 0307 	bic.w	r3, r3, #7
 80006e8:	3308      	adds	r3, #8
 80006ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d00d      	beq.n	8000712 <pvPortMallocMicroROS+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fa:	b672      	cpsid	i
 80006fc:	f383 8811 	msr	BASEPRI, r3
 8000700:	f3bf 8f6f 	isb	sy
 8000704:	f3bf 8f4f 	dsb	sy
 8000708:	b662      	cpsie	i
 800070a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7fd      	b.n	800070e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d06c      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
 8000718:	4b45      	ldr	r3, [pc, #276]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d867      	bhi.n	80007f2 <pvPortMallocMicroROS+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000724:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000726:	4b43      	ldr	r3, [pc, #268]	@ (8000834 <pvPortMallocMicroROS+0x194>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800072c:	e004      	b.n	8000738 <pvPortMallocMicroROS+0x98>
				{
					pxPreviousBlock = pxBlock;
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d903      	bls.n	800074a <pvPortMallocMicroROS+0xaa>
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <pvPortMallocMicroROS+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <pvPortMallocMicroROS+0x188>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	429a      	cmp	r2, r3
 8000752:	d04e      	beq.n	80007f2 <pvPortMallocMicroROS+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	4413      	add	r3, r2
 800075c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	2308      	movs	r3, #8
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d922      	bls.n	80007bc <pvPortMallocMicroROS+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00d      	beq.n	80007a4 <pvPortMallocMicroROS+0x104>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	b672      	cpsid	i
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	b662      	cpsie	i
 800079c:	613b      	str	r3, [r7, #16]
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <pvPortMallocMicroROS+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007b6:	69b8      	ldr	r0, [r7, #24]
 80007b8:	f000 f972 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d203      	bcs.n	80007de <pvPortMallocMicroROS+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <pvPortMallocMicroROS+0x198>)
 80007dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <pvPortMallocMicroROS+0x18c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	431a      	orrs	r2, r3
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f2:	f00a ff0d 	bl	800b610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00d      	beq.n	800081c <pvPortMallocMicroROS+0x17c>
	__asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000804:	b672      	cpsid	i
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	b662      	cpsie	i
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x178>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20003e34 	.word	0x20003e34
 800082c:	20003e40 	.word	0x20003e40
 8000830:	20003e38 	.word	0x20003e38
 8000834:	20003e2c 	.word	0x20003e2c
 8000838:	20003e3c 	.word	0x20003e3c

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04e      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10d      	bne.n	8000886 <vPortFreeMicroROS+0x4a>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	b672      	cpsid	i
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	b662      	cpsie	i
 800087e:	60fb      	str	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00d      	beq.n	80008aa <vPortFreeMicroROS+0x6e>
	__asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000892:	b672      	cpsid	i
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	b662      	cpsie	i
 80008a2:	60bb      	str	r3, [r7, #8]
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <vPortFreeMicroROS+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <vPortFreeMicroROS+0xb8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f00a fe90 	bl	800b5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <vPortFreeMicroROS+0xbc>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f00a fe92 	bl	800b610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003e40 	.word	0x20003e40
 80008f8:	20003e38 	.word	0x20003e38

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20003e40 	.word	0x20003e40

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f00a fe57 	bl	800b5f4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feaa 	bl	80006a0 <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f016 fd04 	bl	8017386 <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5c 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f00a fe44 	bl	800b610 <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f00a fe2a 	bl	800b5f4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe78 	bl	80006a0 <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f00a fe20 	bl	800b610 <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	2000022c 	.word	0x2000022c
 8000a8c:	20003e2c 	.word	0x20003e2c
 8000a90:	20003e34 	.word	0x20003e34
 8000a94:	20003e3c 	.word	0x20003e3c
 8000a98:	20003e38 	.word	0x20003e38
 8000a9c:	20003e40 	.word	0x20003e40

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003e2c 	.word	0x20003e2c
 8000b50:	20003e34 	.word	0x20003e34

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f878 	bl	8001c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 f891 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f870 	bl	8001c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f889 	bl	8001ca4 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	@ (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f004 fdb2 	bl	8005720 <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20003e44 	.word	0x20003e44

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f004 fde3 	bl	80057a8 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f004 fd08 	bl	8005628 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f009 fc66 	bl	800a4f0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f009 fc33 	bl	800a4f0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	@ (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004648 	.word	0x20004648
 8000cec:	20004644 	.word	0x20004644
 8000cf0:	20003e44 	.word	0x20003e44

08000cf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <MX_FREERTOS_Init+0x18>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_FREERTOS_Init+0x1c>)
 8000cfe:	f009 fb51 	bl	800a3a4 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a03      	ldr	r2, [pc, #12]	@ (8000d14 <MX_FREERTOS_Init+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08018184 	.word	0x08018184
 8000d10:	08000d19 	.word	0x08000d19
 8000d14:	200046ac 	.word	0x200046ac

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b0b4      	sub	sp, #208	@ 0xd0
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	61f8      	str	r0, [r7, #28]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d20:	f00c f8fc 	bl	800cf1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  rmw_uros_set_custom_transport(
 8000d24:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <StartDefaultTask+0x15c>)
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	4b53      	ldr	r3, [pc, #332]	@ (8000e78 <StartDefaultTask+0x160>)
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4b53      	ldr	r3, [pc, #332]	@ (8000e7c <StartDefaultTask+0x164>)
 8000d2e:	4a54      	ldr	r2, [pc, #336]	@ (8000e80 <StartDefaultTask+0x168>)
 8000d30:	4954      	ldr	r1, [pc, #336]	@ (8000e84 <StartDefaultTask+0x16c>)
 8000d32:	2001      	movs	r0, #1
 8000d34:	f00d fcba 	bl	800e6ac <rmw_uros_set_custom_transport>
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read
  );

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000d38:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00d f9d5 	bl	800e0ec <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000d42:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <StartDefaultTask+0x170>)
 8000d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000d48:	4b50      	ldr	r3, [pc, #320]	@ (8000e8c <StartDefaultTask+0x174>)
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000d4e:	4b50      	ldr	r3, [pc, #320]	@ (8000e90 <StartDefaultTask+0x178>)
 8000d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000d54:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <StartDefaultTask+0x17c>)
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000d5a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00d f9d2 	bl	800e108 <rcutils_set_default_allocator>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <StartDefaultTask+0x60>
    printf("Error on default allocators (line %d)\n", __LINE__);
 8000d70:	21a8      	movs	r1, #168	@ 0xa8
 8000d72:	4849      	ldr	r0, [pc, #292]	@ (8000e98 <StartDefaultTask+0x180>)
 8000d74:	f016 f8c8 	bl	8016f08 <iprintf>
  }

  // ここからmicro-ROSのセットアップ
  allocator = rcl_get_default_allocator();
 8000d78:	4c48      	ldr	r4, [pc, #288]	@ (8000e9c <StartDefaultTask+0x184>)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00d f9e1 	bl	800e144 <rcutils_get_default_allocator>
 8000d82:	4625      	mov	r5, r4
 8000d84:	463c      	mov	r4, r7
 8000d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	602b      	str	r3, [r5, #0]
  node = rcl_get_zero_initialized_node();
 8000d8e:	4c44      	ldr	r4, [pc, #272]	@ (8000ea0 <StartDefaultTask+0x188>)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00c fe40 	bl	800da18 <rcl_get_zero_initialized_node>
 8000d98:	4622      	mov	r2, r4
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000da0:	e882 0003 	stmia.w	r2, {r0, r1}
  //初期化設定の作成
  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8000da4:	4b3d      	ldr	r3, [pc, #244]	@ (8000e9c <StartDefaultTask+0x184>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	483e      	ldr	r0, [pc, #248]	@ (8000ea4 <StartDefaultTask+0x18c>)
 8000dac:	f00d f8d0 	bl	800df50 <rclc_support_init>
 8000db0:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8000db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <StartDefaultTask+0xb0>
 8000dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000dc0:	21af      	movs	r1, #175	@ 0xaf
 8000dc2:	4839      	ldr	r0, [pc, #228]	@ (8000ea8 <StartDefaultTask+0x190>)
 8000dc4:	f016 f8a0 	bl	8016f08 <iprintf>
  //ノードの作成
  RCCHECK(rclc_node_init_default(&node, "f7_node", "", &support));
 8000dc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ea4 <StartDefaultTask+0x18c>)
 8000dca:	4a38      	ldr	r2, [pc, #224]	@ (8000eac <StartDefaultTask+0x194>)
 8000dcc:	4938      	ldr	r1, [pc, #224]	@ (8000eb0 <StartDefaultTask+0x198>)
 8000dce:	4834      	ldr	r0, [pc, #208]	@ (8000ea0 <StartDefaultTask+0x188>)
 8000dd0:	f00d f908 	bl	800dfe4 <rclc_node_init_default>
 8000dd4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
 8000dd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <StartDefaultTask+0xd4>
 8000de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8000de4:	21b1      	movs	r1, #177	@ 0xb1
 8000de6:	4830      	ldr	r0, [pc, #192]	@ (8000ea8 <StartDefaultTask+0x190>)
 8000de8:	f016 f88e 	bl	8016f08 <iprintf>
  //publisherの作成
  RCCHECK(rclc_publisher_init_default(
 8000dec:	f00e fb42 	bl	800f474 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b30      	ldr	r3, [pc, #192]	@ (8000eb4 <StartDefaultTask+0x19c>)
 8000df4:	492a      	ldr	r1, [pc, #168]	@ (8000ea0 <StartDefaultTask+0x188>)
 8000df6:	4830      	ldr	r0, [pc, #192]	@ (8000eb8 <StartDefaultTask+0x1a0>)
 8000df8:	f00d f936 	bl	800e068 <rclc_publisher_init_default>
 8000dfc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
 8000e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <StartDefaultTask+0xfc>
 8000e08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000e0c:	21b3      	movs	r1, #179	@ 0xb3
 8000e0e:	4826      	ldr	r0, [pc, #152]	@ (8000ea8 <StartDefaultTask+0x190>)
 8000e10:	f016 f87a 	bl	8016f08 <iprintf>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "/from_f767zi"));

  //配列データを扱うときの処理
  int i = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  rosidl_runtime_c__String__init(&msg);
 8000e1a:	4828      	ldr	r0, [pc, #160]	@ (8000ebc <StartDefaultTask+0x1a4>)
 8000e1c:	f00e fa98 	bl	800f350 <rosidl_runtime_c__String__init>
  char hello[128];
  /* Infinite loop */
  for(;;)
  {
	 i++;
 8000e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e24:	3301      	adds	r3, #1
 8000e26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	 sprintf(hello,"Hello world from f7:%d",i);
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000e32:	4923      	ldr	r1, [pc, #140]	@ (8000ec0 <StartDefaultTask+0x1a8>)
 8000e34:	4618      	mov	r0, r3
 8000e36:	f016 f8ad 	bl	8016f94 <siprintf>
	 rosidl_runtime_c__String__assignn(&msg.data, hello, sizeof(hello));
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	@ (8000ebc <StartDefaultTask+0x1a4>)
 8000e44:	f00e fae2 	bl	800f40c <rosidl_runtime_c__String__assignn>
	 RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
 8000e48:	2200      	movs	r2, #0
 8000e4a:	491c      	ldr	r1, [pc, #112]	@ (8000ebc <StartDefaultTask+0x1a4>)
 8000e4c:	481a      	ldr	r0, [pc, #104]	@ (8000eb8 <StartDefaultTask+0x1a0>)
 8000e4e:	f00d f85b 	bl	800df08 <rcl_publish>
 8000e52:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8000e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <StartDefaultTask+0x152>
 8000e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8000e62:	21c3      	movs	r1, #195	@ 0xc3
 8000e64:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <StartDefaultTask+0x1ac>)
 8000e66:	f016 f84f 	bl	8016f08 <iprintf>
	 osDelay(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e6e:	f009 fb3f 	bl	800a4f0 <osDelay>
	 i++;
 8000e72:	e7d5      	b.n	8000e20 <StartDefaultTask+0x108>
 8000e74:	08000c4d 	.word	0x08000c4d
 8000e78:	08000bed 	.word	0x08000bed
 8000e7c:	08000bcd 	.word	0x08000bcd
 8000e80:	08000ba1 	.word	0x08000ba1
 8000e84:	20007648 	.word	0x20007648
 8000e88:	080011bd 	.word	0x080011bd
 8000e8c:	08001201 	.word	0x08001201
 8000e90:	08001239 	.word	0x08001239
 8000e94:	080012a5 	.word	0x080012a5
 8000e98:	08018064 	.word	0x08018064
 8000e9c:	20004650 	.word	0x20004650
 8000ea0:	20004698 	.word	0x20004698
 8000ea4:	20004664 	.word	0x20004664
 8000ea8:	0801808c 	.word	0x0801808c
 8000eac:	080180b8 	.word	0x080180b8
 8000eb0:	080180bc 	.word	0x080180bc
 8000eb4:	080180c4 	.word	0x080180c4
 8000eb8:	2000464c 	.word	0x2000464c
 8000ebc:	200046a0 	.word	0x200046a0
 8000ec0:	080180d4 	.word	0x080180d4
 8000ec4:	080180ec 	.word	0x080180ec

08000ec8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b68      	ldr	r3, [pc, #416]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a67      	ldr	r2, [pc, #412]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b65      	ldr	r3, [pc, #404]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	4b62      	ldr	r3, [pc, #392]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a61      	ldr	r2, [pc, #388]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a5b      	ldr	r2, [pc, #364]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b59      	ldr	r3, [pc, #356]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b56      	ldr	r3, [pc, #344]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a55      	ldr	r2, [pc, #340]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b53      	ldr	r3, [pc, #332]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	4b50      	ldr	r3, [pc, #320]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a4f      	ldr	r2, [pc, #316]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f56:	4b4a      	ldr	r3, [pc, #296]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b47      	ldr	r3, [pc, #284]	@ (8001080 <MX_GPIO_Init+0x1b8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f74:	4843      	ldr	r0, [pc, #268]	@ (8001084 <MX_GPIO_Init+0x1bc>)
 8000f76:	f001 fc65 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2140      	movs	r1, #64	@ 0x40
 8000f7e:	4842      	ldr	r0, [pc, #264]	@ (8001088 <MX_GPIO_Init+0x1c0>)
 8000f80:	f001 fc60 	bl	8002844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	483c      	ldr	r0, [pc, #240]	@ (800108c <MX_GPIO_Init+0x1c4>)
 8000f9c:	f001 faa6 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fa0:	2332      	movs	r3, #50	@ 0x32
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4834      	ldr	r0, [pc, #208]	@ (800108c <MX_GPIO_Init+0x1c4>)
 8000fbc:	f001 fa96 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fc0:	2386      	movs	r3, #134	@ 0x86
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482d      	ldr	r0, [pc, #180]	@ (8001090 <MX_GPIO_Init+0x1c8>)
 8000fdc:	f001 fa86 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fe0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4822      	ldr	r0, [pc, #136]	@ (8001084 <MX_GPIO_Init+0x1bc>)
 8000ffa:	f001 fa77 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	481a      	ldr	r0, [pc, #104]	@ (8001084 <MX_GPIO_Init+0x1bc>)
 800101c:	f001 fa66 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001020:	2340      	movs	r3, #64	@ 0x40
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MX_GPIO_Init+0x1c0>)
 8001038:	f001 fa58 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480e      	ldr	r0, [pc, #56]	@ (8001088 <MX_GPIO_Init+0x1c0>)
 8001050:	f001 fa4c 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001054:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_GPIO_Init+0x1c0>)
 8001072:	f001 fa3b 	bl	80024ec <HAL_GPIO_Init>

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	@ 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400
 8001088:	40021800 	.word	0x40021800
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001098:	f000 fcdf 	bl	8001a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109c:	f000 f80e 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a0:	f7ff ff12 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a4:	f7ff fd56 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010a8:	f000 fbae 	bl	8001808 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ac:	f009 f910 	bl	800a2d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010b0:	f7ff fe20 	bl	8000cf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010b4:	f009 f940 	bl	800a338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <main+0x24>

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b094      	sub	sp, #80	@ 0x50
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2234      	movs	r2, #52	@ 0x34
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f016 f892 	bl	80171f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <SystemClock_Config+0xc8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	@ (8001184 <SystemClock_Config+0xc8>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <SystemClock_Config+0xc8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a22      	ldr	r2, [pc, #136]	@ (8001188 <SystemClock_Config+0xcc>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <SystemClock_Config+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001118:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001122:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001128:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800112c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fe22 	bl	8003d88 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800114a:	f000 f831 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800115e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001164:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2105      	movs	r1, #5
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f8b9 	bl	80042e4 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001178:	f000 f81a 	bl	80011b0 <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	@ 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119e:	f000 fc69 	bl	8001a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010000 	.word	0x40010000

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <microros_allocate+0x3c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <microros_allocate+0x3c>)
 80011d4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <microros_allocate+0x40>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <microros_allocate+0x40>)
 80011e4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fa5a 	bl	80006a0 <pvPortMallocMicroROS>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200075ec 	.word	0x200075ec
 80011fc:	200075f0 	.word	0x200075f0

08001200 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fb73 	bl	80008fc <getBlockSize>
 8001216:	4603      	mov	r3, r0
 8001218:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <microros_deallocate+0x34>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	461a      	mov	r2, r3
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <microros_deallocate+0x34>)
 8001222:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fb09 	bl	800083c <vPortFreeMicroROS>
  }
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200075f0 	.word	0x200075f0

08001238 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <microros_reallocate+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	461a      	mov	r2, r3
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <microros_reallocate+0x64>)
 8001252:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <microros_reallocate+0x68>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	4413      	add	r3, r2
 800125e:	461a      	mov	r2, r3
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <microros_reallocate+0x68>)
 8001262:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7ff fa18 	bl	80006a0 <pvPortMallocMicroROS>
 8001270:	4603      	mov	r3, r0
 8001272:	e00e      	b.n	8001292 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fb41 	bl	80008fc <getBlockSize>
 800127a:	4603      	mov	r3, r0
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <microros_reallocate+0x68>)
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	461a      	mov	r2, r3
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <microros_reallocate+0x68>)
 8001286:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff fb54 	bl	8000938 <pvPortReallocMicroROS>
 8001290:	4603      	mov	r3, r0
  }
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200075ec 	.word	0x200075ec
 80012a0:	200075f0 	.word	0x200075f0

080012a4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	4a0c      	ldr	r2, [pc, #48]	@ (80012ec <microros_zero_allocate+0x48>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	461a      	mov	r2, r3
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <microros_zero_allocate+0x48>)
 80012c2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <microros_zero_allocate+0x4c>)
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <microros_zero_allocate+0x4c>)
 80012d6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff fb59 	bl	8000992 <pvPortCallocMicroROS>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200075ec 	.word	0x200075ec
 80012f0:	200075f0 	.word	0x200075f0
 80012f4:	00000000 	.word	0x00000000

080012f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80012f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800130a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130e:	a320      	add	r3, pc, #128	@ (adr r3, 8001390 <UTILS_NanosecondsToTimespec+0x98>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7fe fffc 	bl	8000310 <__aeabi_ldivmod>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001326:	a31a      	add	r3, pc, #104	@ (adr r3, 8001390 <UTILS_NanosecondsToTimespec+0x98>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7fe fff0 	bl	8000310 <__aeabi_ldivmod>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	da20      	bge.n	800137e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a11      	ldr	r2, [pc, #68]	@ (8001388 <UTILS_NanosecondsToTimespec+0x90>)
 8001342:	fb82 1203 	smull	r1, r2, r2, r3
 8001346:	1712      	asrs	r2, r2, #28
 8001348:	17db      	asrs	r3, r3, #31
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	17c8      	asrs	r0, r1, #31
 800135a:	460c      	mov	r4, r1
 800135c:	4605      	mov	r5, r0
 800135e:	ebb2 0804 	subs.w	r8, r2, r4
 8001362:	eb63 0905 	sbc.w	r9, r3, r5
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4906      	ldr	r1, [pc, #24]	@ (800138c <UTILS_NanosecondsToTimespec+0x94>)
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	441a      	add	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]
    }
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001388:	44b82fa1 	.word	0x44b82fa1
 800138c:	3b9aca00 	.word	0x3b9aca00
 8001390:	3b9aca00 	.word	0x3b9aca00
 8001394:	00000000 	.word	0x00000000

08001398 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b08e      	sub	sp, #56	@ 0x38
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80013a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80013a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013a8:	2300      	movs	r3, #0
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a fbae 	bl	800bb20 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c6:	17da      	asrs	r2, r3, #31
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	61fa      	str	r2, [r7, #28]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	69b9      	ldr	r1, [r7, #24]
 80013d6:	000b      	movs	r3, r1
 80013d8:	2200      	movs	r2, #0
 80013da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e0:	2200      	movs	r2, #0
 80013e2:	461c      	mov	r4, r3
 80013e4:	4615      	mov	r5, r2
 80013e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013ea:	1911      	adds	r1, r2, r4
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	416b      	adcs	r3, r5
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80013fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	f04f 0400 	mov.w	r4, #0
 8001406:	f04f 0500 	mov.w	r5, #0
 800140a:	015d      	lsls	r5, r3, #5
 800140c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001410:	0154      	lsls	r4, r2, #5
 8001412:	4622      	mov	r2, r4
 8001414:	462b      	mov	r3, r5
 8001416:	ebb2 0800 	subs.w	r8, r2, r0
 800141a:	eb63 0901 	sbc.w	r9, r3, r1
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800142a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800142e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001432:	4690      	mov	r8, r2
 8001434:	4699      	mov	r9, r3
 8001436:	eb18 0a00 	adds.w	sl, r8, r0
 800143a:	eb49 0b01 	adc.w	fp, r9, r1
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800144a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800144e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001452:	ebb2 040a 	subs.w	r4, r2, sl
 8001456:	603c      	str	r4, [r7, #0]
 8001458:	eb63 030b 	sbc.w	r3, r3, fp
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001462:	4623      	mov	r3, r4
 8001464:	181b      	adds	r3, r3, r0
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	462b      	mov	r3, r5
 800146a:	eb41 0303 	adc.w	r3, r1, r3
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	6a3a      	ldr	r2, [r7, #32]
 8001472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001476:	f7ff ff3f 	bl	80012f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800147a:	2300      	movs	r3, #0
 800147c:	4618      	mov	r0, r3
 800147e:	3738      	adds	r7, #56	@ 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	210f      	movs	r1, #15
 80014c2:	f06f 0001 	mvn.w	r0, #1
 80014c6:	f000 fbd1 	bl	8001c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014e8:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <HAL_InitTick+0xd0>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	4a2e      	ldr	r2, [pc, #184]	@ (80015a8 <HAL_InitTick+0xd0>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f4:	4b2c      	ldr	r3, [pc, #176]	@ (80015a8 <HAL_InitTick+0xd0>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f910 	bl	8004730 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001510:	f003 f8fa 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8001514:	4603      	mov	r3, r0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	4a23      	ldr	r2, [pc, #140]	@ (80015ac <HAL_InitTick+0xd4>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	3b01      	subs	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_InitTick+0xd8>)
 800152a:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <HAL_InitTick+0xdc>)
 800152c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_InitTick+0xd8>)
 8001530:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001534:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001536:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_InitTick+0xd8>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_InitTick+0xd8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_InitTick+0xd8>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_InitTick+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800154e:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <HAL_InitTick+0xd8>)
 8001550:	f003 fd48 	bl	8004fe4 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800155a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11b      	bne.n	800159a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001562:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <HAL_InitTick+0xd8>)
 8001564:	f003 fda0 	bl	80050a8 <HAL_TIM_Base_Start_IT>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800156e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001572:	2b00      	cmp	r3, #0
 8001574:	d111      	bne.n	800159a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001576:	2019      	movs	r0, #25
 8001578:	f000 fb94 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d808      	bhi.n	8001594 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001582:	2200      	movs	r2, #0
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	2019      	movs	r0, #25
 8001588:	f000 fb70 	bl	8001c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_InitTick+0xe0>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e002      	b.n	800159a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800159a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	200075f4 	.word	0x200075f4
 80015b4:	40010000 	.word	0x40010000
 80015b8:	20000008 	.word	0x20000008

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <DMA1_Stream1_IRQHandler+0x10>)
 80015fa:	f000 fd01 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200076d0 	.word	0x200076d0

08001608 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <DMA1_Stream3_IRQHandler+0x10>)
 800160e:	f000 fcf7 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20007730 	.word	0x20007730

0800161c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001622:	f003 fdb9 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200075f4 	.word	0x200075f4

08001630 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <USART3_IRQHandler+0x10>)
 8001636:	f004 f949 	bl	80058cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20007648 	.word	0x20007648

08001644 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <OTG_FS_IRQHandler+0x10>)
 800164a:	f001 fa4c 	bl	8002ae6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000d5bc 	.word	0x2000d5bc

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f015 fe53 	bl	801731c <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
  }

  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
  }
  return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001738:	605a      	str	r2, [r3, #4]
  return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_isatty>:

int _isatty(int file)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f015 fdb8 	bl	801731c <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20080000 	.word	0x20080000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	20007644 	.word	0x20007644
 80017e0:	200126f8 	.word	0x200126f8

080017e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <MX_USART3_UART_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_USART3_UART_Init+0x58>)
 800184c:	f003 fe9e 	bl	800558c <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001856:	f7ff fcab 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20007648 	.word	0x20007648
 8001864:	40004800 	.word	0x40004800

08001868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0ae      	sub	sp, #184	@ 0xb8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2290      	movs	r2, #144	@ 0x90
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f015 fcb3 	bl	80171f4 <memset>
  if(uartHandle->Instance==USART3)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a56      	ldr	r2, [pc, #344]	@ (80019ec <HAL_UART_MspInit+0x184>)
 8001894:	4293      	cmp	r3, r2
 8001896:	f040 80a4 	bne.w	80019e2 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800189a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 ff73 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80018b4:	f7ff fc7c 	bl	80011b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b8:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c4:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <HAL_UART_MspInit+0x188>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001902:	2307      	movs	r3, #7
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800190c:	4619      	mov	r1, r3
 800190e:	4839      	ldr	r0, [pc, #228]	@ (80019f4 <HAL_UART_MspInit+0x18c>)
 8001910:	f000 fdec 	bl	80024ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001914:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001916:	4a39      	ldr	r2, [pc, #228]	@ (80019fc <HAL_UART_MspInit+0x194>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800191a:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800191c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001920:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001922:	4b35      	ldr	r3, [pc, #212]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192e:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001930:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001934:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001936:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001948:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800194c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001950:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001958:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800195a:	f000 f9b1 	bl	8001cc0 <HAL_DMA_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001964:	f7ff fc24 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 800196c:	675a      	str	r2, [r3, #116]	@ 0x74
 800196e:	4a22      	ldr	r2, [pc, #136]	@ (80019f8 <HAL_UART_MspInit+0x190>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001974:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 8001976:	4a23      	ldr	r2, [pc, #140]	@ (8001a04 <HAL_UART_MspInit+0x19c>)
 8001978:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 800197c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001980:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019a2:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019b6:	4812      	ldr	r0, [pc, #72]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019b8:	f000 f982 	bl	8001cc0 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80019c2:	f7ff fbf5 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_UART_MspInit+0x198>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2105      	movs	r1, #5
 80019d6:	2027      	movs	r0, #39	@ 0x27
 80019d8:	f000 f948 	bl	8001c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019dc:	2027      	movs	r0, #39	@ 0x27
 80019de:	f000 f961 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019e2:	bf00      	nop
 80019e4:	37b8      	adds	r7, #184	@ 0xb8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40004800 	.word	0x40004800
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	200076d0 	.word	0x200076d0
 80019fc:	40026028 	.word	0x40026028
 8001a00:	20007730 	.word	0x20007730
 8001a04:	40026058 	.word	0x40026058

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0c:	f7ff feea 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f015 fc77 	bl	8017328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff fb2b 	bl	8001094 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001a4c:	08018de0 	.word	0x08018de0
  ldr r2, =_sbss
 8001a50:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001a54:	200126f8 	.word	0x200126f8

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>

08001a5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5e:	2003      	movs	r0, #3
 8001a60:	f000 f8f9 	bl	8001c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a64:	200f      	movs	r0, #15
 8001a66:	f7ff fd37 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6a:	f7ff fd0d 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	20007790 	.word	0x20007790

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20007790 	.word	0x20007790

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000000c 	.word	0x2000000c

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <__NVIC_SetPriorityGrouping+0x40>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	05fa0000 	.word	0x05fa0000

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	@ (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff4c 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7e:	f7ff ff61 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f7ff ffb1 	bl	8001bf0 <NVIC_EncodePriority>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff80 	bl	8001b9c <__NVIC_SetPriority>
}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff54 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fee6 	bl	8001a9c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e099      	b.n	8001e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fecd 	bl	8001a9c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d908      	bls.n	8001d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e078      	b.n	8001e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e8      	bne.n	8001cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4b38      	ldr	r3, [pc, #224]	@ (8001e18 <HAL_DMA_Init+0x158>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	4313      	orrs	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d117      	bne.n	8001de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb15 	bl	80023f4 <DMA_CheckFifoParam>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dde:	2301      	movs	r3, #1
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 facc 	bl	8002388 <DMA_CalcBaseAndBitshift>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	223f      	movs	r2, #63	@ 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	e010803f 	.word	0xe010803f

08001e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Start_IT+0x26>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e048      	b.n	8001ed4 <HAL_DMA_Start_IT+0xb8>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d137      	bne.n	8001ec6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fa5e 	bl	800232c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	223f      	movs	r2, #63	@ 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0216 	orr.w	r2, r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e9a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e005      	b.n	8001ed2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff fdd7 	bl	8001a9c <HAL_GetTick>
 8001eee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e052      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0216 	bic.w	r2, r2, #22
 8001f1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695a      	ldr	r2, [r3, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_DMA_Abort+0x62>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5e:	e013      	b.n	8001f88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f60:	f7ff fd9c 	bl	8001a9c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d90c      	bls.n	8001f88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e015      	b.n	8001fb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1e4      	bne.n	8001f60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	223f      	movs	r2, #63	@ 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d004      	beq.n	8001fda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00c      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800200c:	4b8e      	ldr	r3, [pc, #568]	@ (8002248 <HAL_DMA_IRQHandler+0x248>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a8e      	ldr	r2, [pc, #568]	@ (800224c <HAL_DMA_IRQHandler+0x24c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01a      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	2208      	movs	r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2204      	movs	r2, #4
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c4:	2204      	movs	r2, #4
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2210      	movs	r2, #16
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fa:	2210      	movs	r2, #16
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e01f      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e016      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	2220      	movs	r2, #32
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808f 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8087 	beq.w	80022a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002196:	2220      	movs	r2, #32
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d136      	bne.n	8002218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_IRQHandler+0x1da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	223f      	movs	r2, #63	@ 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07e      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
        }
        return;
 8002216:	e079      	b.n	800230c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01d      	beq.n	8002262 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d031      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e02c      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
 8002246:	bf00      	nop
 8002248:	20000004 	.word	0x20000004
 800224c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e01e      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10f      	bne.n	8002290 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0210 	bic.w	r2, r2, #16
 800227e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d032      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d307      	bcc.n	80022e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f2      	bne.n	80022cc <HAL_DMA_IRQHandler+0x2cc>
 80022e6:	e000      	b.n	80022ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
 800230a:	e000      	b.n	800230e <HAL_DMA_IRQHandler+0x30e>
        return;
 800230c:	bf00      	nop
    }
  }
}
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d108      	bne.n	800236c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800236a:	e007      	b.n	800237c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3b10      	subs	r3, #16
 8002398:	4a13      	ldr	r2, [pc, #76]	@ (80023e8 <DMA_CalcBaseAndBitshift+0x60>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <DMA_CalcBaseAndBitshift+0x64>)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d908      	bls.n	80023c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <DMA_CalcBaseAndBitshift+0x68>)
 80023be:	4013      	ands	r3, r2
 80023c0:	1d1a      	adds	r2, r3, #4
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023c6:	e006      	b.n	80023d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <DMA_CalcBaseAndBitshift+0x68>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	aaaaaaab 	.word	0xaaaaaaab
 80023ec:	080181c0 	.word	0x080181c0
 80023f0:	fffffc00 	.word	0xfffffc00

080023f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d856      	bhi.n	80024c2 <DMA_CheckFifoParam+0xce>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <DMA_CheckFifoParam+0x28>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800242d 	.word	0x0800242d
 8002420:	0800243f 	.word	0x0800243f
 8002424:	0800242d 	.word	0x0800242d
 8002428:	080024c3 	.word	0x080024c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d046      	beq.n	80024c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e043      	b.n	80024c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002446:	d140      	bne.n	80024ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e03d      	b.n	80024ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d121      	bne.n	800249c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d837      	bhi.n	80024ce <DMA_CheckFifoParam+0xda>
 800245e:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <DMA_CheckFifoParam+0x70>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247b 	.word	0x0800247b
 800246c:	08002475 	.word	0x08002475
 8002470:	0800248d 	.word	0x0800248d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e030      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d025      	beq.n	80024d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248a:	e022      	b.n	80024d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002494:	d11f      	bne.n	80024d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800249a:	e01c      	b.n	80024d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d903      	bls.n	80024aa <DMA_CheckFifoParam+0xb6>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d003      	beq.n	80024b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a8:	e018      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      break;
 80024ae:	e015      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e00b      	b.n	80024da <DMA_CheckFifoParam+0xe6>
      break;
 80024c2:	bf00      	nop
 80024c4:	e00a      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e008      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e006      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024ce:	bf00      	nop
 80024d0:	e004      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;   
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <DMA_CheckFifoParam+0xe8>
      break;
 80024da:	bf00      	nop
    }
  } 
  
  return status; 
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	@ 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	e175      	b.n	80027f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800250c:	2201      	movs	r2, #1
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8164 	bne.w	80027f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d005      	beq.n	8002542 <HAL_GPIO_Init+0x56>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d017      	beq.n	80025e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d123      	bne.n	8002634 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	69b9      	ldr	r1, [r7, #24]
 8002630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0203 	and.w	r2, r3, #3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80be 	beq.w	80027f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <HAL_GPIO_Init+0x324>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a65      	ldr	r2, [pc, #404]	@ (8002810 <HAL_GPIO_Init+0x324>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b63      	ldr	r3, [pc, #396]	@ (8002810 <HAL_GPIO_Init+0x324>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800268e:	4a61      	ldr	r2, [pc, #388]	@ (8002814 <HAL_GPIO_Init+0x328>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	@ (8002818 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d037      	beq.n	800272a <HAL_GPIO_Init+0x23e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_GPIO_Init+0x23a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <HAL_GPIO_Init+0x334>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x236>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a55      	ldr	r2, [pc, #340]	@ (8002824 <HAL_GPIO_Init+0x338>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x232>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a54      	ldr	r2, [pc, #336]	@ (8002828 <HAL_GPIO_Init+0x33c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a53      	ldr	r2, [pc, #332]	@ (800282c <HAL_GPIO_Init+0x340>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x22a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	@ (8002830 <HAL_GPIO_Init+0x344>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a51      	ldr	r2, [pc, #324]	@ (8002834 <HAL_GPIO_Init+0x348>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a50      	ldr	r2, [pc, #320]	@ (8002838 <HAL_GPIO_Init+0x34c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4f      	ldr	r2, [pc, #316]	@ (800283c <HAL_GPIO_Init+0x350>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x21a>
 8002702:	2309      	movs	r3, #9
 8002704:	e012      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002706:	230a      	movs	r3, #10
 8002708:	e010      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270a:	2308      	movs	r3, #8
 800270c:	e00e      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270e:	2307      	movs	r3, #7
 8002710:	e00c      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002712:	2306      	movs	r3, #6
 8002714:	e00a      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002716:	2305      	movs	r3, #5
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271a:	2304      	movs	r3, #4
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x240>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800273c:	4935      	ldr	r1, [pc, #212]	@ (8002814 <HAL_GPIO_Init+0x328>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a34      	ldr	r2, [pc, #208]	@ (8002840 <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b32      	ldr	r3, [pc, #200]	@ (8002840 <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a29      	ldr	r2, [pc, #164]	@ (8002840 <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279e:	4b28      	ldr	r3, [pc, #160]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ec:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f ae86 	bls.w	800250c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40021400 	.word	0x40021400
 8002830:	40021800 	.word	0x40021800
 8002834:	40021c00 	.word	0x40021c00
 8002838:	40022000 	.word	0x40022000
 800283c:	40022400 	.word	0x40022400
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
 8002850:	4613      	mov	r3, r2
 8002852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285a:	887a      	ldrh	r2, [r7, #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002860:	e003      	b.n	800286a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	619a      	str	r2, [r3, #24]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af02      	add	r7, sp, #8
 800287c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e108      	b.n	8002a9a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f00a fd2c 	bl	800d300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b6:	d102      	bne.n	80028be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fb11 	bl	8006eea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7c1a      	ldrb	r2, [r3, #16]
 80028d0:	f88d 2000 	strb.w	r2, [sp]
 80028d4:	3304      	adds	r3, #4
 80028d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d8:	f004 f9fa 	bl	8006cd0 <USB_CoreInit>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0d5      	b.n	8002a9a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fb09 	bl	8006f0c <USB_SetCurrentMode>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0c6      	b.n	8002a9a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e04a      	b.n	80029a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3315      	adds	r3, #21
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3314      	adds	r3, #20
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	b298      	uxth	r0, r3
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	332e      	adds	r3, #46	@ 0x2e
 800294e:	4602      	mov	r2, r0
 8002950:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3318      	adds	r3, #24
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	331c      	adds	r3, #28
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3320      	adds	r3, #32
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3324      	adds	r3, #36	@ 0x24
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3301      	adds	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	791b      	ldrb	r3, [r3, #4]
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3af      	bcc.n	8002912 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e044      	b.n	8002a42 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	791b      	ldrb	r3, [r3, #4]
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d3b5      	bcc.n	80029b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7c1a      	ldrb	r2, [r3, #16]
 8002a54:	f88d 2000 	strb.w	r2, [sp]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5c:	f004 faa2 	bl	8006fa4 <USB_DevInit>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e013      	b.n	8002a9a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7b1b      	ldrb	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f001 f959 	bl	8003d40 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f005 fae1 	bl	800805a <USB_DevDisconnect>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_Start+0x16>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e012      	b.n	8002ade <HAL_PCD_Start+0x3c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 f9ff 	bl	8006ec8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f005 faa2 	bl	8008018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ae6:	b590      	push	{r4, r7, lr}
 8002ae8:	b08d      	sub	sp, #52	@ 0x34
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f005 fb60 	bl	80081c2 <USB_GetMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 84b9 	bne.w	800347c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 fac4 	bl	800809c <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 84af 	beq.w	800347a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 fab1 	bl	800809c <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d107      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f002 0202 	and.w	r2, r2, #2
 8002b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f005 fa9f 	bl	800809c <USB_ReadInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d161      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0210 	bic.w	r2, r2, #16
 8002b76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	0c5b      	lsrs	r3, r3, #17
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d124      	bne.n	8002bee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d035      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	6a38      	ldr	r0, [r7, #32]
 8002bc4:	f005 f8d6 	bl	8007d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bd4:	441a      	add	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be6:	441a      	add	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	615a      	str	r2, [r3, #20]
 8002bec:	e016      	b.n	8002c1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	0c5b      	lsrs	r3, r3, #17
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d110      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c00:	2208      	movs	r2, #8
 8002c02:	4619      	mov	r1, r3
 8002c04:	6a38      	ldr	r0, [r7, #32]
 8002c06:	f005 f8b5 	bl	8007d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c16:	441a      	add	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0210 	orr.w	r2, r2, #16
 8002c2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 fa33 	bl	800809c <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c40:	f040 80a7 	bne.w	8002d92 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f005 fa38 	bl	80080c2 <USB_ReadDevAllOutEpInterrupt>
 8002c52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c54:	e099      	b.n	8002d8a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 808e 	beq.w	8002d7e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f005 fa5c 	bl	800812a <USB_ReadDevOutEPInterrupt>
 8002c72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00c      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fece 	bl	8003a34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 ffa4 	bl	8003c04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d030      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b80      	cmp	r3, #128	@ 0x80
 8002cec:	d109      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d00:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	78db      	ldrb	r3, [r3, #3]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d108      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f00a fc29 	bl	800d584 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2302      	movs	r3, #2
 8002d42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d76:	461a      	mov	r2, r3
 8002d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af62 	bne.w	8002c56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 f980 	bl	800809c <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002da6:	f040 80db 	bne.w	8002f60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 f9a1 	bl	80080f6 <USB_ReadDevAllInEpInterrupt>
 8002db4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002dba:	e0cd      	b.n	8002f58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80c2 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f005 f9c7 	bl	8008166 <USB_ReadDevInEPInterrupt>
 8002dd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d057      	beq.n	8002e94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2201      	movs	r2, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69f9      	ldr	r1, [r7, #28]
 8002e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e04:	4013      	ands	r3, r2
 8002e06:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d132      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3320      	adds	r3, #32
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4403      	add	r3, r0
 8002e42:	331c      	adds	r3, #28
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4419      	add	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4403      	add	r3, r0
 8002e56:	3320      	adds	r3, #32
 8002e58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d113      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x3a2>
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3324      	adds	r3, #36	@ 0x24
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e80:	461a      	mov	r2, r3
 8002e82:	2101      	movs	r1, #1
 8002e84:	f005 f9d0 	bl	8008228 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f00a faf3 	bl	800d47a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2308      	movs	r3, #8
 8002eae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2310      	movs	r3, #16
 8002eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2340      	movs	r3, #64	@ 0x40
 8002ee6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d023      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef4:	6a38      	ldr	r0, [r7, #32]
 8002ef6:	f004 f9b3 	bl	8007260 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	3310      	adds	r3, #16
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	78db      	ldrb	r3, [r3, #3]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f00a fb40 	bl	800d5a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f34:	461a      	mov	r2, r3
 8002f36:	2302      	movs	r3, #2
 8002f38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fce8 	bl	800391c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	3301      	adds	r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f47f af2e 	bne.w	8002dbc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f005 f899 	bl	800809c <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f74:	d122      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f00a fcba 	bl	800d918 <HAL_PCDEx_LPM_Callback>
 8002fa4:	e002      	b.n	8002fac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f00a fade 	bl	800d568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f005 f86b 	bl	800809c <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fd0:	d112      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f00a fa9a 	bl	800d51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 f84d 	bl	800809c <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003008:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800300c:	d121      	bne.n	8003052 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800301c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003024:	2b00      	cmp	r3, #0
 8003026:	d111      	bne.n	800304c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003042:	2101      	movs	r1, #1
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f00a fc67 	bl	800d918 <HAL_PCDEx_LPM_Callback>
 800304a:	e002      	b.n	8003052 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f00a fa65 	bl	800d51c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f005 f820 	bl	800809c <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	f040 80b7 	bne.w	80031d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2110      	movs	r1, #16
 8003084:	4618      	mov	r0, r3
 8003086:	f004 f8eb 	bl	8007260 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308e:	e046      	b.n	800311e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800309c:	461a      	mov	r2, r3
 800309e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b4:	0151      	lsls	r1, r2, #5
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	440a      	add	r2, r1
 80030ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d0:	461a      	mov	r2, r3
 80030d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80030f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003108:	0151      	lsls	r1, r2, #5
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	440a      	add	r2, r1
 800310e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003112:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003116:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	3301      	adds	r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	461a      	mov	r2, r3
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	4293      	cmp	r3, r2
 8003128:	d3b2      	bcc.n	8003090 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003138:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800313c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7bdb      	ldrb	r3, [r3, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003156:	f043 030b 	orr.w	r3, r3, #11
 800315a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316c:	f043 030b 	orr.w	r3, r3, #11
 8003170:	6453      	str	r3, [r2, #68]	@ 0x44
 8003172:	e015      	b.n	80031a0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003182:	4619      	mov	r1, r3
 8003184:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003188:	4313      	orrs	r3, r2
 800318a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319a:	f043 030b 	orr.w	r3, r3, #11
 800319e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f005 f830 	bl	8008228 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80031d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 ff5d 	bl	800809c <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ec:	d123      	bne.n	8003236 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 fff4 	bl	80081e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f8a8 	bl	8007352 <USB_GetDevSpeed>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681c      	ldr	r4, [r3, #0]
 800320e:	f001 fa5b 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8003212:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003218:	461a      	mov	r2, r3
 800321a:	4620      	mov	r0, r4
 800321c:	f003 fdb2 	bl	8006d84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f00a f952 	bl	800d4ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f004 ff2e 	bl	800809c <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d10a      	bne.n	8003260 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f00a f92f 	bl	800d4ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f002 0208 	and.w	r2, r2, #8
 800325e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f004 ff19 	bl	800809c <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003270:	2b80      	cmp	r3, #128	@ 0x80
 8003272:	d123      	bne.n	80032bc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	e014      	b.n	80032b0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb08 	bl	80038ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d3e4      	bcc.n	8003286 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 feeb 	bl	800809c <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d0:	d13c      	bne.n	800334c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d2:	2301      	movs	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	e02b      	b.n	8003330 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3318      	adds	r3, #24
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d115      	bne.n	800332a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	da12      	bge.n	800332a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3317      	adds	r3, #23
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fac8 	bl	80038ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	3301      	adds	r3, #1
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	4293      	cmp	r3, r2
 800333a:	d3cd      	bcc.n	80032d8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800334a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f004 fea3 	bl	800809c <USB_ReadInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003360:	d156      	bne.n	8003410 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	e045      	b.n	80033f4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d12e      	bne.n	80033ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003390:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003392:	2b00      	cmp	r3, #0
 8003394:	da2b      	bge.n	80033ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d121      	bne.n	80033ee <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ea:	6053      	str	r3, [r2, #4]
            break;
 80033ec:	e008      	b.n	8003400 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	3301      	adds	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d3b3      	bcc.n	8003368 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800340e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f004 fe41 	bl	800809c <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d10a      	bne.n	800343c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f00a f8d0 	bl	800d5cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800343a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fe2b 	bl	800809c <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d115      	bne.n	800347c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f00a f8c0 	bl	800d5e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	e000      	b.n	800347c <HAL_PCD_IRQHandler+0x996>
      return;
 800347a:	bf00      	nop
    }
  }
}
 800347c:	3734      	adds	r7, #52	@ 0x34
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}

08003482 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_PCD_SetAddress+0x1a>
 8003498:	2302      	movs	r3, #2
 800349a:	e012      	b.n	80034c2 <HAL_PCD_SetAddress+0x40>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fd8a 	bl	8007fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	4608      	mov	r0, r1
 80034d4:	4611      	mov	r1, r2
 80034d6:	461a      	mov	r2, r3
 80034d8:	4603      	mov	r3, r0
 80034da:	70fb      	strb	r3, [r7, #3]
 80034dc:	460b      	mov	r3, r1
 80034de:	803b      	strh	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da0f      	bge.n	8003510 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	3310      	adds	r3, #16
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	3304      	adds	r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
 800350e:	e00f      	b.n	8003530 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800353c:	883a      	ldrh	r2, [r7, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	78ba      	ldrb	r2, [r7, #2]
 8003546:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800355a:	78bb      	ldrb	r3, [r7, #2]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d102      	bne.n	8003566 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_PCD_EP_Open+0xaa>
 8003570:	2302      	movs	r3, #2
 8003572:	e00e      	b.n	8003592 <HAL_PCD_EP_Open+0xc8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	4618      	mov	r0, r3
 8003584:	f003 ff0a 	bl	800739c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003590:	7afb      	ldrb	r3, [r7, #11]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0f      	bge.n	80035ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3310      	adds	r3, #16
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	705a      	strb	r2, [r3, #1]
 80035cc:	e00f      	b.n	80035ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_PCD_EP_Close+0x6e>
 8003604:	2302      	movs	r3, #2
 8003606:	e00e      	b.n	8003626 <HAL_PCD_EP_Close+0x8c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 ff48 	bl	80074ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	460b      	mov	r3, r1
 800363c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	3304      	adds	r3, #4
 8003656:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003670:	7afb      	ldrb	r3, [r7, #11]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	b2da      	uxtb	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	799b      	ldrb	r3, [r3, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d102      	bne.n	800368a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	799b      	ldrb	r3, [r3, #6]
 8003692:	461a      	mov	r2, r3
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	f003 ffe5 	bl	8007664 <USB_EPStartXfer>

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	460b      	mov	r3, r1
 80036e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	f003 020f 	and.w	r2, r3, #15
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3310      	adds	r3, #16
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2201      	movs	r2, #1
 8003712:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003714:	7afb      	ldrb	r3, [r7, #11]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	b2da      	uxtb	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	799b      	ldrb	r3, [r3, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	799b      	ldrb	r3, [r3, #6]
 8003736:	461a      	mov	r2, r3
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	f003 ff93 	bl	8007664 <USB_EPStartXfer>

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	7912      	ldrb	r2, [r2, #4]
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e04f      	b.n	8003806 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da0f      	bge.n	800378e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3310      	adds	r3, #16
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	705a      	strb	r2, [r3, #1]
 800378c:	e00d      	b.n	80037aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	3304      	adds	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_PCD_EP_SetStall+0x82>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e01d      	b.n	8003806 <HAL_PCD_EP_SetStall+0xbe>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fb23 	bl	8007e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7999      	ldrb	r1, [r3, #6]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f6:	461a      	mov	r2, r3
 80037f8:	f004 fd16 	bl	8008228 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	7912      	ldrb	r2, [r2, #4]
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e042      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da0f      	bge.n	8003854 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3310      	adds	r3, #16
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	e00f      	b.n	8003874 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	3304      	adds	r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_PCD_EP_ClrStall+0x86>
 8003890:	2302      	movs	r3, #2
 8003892:	e00e      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 fb2c 	bl	8007f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da0c      	bge.n	80038e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	3310      	adds	r3, #16
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	3304      	adds	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e00c      	b.n	8003902 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f004 f94b 	bl	8007ba4 <USB_EPStopXfer>
 800390e:	4603      	mov	r3, r0
 8003910:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003912:	7afb      	ldrb	r3, [r7, #11]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	3310      	adds	r3, #16
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d901      	bls.n	8003954 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e06b      	b.n	8003a2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	429a      	cmp	r2, r3
 8003968:	d902      	bls.n	8003970 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3303      	adds	r3, #3
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003978:	e02a      	b.n	80039d0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d902      	bls.n	8003996 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3303      	adds	r3, #3
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68d9      	ldr	r1, [r3, #12]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f004 f9a0 	bl	8007cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d809      	bhi.n	80039fa <PCD_WriteEmptyTxFifo+0xde>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d203      	bcs.n	80039fa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1bf      	bne.n	800397a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d811      	bhi.n	8003a2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a26:	4013      	ands	r3, r2
 8003a28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	333c      	adds	r3, #60	@ 0x3c
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	799b      	ldrb	r3, [r3, #6]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d17b      	bne.n	8003b62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4a61      	ldr	r2, [pc, #388]	@ (8003bfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f240 80b9 	bls.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80b3 	beq.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9c:	6093      	str	r3, [r2, #8]
 8003a9e:	e0a7      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2320      	movs	r3, #32
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	e098      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 8093 	bne.w	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d90f      	bls.n	8003af2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	6093      	str	r3, [r2, #8]
 8003af0:	e07e      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	0159      	lsls	r1, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d114      	bne.n	8003b54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2101      	movs	r1, #1
 8003b40:	f004 fb72 	bl	8008228 <USB_EP0_OutStart>
 8003b44:	e006      	b.n	8003b54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f009 fc72 	bl	800d444 <HAL_PCD_DataOutStageCallback>
 8003b60:	e046      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d124      	bne.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b86:	6093      	str	r3, [r2, #8]
 8003b88:	e032      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f009 fc49 	bl	800d444 <HAL_PCD_DataOutStageCallback>
 8003bb2:	e01d      	b.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2100      	movs	r1, #0
 8003be0:	f004 fb22 	bl	8008228 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f009 fc2a 	bl	800d444 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	4f54300a 	.word	0x4f54300a
 8003c00:	4f54310a 	.word	0x4f54310a

08003c04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	333c      	adds	r3, #60	@ 0x3c
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d90e      	bls.n	8003c58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c50:	461a      	mov	r2, r3
 8003c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f009 fbe1 	bl	800d420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d90c      	bls.n	8003c80 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	799b      	ldrb	r3, [r3, #6]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d108      	bne.n	8003c80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	f004 fad4 	bl	8008228 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	4f54300a 	.word	0x4f54300a

08003c90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cae:	883b      	ldrh	r3, [r7, #0]
 8003cb0:	0419      	lsls	r1, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cbc:	e028      	b.n	8003d10 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e00d      	b.n	8003cee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3340      	adds	r3, #64	@ 0x40
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	3301      	adds	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3ec      	bcc.n	8003cd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cf8:	883b      	ldrh	r3, [r7, #0]
 8003cfa:	0418      	lsls	r0, r3, #16
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4302      	orrs	r2, r0
 8003d08:	3340      	adds	r3, #64	@ 0x40
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d6e:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	10000003 	.word	0x10000003

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e29b      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8087 	beq.w	8003eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dac:	4b96      	ldr	r3, [pc, #600]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d00c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db8:	4b93      	ldr	r3, [pc, #588]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d112      	bne.n	8003dea <HAL_RCC_OscConfig+0x62>
 8003dc4:	4b90      	ldr	r3, [pc, #576]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d06c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x130>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d168      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e275      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7a>
 8003df4:	4b84      	ldr	r3, [pc, #528]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a83      	ldr	r2, [pc, #524]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e02e      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x9c>
 8003e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b7c      	ldr	r3, [pc, #496]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0xc0>
 8003e2e:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b73      	ldr	r3, [pc, #460]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a72      	ldr	r2, [pc, #456]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xd8>
 8003e48:	4b6f      	ldr	r3, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b6c      	ldr	r3, [pc, #432]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a6b      	ldr	r2, [pc, #428]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fe18 	bl	8001a9c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd fe14 	bl	8001a9c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e229      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b61      	ldr	r3, [pc, #388]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xe8>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd fe04 	bl	8001a9c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd fe00 	bl	8001a9c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e215      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b57      	ldr	r3, [pc, #348]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x110>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d069      	beq.n	8003f9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec6:	4b50      	ldr	r3, [pc, #320]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x190>
 8003ede:	4b4a      	ldr	r3, [pc, #296]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x17a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1e9      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	493d      	ldr	r1, [pc, #244]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e040      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d023      	beq.n	8003f68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a38      	ldr	r2, [pc, #224]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fdb6 	bl	8001a9c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fd fdb2 	bl	8001a9c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1c7      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b30      	ldr	r3, [pc, #192]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4929      	ldr	r1, [pc, #164]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e018      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a26      	ldr	r2, [pc, #152]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fd92 	bl	8001a9c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fd fd8e 	bl	8001a9c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1a3      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d038      	beq.n	8004018 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d019      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fd fd6f 	bl	8001a9c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7fd fd6b 	bl	8001a9c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e180      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x23a>
 8003fe0:	e01a      	b.n	8004018 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fee:	f7fd fd55 	bl	8001a9c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fd51 	bl	8001a9c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d903      	bls.n	800400c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e166      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
 8004008:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b92      	ldr	r3, [pc, #584]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ee      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a4 	beq.w	800416e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b8c      	ldr	r3, [pc, #560]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b89      	ldr	r3, [pc, #548]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a88      	ldr	r2, [pc, #544]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	@ 0x40
 800403e:	4b86      	ldr	r3, [pc, #536]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404e:	4b83      	ldr	r3, [pc, #524]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800405a:	4b80      	ldr	r3, [pc, #512]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7f      	ldr	r2, [pc, #508]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fd fd19 	bl	8001a9c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fd fd15 	bl	8001a9c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e12a      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004080:	4b76      	ldr	r3, [pc, #472]	@ (800425c <HAL_RCC_OscConfig+0x4d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x31a>
 8004094:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a6f      	ldr	r2, [pc, #444]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	e02d      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x33c>
 80040aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b6:	4b68      	ldr	r3, [pc, #416]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	4a67      	ldr	r2, [pc, #412]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x35e>
 80040cc:	4b62      	ldr	r3, [pc, #392]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a61      	ldr	r2, [pc, #388]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
 80040e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	4b59      	ldr	r3, [pc, #356]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	4a58      	ldr	r2, [pc, #352]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd fcc9 	bl	8001a9c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd fcc5 	bl	8001a9c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0d8      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x386>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fd fcb3 	bl	8001a9c <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd fcaf 	bl	8001a9c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0c2      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b41      	ldr	r3, [pc, #260]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	4a3c      	ldr	r2, [pc, #240]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80ae 	beq.w	80042d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004178:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d06d      	beq.n	8004260 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d14b      	bne.n	8004224 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b32      	ldr	r3, [pc, #200]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a31      	ldr	r2, [pc, #196]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fd fc80 	bl	8001a9c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fc7c 	bl	8001a9c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e091      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	071b      	lsls	r3, r3, #28
 80041ea:	491b      	ldr	r1, [pc, #108]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fc4e 	bl	8001a9c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fd fc4a 	bl	8001a9c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e05f      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x47c>
 8004222:	e057      	b.n	80042d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800422a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800422e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fc34 	bl	8001a9c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd fc30 	bl	8001a9c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e045      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b0>
 8004256:	e03d      	b.n	80042d4 <HAL_RCC_OscConfig+0x54c>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004260:	4b1f      	ldr	r3, [pc, #124]	@ (80042e0 <HAL_RCC_OscConfig+0x558>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d030      	beq.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d122      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d119      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d0      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b67      	ldr	r3, [pc, #412]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	4965      	ldr	r1, [pc, #404]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d040      	beq.n	8004408 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d115      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e073      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06b      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c6:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f023 0203 	bic.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4936      	ldr	r1, [pc, #216]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d8:	f7fd fb60 	bl	8001a9c <HAL_GetTick>
 80043dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e0:	f7fd fb5c 	bl	8001a9c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e053      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 020c 	and.w	r2, r3, #12
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	429a      	cmp	r2, r3
 8004406:	d1eb      	bne.n	80043e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004408:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d210      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b24      	ldr	r3, [pc, #144]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 020f 	bic.w	r2, r3, #15
 800441e:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	@ (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4602      	mov	r2, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	490a      	ldr	r1, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004488:	5ccb      	ldrb	r3, [r1, r3]
 800448a:	fa22 f303 	lsr.w	r3, r2, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd f81e 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	080181a8 	.word	0x080181a8
 80044b4:	20000004 	.word	0x20000004
 80044b8:	20000008 	.word	0x20000008

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b094      	sub	sp, #80	@ 0x50
 80044c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044c8:	2300      	movs	r3, #0
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d4:	4b79      	ldr	r3, [pc, #484]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d00d      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x40>
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	f200 80e1 	bhi.w	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x34>
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f0:	4b73      	ldr	r3, [pc, #460]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f4:	e0db      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f6:	4b73      	ldr	r3, [pc, #460]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044fa:	e0d8      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044fc:	4b6f      	ldr	r3, [pc, #444]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004504:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004506:	4b6d      	ldr	r3, [pc, #436]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800451c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004524:	633b      	str	r3, [r7, #48]	@ 0x30
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
 800452a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	0159      	lsls	r1, r3, #5
 800453c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004540:	0150      	lsls	r0, r2, #5
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4621      	mov	r1, r4
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	6139      	str	r1, [r7, #16]
 800454c:	4629      	mov	r1, r5
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800456a:	4651      	mov	r1, sl
 800456c:	018a      	lsls	r2, r1, #6
 800456e:	4651      	mov	r1, sl
 8004570:	ebb2 0801 	subs.w	r8, r2, r1
 8004574:	4659      	mov	r1, fp
 8004576:	eb63 0901 	sbc.w	r9, r3, r1
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ae:	4629      	mov	r1, r5
 80045b0:	024b      	lsls	r3, r1, #9
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b8:	4621      	mov	r1, r4
 80045ba:	024a      	lsls	r2, r1, #9
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045c2:	2200      	movs	r2, #0
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045cc:	f7fb fef0 	bl	80003b0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	e058      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	4611      	mov	r1, r2
 80045e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045ea:	623b      	str	r3, [r7, #32]
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004606:	0150      	lsls	r0, r2, #5
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4641      	mov	r1, r8
 800460e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb63 0b01 	sbc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800462c:	ebb2 040a 	subs.w	r4, r2, sl
 8004630:	eb63 050b 	sbc.w	r5, r3, fp
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	464b      	mov	r3, r9
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004662:	4629      	mov	r1, r5
 8004664:	028b      	lsls	r3, r1, #10
 8004666:	4621      	mov	r1, r4
 8004668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800466c:	4621      	mov	r1, r4
 800466e:	028a      	lsls	r2, r1, #10
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	2200      	movs	r2, #0
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	f7fb fe96 	bl	80003b0 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800469c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e002      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3750      	adds	r7, #80	@ 0x50
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40023800 	.word	0x40023800
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	080181b8 	.word	0x080181b8

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	080181b8 	.word	0x080181b8

08004730 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	220f      	movs	r2, #15
 800473e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004740:	4b12      	ldr	r3, [pc, #72]	@ (800478c <HAL_RCC_GetClockConfig+0x5c>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0203 	and.w	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <HAL_RCC_GetClockConfig+0x5c>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <HAL_RCC_GetClockConfig+0x5c>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004764:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004772:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <HAL_RCC_GetClockConfig+0x60>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 020f 	and.w	r2, r3, #15
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	40023c00 	.word	0x40023c00

08004794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047bc:	4b69      	ldr	r3, [pc, #420]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a68      	ldr	r2, [pc, #416]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047c6:	6093      	str	r3, [r2, #8]
 80047c8:	4b66      	ldr	r3, [pc, #408]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d0:	4964      	ldr	r1, [pc, #400]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d017      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	4959      	ldr	r1, [pc, #356]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480c:	d101      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800480e:	2301      	movs	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800482a:	4b4e      	ldr	r3, [pc, #312]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004830:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	494a      	ldr	r1, [pc, #296]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004866:	2301      	movs	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 808b 	beq.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004878:	4b3a      	ldr	r3, [pc, #232]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	4a39      	ldr	r2, [pc, #228]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004882:	6413      	str	r3, [r2, #64]	@ 0x40
 8004884:	4b37      	ldr	r3, [pc, #220]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004890:	4b35      	ldr	r3, [pc, #212]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a34      	ldr	r2, [pc, #208]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fd f8fe 	bl	8001a9c <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a4:	f7fd f8fa 	bl	8001a9c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e38f      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048c2:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d035      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d02e      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048e0:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004900:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004902:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004908:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d114      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd f8c2 	bl	8001a9c <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	e00a      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fd f8be 	bl	8001a9c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e351      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ee      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800494a:	d111      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800494c:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004958:	4b04      	ldr	r3, [pc, #16]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800495a:	400b      	ands	r3, r1
 800495c:	4901      	ldr	r1, [pc, #4]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
 8004962:	e00b      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004964:	40023800 	.word	0x40023800
 8004968:	40007000 	.word	0x40007000
 800496c:	0ffffcff 	.word	0x0ffffcff
 8004970:	4bac      	ldr	r3, [pc, #688]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4aab      	ldr	r2, [pc, #684]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004976:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800497a:	6093      	str	r3, [r2, #8]
 800497c:	4ba9      	ldr	r3, [pc, #676]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	49a6      	ldr	r1, [pc, #664]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	4313      	orrs	r3, r2
 800498c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800499a:	4ba2      	ldr	r3, [pc, #648]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	4aa0      	ldr	r2, [pc, #640]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	499b      	ldr	r1, [pc, #620]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c8:	4b96      	ldr	r3, [pc, #600]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d6:	4993      	ldr	r1, [pc, #588]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f8:	498a      	ldr	r1, [pc, #552]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a0c:	4b85      	ldr	r3, [pc, #532]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1a:	4982      	ldr	r1, [pc, #520]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4979      	ldr	r1, [pc, #484]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a50:	4b74      	ldr	r3, [pc, #464]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	4971      	ldr	r1, [pc, #452]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a72:	4b6c      	ldr	r3, [pc, #432]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a78:	f023 020c 	bic.w	r2, r3, #12
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a80:	4968      	ldr	r1, [pc, #416]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a94:	4b63      	ldr	r3, [pc, #396]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa2:	4960      	ldr	r1, [pc, #384]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	4957      	ldr	r1, [pc, #348]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ad8:	4b52      	ldr	r3, [pc, #328]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	494f      	ldr	r1, [pc, #316]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b08:	4946      	ldr	r1, [pc, #280]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b1c:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	493e      	ldr	r1, [pc, #248]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4c:	4935      	ldr	r1, [pc, #212]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b60:	4b30      	ldr	r3, [pc, #192]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6e:	492d      	ldr	r1, [pc, #180]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b82:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b88:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b90:	4924      	ldr	r1, [pc, #144]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bc2:	4b18      	ldr	r3, [pc, #96]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd0:	4914      	ldr	r1, [pc, #80]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf4:	490b      	ldr	r1, [pc, #44]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00f      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c18:	4902      	ldr	r1, [pc, #8]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c34:	4b8a      	ldr	r3, [pc, #552]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	4986      	ldr	r1, [pc, #536]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c58:	4b81      	ldr	r3, [pc, #516]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c5e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c68:	497d      	ldr	r1, [pc, #500]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d006      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80d6 	beq.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c84:	4b76      	ldr	r3, [pc, #472]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a75      	ldr	r2, [pc, #468]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fc ff04 	bl	8001a9c <HAL_GetTick>
 8004c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c98:	f7fc ff00 	bl	8001a9c <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	@ 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e195      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004caa:	4b6d      	ldr	r3, [pc, #436]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d021      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d11d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cca:	4b65      	ldr	r3, [pc, #404]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cd8:	4b61      	ldr	r3, [pc, #388]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cde:	0e1b      	lsrs	r3, r3, #24
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	4958      	ldr	r1, [pc, #352]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02e      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d30:	d129      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d32:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d40:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d46:	0f1b      	lsrs	r3, r3, #28
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	019a      	lsls	r2, r3, #6
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	493e      	ldr	r1, [pc, #248]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d74:	f023 021f 	bic.w	r2, r3, #31
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4938      	ldr	r1, [pc, #224]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01d      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d92:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004da0:	4b2f      	ldr	r3, [pc, #188]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004da6:	0f1b      	lsrs	r3, r3, #28
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	019a      	lsls	r2, r3, #6
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	041b      	lsls	r3, r3, #16
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	4926      	ldr	r1, [pc, #152]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d011      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	019a      	lsls	r2, r3, #6
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	491a      	ldr	r1, [pc, #104]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dfe:	4b18      	ldr	r3, [pc, #96]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0a:	f7fc fe47 	bl	8001a9c <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e12:	f7fc fe43 	bl	8001a9c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	@ 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0d8      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e24:	4b0e      	ldr	r3, [pc, #56]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	f040 80ce 	bne.w	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e38:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a08      	ldr	r2, [pc, #32]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e44:	f7fc fe2a 	bl	8001a9c <HAL_GetTick>
 8004e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e4c:	f7fc fe26 	bl	8001a9c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d904      	bls.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e0bb      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e64:	4b5e      	ldr	r3, [pc, #376]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e70:	d0ec      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02e      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12a      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e9a:	4b51      	ldr	r3, [pc, #324]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eae:	0f1b      	lsrs	r3, r3, #28
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	019a      	lsls	r2, r3, #6
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	041b      	lsls	r3, r3, #16
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	061b      	lsls	r3, r3, #24
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	071b      	lsls	r3, r3, #28
 8004ece:	4944      	ldr	r1, [pc, #272]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ed6:	4b42      	ldr	r3, [pc, #264]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004edc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	493d      	ldr	r1, [pc, #244]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d022      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f04:	d11d      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f06:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	0e1b      	lsrs	r3, r3, #24
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f14:	4b32      	ldr	r3, [pc, #200]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1a:	0f1b      	lsrs	r3, r3, #28
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	019a      	lsls	r2, r3, #6
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	041b      	lsls	r3, r3, #16
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	4929      	ldr	r1, [pc, #164]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f4e:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	0e1b      	lsrs	r3, r3, #24
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f5c:	4b20      	ldr	r3, [pc, #128]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	019a      	lsls	r2, r3, #6
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	4917      	ldr	r1, [pc, #92]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	4911      	ldr	r1, [pc, #68]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fac:	f7fc fd76 	bl	8001a9c <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fb4:	f7fc fd72 	bl	8001a9c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	@ 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e007      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd2:	d1ef      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e049      	b.n	800508a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f841 	bl	8005092 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f000 f9e8 	bl	80053f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e054      	b.n	800516a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a26      	ldr	r2, [pc, #152]	@ (8005178 <HAL_TIM_Base_Start_IT+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	d01d      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	@ (800517c <HAL_TIM_Base_Start_IT+0xd4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <HAL_TIM_Base_Start_IT+0xd8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <HAL_TIM_Base_Start_IT+0xdc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <HAL_TIM_Base_Start_IT+0xe0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <HAL_TIM_Base_Start_IT+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <HAL_TIM_Base_Start_IT+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d115      	bne.n	8005154 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_TIM_Base_Start_IT+0xec>)
 8005130:	4013      	ands	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d015      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d011      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	e008      	b.n	8005166 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e000      	b.n	8005168 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005166:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40010400 	.word	0x40010400
 800518c:	40014000 	.word	0x40014000
 8005190:	40001800 	.word	0x40001800
 8005194:	00010007 	.word	0x00010007

08005198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d020      	beq.n	80051fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0202 	mvn.w	r2, #2
 80051cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f8e9 	bl	80053ba <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f8db 	bl	80053a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8ec 	bl	80053ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0204 	mvn.w	r2, #4
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8c3 	bl	80053ba <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8b5 	bl	80053a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8c6 	bl	80053ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d020      	beq.n	8005294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0208 	mvn.w	r2, #8
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f89d 	bl	80053ba <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f88f 	bl	80053a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f8a0 	bl	80053ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d020      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0210 	mvn.w	r2, #16
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2208      	movs	r2, #8
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f877 	bl	80053ba <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f869 	bl	80053a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f87a 	bl	80053ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0201 	mvn.w	r2, #1
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb ff44 	bl	800118c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00c      	beq.n	8005332 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f919 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00c      	beq.n	8005356 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f911 	bl	8005578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f834 	bl	80053e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00c      	beq.n	800539e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0220 	mvn.w	r2, #32
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8d9 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a46      	ldr	r2, [pc, #280]	@ (8005524 <TIM_Base_SetConfig+0x12c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005416:	d00f      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a43      	ldr	r2, [pc, #268]	@ (8005528 <TIM_Base_SetConfig+0x130>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a42      	ldr	r2, [pc, #264]	@ (800552c <TIM_Base_SetConfig+0x134>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a41      	ldr	r2, [pc, #260]	@ (8005530 <TIM_Base_SetConfig+0x138>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a40      	ldr	r2, [pc, #256]	@ (8005534 <TIM_Base_SetConfig+0x13c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d108      	bne.n	800544a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a35      	ldr	r2, [pc, #212]	@ (8005524 <TIM_Base_SetConfig+0x12c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02b      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005458:	d027      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a32      	ldr	r2, [pc, #200]	@ (8005528 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d023      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a31      	ldr	r2, [pc, #196]	@ (800552c <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01f      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d01b      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2e      	ldr	r2, [pc, #184]	@ (8005538 <TIM_Base_SetConfig+0x140>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <TIM_Base_SetConfig+0x144>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <TIM_Base_SetConfig+0x148>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <TIM_Base_SetConfig+0x14c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2a      	ldr	r2, [pc, #168]	@ (8005548 <TIM_Base_SetConfig+0x150>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a29      	ldr	r2, [pc, #164]	@ (800554c <TIM_Base_SetConfig+0x154>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a10      	ldr	r2, [pc, #64]	@ (8005524 <TIM_Base_SetConfig+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0xf8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	@ (8005534 <TIM_Base_SetConfig+0x13c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d103      	bne.n	80054f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f023 0201 	bic.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]
  }
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40001800 	.word	0x40001800
 8005548:	40001c00 	.word	0x40001c00
 800554c:	40002000 	.word	0x40002000

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e040      	b.n	8005620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f95a 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 ff0e 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fca7 	bl	8005f2c <UART_SetConfig>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e01b      	b.n	8005620 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 ff8d 	bl	8006538 <UART_CheckIdleState>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	@ 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800563a:	2b20      	cmp	r3, #32
 800563c:	d165      	bne.n	800570a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_UART_Transmit_DMA+0x22>
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e05e      	b.n	800570c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2221      	movs	r2, #33	@ 0x21
 8005670:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	2b00      	cmp	r3, #0
 8005678:	d027      	beq.n	80056ca <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <HAL_UART_Transmit_DMA+0xec>)
 8005680:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	4a24      	ldr	r2, [pc, #144]	@ (8005718 <HAL_UART_Transmit_DMA+0xf0>)
 8005688:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568e:	4a23      	ldr	r2, [pc, #140]	@ (800571c <HAL_UART_Transmit_DMA+0xf4>)
 8005690:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	2200      	movs	r2, #0
 8005698:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a2:	4619      	mov	r1, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3328      	adds	r3, #40	@ 0x28
 80056aa:	461a      	mov	r2, r3
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	f7fc fbb5 	bl	8001e1c <HAL_DMA_Start_IT>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2210      	movs	r2, #16
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e020      	b.n	800570c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2240      	movs	r2, #64	@ 0x40
 80056d0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f2:	623a      	str	r2, [r7, #32]
 80056f4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	69f9      	ldr	r1, [r7, #28]
 80056f8:	6a3a      	ldr	r2, [r7, #32]
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3728      	adds	r7, #40	@ 0x28
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	080069b9 	.word	0x080069b9
 8005718:	08006a4f 	.word	0x08006a4f
 800571c:	08006bd1 	.word	0x08006bd1

08005720 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005734:	2b20      	cmp	r3, #32
 8005736:	d132      	bne.n	800579e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_Receive_DMA+0x24>
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e02b      	b.n	80057a0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d018      	beq.n	800578e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	61bb      	str	r3, [r7, #24]
   return(result);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	461a      	mov	r2, r3
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 ffe5 	bl	8006764 <UART_Start_Receive_DMA>
 800579a:	4603      	mov	r3, r0
 800579c:	e000      	b.n	80057a0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3728      	adds	r7, #40	@ 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b090      	sub	sp, #64	@ 0x40
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d139      	bne.n	8005840 <HAL_UART_DMAStop+0x98>
 80057cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ce:	2b21      	cmp	r3, #33	@ 0x21
 80057d0:	d136      	bne.n	8005840 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	4618      	mov	r0, r3
 8005814:	f7fc fb62 	bl	8001edc <HAL_DMA_Abort>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005822:	4618      	mov	r0, r3
 8005824:	f7fc fd76 	bl	8002314 <HAL_DMA_GetError>
 8005828:	4603      	mov	r3, r0
 800582a:	2b20      	cmp	r3, #32
 800582c:	d105      	bne.n	800583a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2210      	movs	r2, #16
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e044      	b.n	80058c4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f832 	bl	80068a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584a:	2b40      	cmp	r3, #64	@ 0x40
 800584c:	d139      	bne.n	80058c2 <HAL_UART_DMAStop+0x11a>
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	2b22      	cmp	r3, #34	@ 0x22
 8005852:	d136      	bne.n	80058c2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60bb      	str	r3, [r7, #8]
   return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586a:	633b      	str	r3, [r7, #48]	@ 0x30
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005874:	61ba      	str	r2, [r7, #24]
 8005876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e5      	bne.n	8005854 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588c:	2b00      	cmp	r3, #0
 800588e:	d015      	beq.n	80058bc <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005894:	4618      	mov	r0, r3
 8005896:	f7fc fb21 	bl	8001edc <HAL_DMA_Abort>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fc fd35 	bl	8002314 <HAL_DMA_GetError>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d105      	bne.n	80058bc <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2210      	movs	r2, #16
 80058b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e003      	b.n	80058c4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 f817 	bl	80068f0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3740      	adds	r7, #64	@ 0x40
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b0ba      	sub	sp, #232	@ 0xe8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058fa:	4013      	ands	r3, r2
 80058fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d115      	bne.n	8005934 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 82ac 	beq.w	8005e82 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
      }
      return;
 8005932:	e2a6      	b.n	8005e82 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8117 	beq.w	8005b6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800593e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800594a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800594e:	4b85      	ldr	r3, [pc, #532]	@ (8005b64 <HAL_UART_IRQHandler+0x298>)
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 810a 	beq.w	8005b6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d011      	beq.n	8005988 <HAL_UART_IRQHandler+0xbc>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d011      	beq.n	80059b8 <HAL_UART_IRQHandler+0xec>
 8005994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2202      	movs	r2, #2
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	f043 0204 	orr.w	r2, r3, #4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d011      	beq.n	80059e8 <HAL_UART_IRQHandler+0x11c>
 80059c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2204      	movs	r2, #4
 80059d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059de:	f043 0202 	orr.w	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d017      	beq.n	8005a24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00b      	beq.n	8005a24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1a:	f043 0208 	orr.w	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d012      	beq.n	8005a56 <HAL_UART_IRQHandler+0x18a>
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8212 	beq.w	8005e86 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9e:	2b40      	cmp	r3, #64	@ 0x40
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d04f      	beq.n	8005b4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 ff1e 	bl	80068f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d141      	bne.n	8005b46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005aee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005af2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1d9      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d013      	beq.n	8005b3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1a:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <HAL_UART_IRQHandler+0x29c>)
 8005b1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc fa4a 	bl	8001fbc <HAL_DMA_Abort_IT>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d017      	beq.n	8005b5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	e00f      	b.n	8005b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9d4 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e00b      	b.n	8005b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9d0 	bl	8005eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	e007      	b.n	8005b5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9cc 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b5c:	e193      	b.n	8005e86 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	bf00      	nop
    return;
 8005b60:	e191      	b.n	8005e86 <HAL_UART_IRQHandler+0x5ba>
 8005b62:	bf00      	nop
 8005b64:	04000120 	.word	0x04000120
 8005b68:	08006c4f 	.word	0x08006c4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f040 814c 	bne.w	8005e0e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8145 	beq.w	8005e0e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 813e 	beq.w	8005e0e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2210      	movs	r2, #16
 8005b98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba4:	2b40      	cmp	r3, #64	@ 0x40
 8005ba6:	f040 80b6 	bne.w	8005d16 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8165 	beq.w	8005e8a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f080 815d 	bcs.w	8005e8a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be4:	f000 8086 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1da      	bne.n	8005be8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e1      	bne.n	8005c32 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc4:	f023 0310 	bic.w	r3, r3, #16
 8005cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e4      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fc f8f4 	bl	8001edc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8f6 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d14:	e0b9      	b.n	8005e8a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80ab 	beq.w	8005e8e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a6 	beq.w	8005e8e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e4      	bne.n	8005d42 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	623b      	str	r3, [r7, #32]
   return(result);
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e3      	bne.n	8005d78 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f023 0310 	bic.w	r3, r3, #16
 8005dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	617b      	str	r3, [r7, #20]
   return(result);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e4      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f87a 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e0c:	e03f      	b.n	8005e8e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <HAL_UART_IRQHandler+0x56c>
 8005e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f871 	bl	8005f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e36:	e02d      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00e      	beq.n	8005e62 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01c      	beq.n	8005e92 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
    }
    return;
 8005e60:	e017      	b.n	8005e92 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d012      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fefd 	bl	8006c7a <UART_EndTransmit_IT>
    return;
 8005e80:	e008      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e82:	bf00      	nop
 8005e84:	e006      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e86:	bf00      	nop
 8005e88:	e004      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e92:	bf00      	nop
  }

}
 8005e94:	37e8      	adds	r7, #232	@ 0xe8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4ba6      	ldr	r3, [pc, #664]	@ (80061f0 <UART_SetConfig+0x2c4>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a94      	ldr	r2, [pc, #592]	@ (80061f4 <UART_SetConfig+0x2c8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d120      	bne.n	8005fea <UART_SetConfig+0xbe>
 8005fa8:	4b93      	ldr	r3, [pc, #588]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d816      	bhi.n	8005fe4 <UART_SetConfig+0xb8>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <UART_SetConfig+0x90>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fd9 	.word	0x08005fd9
 8005fc4:	08005fd3 	.word	0x08005fd3
 8005fc8:	08005fdf 	.word	0x08005fdf
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e150      	b.n	8006274 <UART_SetConfig+0x348>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e14d      	b.n	8006274 <UART_SetConfig+0x348>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e14a      	b.n	8006274 <UART_SetConfig+0x348>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e147      	b.n	8006274 <UART_SetConfig+0x348>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e144      	b.n	8006274 <UART_SetConfig+0x348>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a83      	ldr	r2, [pc, #524]	@ (80061fc <UART_SetConfig+0x2d0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d132      	bne.n	800605a <UART_SetConfig+0x12e>
 8005ff4:	4b80      	ldr	r3, [pc, #512]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d828      	bhi.n	8006054 <UART_SetConfig+0x128>
 8006002:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0xdc>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800603d 	.word	0x0800603d
 800600c:	08006055 	.word	0x08006055
 8006010:	08006055 	.word	0x08006055
 8006014:	08006055 	.word	0x08006055
 8006018:	08006049 	.word	0x08006049
 800601c:	08006055 	.word	0x08006055
 8006020:	08006055 	.word	0x08006055
 8006024:	08006055 	.word	0x08006055
 8006028:	08006043 	.word	0x08006043
 800602c:	08006055 	.word	0x08006055
 8006030:	08006055 	.word	0x08006055
 8006034:	08006055 	.word	0x08006055
 8006038:	0800604f 	.word	0x0800604f
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e118      	b.n	8006274 <UART_SetConfig+0x348>
 8006042:	2302      	movs	r3, #2
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e115      	b.n	8006274 <UART_SetConfig+0x348>
 8006048:	2304      	movs	r3, #4
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e112      	b.n	8006274 <UART_SetConfig+0x348>
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e10f      	b.n	8006274 <UART_SetConfig+0x348>
 8006054:	2310      	movs	r3, #16
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e10c      	b.n	8006274 <UART_SetConfig+0x348>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a68      	ldr	r2, [pc, #416]	@ (8006200 <UART_SetConfig+0x2d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d120      	bne.n	80060a6 <UART_SetConfig+0x17a>
 8006064:	4b64      	ldr	r3, [pc, #400]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800606e:	2b30      	cmp	r3, #48	@ 0x30
 8006070:	d013      	beq.n	800609a <UART_SetConfig+0x16e>
 8006072:	2b30      	cmp	r3, #48	@ 0x30
 8006074:	d814      	bhi.n	80060a0 <UART_SetConfig+0x174>
 8006076:	2b20      	cmp	r3, #32
 8006078:	d009      	beq.n	800608e <UART_SetConfig+0x162>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d810      	bhi.n	80060a0 <UART_SetConfig+0x174>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <UART_SetConfig+0x15c>
 8006082:	2b10      	cmp	r3, #16
 8006084:	d006      	beq.n	8006094 <UART_SetConfig+0x168>
 8006086:	e00b      	b.n	80060a0 <UART_SetConfig+0x174>
 8006088:	2300      	movs	r3, #0
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e0f2      	b.n	8006274 <UART_SetConfig+0x348>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e0ef      	b.n	8006274 <UART_SetConfig+0x348>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e0ec      	b.n	8006274 <UART_SetConfig+0x348>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e0e9      	b.n	8006274 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e0e6      	b.n	8006274 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a56      	ldr	r2, [pc, #344]	@ (8006204 <UART_SetConfig+0x2d8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d120      	bne.n	80060f2 <UART_SetConfig+0x1c6>
 80060b0:	4b51      	ldr	r3, [pc, #324]	@ (80061f8 <UART_SetConfig+0x2cc>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80060bc:	d013      	beq.n	80060e6 <UART_SetConfig+0x1ba>
 80060be:	2bc0      	cmp	r3, #192	@ 0xc0
 80060c0:	d814      	bhi.n	80060ec <UART_SetConfig+0x1c0>
 80060c2:	2b80      	cmp	r3, #128	@ 0x80
 80060c4:	d009      	beq.n	80060da <UART_SetConfig+0x1ae>
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d810      	bhi.n	80060ec <UART_SetConfig+0x1c0>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <UART_SetConfig+0x1a8>
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d006      	beq.n	80060e0 <UART_SetConfig+0x1b4>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x1c0>
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0cc      	b.n	8006274 <UART_SetConfig+0x348>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0c9      	b.n	8006274 <UART_SetConfig+0x348>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e0c6      	b.n	8006274 <UART_SetConfig+0x348>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e0c3      	b.n	8006274 <UART_SetConfig+0x348>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e0c0      	b.n	8006274 <UART_SetConfig+0x348>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a44      	ldr	r2, [pc, #272]	@ (8006208 <UART_SetConfig+0x2dc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d125      	bne.n	8006148 <UART_SetConfig+0x21c>
 80060fc:	4b3e      	ldr	r3, [pc, #248]	@ (80061f8 <UART_SetConfig+0x2cc>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d017      	beq.n	800613c <UART_SetConfig+0x210>
 800610c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006110:	d817      	bhi.n	8006142 <UART_SetConfig+0x216>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d00b      	beq.n	8006130 <UART_SetConfig+0x204>
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d811      	bhi.n	8006142 <UART_SetConfig+0x216>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <UART_SetConfig+0x1fe>
 8006122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006126:	d006      	beq.n	8006136 <UART_SetConfig+0x20a>
 8006128:	e00b      	b.n	8006142 <UART_SetConfig+0x216>
 800612a:	2300      	movs	r3, #0
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e0a1      	b.n	8006274 <UART_SetConfig+0x348>
 8006130:	2302      	movs	r3, #2
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e09e      	b.n	8006274 <UART_SetConfig+0x348>
 8006136:	2304      	movs	r3, #4
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e09b      	b.n	8006274 <UART_SetConfig+0x348>
 800613c:	2308      	movs	r3, #8
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e098      	b.n	8006274 <UART_SetConfig+0x348>
 8006142:	2310      	movs	r3, #16
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e095      	b.n	8006274 <UART_SetConfig+0x348>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2f      	ldr	r2, [pc, #188]	@ (800620c <UART_SetConfig+0x2e0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d125      	bne.n	800619e <UART_SetConfig+0x272>
 8006152:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006158:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800615c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006160:	d017      	beq.n	8006192 <UART_SetConfig+0x266>
 8006162:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006166:	d817      	bhi.n	8006198 <UART_SetConfig+0x26c>
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616c:	d00b      	beq.n	8006186 <UART_SetConfig+0x25a>
 800616e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006172:	d811      	bhi.n	8006198 <UART_SetConfig+0x26c>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <UART_SetConfig+0x254>
 8006178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800617c:	d006      	beq.n	800618c <UART_SetConfig+0x260>
 800617e:	e00b      	b.n	8006198 <UART_SetConfig+0x26c>
 8006180:	2301      	movs	r3, #1
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e076      	b.n	8006274 <UART_SetConfig+0x348>
 8006186:	2302      	movs	r3, #2
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e073      	b.n	8006274 <UART_SetConfig+0x348>
 800618c:	2304      	movs	r3, #4
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e070      	b.n	8006274 <UART_SetConfig+0x348>
 8006192:	2308      	movs	r3, #8
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e06d      	b.n	8006274 <UART_SetConfig+0x348>
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e06a      	b.n	8006274 <UART_SetConfig+0x348>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <UART_SetConfig+0x2e4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d138      	bne.n	800621a <UART_SetConfig+0x2ee>
 80061a8:	4b13      	ldr	r3, [pc, #76]	@ (80061f8 <UART_SetConfig+0x2cc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061b6:	d017      	beq.n	80061e8 <UART_SetConfig+0x2bc>
 80061b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061bc:	d82a      	bhi.n	8006214 <UART_SetConfig+0x2e8>
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c2:	d00b      	beq.n	80061dc <UART_SetConfig+0x2b0>
 80061c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c8:	d824      	bhi.n	8006214 <UART_SetConfig+0x2e8>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <UART_SetConfig+0x2aa>
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d2:	d006      	beq.n	80061e2 <UART_SetConfig+0x2b6>
 80061d4:	e01e      	b.n	8006214 <UART_SetConfig+0x2e8>
 80061d6:	2300      	movs	r3, #0
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e04b      	b.n	8006274 <UART_SetConfig+0x348>
 80061dc:	2302      	movs	r3, #2
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e048      	b.n	8006274 <UART_SetConfig+0x348>
 80061e2:	2304      	movs	r3, #4
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e045      	b.n	8006274 <UART_SetConfig+0x348>
 80061e8:	2308      	movs	r3, #8
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e042      	b.n	8006274 <UART_SetConfig+0x348>
 80061ee:	bf00      	nop
 80061f0:	efff69f3 	.word	0xefff69f3
 80061f4:	40011000 	.word	0x40011000
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40004400 	.word	0x40004400
 8006200:	40004800 	.word	0x40004800
 8006204:	40004c00 	.word	0x40004c00
 8006208:	40005000 	.word	0x40005000
 800620c:	40011400 	.word	0x40011400
 8006210:	40007800 	.word	0x40007800
 8006214:	2310      	movs	r3, #16
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e02c      	b.n	8006274 <UART_SetConfig+0x348>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a72      	ldr	r2, [pc, #456]	@ (80063e8 <UART_SetConfig+0x4bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d125      	bne.n	8006270 <UART_SetConfig+0x344>
 8006224:	4b71      	ldr	r3, [pc, #452]	@ (80063ec <UART_SetConfig+0x4c0>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800622e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006232:	d017      	beq.n	8006264 <UART_SetConfig+0x338>
 8006234:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006238:	d817      	bhi.n	800626a <UART_SetConfig+0x33e>
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	d00b      	beq.n	8006258 <UART_SetConfig+0x32c>
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006244:	d811      	bhi.n	800626a <UART_SetConfig+0x33e>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <UART_SetConfig+0x326>
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800624e:	d006      	beq.n	800625e <UART_SetConfig+0x332>
 8006250:	e00b      	b.n	800626a <UART_SetConfig+0x33e>
 8006252:	2300      	movs	r3, #0
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e00d      	b.n	8006274 <UART_SetConfig+0x348>
 8006258:	2302      	movs	r3, #2
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e00a      	b.n	8006274 <UART_SetConfig+0x348>
 800625e:	2304      	movs	r3, #4
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e007      	b.n	8006274 <UART_SetConfig+0x348>
 8006264:	2308      	movs	r3, #8
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e004      	b.n	8006274 <UART_SetConfig+0x348>
 800626a:	2310      	movs	r3, #16
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e001      	b.n	8006274 <UART_SetConfig+0x348>
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800627c:	d15b      	bne.n	8006336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800627e:	7ffb      	ldrb	r3, [r7, #31]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d828      	bhi.n	80062d6 <UART_SetConfig+0x3aa>
 8006284:	a201      	add	r2, pc, #4	@ (adr r2, 800628c <UART_SetConfig+0x360>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	080062d7 	.word	0x080062d7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062d7 	.word	0x080062d7
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fe fa16 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe fa26 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 80062bc:	61b8      	str	r0, [r7, #24]
        break;
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b4b      	ldr	r3, [pc, #300]	@ (80063f0 <UART_SetConfig+0x4c4>)
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fe f8f9 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 80062ca:	61b8      	str	r0, [r7, #24]
        break;
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	77bb      	strb	r3, [r7, #30]
        break;
 80062de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d074      	beq.n	80063d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	005a      	lsls	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d916      	bls.n	8006330 <UART_SetConfig+0x404>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d212      	bcs.n	8006330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f023 030f 	bic.w	r3, r3, #15
 8006312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	b29a      	uxth	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	4313      	orrs	r3, r2
 8006324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	89fa      	ldrh	r2, [r7, #14]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	e04f      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	77bb      	strb	r3, [r7, #30]
 8006334:	e04c      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d828      	bhi.n	800638e <UART_SetConfig+0x462>
 800633c:	a201      	add	r2, pc, #4	@ (adr r2, 8006344 <UART_SetConfig+0x418>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	0800638f 	.word	0x0800638f
 8006354:	0800637f 	.word	0x0800637f
 8006358:	0800638f 	.word	0x0800638f
 800635c:	0800638f 	.word	0x0800638f
 8006360:	0800638f 	.word	0x0800638f
 8006364:	08006387 	.word	0x08006387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006368:	f7fe f9ba 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 800636c:	61b8      	str	r0, [r7, #24]
        break;
 800636e:	e013      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006370:	f7fe f9ca 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8006374:	61b8      	str	r0, [r7, #24]
        break;
 8006376:	e00f      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006378:	4b1d      	ldr	r3, [pc, #116]	@ (80063f0 <UART_SetConfig+0x4c4>)
 800637a:	61bb      	str	r3, [r7, #24]
        break;
 800637c:	e00c      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637e:	f7fe f89d 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8006382:	61b8      	str	r0, [r7, #24]
        break;
 8006384:	e008      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800638a:	61bb      	str	r3, [r7, #24]
        break;
 800638c:	e004      	b.n	8006398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	77bb      	strb	r3, [r7, #30]
        break;
 8006396:	bf00      	nop
    }

    if (pclk != 0U)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d018      	beq.n	80063d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085a      	lsrs	r2, r3, #1
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	441a      	add	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d909      	bls.n	80063cc <UART_SetConfig+0x4a0>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063be:	d205      	bcs.n	80063cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	e001      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40007c00 	.word	0x40007c00
 80063ec:	40023800 	.word	0x40023800
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b098      	sub	sp, #96	@ 0x60
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fb faa8 	bl	8001a9c <HAL_GetTick>
 800654c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d12e      	bne.n	80065ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f88c 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d021      	beq.n	80065ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800658a:	653b      	str	r3, [r7, #80]	@ 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006594:	647b      	str	r3, [r7, #68]	@ 0x44
 8006596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e062      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d149      	bne.n	800665c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f856 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03c      	beq.n	800665c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	623b      	str	r3, [r7, #32]
   return(result);
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
 8006602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	60fb      	str	r3, [r7, #12]
   return(result);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	617b      	str	r3, [r7, #20]
   return(result);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e011      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3758      	adds	r7, #88	@ 0x58
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	e04f      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a0:	d04b      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fb f9fb 	bl	8001a9c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e04e      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d037      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b80      	cmp	r3, #128	@ 0x80
 80066ce:	d034      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d031      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d110      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f8ff 	bl	80068f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2208      	movs	r2, #8
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e029      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006714:	d111      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800671e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8e5 	bl	80068f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00f      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d0a0      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b096      	sub	sp, #88	@ 0x58
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2222      	movs	r2, #34	@ 0x22
 800678c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006794:	2b00      	cmp	r3, #0
 8006796:	d028      	beq.n	80067ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679c:	4a3e      	ldr	r2, [pc, #248]	@ (8006898 <UART_Start_Receive_DMA+0x134>)
 800679e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a4:	4a3d      	ldr	r2, [pc, #244]	@ (800689c <UART_Start_Receive_DMA+0x138>)
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ac:	4a3c      	ldr	r2, [pc, #240]	@ (80068a0 <UART_Start_Receive_DMA+0x13c>)
 80067ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b4:	2200      	movs	r2, #0
 80067b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3324      	adds	r3, #36	@ 0x24
 80067c2:	4619      	mov	r1, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	461a      	mov	r2, r3
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	f7fb fb26 	bl	8001e1c <HAL_DMA_Start_IT>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2210      	movs	r2, #16
 80067da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e051      	b.n	800688e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d018      	beq.n	8006824 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006806:	657b      	str	r3, [r7, #84]	@ 0x54
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006812:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800681e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	653b      	str	r3, [r7, #80]	@ 0x50
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006844:	637a      	str	r2, [r7, #52]	@ 0x34
 8006846:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800684a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3308      	adds	r3, #8
 800685e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006878:	623a      	str	r2, [r7, #32]
 800687a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	61bb      	str	r3, [r7, #24]
   return(result);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e5      	bne.n	8006858 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3758      	adds	r7, #88	@ 0x58
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	08006a6b 	.word	0x08006a6b
 800689c:	08006b93 	.word	0x08006b93
 80068a0:	08006bd1 	.word	0x08006bd1

080068a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b089      	sub	sp, #36	@ 0x24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6979      	ldr	r1, [r7, #20]
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	613b      	str	r3, [r7, #16]
   return(result);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068e4:	bf00      	nop
 80068e6:	3724      	adds	r7, #36	@ 0x24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b095      	sub	sp, #84	@ 0x54
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006916:	643b      	str	r3, [r7, #64]	@ 0x40
 8006918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800691c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e6      	bne.n	80068f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	61fb      	str	r3, [r7, #28]
   return(result);
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006962:	2b01      	cmp	r3, #1
 8006964:	d118      	bne.n	8006998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	60bb      	str	r3, [r7, #8]
   return(result);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f023 0310 	bic.w	r3, r3, #16
 800697a:	647b      	str	r3, [r7, #68]	@ 0x44
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069ac:	bf00      	nop
 80069ae:	3754      	adds	r7, #84	@ 0x54
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b090      	sub	sp, #64	@ 0x40
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ce:	d037      	beq.n	8006a40 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80069d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	e853 3f00 	ldrex	r3, [r3]
 80069e6:	623b      	str	r3, [r7, #32]
   return(result);
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e5      	bne.n	80069d8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	617b      	str	r3, [r7, #20]
   return(result);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e6      	bne.n	8006a0c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a3e:	e002      	b.n	8006a46 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006a40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a42:	f7ff fa2b 	bl	8005e9c <HAL_UART_TxCpltCallback>
}
 8006a46:	bf00      	nop
 8006a48:	3740      	adds	r7, #64	@ 0x40
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fa27 	bl	8005eb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b09c      	sub	sp, #112	@ 0x70
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a80:	d071      	beq.n	8006b66 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aaa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006adc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ade:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e5      	bne.n	8006abc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	623b      	str	r3, [r7, #32]
   return(result);
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b10:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e5      	bne.n	8006af0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d118      	bne.n	8006b66 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f023 0310 	bic.w	r3, r3, #16
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e6      	bne.n	8006b34 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b68:	2200      	movs	r2, #0
 8006b6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d107      	bne.n	8006b84 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b7e:	f7ff f9bf 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b82:	e002      	b.n	8006b8a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006b84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b86:	f7ff f99d 	bl	8005ec4 <HAL_UART_RxCpltCallback>
}
 8006b8a:	bf00      	nop
 8006b8c:	3770      	adds	r7, #112	@ 0x70
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d109      	bne.n	8006bc2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	4619      	mov	r1, r3
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff f9a0 	bl	8005f00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bc0:	e002      	b.n	8006bc8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff f988 	bl	8005ed8 <HAL_UART_RxHalfCpltCallback>
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bdc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006be2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	2b80      	cmp	r3, #128	@ 0x80
 8006bf8:	d109      	bne.n	8006c0e <UART_DMAError+0x3e>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b21      	cmp	r3, #33	@ 0x21
 8006bfe:	d106      	bne.n	8006c0e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006c08:	6978      	ldr	r0, [r7, #20]
 8006c0a:	f7ff fe4b 	bl	80068a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d109      	bne.n	8006c30 <UART_DMAError+0x60>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b22      	cmp	r3, #34	@ 0x22
 8006c20:	d106      	bne.n	8006c30 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006c2a:	6978      	ldr	r0, [r7, #20]
 8006c2c:	f7ff fe60 	bl	80068f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c36:	f043 0210 	orr.w	r2, r3, #16
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c40:	6978      	ldr	r0, [r7, #20]
 8006c42:	f7ff f953 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c46:	bf00      	nop
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff f93d 	bl	8005eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b088      	sub	sp, #32
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	6979      	ldr	r1, [r7, #20]
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	613b      	str	r3, [r7, #16]
   return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e6      	bne.n	8006c82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff f8eb 	bl	8005e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	bf00      	nop
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	f107 001c 	add.w	r0, r7, #28
 8006cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d121      	bne.n	8006d2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <USB_CoreInit+0xb0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fade 	bl	80082e4 <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e010      	b.n	8006d50 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fad2 	bl	80082e4 <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d50:	7fbb      	ldrb	r3, [r7, #30]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10b      	bne.n	8006d6e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f043 0206 	orr.w	r2, r3, #6
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7a:	b004      	add	sp, #16
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	ffbdffbf 	.word	0xffbdffbf

08006d84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d165      	bne.n	8006e64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4a41      	ldr	r2, [pc, #260]	@ (8006ea0 <USB_SetTurnaroundTime+0x11c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d906      	bls.n	8006dae <USB_SetTurnaroundTime+0x2a>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a40      	ldr	r2, [pc, #256]	@ (8006ea4 <USB_SetTurnaroundTime+0x120>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d202      	bcs.n	8006dae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006da8:	230f      	movs	r3, #15
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e062      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ea4 <USB_SetTurnaroundTime+0x120>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d306      	bcc.n	8006dc4 <USB_SetTurnaroundTime+0x40>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ea8 <USB_SetTurnaroundTime+0x124>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d202      	bcs.n	8006dc4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006dbe:	230e      	movs	r3, #14
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e057      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4a38      	ldr	r2, [pc, #224]	@ (8006ea8 <USB_SetTurnaroundTime+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d306      	bcc.n	8006dda <USB_SetTurnaroundTime+0x56>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a37      	ldr	r2, [pc, #220]	@ (8006eac <USB_SetTurnaroundTime+0x128>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d202      	bcs.n	8006dda <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006dd4:	230d      	movs	r3, #13
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e04c      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4a33      	ldr	r2, [pc, #204]	@ (8006eac <USB_SetTurnaroundTime+0x128>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d306      	bcc.n	8006df0 <USB_SetTurnaroundTime+0x6c>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4a32      	ldr	r2, [pc, #200]	@ (8006eb0 <USB_SetTurnaroundTime+0x12c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d802      	bhi.n	8006df0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006dea:	230c      	movs	r3, #12
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	e041      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb0 <USB_SetTurnaroundTime+0x12c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d906      	bls.n	8006e06 <USB_SetTurnaroundTime+0x82>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8006eb4 <USB_SetTurnaroundTime+0x130>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d802      	bhi.n	8006e06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e00:	230b      	movs	r3, #11
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e036      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb4 <USB_SetTurnaroundTime+0x130>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d906      	bls.n	8006e1c <USB_SetTurnaroundTime+0x98>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4a29      	ldr	r2, [pc, #164]	@ (8006eb8 <USB_SetTurnaroundTime+0x134>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d802      	bhi.n	8006e1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e16:	230a      	movs	r3, #10
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e02b      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	@ (8006eb8 <USB_SetTurnaroundTime+0x134>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d906      	bls.n	8006e32 <USB_SetTurnaroundTime+0xae>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4a25      	ldr	r2, [pc, #148]	@ (8006ebc <USB_SetTurnaroundTime+0x138>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d202      	bcs.n	8006e32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e2c:	2309      	movs	r3, #9
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e020      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	4a21      	ldr	r2, [pc, #132]	@ (8006ebc <USB_SetTurnaroundTime+0x138>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d306      	bcc.n	8006e48 <USB_SetTurnaroundTime+0xc4>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ec0 <USB_SetTurnaroundTime+0x13c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d802      	bhi.n	8006e48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e42:	2308      	movs	r3, #8
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e015      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec0 <USB_SetTurnaroundTime+0x13c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d906      	bls.n	8006e5e <USB_SetTurnaroundTime+0xda>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec4 <USB_SetTurnaroundTime+0x140>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d202      	bcs.n	8006e5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e58:	2307      	movs	r3, #7
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e00a      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e5e:	2306      	movs	r3, #6
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e007      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e6a:	2309      	movs	r3, #9
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	e001      	b.n	8006e74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e70:	2309      	movs	r3, #9
 8006e72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	00d8acbf 	.word	0x00d8acbf
 8006ea4:	00e4e1c0 	.word	0x00e4e1c0
 8006ea8:	00f42400 	.word	0x00f42400
 8006eac:	01067380 	.word	0x01067380
 8006eb0:	011a499f 	.word	0x011a499f
 8006eb4:	01312cff 	.word	0x01312cff
 8006eb8:	014ca43f 	.word	0x014ca43f
 8006ebc:	016e3600 	.word	0x016e3600
 8006ec0:	01a6ab1f 	.word	0x01a6ab1f
 8006ec4:	01e84800 	.word	0x01e84800

08006ec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f043 0201 	orr.w	r2, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f023 0201 	bic.w	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d115      	bne.n	8006f5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f3a:	200a      	movs	r0, #10
 8006f3c:	f7fa fdba 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	330a      	adds	r3, #10
 8006f44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f93b 	bl	80081c2 <USB_GetMode>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d01e      	beq.n	8006f90 <USB_SetCurrentMode+0x84>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f56:	d9f0      	bls.n	8006f3a <USB_SetCurrentMode+0x2e>
 8006f58:	e01a      	b.n	8006f90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d115      	bne.n	8006f8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f6c:	200a      	movs	r0, #10
 8006f6e:	f7fa fda1 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	330a      	adds	r3, #10
 8006f76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f922 	bl	80081c2 <USB_GetMode>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <USB_SetCurrentMode+0x84>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f88:	d9f0      	bls.n	8006f6c <USB_SetCurrentMode+0x60>
 8006f8a:	e001      	b.n	8006f90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e005      	b.n	8006f9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f94:	d101      	bne.n	8006f9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	e009      	b.n	8006fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	3340      	adds	r3, #64	@ 0x40
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b0e      	cmp	r3, #14
 8006fdc:	d9f2      	bls.n	8006fc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d11c      	bne.n	8007020 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e005      	b.n	800702c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007032:	461a      	mov	r2, r3
 8007034:	2300      	movs	r3, #0
 8007036:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007038:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800703c:	2b01      	cmp	r3, #1
 800703e:	d10d      	bne.n	800705c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f968 	bl	8007320 <USB_SetDevSpeed>
 8007050:	e008      	b.n	8007064 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f963 	bl	8007320 <USB_SetDevSpeed>
 800705a:	e003      	b.n	8007064 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800705c:	2103      	movs	r1, #3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f95e 	bl	8007320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007064:	2110      	movs	r1, #16
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f8fa 	bl	8007260 <USB_FlushTxFifo>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f924 	bl	80072c4 <USB_FlushRxFifo>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708c:	461a      	mov	r2, r3
 800708e:	2300      	movs	r3, #0
 8007090:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	461a      	mov	r2, r3
 800709a:	2300      	movs	r3, #0
 800709c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e043      	b.n	8007138 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070c6:	d118      	bne.n	80070fa <USB_DevInit+0x156>
    {
      if (i == 0U)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e013      	b.n	800710c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f0:	461a      	mov	r2, r3
 80070f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e008      	b.n	800710c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007106:	461a      	mov	r2, r3
 8007108:	2300      	movs	r3, #0
 800710a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007118:	461a      	mov	r2, r3
 800711a:	2300      	movs	r3, #0
 800711c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712a:	461a      	mov	r2, r3
 800712c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3301      	adds	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800713c:	461a      	mov	r2, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4293      	cmp	r3, r2
 8007142:	d3b5      	bcc.n	80070b0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	e043      	b.n	80071d2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800715c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007160:	d118      	bne.n	8007194 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007174:	461a      	mov	r2, r3
 8007176:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	e013      	b.n	80071a6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	461a      	mov	r2, r3
 800718c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e008      	b.n	80071a6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a0:	461a      	mov	r2, r3
 80071a2:	2300      	movs	r3, #0
 80071a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b2:	461a      	mov	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c4:	461a      	mov	r2, r3
 80071c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	3301      	adds	r3, #1
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071d6:	461a      	mov	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4293      	cmp	r3, r2
 80071dc:	d3b5      	bcc.n	800714a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007200:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007204:	2b00      	cmp	r3, #0
 8007206:	d105      	bne.n	8007214 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f043 0210 	orr.w	r2, r3, #16
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	4b0f      	ldr	r3, [pc, #60]	@ (8007258 <USB_DevInit+0x2b4>)
 800721a:	4313      	orrs	r3, r2
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007220:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f043 0208 	orr.w	r2, r3, #8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007234:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007238:	2b01      	cmp	r3, #1
 800723a:	d105      	bne.n	8007248 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	4b06      	ldr	r3, [pc, #24]	@ (800725c <USB_DevInit+0x2b8>)
 8007242:	4313      	orrs	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr
 8007258:	803c3800 	.word	0x803c3800
 800725c:	40000004 	.word	0x40000004

08007260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800727a:	d901      	bls.n	8007280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e01b      	b.n	80072b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	daf2      	bge.n	800726e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	019b      	lsls	r3, r3, #6
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072a4:	d901      	bls.n	80072aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e006      	b.n	80072b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	d0f0      	beq.n	8007298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072dc:	d901      	bls.n	80072e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e018      	b.n	8007314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	daf2      	bge.n	80072d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2210      	movs	r2, #16
 80072f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007300:	d901      	bls.n	8007306 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e006      	b.n	8007314 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2b10      	cmp	r3, #16
 8007310:	d0f0      	beq.n	80072f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007340:	4313      	orrs	r3, r2
 8007342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0306 	and.w	r3, r3, #6
 800736a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007372:	2300      	movs	r3, #0
 8007374:	75fb      	strb	r3, [r7, #23]
 8007376:	e00a      	b.n	800738e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d002      	beq.n	8007384 <USB_GetDevSpeed+0x32>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b06      	cmp	r3, #6
 8007382:	d102      	bne.n	800738a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007384:	2302      	movs	r3, #2
 8007386:	75fb      	strb	r3, [r7, #23]
 8007388:	e001      	b.n	800738e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800738a:	230f      	movs	r3, #15
 800738c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d139      	bne.n	800742c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	2101      	movs	r1, #1
 80073ca:	fa01 f303 	lsl.w	r3, r1, r3
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	68f9      	ldr	r1, [r7, #12]
 80073d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d153      	bne.n	8007498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800740c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	059b      	lsls	r3, r3, #22
 8007412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007414:	431a      	orrs	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	0159      	lsls	r1, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	440b      	add	r3, r1
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	4619      	mov	r1, r3
 8007424:	4b20      	ldr	r3, [pc, #128]	@ (80074a8 <USB_ActivateEndpoint+0x10c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	600b      	str	r3, [r1, #0]
 800742a:	e035      	b.n	8007498 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	2101      	movs	r1, #1
 800743e:	fa01 f303 	lsl.w	r3, r1, r3
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	68f9      	ldr	r1, [r7, #12]
 8007446:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800744a:	4313      	orrs	r3, r2
 800744c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d119      	bne.n	8007498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	791b      	ldrb	r3, [r3, #4]
 800747e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007480:	430b      	orrs	r3, r1
 8007482:	431a      	orrs	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	0159      	lsls	r1, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	440b      	add	r3, r1
 800748c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007490:	4619      	mov	r1, r3
 8007492:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <USB_ActivateEndpoint+0x10c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	10008000 	.word	0x10008000

080074ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d161      	bne.n	800758c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074de:	d11f      	bne.n	8007520 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800751e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	2101      	movs	r1, #1
 8007532:	fa01 f303 	lsl.w	r3, r1, r3
 8007536:	b29b      	uxth	r3, r3
 8007538:	43db      	mvns	r3, r3
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007540:	4013      	ands	r3, r2
 8007542:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	2101      	movs	r1, #1
 8007556:	fa01 f303 	lsl.w	r3, r1, r3
 800755a:	b29b      	uxth	r3, r3
 800755c:	43db      	mvns	r3, r3
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007564:	4013      	ands	r3, r2
 8007566:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	0159      	lsls	r1, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	440b      	add	r3, r1
 800757e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007582:	4619      	mov	r1, r3
 8007584:	4b35      	ldr	r3, [pc, #212]	@ (800765c <USB_DeactivateEndpoint+0x1b0>)
 8007586:	4013      	ands	r3, r2
 8007588:	600b      	str	r3, [r1, #0]
 800758a:	e060      	b.n	800764e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800759e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075a2:	d11f      	bne.n	80075e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	43db      	mvns	r3, r3
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007604:	4013      	ands	r3, r2
 8007606:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f303 	lsl.w	r3, r1, r3
 800761e:	041b      	lsls	r3, r3, #16
 8007620:	43db      	mvns	r3, r3
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007628:	4013      	ands	r3, r2
 800762a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	0159      	lsls	r1, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	440b      	add	r3, r1
 8007642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007646:	4619      	mov	r1, r3
 8007648:	4b05      	ldr	r3, [pc, #20]	@ (8007660 <USB_DeactivateEndpoint+0x1b4>)
 800764a:	4013      	ands	r3, r2
 800764c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	ec337800 	.word	0xec337800
 8007660:	eff37800 	.word	0xeff37800

08007664 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	@ 0x28
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	f040 8181 	bne.w	8007988 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d132      	bne.n	80076f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	0159      	lsls	r1, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	440b      	add	r3, r1
 80076a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a8:	4619      	mov	r1, r3
 80076aa:	4ba5      	ldr	r3, [pc, #660]	@ (8007940 <USB_EPStartXfer+0x2dc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	0159      	lsls	r1, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	440b      	add	r3, r1
 80076e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ea:	4619      	mov	r1, r3
 80076ec:	4b95      	ldr	r3, [pc, #596]	@ (8007944 <USB_EPStartXfer+0x2e0>)
 80076ee:	4013      	ands	r3, r2
 80076f0:	610b      	str	r3, [r1, #16]
 80076f2:	e092      	b.n	800781a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	0159      	lsls	r1, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	440b      	add	r3, r1
 800770a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770e:	4619      	mov	r1, r3
 8007710:	4b8c      	ldr	r3, [pc, #560]	@ (8007944 <USB_EPStartXfer+0x2e0>)
 8007712:	4013      	ands	r3, r2
 8007714:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	0159      	lsls	r1, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	440b      	add	r3, r1
 800772c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007730:	4619      	mov	r1, r3
 8007732:	4b83      	ldr	r3, [pc, #524]	@ (8007940 <USB_EPStartXfer+0x2dc>)
 8007734:	4013      	ands	r3, r2
 8007736:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d11a      	bne.n	8007774 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d903      	bls.n	8007752 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007770:	6113      	str	r3, [r2, #16]
 8007772:	e01b      	b.n	80077ac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007780:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6919      	ldr	r1, [r3, #16]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	440b      	add	r3, r1
 800778c:	1e59      	subs	r1, r3, #1
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	fbb1 f3f3 	udiv	r3, r1, r3
 8007796:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007798:	4b6b      	ldr	r3, [pc, #428]	@ (8007948 <USB_EPStartXfer+0x2e4>)
 800779a:	400b      	ands	r3, r1
 800779c:	69b9      	ldr	r1, [r7, #24]
 800779e:	0148      	lsls	r0, r1, #5
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	4401      	add	r1, r0
 80077a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077a8:	4313      	orrs	r3, r2
 80077aa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077c2:	69b9      	ldr	r1, [r7, #24]
 80077c4:	0148      	lsls	r0, r1, #5
 80077c6:	69f9      	ldr	r1, [r7, #28]
 80077c8:	4401      	add	r1, r0
 80077ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077ce:	4313      	orrs	r3, r2
 80077d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	791b      	ldrb	r3, [r3, #4]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d11f      	bne.n	800781a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077f4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80077f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	440a      	add	r2, r1
 8007810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007814:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007818:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d14b      	bne.n	80078b8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d009      	beq.n	800783c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007834:	461a      	mov	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	791b      	ldrb	r3, [r3, #4]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d128      	bne.n	8007896 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d110      	bne.n	8007876 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	0151      	lsls	r1, r2, #5
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	440a      	add	r2, r1
 800786a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e00f      	b.n	8007896 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007894:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e16a      	b.n	8007b8e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	791b      	ldrb	r3, [r3, #4]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d015      	beq.n	800790c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8152 	beq.w	8007b8e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	2101      	movs	r1, #1
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007906:	4313      	orrs	r3, r2
 8007908:	634b      	str	r3, [r1, #52]	@ 0x34
 800790a:	e140      	b.n	8007b8e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d117      	bne.n	800794c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007936:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	e016      	b.n	800796c <USB_EPStartXfer+0x308>
 800793e:	bf00      	nop
 8007940:	e007ffff 	.word	0xe007ffff
 8007944:	fff80000 	.word	0xfff80000
 8007948:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800796a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68d9      	ldr	r1, [r3, #12]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	b298      	uxth	r0, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	4603      	mov	r3, r0
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f9b9 	bl	8007cf8 <USB_WritePacket>
 8007986:	e102      	b.n	8007b8e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	0159      	lsls	r1, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	440b      	add	r3, r1
 800799e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a2:	4619      	mov	r1, r3
 80079a4:	4b7c      	ldr	r3, [pc, #496]	@ (8007b98 <USB_EPStartXfer+0x534>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	0159      	lsls	r1, r3, #5
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	440b      	add	r3, r1
 80079c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c4:	4619      	mov	r1, r3
 80079c6:	4b75      	ldr	r3, [pc, #468]	@ (8007b9c <USB_EPStartXfer+0x538>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d12f      	bne.n	8007a32 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a00:	69b9      	ldr	r1, [r7, #24]
 8007a02:	0148      	lsls	r0, r1, #5
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	4401      	add	r1, r0
 8007a08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a2e:	6113      	str	r3, [r2, #16]
 8007a30:	e05f      	b.n	8007af2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d123      	bne.n	8007a82 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a50:	69b9      	ldr	r1, [r7, #24]
 8007a52:	0148      	lsls	r0, r1, #5
 8007a54:	69f9      	ldr	r1, [r7, #28]
 8007a56:	4401      	add	r1, r0
 8007a58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a7e:	6113      	str	r3, [r2, #16]
 8007a80:	e037      	b.n	8007af2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	8afa      	ldrh	r2, [r7, #22]
 8007a9e:	fb03 f202 	mul.w	r2, r3, r2
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	8afb      	ldrh	r3, [r7, #22]
 8007ab6:	04d9      	lsls	r1, r3, #19
 8007ab8:	4b39      	ldr	r3, [pc, #228]	@ (8007ba0 <USB_EPStartXfer+0x53c>)
 8007aba:	400b      	ands	r3, r1
 8007abc:	69b9      	ldr	r1, [r7, #24]
 8007abe:	0148      	lsls	r0, r1, #5
 8007ac0:	69f9      	ldr	r1, [r7, #28]
 8007ac2:	4401      	add	r1, r0
 8007ac4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae2:	69b9      	ldr	r1, [r7, #24]
 8007ae4:	0148      	lsls	r0, r1, #5
 8007ae6:	69f9      	ldr	r1, [r7, #28]
 8007ae8:	4401      	add	r1, r0
 8007aea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007aee:	4313      	orrs	r3, r2
 8007af0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d10d      	bne.n	8007b14 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	68d9      	ldr	r1, [r3, #12]
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b10:	460a      	mov	r2, r1
 8007b12:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	791b      	ldrb	r3, [r3, #4]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d128      	bne.n	8007b6e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d110      	bne.n	8007b4e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e00f      	b.n	8007b6e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b6c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	0151      	lsls	r1, r2, #5
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	440a      	add	r2, r1
 8007b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	fff80000 	.word	0xfff80000
 8007b9c:	e007ffff 	.word	0xe007ffff
 8007ba0:	1ff80000 	.word	0x1ff80000

08007ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d14a      	bne.n	8007c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bda:	f040 8086 	bne.w	8007cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d902      	bls.n	8007c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
          break;
 8007c3a:	e056      	b.n	8007cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c54:	d0e7      	beq.n	8007c26 <USB_EPStopXfer+0x82>
 8007c56:	e048      	b.n	8007cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c70:	d13b      	bne.n	8007cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	7812      	ldrb	r2, [r2, #0]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d902      	bls.n	8007cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8007cce:	e00c      	b.n	8007cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce8:	d0e7      	beq.n	8007cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	@ 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4611      	mov	r1, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	460b      	mov	r3, r1
 8007d08:	71fb      	strb	r3, [r7, #7]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d123      	bne.n	8007d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d1e:	88bb      	ldrh	r3, [r7, #4]
 8007d20:	3303      	adds	r3, #3
 8007d22:	089b      	lsrs	r3, r3, #2
 8007d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	e018      	b.n	8007d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	031a      	lsls	r2, r3, #12
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d38:	461a      	mov	r2, r3
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	3301      	adds	r3, #1
 8007d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d3e2      	bcc.n	8007d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3724      	adds	r7, #36	@ 0x24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b08b      	sub	sp, #44	@ 0x2c
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d8a:	88fb      	ldrh	r3, [r7, #6]
 8007d8c:	089b      	lsrs	r3, r3, #2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	623b      	str	r3, [r7, #32]
 8007d9e:	e014      	b.n	8007dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	3301      	adds	r3, #1
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	3301      	adds	r3, #1
 8007db6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	3301      	adds	r3, #1
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	623b      	str	r3, [r7, #32]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d3e6      	bcc.n	8007da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dd2:	8bfb      	ldrh	r3, [r7, #30]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01e      	beq.n	8007e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de2:	461a      	mov	r2, r3
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	3301      	adds	r3, #1
 8007e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	3301      	adds	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007e0a:	8bfb      	ldrh	r3, [r7, #30]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e10:	8bfb      	ldrh	r3, [r7, #30]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1ea      	bne.n	8007dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	372c      	adds	r7, #44	@ 0x2c
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d12c      	bne.n	8007e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	db12      	blt.n	8007e78 <USB_EPSetStall+0x54>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00f      	beq.n	8007e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	0151      	lsls	r1, r2, #5
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	440a      	add	r2, r1
 8007e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	e02b      	b.n	8007ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	db12      	blt.n	8007ed2 <USB_EPSetStall+0xae>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ecc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d128      	bne.n	8007f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	791b      	ldrb	r3, [r3, #4]
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d003      	beq.n	8007f4c <USB_EPClearStall+0x4c>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d138      	bne.n	8007fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e027      	b.n	8007fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d003      	beq.n	8007f9e <USB_EPClearStall+0x9e>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	791b      	ldrb	r3, [r3, #4]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d10f      	bne.n	8007fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	011b      	lsls	r3, r3, #4
 8007ffc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008000:	68f9      	ldr	r1, [r7, #12]
 8008002:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008006:	4313      	orrs	r3, r2
 8008008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008032:	f023 0303 	bic.w	r3, r3, #3
 8008036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008046:	f023 0302 	bic.w	r3, r3, #2
 800804a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008088:	f043 0302 	orr.w	r3, r3, #2
 800808c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4013      	ands	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	4013      	ands	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	0c1b      	lsrs	r3, r3, #16
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	4013      	ands	r3, r2
 8008118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	b29b      	uxth	r3, r3
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008158:	68bb      	ldr	r3, [r7, #8]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008188:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	fa22 f303 	lsr.w	r3, r2, r3
 8008196:	01db      	lsls	r3, r3, #7
 8008198:	b2db      	uxtb	r3, r3
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4013      	ands	r3, r2
 80081b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081b4:	68bb      	ldr	r3, [r7, #8]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0301 	and.w	r3, r3, #1
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081fa:	4619      	mov	r1, r3
 80081fc:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <USB_ActivateSetup+0x44>)
 80081fe:	4013      	ands	r3, r2
 8008200:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	fffff800 	.word	0xfffff800

08008228 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	460b      	mov	r3, r1
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	333c      	adds	r3, #60	@ 0x3c
 800823e:	3304      	adds	r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4a26      	ldr	r2, [pc, #152]	@ (80082e0 <USB_EP0_OutStart+0xb8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d90a      	bls.n	8008262 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800825c:	d101      	bne.n	8008262 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e037      	b.n	80082d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008268:	461a      	mov	r2, r3
 800826a:	2300      	movs	r3, #0
 800826c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800827c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008290:	f043 0318 	orr.w	r3, r3, #24
 8008294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80082a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10f      	bne.n	80082d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80082ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	4f54300a 	.word	0x4f54300a

080082e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3301      	adds	r3, #1
 80082f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082fc:	d901      	bls.n	8008302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e01b      	b.n	800833a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	daf2      	bge.n	80082f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f043 0201 	orr.w	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008326:	d901      	bls.n	800832c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e006      	b.n	800833a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b01      	cmp	r3, #1
 8008336:	d0f0      	beq.n	800831a <USB_CoreReset+0x36>

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008354:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008358:	f00e fae2 	bl	8016920 <malloc>
 800835c:	4603      	mov	r3, r0
 800835e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d109      	bne.n	800837a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32b0      	adds	r2, #176	@ 0xb0
 8008370:	2100      	movs	r1, #0
 8008372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008376:	2302      	movs	r3, #2
 8008378:	e0d4      	b.n	8008524 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800837a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800837e:	2100      	movs	r1, #0
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f00e ff37 	bl	80171f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	32b0      	adds	r2, #176	@ 0xb0
 8008390:	68f9      	ldr	r1, [r7, #12]
 8008392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	32b0      	adds	r2, #176	@ 0xb0
 80083a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7c1b      	ldrb	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d138      	bne.n	8008424 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083b2:	4b5e      	ldr	r3, [pc, #376]	@ (800852c <USBD_CDC_Init+0x1e4>)
 80083b4:	7819      	ldrb	r1, [r3, #0]
 80083b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ba:	2202      	movs	r2, #2
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f005 f988 	bl	800d6d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083c2:	4b5a      	ldr	r3, [pc, #360]	@ (800852c <USBD_CDC_Init+0x1e4>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3324      	adds	r3, #36	@ 0x24
 80083d8:	2201      	movs	r2, #1
 80083da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083dc:	4b54      	ldr	r3, [pc, #336]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 80083de:	7819      	ldrb	r1, [r3, #0]
 80083e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083e4:	2202      	movs	r2, #2
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f005 f973 	bl	800d6d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083ec:	4b50      	ldr	r3, [pc, #320]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008404:	2201      	movs	r2, #1
 8008406:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008408:	4b4a      	ldr	r3, [pc, #296]	@ (8008534 <USBD_CDC_Init+0x1ec>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 020f 	and.w	r2, r3, #15
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	3326      	adds	r3, #38	@ 0x26
 800841e:	2210      	movs	r2, #16
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e035      	b.n	8008490 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008424:	4b41      	ldr	r3, [pc, #260]	@ (800852c <USBD_CDC_Init+0x1e4>)
 8008426:	7819      	ldrb	r1, [r3, #0]
 8008428:	2340      	movs	r3, #64	@ 0x40
 800842a:	2202      	movs	r2, #2
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f005 f950 	bl	800d6d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008432:	4b3e      	ldr	r3, [pc, #248]	@ (800852c <USBD_CDC_Init+0x1e4>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	f003 020f 	and.w	r2, r3, #15
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	3324      	adds	r3, #36	@ 0x24
 8008448:	2201      	movs	r2, #1
 800844a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800844c:	4b38      	ldr	r3, [pc, #224]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 800844e:	7819      	ldrb	r1, [r3, #0]
 8008450:	2340      	movs	r3, #64	@ 0x40
 8008452:	2202      	movs	r2, #2
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f005 f93c 	bl	800d6d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800845a:	4b35      	ldr	r3, [pc, #212]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 020f 	and.w	r2, r3, #15
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008472:	2201      	movs	r2, #1
 8008474:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008476:	4b2f      	ldr	r3, [pc, #188]	@ (8008534 <USBD_CDC_Init+0x1ec>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 020f 	and.w	r2, r3, #15
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4613      	mov	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	3326      	adds	r3, #38	@ 0x26
 800848c:	2210      	movs	r2, #16
 800848e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008490:	4b28      	ldr	r3, [pc, #160]	@ (8008534 <USBD_CDC_Init+0x1ec>)
 8008492:	7819      	ldrb	r1, [r3, #0]
 8008494:	2308      	movs	r3, #8
 8008496:	2203      	movs	r2, #3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f005 f91a 	bl	800d6d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800849e:	4b25      	ldr	r3, [pc, #148]	@ (8008534 <USBD_CDC_Init+0x1ec>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	f003 020f 	and.w	r2, r3, #15
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3324      	adds	r3, #36	@ 0x24
 80084b4:	2201      	movs	r2, #1
 80084b6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	33b0      	adds	r3, #176	@ 0xb0
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80084ee:	2302      	movs	r3, #2
 80084f0:	e018      	b.n	8008524 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7c1b      	ldrb	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 80084fc:	7819      	ldrb	r1, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f005 f9d1 	bl	800d8b0 <USBD_LL_PrepareReceive>
 800850e:	e008      	b.n	8008522 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008510:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <USBD_CDC_Init+0x1e8>)
 8008512:	7819      	ldrb	r1, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800851a:	2340      	movs	r3, #64	@ 0x40
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f005 f9c7 	bl	800d8b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000097 	.word	0x20000097
 8008530:	20000098 	.word	0x20000098
 8008534:	20000099 	.word	0x20000099

08008538 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008544:	4b3a      	ldr	r3, [pc, #232]	@ (8008630 <USBD_CDC_DeInit+0xf8>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f005 f8e7 	bl	800d71e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008550:	4b37      	ldr	r3, [pc, #220]	@ (8008630 <USBD_CDC_DeInit+0xf8>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	3324      	adds	r3, #36	@ 0x24
 8008566:	2200      	movs	r2, #0
 8008568:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800856a:	4b32      	ldr	r3, [pc, #200]	@ (8008634 <USBD_CDC_DeInit+0xfc>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f005 f8d4 	bl	800d71e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008576:	4b2f      	ldr	r3, [pc, #188]	@ (8008634 <USBD_CDC_DeInit+0xfc>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f003 020f 	and.w	r2, r3, #15
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800858e:	2200      	movs	r2, #0
 8008590:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008592:	4b29      	ldr	r3, [pc, #164]	@ (8008638 <USBD_CDC_DeInit+0x100>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f005 f8c0 	bl	800d71e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800859e:	4b26      	ldr	r3, [pc, #152]	@ (8008638 <USBD_CDC_DeInit+0x100>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 020f 	and.w	r2, r3, #15
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	3324      	adds	r3, #36	@ 0x24
 80085b4:	2200      	movs	r2, #0
 80085b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80085b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008638 <USBD_CDC_DeInit+0x100>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 020f 	and.w	r2, r3, #15
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	3326      	adds	r3, #38	@ 0x26
 80085ce:	2200      	movs	r2, #0
 80085d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	32b0      	adds	r2, #176	@ 0xb0
 80085dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01f      	beq.n	8008624 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	33b0      	adds	r3, #176	@ 0xb0
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	32b0      	adds	r2, #176	@ 0xb0
 8008602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008606:	4618      	mov	r0, r3
 8008608:	f00e f992 	bl	8016930 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	32b0      	adds	r2, #176	@ 0xb0
 8008616:	2100      	movs	r1, #0
 8008618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000097 	.word	0x20000097
 8008634:	20000098 	.word	0x20000098
 8008638:	20000099 	.word	0x20000099

0800863c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	32b0      	adds	r2, #176	@ 0xb0
 8008650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	e0bf      	b.n	80087ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008674:	2b00      	cmp	r3, #0
 8008676:	d050      	beq.n	800871a <USBD_CDC_Setup+0xde>
 8008678:	2b20      	cmp	r3, #32
 800867a:	f040 80af 	bne.w	80087dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	88db      	ldrh	r3, [r3, #6]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d03a      	beq.n	80086fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	b25b      	sxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	da1b      	bge.n	80086c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	33b0      	adds	r3, #176	@ 0xb0
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80086a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	88d2      	ldrh	r2, [r2, #6]
 80086ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	88db      	ldrh	r3, [r3, #6]
 80086b2:	2b07      	cmp	r3, #7
 80086b4:	bf28      	it	cs
 80086b6:	2307      	movcs	r3, #7
 80086b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	89fa      	ldrh	r2, [r7, #14]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fd7d 	bl	800a1c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80086c6:	e090      	b.n	80087ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	785a      	ldrb	r2, [r3, #1]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	88db      	ldrh	r3, [r3, #6]
 80086d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80086d8:	d803      	bhi.n	80086e2 <USBD_CDC_Setup+0xa6>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88db      	ldrh	r3, [r3, #6]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	e000      	b.n	80086e4 <USBD_CDC_Setup+0xa8>
 80086e2:	2240      	movs	r2, #64	@ 0x40
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80086ea:	6939      	ldr	r1, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80086f2:	461a      	mov	r2, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fd8f 	bl	800a218 <USBD_CtlPrepareRx>
      break;
 80086fa:	e076      	b.n	80087ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	33b0      	adds	r3, #176	@ 0xb0
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	7850      	ldrb	r0, [r2, #1]
 8008712:	2200      	movs	r2, #0
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	4798      	blx	r3
      break;
 8008718:	e067      	b.n	80087ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b0b      	cmp	r3, #11
 8008720:	d851      	bhi.n	80087c6 <USBD_CDC_Setup+0x18a>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <USBD_CDC_Setup+0xec>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008759 	.word	0x08008759
 800872c:	080087d5 	.word	0x080087d5
 8008730:	080087c7 	.word	0x080087c7
 8008734:	080087c7 	.word	0x080087c7
 8008738:	080087c7 	.word	0x080087c7
 800873c:	080087c7 	.word	0x080087c7
 8008740:	080087c7 	.word	0x080087c7
 8008744:	080087c7 	.word	0x080087c7
 8008748:	080087c7 	.word	0x080087c7
 800874c:	080087c7 	.word	0x080087c7
 8008750:	08008783 	.word	0x08008783
 8008754:	080087ad 	.word	0x080087ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d107      	bne.n	8008774 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008764:	f107 030a 	add.w	r3, r7, #10
 8008768:	2202      	movs	r2, #2
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 fd27 	bl	800a1c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008772:	e032      	b.n	80087da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 fca5 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800877c:	2303      	movs	r3, #3
 800877e:	75fb      	strb	r3, [r7, #23]
          break;
 8008780:	e02b      	b.n	80087da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b03      	cmp	r3, #3
 800878c:	d107      	bne.n	800879e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800878e:	f107 030d 	add.w	r3, r7, #13
 8008792:	2201      	movs	r2, #1
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fd12 	bl	800a1c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800879c:	e01d      	b.n	80087da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fc90 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80087a6:	2303      	movs	r3, #3
 80087a8:	75fb      	strb	r3, [r7, #23]
          break;
 80087aa:	e016      	b.n	80087da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d00f      	beq.n	80087d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fc83 	bl	800a0c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087c4:	e008      	b.n	80087d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fc7c 	bl	800a0c6 <USBD_CtlError>
          ret = USBD_FAIL;
 80087ce:	2303      	movs	r3, #3
 80087d0:	75fb      	strb	r3, [r7, #23]
          break;
 80087d2:	e002      	b.n	80087da <USBD_CDC_Setup+0x19e>
          break;
 80087d4:	bf00      	nop
 80087d6:	e008      	b.n	80087ea <USBD_CDC_Setup+0x1ae>
          break;
 80087d8:	bf00      	nop
      }
      break;
 80087da:	e006      	b.n	80087ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fc71 	bl	800a0c6 <USBD_CtlError>
      ret = USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	75fb      	strb	r3, [r7, #23]
      break;
 80087e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	32b0      	adds	r2, #176	@ 0xb0
 8008812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800881a:	2303      	movs	r3, #3
 800881c:	e065      	b.n	80088ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	32b0      	adds	r2, #176	@ 0xb0
 8008828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	f003 020f 	and.w	r2, r3, #15
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	3318      	adds	r3, #24
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d02f      	beq.n	80088a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	f003 020f 	and.w	r2, r3, #15
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	3318      	adds	r3, #24
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 010f 	and.w	r1, r3, #15
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	460b      	mov	r3, r1
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	440b      	add	r3, r1
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4403      	add	r3, r0
 8008870:	331c      	adds	r3, #28
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	fbb2 f1f3 	udiv	r1, r2, r3
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800887e:	2b00      	cmp	r3, #0
 8008880:	d112      	bne.n	80088a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008882:	78fb      	ldrb	r3, [r7, #3]
 8008884:	f003 020f 	and.w	r2, r3, #15
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3318      	adds	r3, #24
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800889a:	78f9      	ldrb	r1, [r7, #3]
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f004 ffe4 	bl	800d86e <USBD_LL_Transmit>
 80088a6:	e01f      	b.n	80088e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	33b0      	adds	r3, #176	@ 0xb0
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	33b0      	adds	r3, #176	@ 0xb0
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	32b0      	adds	r2, #176	@ 0xb0
 8008908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	32b0      	adds	r2, #176	@ 0xb0
 8008918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e01a      	b.n	800895a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f004 ffe2 	bl	800d8f2 <USBD_LL_GetRxDataSize>
 800892e:	4602      	mov	r2, r0
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	33b0      	adds	r3, #176	@ 0xb0
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008954:	4611      	mov	r1, r2
 8008956:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	32b0      	adds	r2, #176	@ 0xb0
 8008974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e024      	b.n	80089ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	33b0      	adds	r3, #176	@ 0xb0
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d019      	beq.n	80089cc <USBD_CDC_EP0_RxReady+0x6a>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800899e:	2bff      	cmp	r3, #255	@ 0xff
 80089a0:	d014      	beq.n	80089cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	33b0      	adds	r3, #176	@ 0xb0
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80089ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80089c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	22ff      	movs	r2, #255	@ 0xff
 80089c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089e0:	2182      	movs	r1, #130	@ 0x82
 80089e2:	4818      	ldr	r0, [pc, #96]	@ (8008a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089e4:	f000 fd0f 	bl	8009406 <USBD_GetEpDesc>
 80089e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ea:	2101      	movs	r1, #1
 80089ec:	4815      	ldr	r0, [pc, #84]	@ (8008a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089ee:	f000 fd0a 	bl	8009406 <USBD_GetEpDesc>
 80089f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089f4:	2181      	movs	r1, #129	@ 0x81
 80089f6:	4813      	ldr	r0, [pc, #76]	@ (8008a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80089f8:	f000 fd05 	bl	8009406 <USBD_GetEpDesc>
 80089fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2210      	movs	r2, #16
 8008a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a18:	711a      	strb	r2, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a2c:	711a      	strb	r2, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2243      	movs	r2, #67	@ 0x43
 8008a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a38:	4b02      	ldr	r3, [pc, #8]	@ (8008a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000054 	.word	0x20000054

08008a48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a50:	2182      	movs	r1, #130	@ 0x82
 8008a52:	4818      	ldr	r0, [pc, #96]	@ (8008ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a54:	f000 fcd7 	bl	8009406 <USBD_GetEpDesc>
 8008a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4815      	ldr	r0, [pc, #84]	@ (8008ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a5e:	f000 fcd2 	bl	8009406 <USBD_GetEpDesc>
 8008a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a64:	2181      	movs	r1, #129	@ 0x81
 8008a66:	4813      	ldr	r0, [pc, #76]	@ (8008ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008a68:	f000 fccd 	bl	8009406 <USBD_GetEpDesc>
 8008a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	2210      	movs	r2, #16
 8008a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2200      	movs	r2, #0
 8008a84:	711a      	strb	r2, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f042 0202 	orr.w	r2, r2, #2
 8008a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d006      	beq.n	8008aa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	711a      	strb	r2, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f042 0202 	orr.w	r2, r2, #2
 8008aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2243      	movs	r2, #67	@ 0x43
 8008aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	@ (8008ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000054 	.word	0x20000054

08008ab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ac0:	2182      	movs	r1, #130	@ 0x82
 8008ac2:	4818      	ldr	r0, [pc, #96]	@ (8008b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ac4:	f000 fc9f 	bl	8009406 <USBD_GetEpDesc>
 8008ac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008aca:	2101      	movs	r1, #1
 8008acc:	4815      	ldr	r0, [pc, #84]	@ (8008b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ace:	f000 fc9a 	bl	8009406 <USBD_GetEpDesc>
 8008ad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ad4:	2181      	movs	r1, #129	@ 0x81
 8008ad6:	4813      	ldr	r0, [pc, #76]	@ (8008b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ad8:	f000 fc95 	bl	8009406 <USBD_GetEpDesc>
 8008adc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d006      	beq.n	8008afe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008af8:	711a      	strb	r2, [r3, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b0c:	711a      	strb	r2, [r3, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2243      	movs	r2, #67	@ 0x43
 8008b16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b18:	4b02      	ldr	r3, [pc, #8]	@ (8008b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000054 	.word	0x20000054

08008b28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	220a      	movs	r2, #10
 8008b34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008b36:	4b03      	ldr	r3, [pc, #12]	@ (8008b44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	20000010 	.word	0x20000010

08008b48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e009      	b.n	8008b70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	33b0      	adds	r3, #176	@ 0xb0
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	32b0      	adds	r2, #176	@ 0xb0
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e008      	b.n	8008bb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	32b0      	adds	r2, #176	@ 0xb0
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e004      	b.n	8008bee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32b0      	adds	r2, #176	@ 0xb0
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32b0      	adds	r2, #176	@ 0xb0
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e018      	b.n	8008c5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7c1b      	ldrb	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c32:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <USBD_CDC_ReceivePacket+0x68>)
 8008c34:	7819      	ldrb	r1, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f004 fe35 	bl	800d8b0 <USBD_LL_PrepareReceive>
 8008c46:	e008      	b.n	8008c5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <USBD_CDC_ReceivePacket+0x68>)
 8008c4a:	7819      	ldrb	r1, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c52:	2340      	movs	r3, #64	@ 0x40
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f004 fe2b 	bl	800d8b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000098 	.word	0x20000098

08008c68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e01f      	b.n	8008cc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	79fa      	ldrb	r2, [r7, #7]
 8008cb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f004 fca5 	bl	800d604 <USBD_LL_Init>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e025      	b.n	8008d2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	32ae      	adds	r2, #174	@ 0xae
 8008cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00f      	beq.n	8008d1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32ae      	adds	r2, #174	@ 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	f107 020e 	add.w	r2, r7, #14
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	4602      	mov	r2, r0
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f004 fcad 	bl	800d69c <USBD_LL_Start>
 8008d42:	4603      	mov	r3, r0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d009      	beq.n	8008d90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	4611      	mov	r1, r2
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	78fa      	ldrb	r2, [r7, #3]
 8008db4:	4611      	mov	r1, r2
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f936 	bl	800a052 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e02:	f003 031f 	and.w	r3, r3, #31
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d01a      	beq.n	8008e40 <USBD_LL_SetupStage+0x72>
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d822      	bhi.n	8008e54 <USBD_LL_SetupStage+0x86>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <USBD_LL_SetupStage+0x4a>
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d00a      	beq.n	8008e2c <USBD_LL_SetupStage+0x5e>
 8008e16:	e01d      	b.n	8008e54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fb63 	bl	80094ec <USBD_StdDevReq>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2a:	e020      	b.n	8008e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fbcb 	bl	80095d0 <USBD_StdItfReq>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3e:	e016      	b.n	8008e6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fc2d 	bl	80096a8 <USBD_StdEPReq>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
      break;
 8008e52:	e00c      	b.n	8008e6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f004 fc7a 	bl	800d75c <USBD_LL_StallEP>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6c:	bf00      	nop
  }

  return ret;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	460b      	mov	r3, r1
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d16e      	bne.n	8008f6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	f040 8098 	bne.w	8008fd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d913      	bls.n	8008ed8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	bf28      	it	cs
 8008eca:	4613      	movcs	r3, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f001 f9be 	bl	800a252 <USBD_CtlContinueRx>
 8008ed6:	e07d      	b.n	8008fd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d014      	beq.n	8008f10 <USBD_LL_DataOutStage+0x98>
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d81d      	bhi.n	8008f26 <USBD_LL_DataOutStage+0xae>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <USBD_LL_DataOutStage+0x7c>
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d003      	beq.n	8008efa <USBD_LL_DataOutStage+0x82>
 8008ef2:	e018      	b.n	8008f26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ef8:	e018      	b.n	8008f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	4619      	mov	r1, r3
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 fa64 	bl	80093d2 <USBD_CoreFindIF>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008f0e:	e00d      	b.n	8008f2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	4619      	mov	r1, r3
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fa66 	bl	80093ec <USBD_CoreFindEP>
 8008f20:	4603      	mov	r3, r0
 8008f22:	75bb      	strb	r3, [r7, #22]
            break;
 8008f24:	e002      	b.n	8008f2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75bb      	strb	r3, [r7, #22]
            break;
 8008f2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008f2c:	7dbb      	ldrb	r3, [r7, #22]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d119      	bne.n	8008f66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d113      	bne.n	8008f66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008f3e:	7dba      	ldrb	r2, [r7, #22]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	32ae      	adds	r2, #174	@ 0xae
 8008f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008f4e:	7dba      	ldrb	r2, [r7, #22]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008f56:	7dba      	ldrb	r2, [r7, #22]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	32ae      	adds	r2, #174	@ 0xae
 8008f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f001 f984 	bl	800a274 <USBD_CtlSendStatus>
 8008f6c:	e032      	b.n	8008fd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fa37 	bl	80093ec <USBD_CoreFindEP>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f82:	7dbb      	ldrb	r3, [r7, #22]
 8008f84:	2bff      	cmp	r3, #255	@ 0xff
 8008f86:	d025      	beq.n	8008fd4 <USBD_LL_DataOutStage+0x15c>
 8008f88:	7dbb      	ldrb	r3, [r7, #22]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d122      	bne.n	8008fd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d117      	bne.n	8008fca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f9a:	7dba      	ldrb	r2, [r7, #22]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	32ae      	adds	r2, #174	@ 0xae
 8008fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00f      	beq.n	8008fca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008faa:	7dba      	ldrb	r2, [r7, #22]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008fb2:	7dba      	ldrb	r2, [r7, #22]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	32ae      	adds	r2, #174	@ 0xae
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	7afa      	ldrb	r2, [r7, #11]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	4798      	blx	r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	e000      	b.n	8008fd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d16f      	bne.n	80090d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3314      	adds	r3, #20
 8008ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d15a      	bne.n	80090b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	689a      	ldr	r2, [r3, #8]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	429a      	cmp	r2, r3
 800900c:	d914      	bls.n	8009038 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	461a      	mov	r2, r3
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f001 f8e6 	bl	800a1f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902a:	2300      	movs	r3, #0
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f004 fc3d 	bl	800d8b0 <USBD_LL_PrepareReceive>
 8009036:	e03f      	b.n	80090b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	429a      	cmp	r2, r3
 8009042:	d11c      	bne.n	800907e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800904c:	429a      	cmp	r2, r3
 800904e:	d316      	bcc.n	800907e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800905a:	429a      	cmp	r2, r3
 800905c:	d20f      	bcs.n	800907e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f001 f8c7 	bl	800a1f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009070:	2300      	movs	r3, #0
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f004 fc1a 	bl	800d8b0 <USBD_LL_PrepareReceive>
 800907c:	e01c      	b.n	80090b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b03      	cmp	r3, #3
 8009088:	d10f      	bne.n	80090aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090aa:	2180      	movs	r1, #128	@ 0x80
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f004 fb55 	bl	800d75c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f001 f8f1 	bl	800a29a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d03a      	beq.n	8009138 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fe42 	bl	8008d4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090d0:	e032      	b.n	8009138 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	4619      	mov	r1, r3
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 f985 	bl	80093ec <USBD_CoreFindEP>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2bff      	cmp	r3, #255	@ 0xff
 80090ea:	d025      	beq.n	8009138 <USBD_LL_DataInStage+0x15a>
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d122      	bne.n	8009138 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d11c      	bne.n	8009138 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80090fe:	7dfa      	ldrb	r2, [r7, #23]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	32ae      	adds	r2, #174	@ 0xae
 8009104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d014      	beq.n	8009138 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800910e:	7dfa      	ldrb	r2, [r7, #23]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009116:	7dfa      	ldrb	r2, [r7, #23]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	32ae      	adds	r2, #174	@ 0xae
 800911c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	7afa      	ldrb	r2, [r7, #11]
 8009124:	4611      	mov	r1, r2
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	4798      	blx	r3
 800912a:	4603      	mov	r3, r0
 800912c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800912e:	7dbb      	ldrb	r3, [r7, #22]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009134:	7dbb      	ldrb	r3, [r7, #22]
 8009136:	e000      	b.n	800913a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d014      	beq.n	80091a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00e      	beq.n	80091a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6852      	ldr	r2, [r2, #4]
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	4611      	mov	r1, r2
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80091a4:	2303      	movs	r3, #3
 80091a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091a8:	2340      	movs	r3, #64	@ 0x40
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f004 fa8f 	bl	800d6d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2240      	movs	r2, #64	@ 0x40
 80091c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091c4:	2340      	movs	r3, #64	@ 0x40
 80091c6:	2200      	movs	r2, #0
 80091c8:	2180      	movs	r1, #128	@ 0x80
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f004 fa81 	bl	800d6d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2240      	movs	r2, #64	@ 0x40
 80091da:	621a      	str	r2, [r3, #32]

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b04      	cmp	r3, #4
 8009218:	d006      	beq.n	8009228 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009220:	b2da      	uxtb	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2204      	movs	r2, #4
 800922c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b04      	cmp	r3, #4
 8009250:	d106      	bne.n	8009260 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009258:	b2da      	uxtb	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b03      	cmp	r3, #3
 8009280:	d110      	bne.n	80092a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	32ae      	adds	r2, #174	@ 0xae
 80092c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e01c      	b.n	800930a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d115      	bne.n	8009308 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32ae      	adds	r2, #174	@ 0xae
 80092e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	32ae      	adds	r2, #174	@ 0xae
 80092fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	4611      	mov	r1, r2
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	32ae      	adds	r2, #174	@ 0xae
 8009328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009330:	2303      	movs	r3, #3
 8009332:	e01c      	b.n	800936e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b03      	cmp	r3, #3
 800933e:	d115      	bne.n	800936c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	32ae      	adds	r2, #174	@ 0xae
 800934a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32ae      	adds	r2, #174	@ 0xae
 800935e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	4611      	mov	r1, r2
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6852      	ldr	r2, [r2, #4]
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	4611      	mov	r1, r2
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80093c4:	2303      	movs	r3, #3
 80093c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	460b      	mov	r3, r1
 80093dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80093f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	885b      	ldrh	r3, [r3, #2]
 8009422:	b29b      	uxth	r3, r3
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	7812      	ldrb	r2, [r2, #0]
 8009428:	4293      	cmp	r3, r2
 800942a:	d91f      	bls.n	800946c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009432:	e013      	b.n	800945c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009434:	f107 030a 	add.w	r3, r7, #10
 8009438:	4619      	mov	r1, r3
 800943a:	6978      	ldr	r0, [r7, #20]
 800943c:	f000 f81b 	bl	8009476 <USBD_GetNextDesc>
 8009440:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	2b05      	cmp	r3, #5
 8009448:	d108      	bne.n	800945c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	789b      	ldrb	r3, [r3, #2]
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	429a      	cmp	r2, r3
 8009456:	d008      	beq.n	800946a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009458:	2300      	movs	r3, #0
 800945a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	885b      	ldrh	r3, [r3, #2]
 8009460:	b29a      	uxth	r2, r3
 8009462:	897b      	ldrh	r3, [r7, #10]
 8009464:	429a      	cmp	r2, r3
 8009466:	d8e5      	bhi.n	8009434 <USBD_GetEpDesc+0x2e>
 8009468:	e000      	b.n	800946c <USBD_GetEpDesc+0x66>
          break;
 800946a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800946c:	693b      	ldr	r3, [r7, #16]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009476:	b480      	push	{r7}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	4413      	add	r3, r2
 800948e:	b29a      	uxth	r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4413      	add	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094a0:	68fb      	ldr	r3, [r7, #12]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b087      	sub	sp, #28
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	3301      	adds	r3, #1
 80094c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094cc:	8a3b      	ldrh	r3, [r7, #16]
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	b21a      	sxth	r2, r3
 80094d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	b21b      	sxth	r3, r3
 80094da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094dc:	89fb      	ldrh	r3, [r7, #14]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
	...

080094ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009502:	2b40      	cmp	r3, #64	@ 0x40
 8009504:	d005      	beq.n	8009512 <USBD_StdDevReq+0x26>
 8009506:	2b40      	cmp	r3, #64	@ 0x40
 8009508:	d857      	bhi.n	80095ba <USBD_StdDevReq+0xce>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00f      	beq.n	800952e <USBD_StdDevReq+0x42>
 800950e:	2b20      	cmp	r3, #32
 8009510:	d153      	bne.n	80095ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	32ae      	adds	r2, #174	@ 0xae
 800951c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	4798      	blx	r3
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
      break;
 800952c:	e04a      	b.n	80095c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b09      	cmp	r3, #9
 8009534:	d83b      	bhi.n	80095ae <USBD_StdDevReq+0xc2>
 8009536:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <USBD_StdDevReq+0x50>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009591 	.word	0x08009591
 8009540:	080095a5 	.word	0x080095a5
 8009544:	080095af 	.word	0x080095af
 8009548:	0800959b 	.word	0x0800959b
 800954c:	080095af 	.word	0x080095af
 8009550:	0800956f 	.word	0x0800956f
 8009554:	08009565 	.word	0x08009565
 8009558:	080095af 	.word	0x080095af
 800955c:	08009587 	.word	0x08009587
 8009560:	08009579 	.word	0x08009579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa3c 	bl	80099e4 <USBD_GetDescriptor>
          break;
 800956c:	e024      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fbcb 	bl	8009d0c <USBD_SetAddress>
          break;
 8009576:	e01f      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc0a 	bl	8009d94 <USBD_SetConfig>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
          break;
 8009584:	e018      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fcad 	bl	8009ee8 <USBD_GetConfig>
          break;
 800958e:	e013      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fcde 	bl	8009f54 <USBD_GetStatus>
          break;
 8009598:	e00e      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fd0d 	bl	8009fbc <USBD_SetFeature>
          break;
 80095a2:	e009      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fd31 	bl	800a00e <USBD_ClrFeature>
          break;
 80095ac:	e004      	b.n	80095b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fd88 	bl	800a0c6 <USBD_CtlError>
          break;
 80095b6:	bf00      	nop
      }
      break;
 80095b8:	e004      	b.n	80095c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fd82 	bl	800a0c6 <USBD_CtlError>
      break;
 80095c2:	bf00      	nop
  }

  return ret;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop

080095d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095e6:	2b40      	cmp	r3, #64	@ 0x40
 80095e8:	d005      	beq.n	80095f6 <USBD_StdItfReq+0x26>
 80095ea:	2b40      	cmp	r3, #64	@ 0x40
 80095ec:	d852      	bhi.n	8009694 <USBD_StdItfReq+0xc4>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <USBD_StdItfReq+0x26>
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d14e      	bne.n	8009694 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d840      	bhi.n	8009686 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	889b      	ldrh	r3, [r3, #4]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	d836      	bhi.n	800967c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	889b      	ldrh	r3, [r3, #4]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fedb 	bl	80093d2 <USBD_CoreFindIF>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2bff      	cmp	r3, #255	@ 0xff
 8009624:	d01d      	beq.n	8009662 <USBD_StdItfReq+0x92>
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d11a      	bne.n	8009662 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800962c:	7bba      	ldrb	r2, [r7, #14]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	32ae      	adds	r2, #174	@ 0xae
 8009632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800963c:	7bba      	ldrb	r2, [r7, #14]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009644:	7bba      	ldrb	r2, [r7, #14]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	32ae      	adds	r2, #174	@ 0xae
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
 8009656:	4603      	mov	r3, r0
 8009658:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800965a:	e004      	b.n	8009666 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800965c:	2303      	movs	r3, #3
 800965e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009660:	e001      	b.n	8009666 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009662:	2303      	movs	r3, #3
 8009664:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	88db      	ldrh	r3, [r3, #6]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d110      	bne.n	8009690 <USBD_StdItfReq+0xc0>
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10d      	bne.n	8009690 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fdfd 	bl	800a274 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800967a:	e009      	b.n	8009690 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fd21 	bl	800a0c6 <USBD_CtlError>
          break;
 8009684:	e004      	b.n	8009690 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fd1c 	bl	800a0c6 <USBD_CtlError>
          break;
 800968e:	e000      	b.n	8009692 <USBD_StdItfReq+0xc2>
          break;
 8009690:	bf00      	nop
      }
      break;
 8009692:	e004      	b.n	800969e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fd15 	bl	800a0c6 <USBD_CtlError>
      break;
 800969c:	bf00      	nop
  }

  return ret;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	889b      	ldrh	r3, [r3, #4]
 80096ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096c4:	2b40      	cmp	r3, #64	@ 0x40
 80096c6:	d007      	beq.n	80096d8 <USBD_StdEPReq+0x30>
 80096c8:	2b40      	cmp	r3, #64	@ 0x40
 80096ca:	f200 817f 	bhi.w	80099cc <USBD_StdEPReq+0x324>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02a      	beq.n	8009728 <USBD_StdEPReq+0x80>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	f040 817a 	bne.w	80099cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff fe85 	bl	80093ec <USBD_CoreFindEP>
 80096e2:	4603      	mov	r3, r0
 80096e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096e6:	7b7b      	ldrb	r3, [r7, #13]
 80096e8:	2bff      	cmp	r3, #255	@ 0xff
 80096ea:	f000 8174 	beq.w	80099d6 <USBD_StdEPReq+0x32e>
 80096ee:	7b7b      	ldrb	r3, [r7, #13]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 8170 	bne.w	80099d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80096f6:	7b7a      	ldrb	r2, [r7, #13]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80096fe:	7b7a      	ldrb	r2, [r7, #13]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	32ae      	adds	r2, #174	@ 0xae
 8009704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 8163 	beq.w	80099d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009710:	7b7a      	ldrb	r2, [r7, #13]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32ae      	adds	r2, #174	@ 0xae
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009726:	e156      	b.n	80099d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b03      	cmp	r3, #3
 800972e:	d008      	beq.n	8009742 <USBD_StdEPReq+0x9a>
 8009730:	2b03      	cmp	r3, #3
 8009732:	f300 8145 	bgt.w	80099c0 <USBD_StdEPReq+0x318>
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 809b 	beq.w	8009872 <USBD_StdEPReq+0x1ca>
 800973c:	2b01      	cmp	r3, #1
 800973e:	d03c      	beq.n	80097ba <USBD_StdEPReq+0x112>
 8009740:	e13e      	b.n	80099c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d002      	beq.n	8009754 <USBD_StdEPReq+0xac>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d016      	beq.n	8009780 <USBD_StdEPReq+0xd8>
 8009752:	e02c      	b.n	80097ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00d      	beq.n	8009776 <USBD_StdEPReq+0xce>
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b80      	cmp	r3, #128	@ 0x80
 800975e:	d00a      	beq.n	8009776 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f003 fff9 	bl	800d75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800976a:	2180      	movs	r1, #128	@ 0x80
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f003 fff5 	bl	800d75c <USBD_LL_StallEP>
 8009772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009774:	e020      	b.n	80097b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fca4 	bl	800a0c6 <USBD_CtlError>
              break;
 800977e:	e01b      	b.n	80097b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10e      	bne.n	80097a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00b      	beq.n	80097a6 <USBD_StdEPReq+0xfe>
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b80      	cmp	r3, #128	@ 0x80
 8009792:	d008      	beq.n	80097a6 <USBD_StdEPReq+0xfe>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	88db      	ldrh	r3, [r3, #6]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f003 ffdb 	bl	800d75c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fd64 	bl	800a274 <USBD_CtlSendStatus>

              break;
 80097ac:	e004      	b.n	80097b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fc88 	bl	800a0c6 <USBD_CtlError>
              break;
 80097b6:	bf00      	nop
          }
          break;
 80097b8:	e107      	b.n	80099ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d002      	beq.n	80097cc <USBD_StdEPReq+0x124>
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d016      	beq.n	80097f8 <USBD_StdEPReq+0x150>
 80097ca:	e04b      	b.n	8009864 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00d      	beq.n	80097ee <USBD_StdEPReq+0x146>
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b80      	cmp	r3, #128	@ 0x80
 80097d6:	d00a      	beq.n	80097ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f003 ffbd 	bl	800d75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097e2:	2180      	movs	r1, #128	@ 0x80
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f003 ffb9 	bl	800d75c <USBD_LL_StallEP>
 80097ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097ec:	e040      	b.n	8009870 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fc68 	bl	800a0c6 <USBD_CtlError>
              break;
 80097f6:	e03b      	b.n	8009870 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	885b      	ldrh	r3, [r3, #2]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d136      	bne.n	800986e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f003 ffc3 	bl	800d79a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fd2d 	bl	800a274 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff fde4 	bl	80093ec <USBD_CoreFindEP>
 8009824:	4603      	mov	r3, r0
 8009826:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009828:	7b7b      	ldrb	r3, [r7, #13]
 800982a:	2bff      	cmp	r3, #255	@ 0xff
 800982c:	d01f      	beq.n	800986e <USBD_StdEPReq+0x1c6>
 800982e:	7b7b      	ldrb	r3, [r7, #13]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11c      	bne.n	800986e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009834:	7b7a      	ldrb	r2, [r7, #13]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800983c:	7b7a      	ldrb	r2, [r7, #13]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	32ae      	adds	r2, #174	@ 0xae
 8009842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800984c:	7b7a      	ldrb	r2, [r7, #13]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	@ 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
 800985e:	4603      	mov	r3, r0
 8009860:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009862:	e004      	b.n	800986e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fc2d 	bl	800a0c6 <USBD_CtlError>
              break;
 800986c:	e000      	b.n	8009870 <USBD_StdEPReq+0x1c8>
              break;
 800986e:	bf00      	nop
          }
          break;
 8009870:	e0ab      	b.n	80099ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d002      	beq.n	8009884 <USBD_StdEPReq+0x1dc>
 800987e:	2b03      	cmp	r3, #3
 8009880:	d032      	beq.n	80098e8 <USBD_StdEPReq+0x240>
 8009882:	e097      	b.n	80099b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <USBD_StdEPReq+0x1f2>
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b80      	cmp	r3, #128	@ 0x80
 800988e:	d004      	beq.n	800989a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc17 	bl	800a0c6 <USBD_CtlError>
                break;
 8009898:	e091      	b.n	80099be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800989a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da0b      	bge.n	80098ba <USBD_StdEPReq+0x212>
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	3310      	adds	r3, #16
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4413      	add	r3, r2
 80098b6:	3304      	adds	r3, #4
 80098b8:	e00b      	b.n	80098d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	3304      	adds	r3, #4
 80098d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2200      	movs	r2, #0
 80098d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2202      	movs	r2, #2
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fc6d 	bl	800a1c0 <USBD_CtlSendData>
              break;
 80098e6:	e06a      	b.n	80099be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	da11      	bge.n	8009914 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	f003 020f 	and.w	r2, r3, #15
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	3324      	adds	r3, #36	@ 0x24
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d117      	bne.n	800993a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fbda 	bl	800a0c6 <USBD_CtlError>
                  break;
 8009912:	e054      	b.n	80099be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	f003 020f 	and.w	r2, r3, #15
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fbc7 	bl	800a0c6 <USBD_CtlError>
                  break;
 8009938:	e041      	b.n	80099be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800993a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	da0b      	bge.n	800995a <USBD_StdEPReq+0x2b2>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	3310      	adds	r3, #16
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4413      	add	r3, r2
 8009956:	3304      	adds	r3, #4
 8009958:	e00b      	b.n	8009972 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	4413      	add	r3, r2
 8009970:	3304      	adds	r3, #4
 8009972:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <USBD_StdEPReq+0x2d8>
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b80      	cmp	r3, #128	@ 0x80
 800997e:	d103      	bne.n	8009988 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e00e      	b.n	80099a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f003 ff23 	bl	800d7d8 <USBD_LL_IsStallEP>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e002      	b.n	80099a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2202      	movs	r2, #2
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc07 	bl	800a1c0 <USBD_CtlSendData>
              break;
 80099b2:	e004      	b.n	80099be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fb85 	bl	800a0c6 <USBD_CtlError>
              break;
 80099bc:	bf00      	nop
          }
          break;
 80099be:	e004      	b.n	80099ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb7f 	bl	800a0c6 <USBD_CtlError>
          break;
 80099c8:	bf00      	nop
      }
      break;
 80099ca:	e005      	b.n	80099d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb79 	bl	800a0c6 <USBD_CtlError>
      break;
 80099d4:	e000      	b.n	80099d8 <USBD_StdEPReq+0x330>
      break;
 80099d6:	bf00      	nop
  }

  return ret;
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	885b      	ldrh	r3, [r3, #2]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b0e      	cmp	r3, #14
 8009a06:	f200 8152 	bhi.w	8009cae <USBD_GetDescriptor+0x2ca>
 8009a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a10 <USBD_GetDescriptor+0x2c>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a81 	.word	0x08009a81
 8009a14:	08009a99 	.word	0x08009a99
 8009a18:	08009ad9 	.word	0x08009ad9
 8009a1c:	08009caf 	.word	0x08009caf
 8009a20:	08009caf 	.word	0x08009caf
 8009a24:	08009c4f 	.word	0x08009c4f
 8009a28:	08009c7b 	.word	0x08009c7b
 8009a2c:	08009caf 	.word	0x08009caf
 8009a30:	08009caf 	.word	0x08009caf
 8009a34:	08009caf 	.word	0x08009caf
 8009a38:	08009caf 	.word	0x08009caf
 8009a3c:	08009caf 	.word	0x08009caf
 8009a40:	08009caf 	.word	0x08009caf
 8009a44:	08009caf 	.word	0x08009caf
 8009a48:	08009a4d 	.word	0x08009a4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7c12      	ldrb	r2, [r2, #16]
 8009a64:	f107 0108 	add.w	r1, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a6e:	e126      	b.n	8009cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fb27 	bl	800a0c6 <USBD_CtlError>
        err++;
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a7e:	e11e      	b.n	8009cbe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7c12      	ldrb	r2, [r2, #16]
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
      break;
 8009a96:	e112      	b.n	8009cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7c1b      	ldrb	r3, [r3, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10d      	bne.n	8009abc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa8:	f107 0208 	add.w	r2, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
 8009ab0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009aba:	e100      	b.n	8009cbe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac4:	f107 0208 	add.w	r2, r7, #8
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4798      	blx	r3
 8009acc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	701a      	strb	r2, [r3, #0]
      break;
 8009ad6:	e0f2      	b.n	8009cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	885b      	ldrh	r3, [r3, #2]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b05      	cmp	r3, #5
 8009ae0:	f200 80ac 	bhi.w	8009c3c <USBD_GetDescriptor+0x258>
 8009ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <USBD_GetDescriptor+0x108>)
 8009ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aea:	bf00      	nop
 8009aec:	08009b05 	.word	0x08009b05
 8009af0:	08009b39 	.word	0x08009b39
 8009af4:	08009b6d 	.word	0x08009b6d
 8009af8:	08009ba1 	.word	0x08009ba1
 8009afc:	08009bd5 	.word	0x08009bd5
 8009b00:	08009c09 	.word	0x08009c09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	7c12      	ldrb	r2, [r2, #16]
 8009b1c:	f107 0108 	add.w	r1, r7, #8
 8009b20:	4610      	mov	r0, r2
 8009b22:	4798      	blx	r3
 8009b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b26:	e091      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 facb 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009b30:	7afb      	ldrb	r3, [r7, #11]
 8009b32:	3301      	adds	r3, #1
 8009b34:	72fb      	strb	r3, [r7, #11]
          break;
 8009b36:	e089      	b.n	8009c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00b      	beq.n	8009b5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	7c12      	ldrb	r2, [r2, #16]
 8009b50:	f107 0108 	add.w	r1, r7, #8
 8009b54:	4610      	mov	r0, r2
 8009b56:	4798      	blx	r3
 8009b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5a:	e077      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fab1 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009b64:	7afb      	ldrb	r3, [r7, #11]
 8009b66:	3301      	adds	r3, #1
 8009b68:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6a:	e06f      	b.n	8009c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	7c12      	ldrb	r2, [r2, #16]
 8009b84:	f107 0108 	add.w	r1, r7, #8
 8009b88:	4610      	mov	r0, r2
 8009b8a:	4798      	blx	r3
 8009b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8e:	e05d      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa97 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009b98:	7afb      	ldrb	r3, [r7, #11]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9e:	e055      	b.n	8009c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc2:	e043      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fa7d 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009bcc:	7afb      	ldrb	r3, [r7, #11]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd2:	e03b      	b.n	8009c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf6:	e029      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa63 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	3301      	adds	r3, #1
 8009c04:	72fb      	strb	r3, [r7, #11]
          break;
 8009c06:	e021      	b.n	8009c4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 0108 	add.w	r1, r7, #8
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c2a:	e00f      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa49 	bl	800a0c6 <USBD_CtlError>
            err++;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	3301      	adds	r3, #1
 8009c38:	72fb      	strb	r3, [r7, #11]
          break;
 8009c3a:	e007      	b.n	8009c4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa41 	bl	800a0c6 <USBD_CtlError>
          err++;
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3301      	adds	r3, #1
 8009c48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009c4a:	bf00      	nop
      }
      break;
 8009c4c:	e037      	b.n	8009cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7c1b      	ldrb	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d109      	bne.n	8009c6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5e:	f107 0208 	add.w	r2, r7, #8
 8009c62:	4610      	mov	r0, r2
 8009c64:	4798      	blx	r3
 8009c66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c68:	e029      	b.n	8009cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa2a 	bl	800a0c6 <USBD_CtlError>
        err++;
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	3301      	adds	r3, #1
 8009c76:	72fb      	strb	r3, [r7, #11]
      break;
 8009c78:	e021      	b.n	8009cbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7c1b      	ldrb	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10d      	bne.n	8009c9e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c8a:	f107 0208 	add.w	r2, r7, #8
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4798      	blx	r3
 8009c92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	2207      	movs	r2, #7
 8009c9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c9c:	e00f      	b.n	8009cbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fa10 	bl	800a0c6 <USBD_CtlError>
        err++;
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	72fb      	strb	r3, [r7, #11]
      break;
 8009cac:	e007      	b.n	8009cbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fa08 	bl	800a0c6 <USBD_CtlError>
      err++;
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	72fb      	strb	r3, [r7, #11]
      break;
 8009cbc:	bf00      	nop
  }

  if (err != 0U)
 8009cbe:	7afb      	ldrb	r3, [r7, #11]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d11e      	bne.n	8009d02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	88db      	ldrh	r3, [r3, #6]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d016      	beq.n	8009cfa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009ccc:	893b      	ldrh	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	88da      	ldrh	r2, [r3, #6]
 8009cd6:	893b      	ldrh	r3, [r7, #8]
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	bf28      	it	cs
 8009cdc:	4613      	movcs	r3, r2
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ce2:	893b      	ldrh	r3, [r7, #8]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68f9      	ldr	r1, [r7, #12]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa69 	bl	800a1c0 <USBD_CtlSendData>
 8009cee:	e009      	b.n	8009d04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f9e7 	bl	800a0c6 <USBD_CtlError>
 8009cf8:	e004      	b.n	8009d04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 faba 	bl	800a274 <USBD_CtlSendStatus>
 8009d00:	e000      	b.n	8009d04 <USBD_GetDescriptor+0x320>
    return;
 8009d02:	bf00      	nop
  }
}
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop

08009d0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	889b      	ldrh	r3, [r3, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d131      	bne.n	8009d82 <USBD_SetAddress+0x76>
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	88db      	ldrh	r3, [r3, #6]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d12d      	bne.n	8009d82 <USBD_SetAddress+0x76>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	885b      	ldrh	r3, [r3, #2]
 8009d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d2c:	d829      	bhi.n	8009d82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	885b      	ldrh	r3, [r3, #2]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d104      	bne.n	8009d50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9bc 	bl	800a0c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4e:	e01d      	b.n	8009d8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7bfa      	ldrb	r2, [r7, #15]
 8009d54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 fd67 	bl	800d830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa86 	bl	800a274 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d76:	e009      	b.n	8009d8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d80:	e004      	b.n	8009d8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f99e 	bl	800a0c6 <USBD_CtlError>
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	4b4e      	ldr	r3, [pc, #312]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009daa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dac:	4b4d      	ldr	r3, [pc, #308]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d905      	bls.n	8009dc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f985 	bl	800a0c6 <USBD_CtlError>
    return USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e08c      	b.n	8009eda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d002      	beq.n	8009dd2 <USBD_SetConfig+0x3e>
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d029      	beq.n	8009e24 <USBD_SetConfig+0x90>
 8009dd0:	e075      	b.n	8009ebe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009dd2:	4b44      	ldr	r3, [pc, #272]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d020      	beq.n	8009e1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009dda:	4b42      	ldr	r3, [pc, #264]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009de4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7fe ffb9 	bl	8008d62 <USBD_SetClassConfig>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f962 	bl	800a0c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e0a:	e065      	b.n	8009ed8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fa31 	bl	800a274 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2203      	movs	r2, #3
 8009e16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e1a:	e05d      	b.n	8009ed8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fa29 	bl	800a274 <USBD_CtlSendStatus>
      break;
 8009e22:	e059      	b.n	8009ed8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e24:	4b2f      	ldr	r3, [pc, #188]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d112      	bne.n	8009e52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009e34:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7fe ffa8 	bl	8008d9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa12 	bl	800a274 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e50:	e042      	b.n	8009ed8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009e52:	4b24      	ldr	r3, [pc, #144]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d02a      	beq.n	8009eb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7fe ff96 	bl	8008d9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e78:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fe ff6f 	bl	8008d62 <USBD_SetClassConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00f      	beq.n	8009eae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f918 	bl	800a0c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7fe ff7b 	bl	8008d9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009eac:	e014      	b.n	8009ed8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f9e0 	bl	800a274 <USBD_CtlSendStatus>
      break;
 8009eb4:	e010      	b.n	8009ed8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f9dc 	bl	800a274 <USBD_CtlSendStatus>
      break;
 8009ebc:	e00c      	b.n	8009ed8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f900 	bl	800a0c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ec6:	4b07      	ldr	r3, [pc, #28]	@ (8009ee4 <USBD_SetConfig+0x150>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7fe ff64 	bl	8008d9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed6:	bf00      	nop
  }

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20007794 	.word	0x20007794

08009ee8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	88db      	ldrh	r3, [r3, #6]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d004      	beq.n	8009f04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f8e2 	bl	800a0c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f02:	e023      	b.n	8009f4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	dc02      	bgt.n	8009f16 <USBD_GetConfig+0x2e>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dc03      	bgt.n	8009f1c <USBD_GetConfig+0x34>
 8009f14:	e015      	b.n	8009f42 <USBD_GetConfig+0x5a>
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d00b      	beq.n	8009f32 <USBD_GetConfig+0x4a>
 8009f1a:	e012      	b.n	8009f42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	3308      	adds	r3, #8
 8009f26:	2201      	movs	r2, #1
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f948 	bl	800a1c0 <USBD_CtlSendData>
        break;
 8009f30:	e00c      	b.n	8009f4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3304      	adds	r3, #4
 8009f36:	2201      	movs	r2, #1
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f940 	bl	800a1c0 <USBD_CtlSendData>
        break;
 8009f40:	e004      	b.n	8009f4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f8be 	bl	800a0c6 <USBD_CtlError>
        break;
 8009f4a:	bf00      	nop
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	d81e      	bhi.n	8009faa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	88db      	ldrh	r3, [r3, #6]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d004      	beq.n	8009f7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f8a5 	bl	800a0c6 <USBD_CtlError>
        break;
 8009f7c:	e01a      	b.n	8009fb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f043 0202 	orr.w	r2, r3, #2
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	330c      	adds	r3, #12
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f90c 	bl	800a1c0 <USBD_CtlSendData>
      break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f88a 	bl	800a0c6 <USBD_CtlError>
      break;
 8009fb2:	bf00      	nop
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	885b      	ldrh	r3, [r3, #2]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d107      	bne.n	8009fde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f94c 	bl	800a274 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009fdc:	e013      	b.n	800a006 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	885b      	ldrh	r3, [r3, #2]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d10b      	bne.n	8009ffe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	889b      	ldrh	r3, [r3, #4]
 8009fea:	0a1b      	lsrs	r3, r3, #8
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f93c 	bl	800a274 <USBD_CtlSendStatus>
}
 8009ffc:	e003      	b.n	800a006 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f860 	bl	800a0c6 <USBD_CtlError>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	3b01      	subs	r3, #1
 800a022:	2b02      	cmp	r3, #2
 800a024:	d80b      	bhi.n	800a03e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	885b      	ldrh	r3, [r3, #2]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10c      	bne.n	800a048 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f91c 	bl	800a274 <USBD_CtlSendStatus>
      }
      break;
 800a03c:	e004      	b.n	800a048 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f840 	bl	800a0c6 <USBD_CtlError>
      break;
 800a046:	e000      	b.n	800a04a <USBD_ClrFeature+0x3c>
      break;
 800a048:	bf00      	nop
  }
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	781a      	ldrb	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	781a      	ldrb	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff fa16 	bl	80094ae <SWAPBYTE>
 800a082:	4603      	mov	r3, r0
 800a084:	461a      	mov	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3301      	adds	r3, #1
 800a08e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3301      	adds	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fa09 	bl	80094ae <SWAPBYTE>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7ff f9fc 	bl	80094ae <SWAPBYTE>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	80da      	strh	r2, [r3, #6]
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0d0:	2180      	movs	r1, #128	@ 0x80
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f003 fb42 	bl	800d75c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f003 fb3e 	bl	800d75c <USBD_LL_StallEP>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d042      	beq.n	800a184 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a102:	6938      	ldr	r0, [r7, #16]
 800a104:	f000 f842 	bl	800a18c <USBD_GetLen>
 800a108:	4603      	mov	r3, r0
 800a10a:	3301      	adds	r3, #1
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a112:	d808      	bhi.n	800a126 <USBD_GetString+0x3e>
 800a114:	6938      	ldr	r0, [r7, #16]
 800a116:	f000 f839 	bl	800a18c <USBD_GetLen>
 800a11a:	4603      	mov	r3, r0
 800a11c:	3301      	adds	r3, #1
 800a11e:	b29b      	uxth	r3, r3
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	b29a      	uxth	r2, r3
 800a124:	e001      	b.n	800a12a <USBD_GetString+0x42>
 800a126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	4413      	add	r3, r2
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	7812      	ldrb	r2, [r2, #0]
 800a138:	701a      	strb	r2, [r3, #0]
  idx++;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	3301      	adds	r3, #1
 800a13e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	4413      	add	r3, r2
 800a146:	2203      	movs	r2, #3
 800a148:	701a      	strb	r2, [r3, #0]
  idx++;
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	3301      	adds	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a150:	e013      	b.n	800a17a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	4413      	add	r3, r2
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	3301      	adds	r3, #1
 800a162:	613b      	str	r3, [r7, #16]
    idx++;
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	3301      	adds	r3, #1
 800a168:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	4413      	add	r3, r2
 800a170:	2200      	movs	r2, #0
 800a172:	701a      	strb	r2, [r3, #0]
    idx++;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
 800a176:	3301      	adds	r3, #1
 800a178:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e7      	bne.n	800a152 <USBD_GetString+0x6a>
 800a182:	e000      	b.n	800a186 <USBD_GetString+0x9e>
    return;
 800a184:	bf00      	nop
  }
}
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a19c:	e005      	b.n	800a1aa <USBD_GetLen+0x1e>
  {
    len++;
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1f5      	bne.n	800a19e <USBD_GetLen+0x12>
  }

  return len;
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f003 fb41 	bl	800d86e <USBD_LL_Transmit>

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	2100      	movs	r1, #0
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f003 fb30 	bl	800d86e <USBD_LL_Transmit>

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2203      	movs	r2, #3
 800a228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	2100      	movs	r1, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f003 fb34 	bl	800d8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	2100      	movs	r1, #0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f003 fb23 	bl	800d8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2204      	movs	r2, #4
 800a280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a284:	2300      	movs	r3, #0
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f003 faef 	bl	800d86e <USBD_LL_Transmit>

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2205      	movs	r2, #5
 800a2a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f003 fafd 	bl	800d8b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a2c4:	bf00      	nop
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2d6:	f3ef 8305 	mrs	r3, IPSR
 800a2da:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10f      	bne.n	800a302 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e6:	607b      	str	r3, [r7, #4]
  return(result);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d105      	bne.n	800a2fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a2f2:	603b      	str	r3, [r7, #0]
  return(result);
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <osKernelInitialize+0x3a>
 800a2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a334 <osKernelInitialize+0x64>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d103      	bne.n	800a30a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a302:	f06f 0305 	mvn.w	r3, #5
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	e00c      	b.n	800a324 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a30a:	4b0a      	ldr	r3, [pc, #40]	@ (800a334 <osKernelInitialize+0x64>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d105      	bne.n	800a31e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a312:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <osKernelInitialize+0x64>)
 800a314:	2201      	movs	r2, #1
 800a316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e002      	b.n	800a324 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a322:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a324:	68fb      	ldr	r3, [r7, #12]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20007798 	.word	0x20007798

0800a338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a33e:	f3ef 8305 	mrs	r3, IPSR
 800a342:	60bb      	str	r3, [r7, #8]
  return(result);
 800a344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10f      	bne.n	800a36a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a34a:	f3ef 8310 	mrs	r3, PRIMASK
 800a34e:	607b      	str	r3, [r7, #4]
  return(result);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a356:	f3ef 8311 	mrs	r3, BASEPRI
 800a35a:	603b      	str	r3, [r7, #0]
  return(result);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d007      	beq.n	800a372 <osKernelStart+0x3a>
 800a362:	4b0f      	ldr	r3, [pc, #60]	@ (800a3a0 <osKernelStart+0x68>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d103      	bne.n	800a372 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a36a:	f06f 0305 	mvn.w	r3, #5
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e010      	b.n	800a394 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a372:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a0 <osKernelStart+0x68>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d109      	bne.n	800a38e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a37a:	f7ff ffa1 	bl	800a2c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a37e:	4b08      	ldr	r3, [pc, #32]	@ (800a3a0 <osKernelStart+0x68>)
 800a380:	2202      	movs	r2, #2
 800a382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a384:	f001 f8ca 	bl	800b51c <vTaskStartScheduler>
      stat = osOK;
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e002      	b.n	800a394 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a392:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a394:	68fb      	ldr	r3, [r7, #12]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20007798 	.word	0x20007798

0800a3a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b090      	sub	sp, #64	@ 0x40
 800a3a8:	af04      	add	r7, sp, #16
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b4:	f3ef 8305 	mrs	r3, IPSR
 800a3b8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a3ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 808f 	bne.w	800a4e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800a3d2:	617b      	str	r3, [r7, #20]
  return(result);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <osThreadNew+0x3e>
 800a3da:	4b44      	ldr	r3, [pc, #272]	@ (800a4ec <osThreadNew+0x148>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d07e      	beq.n	800a4e0 <osThreadNew+0x13c>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d07b      	beq.n	800a4e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a3e8:	2380      	movs	r3, #128	@ 0x80
 800a3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a3ec:	2318      	movs	r3, #24
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800a3f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a3f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d045      	beq.n	800a48c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <osThreadNew+0x6a>
        name = attr->name;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <osThreadNew+0x90>
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	2b38      	cmp	r3, #56	@ 0x38
 800a426:	d805      	bhi.n	800a434 <osThreadNew+0x90>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <osThreadNew+0x94>
        return (NULL);
 800a434:	2300      	movs	r3, #0
 800a436:	e054      	b.n	800a4e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	089b      	lsrs	r3, r3, #2
 800a446:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00e      	beq.n	800a46e <osThreadNew+0xca>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b5b      	cmp	r3, #91	@ 0x5b
 800a456:	d90a      	bls.n	800a46e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d006      	beq.n	800a46e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <osThreadNew+0xca>
        mem = 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	623b      	str	r3, [r7, #32]
 800a46c:	e010      	b.n	800a490 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10c      	bne.n	800a490 <osThreadNew+0xec>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d108      	bne.n	800a490 <osThreadNew+0xec>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d104      	bne.n	800a490 <osThreadNew+0xec>
          mem = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	623b      	str	r3, [r7, #32]
 800a48a:	e001      	b.n	800a490 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d110      	bne.n	800a4b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a49e:	9202      	str	r2, [sp, #8]
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f000 fe4f 	bl	800b150 <xTaskCreateStatic>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	613b      	str	r3, [r7, #16]
 800a4b6:	e013      	b.n	800a4e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d110      	bne.n	800a4e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	f107 0310 	add.w	r3, r7, #16
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 fea3 	bl	800b21c <xTaskCreate>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d001      	beq.n	800a4e0 <osThreadNew+0x13c>
          hTask = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a4e0:	693b      	ldr	r3, [r7, #16]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3730      	adds	r7, #48	@ 0x30
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20007798 	.word	0x20007798

0800a4f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4f8:	f3ef 8305 	mrs	r3, IPSR
 800a4fc:	613b      	str	r3, [r7, #16]
  return(result);
 800a4fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10f      	bne.n	800a524 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a504:	f3ef 8310 	mrs	r3, PRIMASK
 800a508:	60fb      	str	r3, [r7, #12]
  return(result);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a510:	f3ef 8311 	mrs	r3, BASEPRI
 800a514:	60bb      	str	r3, [r7, #8]
  return(result);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <osDelay+0x3c>
 800a51c:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <osDelay+0x58>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d103      	bne.n	800a52c <osDelay+0x3c>
    stat = osErrorISR;
 800a524:	f06f 0305 	mvn.w	r3, #5
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e007      	b.n	800a53c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 ffb8 	bl	800b4ac <vTaskDelay>
    }
  }

  return (stat);
 800a53c:	697b      	ldr	r3, [r7, #20]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20007798 	.word	0x20007798

0800a54c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4a07      	ldr	r2, [pc, #28]	@ (800a578 <vApplicationGetIdleTaskMemory+0x2c>)
 800a55c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4a06      	ldr	r2, [pc, #24]	@ (800a57c <vApplicationGetIdleTaskMemory+0x30>)
 800a562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2280      	movs	r2, #128	@ 0x80
 800a568:	601a      	str	r2, [r3, #0]
}
 800a56a:	bf00      	nop
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	2000779c 	.word	0x2000779c
 800a57c:	200077f8 	.word	0x200077f8

0800a580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4a07      	ldr	r2, [pc, #28]	@ (800a5ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a06      	ldr	r2, [pc, #24]	@ (800a5b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a59e:	601a      	str	r2, [r3, #0]
}
 800a5a0:	bf00      	nop
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	200079f8 	.word	0x200079f8
 800a5b0:	20007a54 	.word	0x20007a54

0800a5b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f103 0208 	add.w	r2, r3, #8
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f103 0208 	add.w	r2, r3, #8
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f103 0208 	add.w	r2, r3, #8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a602:	bf00      	nop
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a66c:	d103      	bne.n	800a676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e00c      	b.n	800a690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3308      	adds	r3, #8
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e002      	b.n	800a684 <vListInsert+0x2e>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d2f6      	bcs.n	800a67e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6892      	ldr	r2, [r2, #8]
 800a6de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	6852      	ldr	r2, [r2, #4]
 800a6e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d103      	bne.n	800a6fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	1e5a      	subs	r2, r3, #1
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10d      	bne.n	800a74c <xQueueGenericReset+0x30>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	60bb      	str	r3, [r7, #8]
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	e7fd      	b.n	800a748 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a74c:	f002 f8ce 	bl	800c8ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a758:	68f9      	ldr	r1, [r7, #12]
 800a75a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a75c:	fb01 f303 	mul.w	r3, r1, r3
 800a760:	441a      	add	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77c:	3b01      	subs	r3, #1
 800a77e:	68f9      	ldr	r1, [r7, #12]
 800a780:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a782:	fb01 f303 	mul.w	r3, r1, r3
 800a786:	441a      	add	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	22ff      	movs	r2, #255	@ 0xff
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	22ff      	movs	r2, #255	@ 0xff
 800a798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d114      	bne.n	800a7cc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01a      	beq.n	800a7e0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3310      	adds	r3, #16
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 f950 	bl	800ba54 <xTaskRemoveFromEventList>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d012      	beq.n	800a7e0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f0 <xQueueGenericReset+0xd4>)
 800a7bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	e009      	b.n	800a7e0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3310      	adds	r3, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff feef 	bl	800a5b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3324      	adds	r3, #36	@ 0x24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff feea 	bl	800a5b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7e0:	f002 f8ba 	bl	800c958 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7e4:	2301      	movs	r3, #1
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08e      	sub	sp, #56	@ 0x38
 800a7f8:	af02      	add	r7, sp, #8
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10d      	bne.n	800a824 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80c:	b672      	cpsid	i
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	b662      	cpsie	i
 800a81c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	e7fd      	b.n	800a820 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10d      	bne.n	800a846 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82e:	b672      	cpsid	i
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	b662      	cpsie	i
 800a83e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <xQueueGenericCreateStatic+0x5e>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <xQueueGenericCreateStatic+0x62>
 800a852:	2301      	movs	r3, #1
 800a854:	e000      	b.n	800a858 <xQueueGenericCreateStatic+0x64>
 800a856:	2300      	movs	r3, #0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10d      	bne.n	800a878 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a860:	b672      	cpsid	i
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	b662      	cpsie	i
 800a870:	623b      	str	r3, [r7, #32]
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	e7fd      	b.n	800a874 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <xQueueGenericCreateStatic+0x90>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <xQueueGenericCreateStatic+0x94>
 800a884:	2301      	movs	r3, #1
 800a886:	e000      	b.n	800a88a <xQueueGenericCreateStatic+0x96>
 800a888:	2300      	movs	r3, #0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	b672      	cpsid	i
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	b662      	cpsie	i
 800a8a2:	61fb      	str	r3, [r7, #28]
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop
 800a8a8:	e7fd      	b.n	800a8a6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8aa:	2350      	movs	r3, #80	@ 0x50
 800a8ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b50      	cmp	r3, #80	@ 0x50
 800a8b2:	d00d      	beq.n	800a8d0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b8:	b672      	cpsid	i
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	b662      	cpsie	i
 800a8c8:	61bb      	str	r3, [r7, #24]
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00d      	beq.n	800a8f8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f805 	bl	800a902 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3730      	adds	r7, #48	@ 0x30
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	607a      	str	r2, [r7, #4]
 800a90e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d103      	bne.n	800a91e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e002      	b.n	800a924 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a930:	2101      	movs	r1, #1
 800a932:	69b8      	ldr	r0, [r7, #24]
 800a934:	f7ff fef2 	bl	800a71c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	@ 0x38
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a956:	2300      	movs	r3, #0
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10d      	bne.n	800a980 <xQueueGenericSend+0x38>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	b672      	cpsid	i
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	b662      	cpsie	i
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <xQueueGenericSend+0x46>
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <xQueueGenericSend+0x4a>
 800a98e:	2301      	movs	r3, #1
 800a990:	e000      	b.n	800a994 <xQueueGenericSend+0x4c>
 800a992:	2300      	movs	r3, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10d      	bne.n	800a9b4 <xQueueGenericSend+0x6c>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	b672      	cpsid	i
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	b662      	cpsie	i
 800a9ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	e7fd      	b.n	800a9b0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d103      	bne.n	800a9c2 <xQueueGenericSend+0x7a>
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d101      	bne.n	800a9c6 <xQueueGenericSend+0x7e>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e000      	b.n	800a9c8 <xQueueGenericSend+0x80>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10d      	bne.n	800a9e8 <xQueueGenericSend+0xa0>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	b672      	cpsid	i
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	b662      	cpsie	i
 800a9e0:	623b      	str	r3, [r7, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	e7fd      	b.n	800a9e4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9e8:	f001 fa26 	bl	800be38 <xTaskGetSchedulerState>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <xQueueGenericSend+0xb0>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <xQueueGenericSend+0xb4>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e000      	b.n	800a9fe <xQueueGenericSend+0xb6>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <xQueueGenericSend+0xd6>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa06:	b672      	cpsid	i
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	b662      	cpsie	i
 800aa16:	61fb      	str	r3, [r7, #28]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa1e:	f001 ff65 	bl	800c8ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d302      	bcc.n	800aa34 <xQueueGenericSend+0xec>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d129      	bne.n	800aa88 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	68b9      	ldr	r1, [r7, #8]
 800aa38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa3a:	f000 fa1b 	bl	800ae74 <prvCopyDataToQueue>
 800aa3e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d010      	beq.n	800aa6a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	3324      	adds	r3, #36	@ 0x24
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 f801 	bl	800ba54 <xTaskRemoveFromEventList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d013      	beq.n	800aa80 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa58:	4b3f      	ldr	r3, [pc, #252]	@ (800ab58 <xQueueGenericSend+0x210>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	e00a      	b.n	800aa80 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d007      	beq.n	800aa80 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa70:	4b39      	ldr	r3, [pc, #228]	@ (800ab58 <xQueueGenericSend+0x210>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa80:	f001 ff6a 	bl	800c958 <vPortExitCritical>
				return pdPASS;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e063      	b.n	800ab50 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa8e:	f001 ff63 	bl	800c958 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e05c      	b.n	800ab50 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa9c:	f107 0314 	add.w	r3, r7, #20
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f001 f867 	bl	800bb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaaa:	f001 ff55 	bl	800c958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaae:	f000 fda1 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aab2:	f001 ff1b 	bl	800c8ec <vPortEnterCritical>
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aabc:	b25b      	sxtb	r3, r3
 800aabe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aac2:	d103      	bne.n	800aacc <xQueueGenericSend+0x184>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aace:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aad8:	d103      	bne.n	800aae2 <xQueueGenericSend+0x19a>
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aae2:	f001 ff39 	bl	800c958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aae6:	1d3a      	adds	r2, r7, #4
 800aae8:	f107 0314 	add.w	r3, r7, #20
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f001 f856 	bl	800bba0 <xTaskCheckForTimeOut>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d124      	bne.n	800ab44 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aafa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aafc:	f000 fab2 	bl	800b064 <prvIsQueueFull>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d018      	beq.n	800ab38 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab08:	3310      	adds	r3, #16
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 ff4a 	bl	800b9a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab16:	f000 fa3d 	bl	800af94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab1a:	f000 fd79 	bl	800b610 <xTaskResumeAll>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f47f af7c 	bne.w	800aa1e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800ab26:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <xQueueGenericSend+0x210>)
 800ab28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	e772      	b.n	800aa1e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab3a:	f000 fa2b 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab3e:	f000 fd67 	bl	800b610 <xTaskResumeAll>
 800ab42:	e76c      	b.n	800aa1e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab46:	f000 fa25 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab4a:	f000 fd61 	bl	800b610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3738      	adds	r7, #56	@ 0x38
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08e      	sub	sp, #56	@ 0x38
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10d      	bne.n	800ab90 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab78:	b672      	cpsid	i
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	b662      	cpsie	i
 800ab88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab8a:	bf00      	nop
 800ab8c:	bf00      	nop
 800ab8e:	e7fd      	b.n	800ab8c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <xQueueGenericSendFromISR+0x42>
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <xQueueGenericSendFromISR+0x46>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <xQueueGenericSendFromISR+0x48>
 800aba2:	2300      	movs	r3, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10d      	bne.n	800abc4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abac:	b672      	cpsid	i
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	b662      	cpsie	i
 800abbc:	623b      	str	r3, [r7, #32]
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	e7fd      	b.n	800abc0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d103      	bne.n	800abd2 <xQueueGenericSendFromISR+0x76>
 800abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <xQueueGenericSendFromISR+0x7a>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xQueueGenericSendFromISR+0x7c>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10d      	bne.n	800abf8 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	b672      	cpsid	i
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	b662      	cpsie	i
 800abf0:	61fb      	str	r3, [r7, #28]
}
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	e7fd      	b.n	800abf4 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abf8:	f001 ff60 	bl	800cabc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abfc:	f3ef 8211 	mrs	r2, BASEPRI
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	b672      	cpsid	i
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	b662      	cpsie	i
 800ac14:	61ba      	str	r2, [r7, #24]
 800ac16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d302      	bcc.n	800ac2e <xQueueGenericSendFromISR+0xd2>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d12c      	bne.n	800ac88 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac3e:	f000 f919 	bl	800ae74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac42:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ac46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac4a:	d112      	bne.n	800ac72 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d016      	beq.n	800ac82 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac56:	3324      	adds	r3, #36	@ 0x24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fefb 	bl	800ba54 <xTaskRemoveFromEventList>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	e007      	b.n	800ac82 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	b25a      	sxtb	r2, r3
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac82:	2301      	movs	r3, #1
 800ac84:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800ac86:	e001      	b.n	800ac8c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3738      	adds	r7, #56	@ 0x38
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08c      	sub	sp, #48	@ 0x30
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acb0:	2300      	movs	r3, #0
 800acb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10d      	bne.n	800acda <xQueueReceive+0x36>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	b672      	cpsid	i
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	b662      	cpsie	i
 800acd2:	623b      	str	r3, [r7, #32]
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop
 800acd8:	e7fd      	b.n	800acd6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d103      	bne.n	800ace8 <xQueueReceive+0x44>
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <xQueueReceive+0x48>
 800ace8:	2301      	movs	r3, #1
 800acea:	e000      	b.n	800acee <xQueueReceive+0x4a>
 800acec:	2300      	movs	r3, #0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10d      	bne.n	800ad0e <xQueueReceive+0x6a>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf6:	b672      	cpsid	i
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	b662      	cpsie	i
 800ad06:	61fb      	str	r3, [r7, #28]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad0e:	f001 f893 	bl	800be38 <xTaskGetSchedulerState>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <xQueueReceive+0x7a>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <xQueueReceive+0x7e>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueReceive+0x80>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10d      	bne.n	800ad44 <xQueueReceive+0xa0>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2c:	b672      	cpsid	i
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	b662      	cpsie	i
 800ad3c:	61bb      	str	r3, [r7, #24]
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad44:	f001 fdd2 	bl	800c8ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d01f      	beq.n	800ad94 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad58:	f000 f8f6 	bl	800af48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	1e5a      	subs	r2, r3, #1
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00f      	beq.n	800ad8c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	3310      	adds	r3, #16
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fe6f 	bl	800ba54 <xTaskRemoveFromEventList>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d007      	beq.n	800ad8c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae70 <xQueueReceive+0x1cc>)
 800ad7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad8c:	f001 fde4 	bl	800c958 <vPortExitCritical>
				return pdPASS;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e069      	b.n	800ae68 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d103      	bne.n	800ada2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad9a:	f001 fddd 	bl	800c958 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e062      	b.n	800ae68 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ada2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d106      	bne.n	800adb6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ada8:	f107 0310 	add.w	r3, r7, #16
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fee1 	bl	800bb74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adb2:	2301      	movs	r3, #1
 800adb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adb6:	f001 fdcf 	bl	800c958 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adba:	f000 fc1b 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adbe:	f001 fd95 	bl	800c8ec <vPortEnterCritical>
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adc8:	b25b      	sxtb	r3, r3
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adce:	d103      	bne.n	800add8 <xQueueReceive+0x134>
 800add0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade4:	d103      	bne.n	800adee <xQueueReceive+0x14a>
 800ade6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adee:	f001 fdb3 	bl	800c958 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adf2:	1d3a      	adds	r2, r7, #4
 800adf4:	f107 0310 	add.w	r3, r7, #16
 800adf8:	4611      	mov	r1, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fed0 	bl	800bba0 <xTaskCheckForTimeOut>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d123      	bne.n	800ae4e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae08:	f000 f916 	bl	800b038 <prvIsQueueEmpty>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d017      	beq.n	800ae42 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	3324      	adds	r3, #36	@ 0x24
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fdc4 	bl	800b9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae22:	f000 f8b7 	bl	800af94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae26:	f000 fbf3 	bl	800b610 <xTaskResumeAll>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d189      	bne.n	800ad44 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800ae30:	4b0f      	ldr	r3, [pc, #60]	@ (800ae70 <xQueueReceive+0x1cc>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	e780      	b.n	800ad44 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae44:	f000 f8a6 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae48:	f000 fbe2 	bl	800b610 <xTaskResumeAll>
 800ae4c:	e77a      	b.n	800ad44 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae50:	f000 f8a0 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae54:	f000 fbdc 	bl	800b610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae5a:	f000 f8ed 	bl	800b038 <prvIsQueueEmpty>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f43f af6f 	beq.w	800ad44 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3730      	adds	r7, #48	@ 0x30
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	e000ed04 	.word	0xe000ed04

0800ae74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10d      	bne.n	800aeae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d14d      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 ffe8 	bl	800be74 <xTaskPriorityDisinherit>
 800aea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	609a      	str	r2, [r3, #8]
 800aeac:	e043      	b.n	800af36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d119      	bne.n	800aee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6858      	ldr	r0, [r3, #4]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	f00c fa61 	bl	8017386 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d32b      	bcc.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	e026      	b.n	800af36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68d8      	ldr	r0, [r3, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	f00c fa47 	bl	8017386 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af00:	425b      	negs	r3, r3
 800af02:	441a      	add	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d207      	bcs.n	800af24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1c:	425b      	negs	r3, r3
 800af1e:	441a      	add	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d105      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3b01      	subs	r3, #1
 800af34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af3e:	697b      	ldr	r3, [r7, #20]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	441a      	add	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	429a      	cmp	r2, r3
 800af72:	d303      	bcc.n	800af7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68d9      	ldr	r1, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af84:	461a      	mov	r2, r3
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f00c f9fd 	bl	8017386 <memcpy>
	}
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af9c:	f001 fca6 	bl	800c8ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa8:	e011      	b.n	800afce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3324      	adds	r3, #36	@ 0x24
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fd4c 	bl	800ba54 <xTaskRemoveFromEventList>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afc2:	f000 fe55 	bl	800bc70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3b01      	subs	r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dce9      	bgt.n	800afaa <prvUnlockQueue+0x16>
 800afd6:	e000      	b.n	800afda <prvUnlockQueue+0x46>
					break;
 800afd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	22ff      	movs	r2, #255	@ 0xff
 800afde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afe2:	f001 fcb9 	bl	800c958 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afe6:	f001 fc81 	bl	800c8ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff2:	e011      	b.n	800b018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3310      	adds	r3, #16
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fd27 	bl	800ba54 <xTaskRemoveFromEventList>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b00c:	f000 fe30 	bl	800bc70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	3b01      	subs	r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dce9      	bgt.n	800aff4 <prvUnlockQueue+0x60>
 800b020:	e000      	b.n	800b024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	22ff      	movs	r2, #255	@ 0xff
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b02c:	f001 fc94 	bl	800c958 <vPortExitCritical>
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b040:	f001 fc54 	bl	800c8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b056:	f001 fc7f 	bl	800c958 <vPortExitCritical>

	return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b06c:	f001 fc3e 	bl	800c8ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d102      	bne.n	800b082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e001      	b.n	800b086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b086:	f001 fc67 	bl	800c958 <vPortExitCritical>

	return xReturn;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e014      	b.n	800b0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0a4:	4a0f      	ldr	r2, [pc, #60]	@ (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0b0:	490c      	ldr	r1, [pc, #48]	@ (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	4413      	add	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0c6:	e006      	b.n	800b0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d9e7      	bls.n	800b0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20007e54 	.word	0x20007e54

0800b0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0f8:	f001 fbf8 	bl	800c8ec <vPortEnterCritical>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b102:	b25b      	sxtb	r3, r3
 800b104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b108:	d103      	bne.n	800b112 <vQueueWaitForMessageRestricted+0x2a>
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b118:	b25b      	sxtb	r3, r3
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b11e:	d103      	bne.n	800b128 <vQueueWaitForMessageRestricted+0x40>
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b128:	f001 fc16 	bl	800c958 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b130:	2b00      	cmp	r3, #0
 800b132:	d106      	bne.n	800b142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	3324      	adds	r3, #36	@ 0x24
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fc5b 	bl	800b9f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b142:	6978      	ldr	r0, [r7, #20]
 800b144:	f7ff ff26 	bl	800af94 <prvUnlockQueue>
	}
 800b148:	bf00      	nop
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08e      	sub	sp, #56	@ 0x38
 800b154:	af04      	add	r7, sp, #16
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10d      	bne.n	800b180 <xTaskCreateStatic+0x30>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b168:	b672      	cpsid	i
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	b662      	cpsie	i
 800b178:	623b      	str	r3, [r7, #32]
}
 800b17a:	bf00      	nop
 800b17c:	bf00      	nop
 800b17e:	e7fd      	b.n	800b17c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10d      	bne.n	800b1a2 <xTaskCreateStatic+0x52>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	b672      	cpsid	i
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	b662      	cpsie	i
 800b19a:	61fb      	str	r3, [r7, #28]
}
 800b19c:	bf00      	nop
 800b19e:	bf00      	nop
 800b1a0:	e7fd      	b.n	800b19e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1a2:	235c      	movs	r3, #92	@ 0x5c
 800b1a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1aa:	d00d      	beq.n	800b1c8 <xTaskCreateStatic+0x78>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b0:	b672      	cpsid	i
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	b662      	cpsie	i
 800b1c0:	61bb      	str	r3, [r7, #24]
}
 800b1c2:	bf00      	nop
 800b1c4:	bf00      	nop
 800b1c6:	e7fd      	b.n	800b1c4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01e      	beq.n	800b20e <xTaskCreateStatic+0xbe>
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01b      	beq.n	800b20e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	9302      	str	r3, [sp, #8]
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f850 	bl	800b2a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b208:	f000 f8e0 	bl	800b3cc <prvAddNewTaskToReadyList>
 800b20c:	e001      	b.n	800b212 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b212:	697b      	ldr	r3, [r7, #20]
	}
 800b214:	4618      	mov	r0, r3
 800b216:	3728      	adds	r7, #40	@ 0x28
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08c      	sub	sp, #48	@ 0x30
 800b220:	af04      	add	r7, sp, #16
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	4613      	mov	r3, r2
 800b22a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b22c:	88fb      	ldrh	r3, [r7, #6]
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4618      	mov	r0, r3
 800b232:	f001 fc89 	bl	800cb48 <pvPortMalloc>
 800b236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b23e:	205c      	movs	r0, #92	@ 0x5c
 800b240:	f001 fc82 	bl	800cb48 <pvPortMalloc>
 800b244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	631a      	str	r2, [r3, #48]	@ 0x30
 800b252:	e005      	b.n	800b260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b254:	6978      	ldr	r0, [r7, #20]
 800b256:	f001 fd45 	bl	800cce4 <vPortFree>
 800b25a:	e001      	b.n	800b260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b25c:	2300      	movs	r3, #0
 800b25e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d017      	beq.n	800b296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b26e:	88fa      	ldrh	r2, [r7, #6]
 800b270:	2300      	movs	r3, #0
 800b272:	9303      	str	r3, [sp, #12]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	9302      	str	r3, [sp, #8]
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f80e 	bl	800b2a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b28a:	69f8      	ldr	r0, [r7, #28]
 800b28c:	f000 f89e 	bl	800b3cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b290:	2301      	movs	r3, #1
 800b292:	61bb      	str	r3, [r7, #24]
 800b294:	e002      	b.n	800b29c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b29a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b29c:	69bb      	ldr	r3, [r7, #24]
	}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3720      	adds	r7, #32
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b088      	sub	sp, #32
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	461a      	mov	r2, r3
 800b2be:	21a5      	movs	r1, #165	@ 0xa5
 800b2c0:	f00b ff98 	bl	80171f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2c8:	6879      	ldr	r1, [r7, #4]
 800b2ca:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b2ce:	440b      	add	r3, r1
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	f023 0307 	bic.w	r3, r3, #7
 800b2dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	f003 0307 	and.w	r3, r3, #7
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00d      	beq.n	800b304 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ec:	b672      	cpsid	i
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	b662      	cpsie	i
 800b2fc:	617b      	str	r3, [r7, #20]
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d01f      	beq.n	800b34a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b30a:	2300      	movs	r3, #0
 800b30c:	61fb      	str	r3, [r7, #28]
 800b30e:	e012      	b.n	800b336 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	4413      	add	r3, r2
 800b316:	7819      	ldrb	r1, [r3, #0]
 800b318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	4413      	add	r3, r2
 800b31e:	3334      	adds	r3, #52	@ 0x34
 800b320:	460a      	mov	r2, r1
 800b322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d006      	beq.n	800b33e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	3301      	adds	r3, #1
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d9e9      	bls.n	800b310 <prvInitialiseNewTask+0x6a>
 800b33c:	e000      	b.n	800b340 <prvInitialiseNewTask+0x9a>
			{
				break;
 800b33e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b348:	e003      	b.n	800b352 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b354:	2b37      	cmp	r3, #55	@ 0x37
 800b356:	d901      	bls.n	800b35c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b358:	2337      	movs	r3, #55	@ 0x37
 800b35a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b360:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b366:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	2200      	movs	r2, #0
 800b36c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	3304      	adds	r3, #4
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff f93e 	bl	800a5f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37a:	3318      	adds	r3, #24
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff f939 	bl	800a5f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b396:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	68f9      	ldr	r1, [r7, #12]
 800b3aa:	69b8      	ldr	r0, [r7, #24]
 800b3ac:	f001 f992 	bl	800c6d4 <pxPortInitialiseStack>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3c2:	bf00      	nop
 800b3c4:	3720      	adds	r7, #32
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3d4:	f001 fa8a 	bl	800c8ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3d8:	4b2d      	ldr	r3, [pc, #180]	@ (800b490 <prvAddNewTaskToReadyList+0xc4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	4a2c      	ldr	r2, [pc, #176]	@ (800b490 <prvAddNewTaskToReadyList+0xc4>)
 800b3e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b494 <prvAddNewTaskToReadyList+0xc8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d109      	bne.n	800b3fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b494 <prvAddNewTaskToReadyList+0xc8>)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3f0:	4b27      	ldr	r3, [pc, #156]	@ (800b490 <prvAddNewTaskToReadyList+0xc4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d110      	bne.n	800b41a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3f8:	f000 fc5e 	bl	800bcb8 <prvInitialiseTaskLists>
 800b3fc:	e00d      	b.n	800b41a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3fe:	4b26      	ldr	r3, [pc, #152]	@ (800b498 <prvAddNewTaskToReadyList+0xcc>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d109      	bne.n	800b41a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b406:	4b23      	ldr	r3, [pc, #140]	@ (800b494 <prvAddNewTaskToReadyList+0xc8>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b410:	429a      	cmp	r2, r3
 800b412:	d802      	bhi.n	800b41a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b414:	4a1f      	ldr	r2, [pc, #124]	@ (800b494 <prvAddNewTaskToReadyList+0xc8>)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b41a:	4b20      	ldr	r3, [pc, #128]	@ (800b49c <prvAddNewTaskToReadyList+0xd0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3301      	adds	r3, #1
 800b420:	4a1e      	ldr	r2, [pc, #120]	@ (800b49c <prvAddNewTaskToReadyList+0xd0>)
 800b422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b424:	4b1d      	ldr	r3, [pc, #116]	@ (800b49c <prvAddNewTaskToReadyList+0xd0>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a0 <prvAddNewTaskToReadyList+0xd4>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	429a      	cmp	r2, r3
 800b436:	d903      	bls.n	800b440 <prvAddNewTaskToReadyList+0x74>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43c:	4a18      	ldr	r2, [pc, #96]	@ (800b4a0 <prvAddNewTaskToReadyList+0xd4>)
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4a15      	ldr	r2, [pc, #84]	@ (800b4a4 <prvAddNewTaskToReadyList+0xd8>)
 800b44e:	441a      	add	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3304      	adds	r3, #4
 800b454:	4619      	mov	r1, r3
 800b456:	4610      	mov	r0, r2
 800b458:	f7ff f8d9 	bl	800a60e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b45c:	f001 fa7c 	bl	800c958 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b460:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <prvAddNewTaskToReadyList+0xcc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b468:	4b0a      	ldr	r3, [pc, #40]	@ (800b494 <prvAddNewTaskToReadyList+0xc8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b472:	429a      	cmp	r2, r3
 800b474:	d207      	bcs.n	800b486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b476:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a8 <prvAddNewTaskToReadyList+0xdc>)
 800b478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	20008368 	.word	0x20008368
 800b494:	20007e94 	.word	0x20007e94
 800b498:	20008374 	.word	0x20008374
 800b49c:	20008384 	.word	0x20008384
 800b4a0:	20008370 	.word	0x20008370
 800b4a4:	20007e98 	.word	0x20007e98
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d01a      	beq.n	800b4f4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4be:	4b15      	ldr	r3, [pc, #84]	@ (800b514 <vTaskDelay+0x68>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00d      	beq.n	800b4e2 <vTaskDelay+0x36>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ca:	b672      	cpsid	i
 800b4cc:	f383 8811 	msr	BASEPRI, r3
 800b4d0:	f3bf 8f6f 	isb	sy
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	b662      	cpsie	i
 800b4da:	60bb      	str	r3, [r7, #8]
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	e7fd      	b.n	800b4de <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b4e2:	f000 f887 	bl	800b5f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fd37 	bl	800bf5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4ee:	f000 f88f 	bl	800b610 <xTaskResumeAll>
 800b4f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d107      	bne.n	800b50a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b4fa:	4b07      	ldr	r3, [pc, #28]	@ (800b518 <vTaskDelay+0x6c>)
 800b4fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20008390 	.word	0x20008390
 800b518:	e000ed04 	.word	0xe000ed04

0800b51c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	@ 0x28
 800b520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b52a:	463a      	mov	r2, r7
 800b52c:	1d39      	adds	r1, r7, #4
 800b52e:	f107 0308 	add.w	r3, r7, #8
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff f80a 	bl	800a54c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	9202      	str	r2, [sp, #8]
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	2300      	movs	r3, #0
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	2300      	movs	r3, #0
 800b548:	460a      	mov	r2, r1
 800b54a:	4924      	ldr	r1, [pc, #144]	@ (800b5dc <vTaskStartScheduler+0xc0>)
 800b54c:	4824      	ldr	r0, [pc, #144]	@ (800b5e0 <vTaskStartScheduler+0xc4>)
 800b54e:	f7ff fdff 	bl	800b150 <xTaskCreateStatic>
 800b552:	4603      	mov	r3, r0
 800b554:	4a23      	ldr	r2, [pc, #140]	@ (800b5e4 <vTaskStartScheduler+0xc8>)
 800b556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b558:	4b22      	ldr	r3, [pc, #136]	@ (800b5e4 <vTaskStartScheduler+0xc8>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b560:	2301      	movs	r3, #1
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	e001      	b.n	800b56a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d102      	bne.n	800b576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b570:	f000 fd48 	bl	800c004 <xTimerCreateTimerTask>
 800b574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d118      	bne.n	800b5ae <vTaskStartScheduler+0x92>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b580:	b672      	cpsid	i
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	b662      	cpsie	i
 800b590:	613b      	str	r3, [r7, #16]
}
 800b592:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b594:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <vTaskStartScheduler+0xcc>)
 800b596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b59a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b59c:	4b13      	ldr	r3, [pc, #76]	@ (800b5ec <vTaskStartScheduler+0xd0>)
 800b59e:	2201      	movs	r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5a2:	4b13      	ldr	r3, [pc, #76]	@ (800b5f0 <vTaskStartScheduler+0xd4>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5a8:	f001 f922 	bl	800c7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5ac:	e011      	b.n	800b5d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5b4:	d10d      	bne.n	800b5d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	b672      	cpsid	i
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	b662      	cpsie	i
 800b5ca:	60fb      	str	r3, [r7, #12]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <vTaskStartScheduler+0xb2>
}
 800b5d2:	bf00      	nop
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	08018118 	.word	0x08018118
 800b5e0:	0800bc89 	.word	0x0800bc89
 800b5e4:	2000838c 	.word	0x2000838c
 800b5e8:	20008388 	.word	0x20008388
 800b5ec:	20008374 	.word	0x20008374
 800b5f0:	2000836c 	.word	0x2000836c

0800b5f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5f8:	4b04      	ldr	r3, [pc, #16]	@ (800b60c <vTaskSuspendAll+0x18>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	4a03      	ldr	r2, [pc, #12]	@ (800b60c <vTaskSuspendAll+0x18>)
 800b600:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20008390 	.word	0x20008390

0800b610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b61e:	4b43      	ldr	r3, [pc, #268]	@ (800b72c <xTaskResumeAll+0x11c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10d      	bne.n	800b642 <xTaskResumeAll+0x32>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62a:	b672      	cpsid	i
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	b662      	cpsie	i
 800b63a:	603b      	str	r3, [r7, #0]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b642:	f001 f953 	bl	800c8ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b646:	4b39      	ldr	r3, [pc, #228]	@ (800b72c <xTaskResumeAll+0x11c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	4a37      	ldr	r2, [pc, #220]	@ (800b72c <xTaskResumeAll+0x11c>)
 800b64e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b650:	4b36      	ldr	r3, [pc, #216]	@ (800b72c <xTaskResumeAll+0x11c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d162      	bne.n	800b71e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b658:	4b35      	ldr	r3, [pc, #212]	@ (800b730 <xTaskResumeAll+0x120>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d05e      	beq.n	800b71e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b660:	e02f      	b.n	800b6c2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b662:	4b34      	ldr	r3, [pc, #208]	@ (800b734 <xTaskResumeAll+0x124>)
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3318      	adds	r3, #24
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff f82a 	bl	800a6c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3304      	adds	r3, #4
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff f825 	bl	800a6c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b682:	4b2d      	ldr	r3, [pc, #180]	@ (800b738 <xTaskResumeAll+0x128>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d903      	bls.n	800b692 <xTaskResumeAll+0x82>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68e:	4a2a      	ldr	r2, [pc, #168]	@ (800b738 <xTaskResumeAll+0x128>)
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4a27      	ldr	r2, [pc, #156]	@ (800b73c <xTaskResumeAll+0x12c>)
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7fe ffb0 	bl	800a60e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b2:	4b23      	ldr	r3, [pc, #140]	@ (800b740 <xTaskResumeAll+0x130>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d302      	bcc.n	800b6c2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800b6bc:	4b21      	ldr	r3, [pc, #132]	@ (800b744 <xTaskResumeAll+0x134>)
 800b6be:	2201      	movs	r2, #1
 800b6c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	@ (800b734 <xTaskResumeAll+0x124>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1cb      	bne.n	800b662 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6d0:	f000 fb92 	bl	800bdf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b748 <xTaskResumeAll+0x138>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d010      	beq.n	800b702 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6e0:	f000 f846 	bl	800b770 <xTaskIncrementTick>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800b6ea:	4b16      	ldr	r3, [pc, #88]	@ (800b744 <xTaskResumeAll+0x134>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f1      	bne.n	800b6e0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800b6fc:	4b12      	ldr	r3, [pc, #72]	@ (800b748 <xTaskResumeAll+0x138>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b702:	4b10      	ldr	r3, [pc, #64]	@ (800b744 <xTaskResumeAll+0x134>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b70a:	2301      	movs	r3, #1
 800b70c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b70e:	4b0f      	ldr	r3, [pc, #60]	@ (800b74c <xTaskResumeAll+0x13c>)
 800b710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b71e:	f001 f91b 	bl	800c958 <vPortExitCritical>

	return xAlreadyYielded;
 800b722:	68bb      	ldr	r3, [r7, #8]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	20008390 	.word	0x20008390
 800b730:	20008368 	.word	0x20008368
 800b734:	20008328 	.word	0x20008328
 800b738:	20008370 	.word	0x20008370
 800b73c:	20007e98 	.word	0x20007e98
 800b740:	20007e94 	.word	0x20007e94
 800b744:	2000837c 	.word	0x2000837c
 800b748:	20008378 	.word	0x20008378
 800b74c:	e000ed04 	.word	0xe000ed04

0800b750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b756:	4b05      	ldr	r3, [pc, #20]	@ (800b76c <xTaskGetTickCount+0x1c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b75c:	687b      	ldr	r3, [r7, #4]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	2000836c 	.word	0x2000836c

0800b770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b776:	2300      	movs	r3, #0
 800b778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77a:	4b50      	ldr	r3, [pc, #320]	@ (800b8bc <xTaskIncrementTick+0x14c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 808c 	bne.w	800b89c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b784:	4b4e      	ldr	r3, [pc, #312]	@ (800b8c0 <xTaskIncrementTick+0x150>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b78c:	4a4c      	ldr	r2, [pc, #304]	@ (800b8c0 <xTaskIncrementTick+0x150>)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d123      	bne.n	800b7e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b798:	4b4a      	ldr	r3, [pc, #296]	@ (800b8c4 <xTaskIncrementTick+0x154>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00d      	beq.n	800b7be <xTaskIncrementTick+0x4e>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a6:	b672      	cpsid	i
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	b662      	cpsie	i
 800b7b6:	603b      	str	r3, [r7, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <xTaskIncrementTick+0x4a>
 800b7be:	4b41      	ldr	r3, [pc, #260]	@ (800b8c4 <xTaskIncrementTick+0x154>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	4b40      	ldr	r3, [pc, #256]	@ (800b8c8 <xTaskIncrementTick+0x158>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a3e      	ldr	r2, [pc, #248]	@ (800b8c4 <xTaskIncrementTick+0x154>)
 800b7ca:	6013      	str	r3, [r2, #0]
 800b7cc:	4a3e      	ldr	r2, [pc, #248]	@ (800b8c8 <xTaskIncrementTick+0x158>)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	4b3e      	ldr	r3, [pc, #248]	@ (800b8cc <xTaskIncrementTick+0x15c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	4a3c      	ldr	r2, [pc, #240]	@ (800b8cc <xTaskIncrementTick+0x15c>)
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	f000 fb0c 	bl	800bdf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7e0:	4b3b      	ldr	r3, [pc, #236]	@ (800b8d0 <xTaskIncrementTick+0x160>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d349      	bcc.n	800b87e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ea:	4b36      	ldr	r3, [pc, #216]	@ (800b8c4 <xTaskIncrementTick+0x154>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d104      	bne.n	800b7fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f4:	4b36      	ldr	r3, [pc, #216]	@ (800b8d0 <xTaskIncrementTick+0x160>)
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7fa:	601a      	str	r2, [r3, #0]
					break;
 800b7fc:	e03f      	b.n	800b87e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fe:	4b31      	ldr	r3, [pc, #196]	@ (800b8c4 <xTaskIncrementTick+0x154>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d203      	bcs.n	800b81e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b816:	4a2e      	ldr	r2, [pc, #184]	@ (800b8d0 <xTaskIncrementTick+0x160>)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b81c:	e02f      	b.n	800b87e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	3304      	adds	r3, #4
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe ff50 	bl	800a6c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d004      	beq.n	800b83a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	3318      	adds	r3, #24
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe ff47 	bl	800a6c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83e:	4b25      	ldr	r3, [pc, #148]	@ (800b8d4 <xTaskIncrementTick+0x164>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d903      	bls.n	800b84e <xTaskIncrementTick+0xde>
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84a:	4a22      	ldr	r2, [pc, #136]	@ (800b8d4 <xTaskIncrementTick+0x164>)
 800b84c:	6013      	str	r3, [r2, #0]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b852:	4613      	mov	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4a1f      	ldr	r2, [pc, #124]	@ (800b8d8 <xTaskIncrementTick+0x168>)
 800b85c:	441a      	add	r2, r3
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	3304      	adds	r3, #4
 800b862:	4619      	mov	r1, r3
 800b864:	4610      	mov	r0, r2
 800b866:	f7fe fed2 	bl	800a60e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86e:	4b1b      	ldr	r3, [pc, #108]	@ (800b8dc <xTaskIncrementTick+0x16c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b874:	429a      	cmp	r2, r3
 800b876:	d3b8      	bcc.n	800b7ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b87c:	e7b5      	b.n	800b7ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b87e:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <xTaskIncrementTick+0x16c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b884:	4914      	ldr	r1, [pc, #80]	@ (800b8d8 <xTaskIncrementTick+0x168>)
 800b886:	4613      	mov	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	440b      	add	r3, r1
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d907      	bls.n	800b8a6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b896:	2301      	movs	r3, #1
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e004      	b.n	800b8a6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b89c:	4b10      	ldr	r3, [pc, #64]	@ (800b8e0 <xTaskIncrementTick+0x170>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	4a0f      	ldr	r2, [pc, #60]	@ (800b8e0 <xTaskIncrementTick+0x170>)
 800b8a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e4 <xTaskIncrementTick+0x174>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b8b2:	697b      	ldr	r3, [r7, #20]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20008390 	.word	0x20008390
 800b8c0:	2000836c 	.word	0x2000836c
 800b8c4:	20008320 	.word	0x20008320
 800b8c8:	20008324 	.word	0x20008324
 800b8cc:	20008380 	.word	0x20008380
 800b8d0:	20008388 	.word	0x20008388
 800b8d4:	20008370 	.word	0x20008370
 800b8d8:	20007e98 	.word	0x20007e98
 800b8dc:	20007e94 	.word	0x20007e94
 800b8e0:	20008378 	.word	0x20008378
 800b8e4:	2000837c 	.word	0x2000837c

0800b8e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8ee:	4b29      	ldr	r3, [pc, #164]	@ (800b994 <vTaskSwitchContext+0xac>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8f6:	4b28      	ldr	r3, [pc, #160]	@ (800b998 <vTaskSwitchContext+0xb0>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8fc:	e044      	b.n	800b988 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b8fe:	4b26      	ldr	r3, [pc, #152]	@ (800b998 <vTaskSwitchContext+0xb0>)
 800b900:	2200      	movs	r2, #0
 800b902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b904:	4b25      	ldr	r3, [pc, #148]	@ (800b99c <vTaskSwitchContext+0xb4>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e013      	b.n	800b934 <vTaskSwitchContext+0x4c>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10d      	bne.n	800b92e <vTaskSwitchContext+0x46>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	b672      	cpsid	i
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	b662      	cpsie	i
 800b926:	607b      	str	r3, [r7, #4]
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <vTaskSwitchContext+0x42>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3b01      	subs	r3, #1
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	491a      	ldr	r1, [pc, #104]	@ (800b9a0 <vTaskSwitchContext+0xb8>)
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	440b      	add	r3, r1
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d0e1      	beq.n	800b90c <vTaskSwitchContext+0x24>
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4a13      	ldr	r2, [pc, #76]	@ (800b9a0 <vTaskSwitchContext+0xb8>)
 800b954:	4413      	add	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	605a      	str	r2, [r3, #4]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	3308      	adds	r3, #8
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d104      	bne.n	800b978 <vTaskSwitchContext+0x90>
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	605a      	str	r2, [r3, #4]
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	4a09      	ldr	r2, [pc, #36]	@ (800b9a4 <vTaskSwitchContext+0xbc>)
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	4a06      	ldr	r2, [pc, #24]	@ (800b99c <vTaskSwitchContext+0xb4>)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6013      	str	r3, [r2, #0]
}
 800b988:	bf00      	nop
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20008390 	.word	0x20008390
 800b998:	2000837c 	.word	0x2000837c
 800b99c:	20008370 	.word	0x20008370
 800b9a0:	20007e98 	.word	0x20007e98
 800b9a4:	20007e94 	.word	0x20007e94

0800b9a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10d      	bne.n	800b9d4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9bc:	b672      	cpsid	i
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	b662      	cpsie	i
 800b9cc:	60fb      	str	r3, [r7, #12]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9d4:	4b07      	ldr	r3, [pc, #28]	@ (800b9f4 <vTaskPlaceOnEventList+0x4c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3318      	adds	r3, #24
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7fe fe3a 	bl	800a656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	6838      	ldr	r0, [r7, #0]
 800b9e6:	f000 fab9 	bl	800bf5c <prvAddCurrentTaskToDelayedList>
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20007e94 	.word	0x20007e94

0800b9f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10d      	bne.n	800ba26 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	b672      	cpsid	i
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	b662      	cpsie	i
 800ba1e:	617b      	str	r3, [r7, #20]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba26:	4b0a      	ldr	r3, [pc, #40]	@ (800ba50 <vTaskPlaceOnEventListRestricted+0x58>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3318      	adds	r3, #24
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f7fe fded 	bl	800a60e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800ba3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	68b8      	ldr	r0, [r7, #8]
 800ba44:	f000 fa8a 	bl	800bf5c <prvAddCurrentTaskToDelayedList>
	}
 800ba48:	bf00      	nop
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20007e94 	.word	0x20007e94

0800ba54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10d      	bne.n	800ba86 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6e:	b672      	cpsid	i
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	b662      	cpsie	i
 800ba7e:	60fb      	str	r3, [r7, #12]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3318      	adds	r3, #24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fe1c 	bl	800a6c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba90:	4b1d      	ldr	r3, [pc, #116]	@ (800bb08 <xTaskRemoveFromEventList+0xb4>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d11d      	bne.n	800bad4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe fe13 	bl	800a6c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa6:	4b19      	ldr	r3, [pc, #100]	@ (800bb0c <xTaskRemoveFromEventList+0xb8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d903      	bls.n	800bab6 <xTaskRemoveFromEventList+0x62>
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	4a16      	ldr	r2, [pc, #88]	@ (800bb0c <xTaskRemoveFromEventList+0xb8>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4a13      	ldr	r2, [pc, #76]	@ (800bb10 <xTaskRemoveFromEventList+0xbc>)
 800bac4:	441a      	add	r2, r3
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	3304      	adds	r3, #4
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f7fe fd9e 	bl	800a60e <vListInsertEnd>
 800bad2:	e005      	b.n	800bae0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	3318      	adds	r3, #24
 800bad8:	4619      	mov	r1, r3
 800bada:	480e      	ldr	r0, [pc, #56]	@ (800bb14 <xTaskRemoveFromEventList+0xc0>)
 800badc:	f7fe fd97 	bl	800a60e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb18 <xTaskRemoveFromEventList+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d905      	bls.n	800bafa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800baf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bb1c <xTaskRemoveFromEventList+0xc8>)
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	e001      	b.n	800bafe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bafe:	697b      	ldr	r3, [r7, #20]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20008390 	.word	0x20008390
 800bb0c:	20008370 	.word	0x20008370
 800bb10:	20007e98 	.word	0x20007e98
 800bb14:	20008328 	.word	0x20008328
 800bb18:	20007e94 	.word	0x20007e94
 800bb1c:	2000837c 	.word	0x2000837c

0800bb20 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10d      	bne.n	800bb4a <vTaskSetTimeOutState+0x2a>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb32:	b672      	cpsid	i
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	b662      	cpsie	i
 800bb42:	60fb      	str	r3, [r7, #12]
}
 800bb44:	bf00      	nop
 800bb46:	bf00      	nop
 800bb48:	e7fd      	b.n	800bb46 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800bb4a:	f000 fecf 	bl	800c8ec <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb4e:	4b07      	ldr	r3, [pc, #28]	@ (800bb6c <vTaskSetTimeOutState+0x4c>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bb56:	4b06      	ldr	r3, [pc, #24]	@ (800bb70 <vTaskSetTimeOutState+0x50>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bb5e:	f000 fefb 	bl	800c958 <vPortExitCritical>
}
 800bb62:	bf00      	nop
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20008380 	.word	0x20008380
 800bb70:	2000836c 	.word	0x2000836c

0800bb74 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb7c:	4b06      	ldr	r3, [pc, #24]	@ (800bb98 <vTaskInternalSetTimeOutState+0x24>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <vTaskInternalSetTimeOutState+0x28>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	605a      	str	r2, [r3, #4]
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	20008380 	.word	0x20008380
 800bb9c:	2000836c 	.word	0x2000836c

0800bba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10d      	bne.n	800bbcc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	b672      	cpsid	i
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	b662      	cpsie	i
 800bbc4:	613b      	str	r3, [r7, #16]
}
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	e7fd      	b.n	800bbc8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10d      	bne.n	800bbee <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd6:	b672      	cpsid	i
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	b662      	cpsie	i
 800bbe6:	60fb      	str	r3, [r7, #12]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800bbee:	f000 fe7d 	bl	800c8ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbf2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc68 <xTaskCheckForTimeOut+0xc8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	69ba      	ldr	r2, [r7, #24]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc0a:	d102      	bne.n	800bc12 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	e023      	b.n	800bc5a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <xTaskCheckForTimeOut+0xcc>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d007      	beq.n	800bc2e <xTaskCheckForTimeOut+0x8e>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d302      	bcc.n	800bc2e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e015      	b.n	800bc5a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d20b      	bcs.n	800bc50 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff ff95 	bl	800bb74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61fb      	str	r3, [r7, #28]
 800bc4e:	e004      	b.n	800bc5a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc56:	2301      	movs	r3, #1
 800bc58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc5a:	f000 fe7d 	bl	800c958 <vPortExitCritical>

	return xReturn;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3720      	adds	r7, #32
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	2000836c 	.word	0x2000836c
 800bc6c:	20008380 	.word	0x20008380

0800bc70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc74:	4b03      	ldr	r3, [pc, #12]	@ (800bc84 <vTaskMissedYield+0x14>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
}
 800bc7a:	bf00      	nop
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	2000837c 	.word	0x2000837c

0800bc88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc90:	f000 f852 	bl	800bd38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc94:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <prvIdleTask+0x28>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d9f9      	bls.n	800bc90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc9c:	4b05      	ldr	r3, [pc, #20]	@ (800bcb4 <prvIdleTask+0x2c>)
 800bc9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcac:	e7f0      	b.n	800bc90 <prvIdleTask+0x8>
 800bcae:	bf00      	nop
 800bcb0:	20007e98 	.word	0x20007e98
 800bcb4:	e000ed04 	.word	0xe000ed04

0800bcb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	607b      	str	r3, [r7, #4]
 800bcc2:	e00c      	b.n	800bcde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4a12      	ldr	r2, [pc, #72]	@ (800bd18 <prvInitialiseTaskLists+0x60>)
 800bcd0:	4413      	add	r3, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe fc6e 	bl	800a5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	607b      	str	r3, [r7, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b37      	cmp	r3, #55	@ 0x37
 800bce2:	d9ef      	bls.n	800bcc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bce4:	480d      	ldr	r0, [pc, #52]	@ (800bd1c <prvInitialiseTaskLists+0x64>)
 800bce6:	f7fe fc65 	bl	800a5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcea:	480d      	ldr	r0, [pc, #52]	@ (800bd20 <prvInitialiseTaskLists+0x68>)
 800bcec:	f7fe fc62 	bl	800a5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcf0:	480c      	ldr	r0, [pc, #48]	@ (800bd24 <prvInitialiseTaskLists+0x6c>)
 800bcf2:	f7fe fc5f 	bl	800a5b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcf6:	480c      	ldr	r0, [pc, #48]	@ (800bd28 <prvInitialiseTaskLists+0x70>)
 800bcf8:	f7fe fc5c 	bl	800a5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcfc:	480b      	ldr	r0, [pc, #44]	@ (800bd2c <prvInitialiseTaskLists+0x74>)
 800bcfe:	f7fe fc59 	bl	800a5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd02:	4b0b      	ldr	r3, [pc, #44]	@ (800bd30 <prvInitialiseTaskLists+0x78>)
 800bd04:	4a05      	ldr	r2, [pc, #20]	@ (800bd1c <prvInitialiseTaskLists+0x64>)
 800bd06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <prvInitialiseTaskLists+0x7c>)
 800bd0a:	4a05      	ldr	r2, [pc, #20]	@ (800bd20 <prvInitialiseTaskLists+0x68>)
 800bd0c:	601a      	str	r2, [r3, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20007e98 	.word	0x20007e98
 800bd1c:	200082f8 	.word	0x200082f8
 800bd20:	2000830c 	.word	0x2000830c
 800bd24:	20008328 	.word	0x20008328
 800bd28:	2000833c 	.word	0x2000833c
 800bd2c:	20008354 	.word	0x20008354
 800bd30:	20008320 	.word	0x20008320
 800bd34:	20008324 	.word	0x20008324

0800bd38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd3e:	e019      	b.n	800bd74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd40:	f000 fdd4 	bl	800c8ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd44:	4b10      	ldr	r3, [pc, #64]	@ (800bd88 <prvCheckTasksWaitingTermination+0x50>)
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fe fcb9 	bl	800a6c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd56:	4b0d      	ldr	r3, [pc, #52]	@ (800bd8c <prvCheckTasksWaitingTermination+0x54>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4a0b      	ldr	r2, [pc, #44]	@ (800bd8c <prvCheckTasksWaitingTermination+0x54>)
 800bd5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	@ (800bd90 <prvCheckTasksWaitingTermination+0x58>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	4a0a      	ldr	r2, [pc, #40]	@ (800bd90 <prvCheckTasksWaitingTermination+0x58>)
 800bd68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd6a:	f000 fdf5 	bl	800c958 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f810 	bl	800bd94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd74:	4b06      	ldr	r3, [pc, #24]	@ (800bd90 <prvCheckTasksWaitingTermination+0x58>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1e1      	bne.n	800bd40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	2000833c 	.word	0x2000833c
 800bd8c:	20008368 	.word	0x20008368
 800bd90:	20008350 	.word	0x20008350

0800bd94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d108      	bne.n	800bdb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 ff9a 	bl	800cce4 <vPortFree>
				vPortFree( pxTCB );
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 ff97 	bl	800cce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdb6:	e01b      	b.n	800bdf0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d103      	bne.n	800bdca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 ff8e 	bl	800cce4 <vPortFree>
	}
 800bdc8:	e012      	b.n	800bdf0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d00d      	beq.n	800bdf0 <prvDeleteTCB+0x5c>
	__asm volatile
 800bdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd8:	b672      	cpsid	i
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	b662      	cpsie	i
 800bde8:	60fb      	str	r3, [r7, #12]
}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	e7fd      	b.n	800bdec <prvDeleteTCB+0x58>
	}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdfe:	4b0c      	ldr	r3, [pc, #48]	@ (800be30 <prvResetNextTaskUnblockTime+0x38>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d104      	bne.n	800be12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be08:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <prvResetNextTaskUnblockTime+0x3c>)
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be10:	e008      	b.n	800be24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be12:	4b07      	ldr	r3, [pc, #28]	@ (800be30 <prvResetNextTaskUnblockTime+0x38>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	4a04      	ldr	r2, [pc, #16]	@ (800be34 <prvResetNextTaskUnblockTime+0x3c>)
 800be22:	6013      	str	r3, [r2, #0]
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	20008320 	.word	0x20008320
 800be34:	20008388 	.word	0x20008388

0800be38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be3e:	4b0b      	ldr	r3, [pc, #44]	@ (800be6c <xTaskGetSchedulerState+0x34>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d102      	bne.n	800be4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be46:	2301      	movs	r3, #1
 800be48:	607b      	str	r3, [r7, #4]
 800be4a:	e008      	b.n	800be5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be4c:	4b08      	ldr	r3, [pc, #32]	@ (800be70 <xTaskGetSchedulerState+0x38>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be54:	2302      	movs	r3, #2
 800be56:	607b      	str	r3, [r7, #4]
 800be58:	e001      	b.n	800be5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be5a:	2300      	movs	r3, #0
 800be5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be5e:	687b      	ldr	r3, [r7, #4]
	}
 800be60:	4618      	mov	r0, r3
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20008374 	.word	0x20008374
 800be70:	20008390 	.word	0x20008390

0800be74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d05c      	beq.n	800bf44 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be8a:	4b31      	ldr	r3, [pc, #196]	@ (800bf50 <xTaskPriorityDisinherit+0xdc>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	429a      	cmp	r2, r3
 800be92:	d00d      	beq.n	800beb0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be98:	b672      	cpsid	i
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	b662      	cpsie	i
 800bea8:	60fb      	str	r3, [r7, #12]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10d      	bne.n	800bed4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebc:	b672      	cpsid	i
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	b662      	cpsie	i
 800becc:	60bb      	str	r3, [r7, #8]
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bed8:	1e5a      	subs	r2, r3, #1
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d02c      	beq.n	800bf44 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d128      	bne.n	800bf44 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fbe6 	bl	800a6c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf14:	4b0f      	ldr	r3, [pc, #60]	@ (800bf54 <xTaskPriorityDisinherit+0xe0>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d903      	bls.n	800bf24 <xTaskPriorityDisinherit+0xb0>
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf20:	4a0c      	ldr	r2, [pc, #48]	@ (800bf54 <xTaskPriorityDisinherit+0xe0>)
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4a09      	ldr	r2, [pc, #36]	@ (800bf58 <xTaskPriorityDisinherit+0xe4>)
 800bf32:	441a      	add	r2, r3
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	3304      	adds	r3, #4
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	f7fe fb67 	bl	800a60e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf40:	2301      	movs	r3, #1
 800bf42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf44:	697b      	ldr	r3, [r7, #20]
	}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20007e94 	.word	0x20007e94
 800bf54:	20008370 	.word	0x20008370
 800bf58:	20007e98 	.word	0x20007e98

0800bf5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf66:	4b21      	ldr	r3, [pc, #132]	@ (800bfec <prvAddCurrentTaskToDelayedList+0x90>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf6c:	4b20      	ldr	r3, [pc, #128]	@ (800bff0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fba8 	bl	800a6c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf7e:	d10a      	bne.n	800bf96 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf86:	4b1a      	ldr	r3, [pc, #104]	@ (800bff0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4819      	ldr	r0, [pc, #100]	@ (800bff4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf90:	f7fe fb3d 	bl	800a60e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf94:	e026      	b.n	800bfe4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf9e:	4b14      	ldr	r3, [pc, #80]	@ (800bff0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d209      	bcs.n	800bfc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfae:	4b12      	ldr	r3, [pc, #72]	@ (800bff8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bff0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	4619      	mov	r1, r3
 800bfba:	4610      	mov	r0, r2
 800bfbc:	f7fe fb4b 	bl	800a656 <vListInsert>
}
 800bfc0:	e010      	b.n	800bfe4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bffc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bff0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe fb41 	bl	800a656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d202      	bcs.n	800bfe4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfde:	4a08      	ldr	r2, [pc, #32]	@ (800c000 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	6013      	str	r3, [r2, #0]
}
 800bfe4:	bf00      	nop
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	2000836c 	.word	0x2000836c
 800bff0:	20007e94 	.word	0x20007e94
 800bff4:	20008354 	.word	0x20008354
 800bff8:	20008324 	.word	0x20008324
 800bffc:	20008320 	.word	0x20008320
 800c000:	20008388 	.word	0x20008388

0800c004 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	@ 0x28
 800c008:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c00a:	2300      	movs	r3, #0
 800c00c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c00e:	f000 fb21 	bl	800c654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c012:	4b1e      	ldr	r3, [pc, #120]	@ (800c08c <xTimerCreateTimerTask+0x88>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d021      	beq.n	800c05e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c022:	1d3a      	adds	r2, r7, #4
 800c024:	f107 0108 	add.w	r1, r7, #8
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe faa7 	bl	800a580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	9202      	str	r2, [sp, #8]
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	2302      	movs	r3, #2
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	2300      	movs	r3, #0
 800c042:	460a      	mov	r2, r1
 800c044:	4912      	ldr	r1, [pc, #72]	@ (800c090 <xTimerCreateTimerTask+0x8c>)
 800c046:	4813      	ldr	r0, [pc, #76]	@ (800c094 <xTimerCreateTimerTask+0x90>)
 800c048:	f7ff f882 	bl	800b150 <xTaskCreateStatic>
 800c04c:	4603      	mov	r3, r0
 800c04e:	4a12      	ldr	r2, [pc, #72]	@ (800c098 <xTimerCreateTimerTask+0x94>)
 800c050:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c052:	4b11      	ldr	r3, [pc, #68]	@ (800c098 <xTimerCreateTimerTask+0x94>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c05a:	2301      	movs	r3, #1
 800c05c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10d      	bne.n	800c080 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c068:	b672      	cpsid	i
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	b662      	cpsie	i
 800c078:	613b      	str	r3, [r7, #16]
}
 800c07a:	bf00      	nop
 800c07c:	bf00      	nop
 800c07e:	e7fd      	b.n	800c07c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c080:	697b      	ldr	r3, [r7, #20]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	200083c4 	.word	0x200083c4
 800c090:	08018120 	.word	0x08018120
 800c094:	0800c1dd 	.word	0x0800c1dd
 800c098:	200083c8 	.word	0x200083c8

0800c09c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	@ 0x28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10d      	bne.n	800c0d0 <xTimerGenericCommand+0x34>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	b672      	cpsid	i
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	b662      	cpsie	i
 800c0c8:	623b      	str	r3, [r7, #32]
}
 800c0ca:	bf00      	nop
 800c0cc:	bf00      	nop
 800c0ce:	e7fd      	b.n	800c0cc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0d0:	4b19      	ldr	r3, [pc, #100]	@ (800c138 <xTimerGenericCommand+0x9c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d02a      	beq.n	800c12e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2b05      	cmp	r3, #5
 800c0e8:	dc18      	bgt.n	800c11c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0ea:	f7ff fea5 	bl	800be38 <xTaskGetSchedulerState>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d109      	bne.n	800c108 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0f4:	4b10      	ldr	r3, [pc, #64]	@ (800c138 <xTimerGenericCommand+0x9c>)
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	f107 0110 	add.w	r1, r7, #16
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c100:	f7fe fc22 	bl	800a948 <xQueueGenericSend>
 800c104:	6278      	str	r0, [r7, #36]	@ 0x24
 800c106:	e012      	b.n	800c12e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c108:	4b0b      	ldr	r3, [pc, #44]	@ (800c138 <xTimerGenericCommand+0x9c>)
 800c10a:	6818      	ldr	r0, [r3, #0]
 800c10c:	f107 0110 	add.w	r1, r7, #16
 800c110:	2300      	movs	r3, #0
 800c112:	2200      	movs	r2, #0
 800c114:	f7fe fc18 	bl	800a948 <xQueueGenericSend>
 800c118:	6278      	str	r0, [r7, #36]	@ 0x24
 800c11a:	e008      	b.n	800c12e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <xTimerGenericCommand+0x9c>)
 800c11e:	6818      	ldr	r0, [r3, #0]
 800c120:	f107 0110 	add.w	r1, r7, #16
 800c124:	2300      	movs	r3, #0
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	f7fe fd18 	bl	800ab5c <xQueueGenericSendFromISR>
 800c12c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c130:	4618      	mov	r0, r3
 800c132:	3728      	adds	r7, #40	@ 0x28
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200083c4 	.word	0x200083c4

0800c13c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c146:	4b24      	ldr	r3, [pc, #144]	@ (800c1d8 <prvProcessExpiredTimer+0x9c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	3304      	adds	r3, #4
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe fab7 	bl	800a6c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d025      	beq.n	800c1b4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	699a      	ldr	r2, [r3, #24]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	18d1      	adds	r1, r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	6978      	ldr	r0, [r7, #20]
 800c176:	f000 f8d7 	bl	800c328 <prvInsertTimerInActiveList>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d022      	beq.n	800c1c6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c180:	2300      	movs	r3, #0
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	2300      	movs	r3, #0
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	2100      	movs	r1, #0
 800c18a:	6978      	ldr	r0, [r7, #20]
 800c18c:	f7ff ff86 	bl	800c09c <xTimerGenericCommand>
 800c190:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d116      	bne.n	800c1c6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	b672      	cpsid	i
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	b662      	cpsie	i
 800c1ac:	60fb      	str	r3, [r7, #12]
}
 800c1ae:	bf00      	nop
 800c1b0:	bf00      	nop
 800c1b2:	e7fd      	b.n	800c1b0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1ba:	f023 0301 	bic.w	r3, r3, #1
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	6978      	ldr	r0, [r7, #20]
 800c1cc:	4798      	blx	r3
}
 800c1ce:	bf00      	nop
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	200083bc 	.word	0x200083bc

0800c1dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1e4:	f107 0308 	add.w	r3, r7, #8
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 f859 	bl	800c2a0 <prvGetNextExpireTime>
 800c1ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f805 	bl	800c204 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1fa:	f000 f8d7 	bl	800c3ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1fe:	bf00      	nop
 800c200:	e7f0      	b.n	800c1e4 <prvTimerTask+0x8>
	...

0800c204 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c20e:	f7ff f9f1 	bl	800b5f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c212:	f107 0308 	add.w	r3, r7, #8
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f866 	bl	800c2e8 <prvSampleTimeNow>
 800c21c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d130      	bne.n	800c286 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10a      	bne.n	800c240 <prvProcessTimerOrBlockTask+0x3c>
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d806      	bhi.n	800c240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c232:	f7ff f9ed 	bl	800b610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c236:	68f9      	ldr	r1, [r7, #12]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ff7f 	bl	800c13c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c23e:	e024      	b.n	800c28a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d008      	beq.n	800c258 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c246:	4b13      	ldr	r3, [pc, #76]	@ (800c294 <prvProcessTimerOrBlockTask+0x90>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d101      	bne.n	800c254 <prvProcessTimerOrBlockTask+0x50>
 800c250:	2301      	movs	r3, #1
 800c252:	e000      	b.n	800c256 <prvProcessTimerOrBlockTask+0x52>
 800c254:	2300      	movs	r3, #0
 800c256:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c258:	4b0f      	ldr	r3, [pc, #60]	@ (800c298 <prvProcessTimerOrBlockTask+0x94>)
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	4619      	mov	r1, r3
 800c266:	f7fe ff3f 	bl	800b0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c26a:	f7ff f9d1 	bl	800b610 <xTaskResumeAll>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c274:	4b09      	ldr	r3, [pc, #36]	@ (800c29c <prvProcessTimerOrBlockTask+0x98>)
 800c276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	f3bf 8f6f 	isb	sy
}
 800c284:	e001      	b.n	800c28a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c286:	f7ff f9c3 	bl	800b610 <xTaskResumeAll>
}
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	200083c0 	.word	0x200083c0
 800c298:	200083c4 	.word	0x200083c4
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c2e4 <prvGetNextExpireTime+0x44>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d101      	bne.n	800c2b6 <prvGetNextExpireTime+0x16>
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	e000      	b.n	800c2b8 <prvGetNextExpireTime+0x18>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d105      	bne.n	800c2d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2c4:	4b07      	ldr	r3, [pc, #28]	@ (800c2e4 <prvGetNextExpireTime+0x44>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e001      	b.n	800c2d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	200083bc 	.word	0x200083bc

0800c2e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2f0:	f7ff fa2e 	bl	800b750 <xTaskGetTickCount>
 800c2f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c324 <prvSampleTimeNow+0x3c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d205      	bcs.n	800c30c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c300:	f000 f940 	bl	800c584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	e002      	b.n	800c312 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c312:	4a04      	ldr	r2, [pc, #16]	@ (800c324 <prvSampleTimeNow+0x3c>)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c318:	68fb      	ldr	r3, [r7, #12]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200083cc 	.word	0x200083cc

0800c328 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d812      	bhi.n	800c374 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	1ad2      	subs	r2, r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d302      	bcc.n	800c362 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c35c:	2301      	movs	r3, #1
 800c35e:	617b      	str	r3, [r7, #20]
 800c360:	e01b      	b.n	800c39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c362:	4b10      	ldr	r3, [pc, #64]	@ (800c3a4 <prvInsertTimerInActiveList+0x7c>)
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3304      	adds	r3, #4
 800c36a:	4619      	mov	r1, r3
 800c36c:	4610      	mov	r0, r2
 800c36e:	f7fe f972 	bl	800a656 <vListInsert>
 800c372:	e012      	b.n	800c39a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d206      	bcs.n	800c38a <prvInsertTimerInActiveList+0x62>
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	429a      	cmp	r2, r3
 800c382:	d302      	bcc.n	800c38a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c384:	2301      	movs	r3, #1
 800c386:	617b      	str	r3, [r7, #20]
 800c388:	e007      	b.n	800c39a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c38a:	4b07      	ldr	r3, [pc, #28]	@ (800c3a8 <prvInsertTimerInActiveList+0x80>)
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3304      	adds	r3, #4
 800c392:	4619      	mov	r1, r3
 800c394:	4610      	mov	r0, r2
 800c396:	f7fe f95e 	bl	800a656 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c39a:	697b      	ldr	r3, [r7, #20]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	200083c0 	.word	0x200083c0
 800c3a8:	200083bc 	.word	0x200083bc

0800c3ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b08e      	sub	sp, #56	@ 0x38
 800c3b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3b2:	e0d4      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	da1b      	bge.n	800c3f2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c3ba:	1d3b      	adds	r3, r7, #4
 800c3bc:	3304      	adds	r3, #4
 800c3be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10d      	bne.n	800c3e2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ca:	b672      	cpsid	i
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	b662      	cpsie	i
 800c3da:	61fb      	str	r3, [r7, #28]
}
 800c3dc:	bf00      	nop
 800c3de:	bf00      	nop
 800c3e0:	e7fd      	b.n	800c3de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3e8:	6850      	ldr	r0, [r2, #4]
 800c3ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3ec:	6892      	ldr	r2, [r2, #8]
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f2c0 80b2 	blt.w	800c55e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c400:	695b      	ldr	r3, [r3, #20]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d004      	beq.n	800c410 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c408:	3304      	adds	r3, #4
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fe f95c 	bl	800a6c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c410:	463b      	mov	r3, r7
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff ff68 	bl	800c2e8 <prvSampleTimeNow>
 800c418:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b09      	cmp	r3, #9
 800c41e:	f200 809b 	bhi.w	800c558 <prvProcessReceivedCommands+0x1ac>
 800c422:	a201      	add	r2, pc, #4	@ (adr r2, 800c428 <prvProcessReceivedCommands+0x7c>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c451 	.word	0x0800c451
 800c42c:	0800c451 	.word	0x0800c451
 800c430:	0800c451 	.word	0x0800c451
 800c434:	0800c4cb 	.word	0x0800c4cb
 800c438:	0800c4df 	.word	0x0800c4df
 800c43c:	0800c52f 	.word	0x0800c52f
 800c440:	0800c451 	.word	0x0800c451
 800c444:	0800c451 	.word	0x0800c451
 800c448:	0800c4cb 	.word	0x0800c4cb
 800c44c:	0800c4df 	.word	0x0800c4df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c456:	f043 0301 	orr.w	r3, r3, #1
 800c45a:	b2da      	uxtb	r2, r3
 800c45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	18d1      	adds	r1, r2, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c46e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c470:	f7ff ff5a 	bl	800c328 <prvInsertTimerInActiveList>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d070      	beq.n	800c55c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c480:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d065      	beq.n	800c55c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	441a      	add	r2, r3
 800c498:	2300      	movs	r3, #0
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	2300      	movs	r3, #0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4a2:	f7ff fdfb 	bl	800c09c <xTimerGenericCommand>
 800c4a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d156      	bne.n	800c55c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	b672      	cpsid	i
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	b662      	cpsie	i
 800c4c2:	61bb      	str	r3, [r7, #24]
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	e7fd      	b.n	800c4c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4dc:	e03f      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4e4:	f043 0301 	orr.w	r3, r3, #1
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10d      	bne.n	800c51a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	b672      	cpsid	i
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	b662      	cpsie	i
 800c512:	617b      	str	r3, [r7, #20]
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	e7fd      	b.n	800c516 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51c:	699a      	ldr	r2, [r3, #24]
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	18d1      	adds	r1, r2, r3
 800c522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c528:	f7ff fefe 	bl	800c328 <prvInsertTimerInActiveList>
					break;
 800c52c:	e017      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d103      	bne.n	800c544 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800c53c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c53e:	f000 fbd1 	bl	800cce4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c542:	e00c      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c54a:	f023 0301 	bic.w	r3, r3, #1
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c556:	e002      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800c558:	bf00      	nop
 800c55a:	e000      	b.n	800c55e <prvProcessReceivedCommands+0x1b2>
					break;
 800c55c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c55e:	4b08      	ldr	r3, [pc, #32]	@ (800c580 <prvProcessReceivedCommands+0x1d4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	1d39      	adds	r1, r7, #4
 800c564:	2200      	movs	r2, #0
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fb9c 	bl	800aca4 <xQueueReceive>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f47f af20 	bne.w	800c3b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	3730      	adds	r7, #48	@ 0x30
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	200083c4 	.word	0x200083c4

0800c584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b088      	sub	sp, #32
 800c588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c58a:	e04b      	b.n	800c624 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c58c:	4b2f      	ldr	r3, [pc, #188]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c596:	4b2d      	ldr	r3, [pc, #180]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe f88f 	bl	800a6c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6a1b      	ldr	r3, [r3, #32]
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b8:	f003 0304 	and.w	r3, r3, #4
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d031      	beq.n	800c624 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	693a      	ldr	r2, [r7, #16]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d90e      	bls.n	800c5f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5de:	4b1b      	ldr	r3, [pc, #108]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7fe f834 	bl	800a656 <vListInsert>
 800c5ee:	e019      	b.n	800c624 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f7ff fd4e 	bl	800c09c <xTimerGenericCommand>
 800c600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10d      	bne.n	800c624 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c60c:	b672      	cpsid	i
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	b662      	cpsie	i
 800c61c:	603b      	str	r3, [r7, #0]
}
 800c61e:	bf00      	nop
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c624:	4b09      	ldr	r3, [pc, #36]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1ae      	bne.n	800c58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c62e:	4b07      	ldr	r3, [pc, #28]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c634:	4b06      	ldr	r3, [pc, #24]	@ (800c650 <prvSwitchTimerLists+0xcc>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a04      	ldr	r2, [pc, #16]	@ (800c64c <prvSwitchTimerLists+0xc8>)
 800c63a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c63c:	4a04      	ldr	r2, [pc, #16]	@ (800c650 <prvSwitchTimerLists+0xcc>)
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	6013      	str	r3, [r2, #0]
}
 800c642:	bf00      	nop
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	200083bc 	.word	0x200083bc
 800c650:	200083c0 	.word	0x200083c0

0800c654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c65a:	f000 f947 	bl	800c8ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c65e:	4b15      	ldr	r3, [pc, #84]	@ (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d120      	bne.n	800c6a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c666:	4814      	ldr	r0, [pc, #80]	@ (800c6b8 <prvCheckForValidListAndQueue+0x64>)
 800c668:	f7fd ffa4 	bl	800a5b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c66c:	4813      	ldr	r0, [pc, #76]	@ (800c6bc <prvCheckForValidListAndQueue+0x68>)
 800c66e:	f7fd ffa1 	bl	800a5b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c672:	4b13      	ldr	r3, [pc, #76]	@ (800c6c0 <prvCheckForValidListAndQueue+0x6c>)
 800c674:	4a10      	ldr	r2, [pc, #64]	@ (800c6b8 <prvCheckForValidListAndQueue+0x64>)
 800c676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c678:	4b12      	ldr	r3, [pc, #72]	@ (800c6c4 <prvCheckForValidListAndQueue+0x70>)
 800c67a:	4a10      	ldr	r2, [pc, #64]	@ (800c6bc <prvCheckForValidListAndQueue+0x68>)
 800c67c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c67e:	2300      	movs	r3, #0
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	4b11      	ldr	r3, [pc, #68]	@ (800c6c8 <prvCheckForValidListAndQueue+0x74>)
 800c684:	4a11      	ldr	r2, [pc, #68]	@ (800c6cc <prvCheckForValidListAndQueue+0x78>)
 800c686:	2110      	movs	r1, #16
 800c688:	200a      	movs	r0, #10
 800c68a:	f7fe f8b3 	bl	800a7f4 <xQueueGenericCreateStatic>
 800c68e:	4603      	mov	r3, r0
 800c690:	4a08      	ldr	r2, [pc, #32]	@ (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c694:	4b07      	ldr	r3, [pc, #28]	@ (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c69c:	4b05      	ldr	r3, [pc, #20]	@ (800c6b4 <prvCheckForValidListAndQueue+0x60>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	490b      	ldr	r1, [pc, #44]	@ (800c6d0 <prvCheckForValidListAndQueue+0x7c>)
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fcf6 	bl	800b094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6a8:	f000 f956 	bl	800c958 <vPortExitCritical>
}
 800c6ac:	bf00      	nop
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	200083c4 	.word	0x200083c4
 800c6b8:	20008394 	.word	0x20008394
 800c6bc:	200083a8 	.word	0x200083a8
 800c6c0:	200083bc 	.word	0x200083bc
 800c6c4:	200083c0 	.word	0x200083c0
 800c6c8:	20008470 	.word	0x20008470
 800c6cc:	200083d0 	.word	0x200083d0
 800c6d0:	08018128 	.word	0x08018128

0800c6d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3b04      	subs	r3, #4
 800c6e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	3b04      	subs	r3, #4
 800c6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f023 0201 	bic.w	r2, r3, #1
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b04      	subs	r3, #4
 800c702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c704:	4a0c      	ldr	r2, [pc, #48]	@ (800c738 <pxPortInitialiseStack+0x64>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3b14      	subs	r3, #20
 800c70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3b04      	subs	r3, #4
 800c71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f06f 0202 	mvn.w	r2, #2
 800c722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3b20      	subs	r3, #32
 800c728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c72a:	68fb      	ldr	r3, [r7, #12]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	0800c73d 	.word	0x0800c73d

0800c73c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c746:	4b15      	ldr	r3, [pc, #84]	@ (800c79c <prvTaskExitError+0x60>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c74e:	d00d      	beq.n	800c76c <prvTaskExitError+0x30>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c754:	b672      	cpsid	i
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	b662      	cpsie	i
 800c764:	60fb      	str	r3, [r7, #12]
}
 800c766:	bf00      	nop
 800c768:	bf00      	nop
 800c76a:	e7fd      	b.n	800c768 <prvTaskExitError+0x2c>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c770:	b672      	cpsid	i
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	b662      	cpsie	i
 800c780:	60bb      	str	r3, [r7, #8]
}
 800c782:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c784:	bf00      	nop
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0fc      	beq.n	800c786 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	2000009c 	.word	0x2000009c

0800c7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7a0:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <pxCurrentTCBConst2>)
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	f380 8809 	msr	PSP, r0
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f04f 0000 	mov.w	r0, #0
 800c7b6:	f380 8811 	msr	BASEPRI, r0
 800c7ba:	4770      	bx	lr
 800c7bc:	f3af 8000 	nop.w

0800c7c0 <pxCurrentTCBConst2>:
 800c7c0:	20007e94 	.word	0x20007e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop

0800c7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7c8:	4808      	ldr	r0, [pc, #32]	@ (800c7ec <prvPortStartFirstTask+0x24>)
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	6800      	ldr	r0, [r0, #0]
 800c7ce:	f380 8808 	msr	MSP, r0
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8814 	msr	CONTROL, r0
 800c7da:	b662      	cpsie	i
 800c7dc:	b661      	cpsie	f
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	df00      	svc	0
 800c7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ea:	bf00      	nop
 800c7ec:	e000ed08 	.word	0xe000ed08

0800c7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7f6:	4b37      	ldr	r3, [pc, #220]	@ (800c8d4 <xPortStartScheduler+0xe4>)
 800c7f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	22ff      	movs	r2, #255	@ 0xff
 800c806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c810:	78fb      	ldrb	r3, [r7, #3]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8d8 <xPortStartScheduler+0xe8>)
 800c81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c81e:	4b2f      	ldr	r3, [pc, #188]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c820:	2207      	movs	r2, #7
 800c822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c824:	e009      	b.n	800c83a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c826:	4b2d      	ldr	r3, [pc, #180]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	4a2b      	ldr	r2, [pc, #172]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	005b      	lsls	r3, r3, #1
 800c836:	b2db      	uxtb	r3, r3
 800c838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c83a:	78fb      	ldrb	r3, [r7, #3]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c842:	2b80      	cmp	r3, #128	@ 0x80
 800c844:	d0ef      	beq.n	800c826 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c846:	4b25      	ldr	r3, [pc, #148]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f1c3 0307 	rsb	r3, r3, #7
 800c84e:	2b04      	cmp	r3, #4
 800c850:	d00d      	beq.n	800c86e <xPortStartScheduler+0x7e>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c856:	b672      	cpsid	i
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	b662      	cpsie	i
 800c866:	60bb      	str	r3, [r7, #8]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c86e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	4a19      	ldr	r2, [pc, #100]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c878:	4b18      	ldr	r3, [pc, #96]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c880:	4a16      	ldr	r2, [pc, #88]	@ (800c8dc <xPortStartScheduler+0xec>)
 800c882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	b2da      	uxtb	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c88c:	4b14      	ldr	r3, [pc, #80]	@ (800c8e0 <xPortStartScheduler+0xf0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a13      	ldr	r2, [pc, #76]	@ (800c8e0 <xPortStartScheduler+0xf0>)
 800c892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c898:	4b11      	ldr	r3, [pc, #68]	@ (800c8e0 <xPortStartScheduler+0xf0>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a10      	ldr	r2, [pc, #64]	@ (800c8e0 <xPortStartScheduler+0xf0>)
 800c89e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8a4:	f000 f8dc 	bl	800ca60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e4 <xPortStartScheduler+0xf4>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8ae:	f000 f8fb 	bl	800caa8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e8 <xPortStartScheduler+0xf8>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c8e8 <xPortStartScheduler+0xf8>)
 800c8b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8be:	f7ff ff83 	bl	800c7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8c2:	f7ff f811 	bl	800b8e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c8c6:	f7ff ff39 	bl	800c73c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	e000e400 	.word	0xe000e400
 800c8d8:	200084c0 	.word	0x200084c0
 800c8dc:	200084c4 	.word	0x200084c4
 800c8e0:	e000ed20 	.word	0xe000ed20
 800c8e4:	2000009c 	.word	0x2000009c
 800c8e8:	e000ef34 	.word	0xe000ef34

0800c8ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f6:	b672      	cpsid	i
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	b662      	cpsie	i
 800c906:	607b      	str	r3, [r7, #4]
}
 800c908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c90a:	4b11      	ldr	r3, [pc, #68]	@ (800c950 <vPortEnterCritical+0x64>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3301      	adds	r3, #1
 800c910:	4a0f      	ldr	r2, [pc, #60]	@ (800c950 <vPortEnterCritical+0x64>)
 800c912:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c914:	4b0e      	ldr	r3, [pc, #56]	@ (800c950 <vPortEnterCritical+0x64>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d112      	bne.n	800c942 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c91c:	4b0d      	ldr	r3, [pc, #52]	@ (800c954 <vPortEnterCritical+0x68>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00d      	beq.n	800c942 <vPortEnterCritical+0x56>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	b672      	cpsid	i
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	b662      	cpsie	i
 800c93a:	603b      	str	r3, [r7, #0]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <vPortEnterCritical+0x52>
	}
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	2000009c 	.word	0x2000009c
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c95e:	4b13      	ldr	r3, [pc, #76]	@ (800c9ac <vPortExitCritical+0x54>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10d      	bne.n	800c982 <vPortExitCritical+0x2a>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96a:	b672      	cpsid	i
 800c96c:	f383 8811 	msr	BASEPRI, r3
 800c970:	f3bf 8f6f 	isb	sy
 800c974:	f3bf 8f4f 	dsb	sy
 800c978:	b662      	cpsie	i
 800c97a:	607b      	str	r3, [r7, #4]
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	e7fd      	b.n	800c97e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c982:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <vPortExitCritical+0x54>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3b01      	subs	r3, #1
 800c988:	4a08      	ldr	r2, [pc, #32]	@ (800c9ac <vPortExitCritical+0x54>)
 800c98a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c98c:	4b07      	ldr	r3, [pc, #28]	@ (800c9ac <vPortExitCritical+0x54>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <vPortExitCritical+0x48>
 800c994:	2300      	movs	r3, #0
 800c996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	2000009c 	.word	0x2000009c

0800c9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9b0:	f3ef 8009 	mrs	r0, PSP
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	4b15      	ldr	r3, [pc, #84]	@ (800ca10 <pxCurrentTCBConst>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	f01e 0f10 	tst.w	lr, #16
 800c9c0:	bf08      	it	eq
 800c9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	6010      	str	r0, [r2, #0]
 800c9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9d4:	b672      	cpsid	i
 800c9d6:	f380 8811 	msr	BASEPRI, r0
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	b662      	cpsie	i
 800c9e4:	f7fe ff80 	bl	800b8e8 <vTaskSwitchContext>
 800c9e8:	f04f 0000 	mov.w	r0, #0
 800c9ec:	f380 8811 	msr	BASEPRI, r0
 800c9f0:	bc09      	pop	{r0, r3}
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	6808      	ldr	r0, [r1, #0]
 800c9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fa:	f01e 0f10 	tst.w	lr, #16
 800c9fe:	bf08      	it	eq
 800ca00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca04:	f380 8809 	msr	PSP, r0
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop

0800ca10 <pxCurrentTCBConst>:
 800ca10:	20007e94 	.word	0x20007e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop

0800ca18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	b672      	cpsid	i
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	b662      	cpsie	i
 800ca32:	607b      	str	r3, [r7, #4]
}
 800ca34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca36:	f7fe fe9b 	bl	800b770 <xTaskIncrementTick>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca40:	4b06      	ldr	r3, [pc, #24]	@ (800ca5c <SysTick_Handler+0x44>)
 800ca42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	2300      	movs	r3, #0
 800ca4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	f383 8811 	msr	BASEPRI, r3
}
 800ca52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	e000ed04 	.word	0xe000ed04

0800ca60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca64:	4b0b      	ldr	r3, [pc, #44]	@ (800ca94 <vPortSetupTimerInterrupt+0x34>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca98 <vPortSetupTimerInterrupt+0x38>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca70:	4b0a      	ldr	r3, [pc, #40]	@ (800ca9c <vPortSetupTimerInterrupt+0x3c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a0a      	ldr	r2, [pc, #40]	@ (800caa0 <vPortSetupTimerInterrupt+0x40>)
 800ca76:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7a:	099b      	lsrs	r3, r3, #6
 800ca7c:	4a09      	ldr	r2, [pc, #36]	@ (800caa4 <vPortSetupTimerInterrupt+0x44>)
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca82:	4b04      	ldr	r3, [pc, #16]	@ (800ca94 <vPortSetupTimerInterrupt+0x34>)
 800ca84:	2207      	movs	r2, #7
 800ca86:	601a      	str	r2, [r3, #0]
}
 800ca88:	bf00      	nop
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	e000e010 	.word	0xe000e010
 800ca98:	e000e018 	.word	0xe000e018
 800ca9c:	20000004 	.word	0x20000004
 800caa0:	10624dd3 	.word	0x10624dd3
 800caa4:	e000e014 	.word	0xe000e014

0800caa8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800caa8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cab8 <vPortEnableVFP+0x10>
 800caac:	6801      	ldr	r1, [r0, #0]
 800caae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cab2:	6001      	str	r1, [r0, #0]
 800cab4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cab6:	bf00      	nop
 800cab8:	e000ed88 	.word	0xe000ed88

0800cabc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cac2:	f3ef 8305 	mrs	r3, IPSR
 800cac6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b0f      	cmp	r3, #15
 800cacc:	d917      	bls.n	800cafe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cace:	4a1a      	ldr	r2, [pc, #104]	@ (800cb38 <vPortValidateInterruptPriority+0x7c>)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cad8:	4b18      	ldr	r3, [pc, #96]	@ (800cb3c <vPortValidateInterruptPriority+0x80>)
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	7afa      	ldrb	r2, [r7, #11]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d20d      	bcs.n	800cafe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	b672      	cpsid	i
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	b662      	cpsie	i
 800caf6:	607b      	str	r3, [r7, #4]
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cafe:	4b10      	ldr	r3, [pc, #64]	@ (800cb40 <vPortValidateInterruptPriority+0x84>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb06:	4b0f      	ldr	r3, [pc, #60]	@ (800cb44 <vPortValidateInterruptPriority+0x88>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d90d      	bls.n	800cb2a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	b672      	cpsid	i
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	b662      	cpsie	i
 800cb22:	603b      	str	r3, [r7, #0]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <vPortValidateInterruptPriority+0x6a>
	}
 800cb2a:	bf00      	nop
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	e000e3f0 	.word	0xe000e3f0
 800cb3c:	200084c0 	.word	0x200084c0
 800cb40:	e000ed0c 	.word	0xe000ed0c
 800cb44:	200084c4 	.word	0x200084c4

0800cb48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08a      	sub	sp, #40	@ 0x28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb50:	2300      	movs	r3, #0
 800cb52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb54:	f7fe fd4e 	bl	800b5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb58:	4b5d      	ldr	r3, [pc, #372]	@ (800ccd0 <pvPortMalloc+0x188>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb60:	f000 f920 	bl	800cda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb64:	4b5b      	ldr	r3, [pc, #364]	@ (800ccd4 <pvPortMalloc+0x18c>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f040 8094 	bne.w	800cc9a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d020      	beq.n	800cbba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800cb78:	2208      	movs	r2, #8
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d017      	beq.n	800cbba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f023 0307 	bic.w	r3, r3, #7
 800cb90:	3308      	adds	r3, #8
 800cb92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00d      	beq.n	800cbba <pvPortMalloc+0x72>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	b672      	cpsid	i
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	b662      	cpsie	i
 800cbb2:	617b      	str	r3, [r7, #20]
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop
 800cbb8:	e7fd      	b.n	800cbb6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d06c      	beq.n	800cc9a <pvPortMalloc+0x152>
 800cbc0:	4b45      	ldr	r3, [pc, #276]	@ (800ccd8 <pvPortMalloc+0x190>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d867      	bhi.n	800cc9a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbca:	4b44      	ldr	r3, [pc, #272]	@ (800ccdc <pvPortMalloc+0x194>)
 800cbcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbce:	4b43      	ldr	r3, [pc, #268]	@ (800ccdc <pvPortMalloc+0x194>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd4:	e004      	b.n	800cbe0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d903      	bls.n	800cbf2 <pvPortMalloc+0xaa>
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1f1      	bne.n	800cbd6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbf2:	4b37      	ldr	r3, [pc, #220]	@ (800ccd0 <pvPortMalloc+0x188>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d04e      	beq.n	800cc9a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2208      	movs	r2, #8
 800cc02:	4413      	add	r3, r2
 800cc04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	1ad2      	subs	r2, r2, r3
 800cc16:	2308      	movs	r3, #8
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d922      	bls.n	800cc64 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	f003 0307 	and.w	r3, r3, #7
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00d      	beq.n	800cc4c <pvPortMalloc+0x104>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc34:	b672      	cpsid	i
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	b662      	cpsie	i
 800cc44:	613b      	str	r3, [r7, #16]
}
 800cc46:	bf00      	nop
 800cc48:	bf00      	nop
 800cc4a:	e7fd      	b.n	800cc48 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	1ad2      	subs	r2, r2, r3
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc5e:	69b8      	ldr	r0, [r7, #24]
 800cc60:	f000 f902 	bl	800ce68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc64:	4b1c      	ldr	r3, [pc, #112]	@ (800ccd8 <pvPortMalloc+0x190>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	4a1a      	ldr	r2, [pc, #104]	@ (800ccd8 <pvPortMalloc+0x190>)
 800cc70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc72:	4b19      	ldr	r3, [pc, #100]	@ (800ccd8 <pvPortMalloc+0x190>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	4b1a      	ldr	r3, [pc, #104]	@ (800cce0 <pvPortMalloc+0x198>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d203      	bcs.n	800cc86 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc7e:	4b16      	ldr	r3, [pc, #88]	@ (800ccd8 <pvPortMalloc+0x190>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a17      	ldr	r2, [pc, #92]	@ (800cce0 <pvPortMalloc+0x198>)
 800cc84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	4b12      	ldr	r3, [pc, #72]	@ (800ccd4 <pvPortMalloc+0x18c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc9a:	f7fe fcb9 	bl	800b610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	f003 0307 	and.w	r3, r3, #7
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00d      	beq.n	800ccc4 <pvPortMalloc+0x17c>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccac:	b672      	cpsid	i
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	b662      	cpsie	i
 800ccbc:	60fb      	str	r3, [r7, #12]
}
 800ccbe:	bf00      	nop
 800ccc0:	bf00      	nop
 800ccc2:	e7fd      	b.n	800ccc0 <pvPortMalloc+0x178>
	return pvReturn;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3728      	adds	r7, #40	@ 0x28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	2000c0d0 	.word	0x2000c0d0
 800ccd4:	2000c0dc 	.word	0x2000c0dc
 800ccd8:	2000c0d4 	.word	0x2000c0d4
 800ccdc:	2000c0c8 	.word	0x2000c0c8
 800cce0:	2000c0d8 	.word	0x2000c0d8

0800cce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d04e      	beq.n	800cd94 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	425b      	negs	r3, r3
 800ccfa:	697a      	ldr	r2, [r7, #20]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	4b24      	ldr	r3, [pc, #144]	@ (800cd9c <vPortFree+0xb8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10d      	bne.n	800cd2e <vPortFree+0x4a>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd16:	b672      	cpsid	i
 800cd18:	f383 8811 	msr	BASEPRI, r3
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	f3bf 8f4f 	dsb	sy
 800cd24:	b662      	cpsie	i
 800cd26:	60fb      	str	r3, [r7, #12]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00d      	beq.n	800cd52 <vPortFree+0x6e>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3a:	b672      	cpsid	i
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	b662      	cpsie	i
 800cd4a:	60bb      	str	r3, [r7, #8]
}
 800cd4c:	bf00      	nop
 800cd4e:	bf00      	nop
 800cd50:	e7fd      	b.n	800cd4e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	4b11      	ldr	r3, [pc, #68]	@ (800cd9c <vPortFree+0xb8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d019      	beq.n	800cd94 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d115      	bne.n	800cd94 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd9c <vPortFree+0xb8>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	43db      	mvns	r3, r3
 800cd72:	401a      	ands	r2, r3
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd78:	f7fe fc3c 	bl	800b5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	4b07      	ldr	r3, [pc, #28]	@ (800cda0 <vPortFree+0xbc>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4413      	add	r3, r2
 800cd86:	4a06      	ldr	r2, [pc, #24]	@ (800cda0 <vPortFree+0xbc>)
 800cd88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd8a:	6938      	ldr	r0, [r7, #16]
 800cd8c:	f000 f86c 	bl	800ce68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cd90:	f7fe fc3e 	bl	800b610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd94:	bf00      	nop
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	2000c0dc 	.word	0x2000c0dc
 800cda0:	2000c0d4 	.word	0x2000c0d4

0800cda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdaa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cdae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdb0:	4b27      	ldr	r3, [pc, #156]	@ (800ce50 <prvHeapInit+0xac>)
 800cdb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00c      	beq.n	800cdd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3307      	adds	r3, #7
 800cdc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f023 0307 	bic.w	r3, r3, #7
 800cdca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce50 <prvHeapInit+0xac>)
 800cdd4:	4413      	add	r3, r2
 800cdd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cddc:	4a1d      	ldr	r2, [pc, #116]	@ (800ce54 <prvHeapInit+0xb0>)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cde2:	4b1c      	ldr	r3, [pc, #112]	@ (800ce54 <prvHeapInit+0xb0>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	4413      	add	r3, r2
 800cdee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdf0:	2208      	movs	r2, #8
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	1a9b      	subs	r3, r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f023 0307 	bic.w	r3, r3, #7
 800cdfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4a15      	ldr	r2, [pc, #84]	@ (800ce58 <prvHeapInit+0xb4>)
 800ce04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce06:	4b14      	ldr	r3, [pc, #80]	@ (800ce58 <prvHeapInit+0xb4>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce0e:	4b12      	ldr	r3, [pc, #72]	@ (800ce58 <prvHeapInit+0xb4>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2200      	movs	r2, #0
 800ce14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	1ad2      	subs	r2, r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce24:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <prvHeapInit+0xb4>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	4a0a      	ldr	r2, [pc, #40]	@ (800ce5c <prvHeapInit+0xb8>)
 800ce32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	4a09      	ldr	r2, [pc, #36]	@ (800ce60 <prvHeapInit+0xbc>)
 800ce3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce3c:	4b09      	ldr	r3, [pc, #36]	@ (800ce64 <prvHeapInit+0xc0>)
 800ce3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce42:	601a      	str	r2, [r3, #0]
}
 800ce44:	bf00      	nop
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	200084c8 	.word	0x200084c8
 800ce54:	2000c0c8 	.word	0x2000c0c8
 800ce58:	2000c0d0 	.word	0x2000c0d0
 800ce5c:	2000c0d8 	.word	0x2000c0d8
 800ce60:	2000c0d4 	.word	0x2000c0d4
 800ce64:	2000c0dc 	.word	0x2000c0dc

0800ce68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce70:	4b28      	ldr	r3, [pc, #160]	@ (800cf14 <prvInsertBlockIntoFreeList+0xac>)
 800ce72:	60fb      	str	r3, [r7, #12]
 800ce74:	e002      	b.n	800ce7c <prvInsertBlockIntoFreeList+0x14>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d8f7      	bhi.n	800ce76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	4413      	add	r3, r2
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d108      	bne.n	800ceaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	441a      	add	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	441a      	add	r2, r3
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d118      	bne.n	800cef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	4b15      	ldr	r3, [pc, #84]	@ (800cf18 <prvInsertBlockIntoFreeList+0xb0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d00d      	beq.n	800cee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	441a      	add	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	e008      	b.n	800cef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cee6:	4b0c      	ldr	r3, [pc, #48]	@ (800cf18 <prvInsertBlockIntoFreeList+0xb0>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	e003      	b.n	800cef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d002      	beq.n	800cf06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf06:	bf00      	nop
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	2000c0c8 	.word	0x2000c0c8
 800cf18:	2000c0d0 	.word	0x2000c0d0

0800cf1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf20:	2200      	movs	r2, #0
 800cf22:	4912      	ldr	r1, [pc, #72]	@ (800cf6c <MX_USB_DEVICE_Init+0x50>)
 800cf24:	4812      	ldr	r0, [pc, #72]	@ (800cf70 <MX_USB_DEVICE_Init+0x54>)
 800cf26:	f7fb fe9f 	bl	8008c68 <USBD_Init>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf30:	f7f4 f93e 	bl	80011b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf34:	490f      	ldr	r1, [pc, #60]	@ (800cf74 <MX_USB_DEVICE_Init+0x58>)
 800cf36:	480e      	ldr	r0, [pc, #56]	@ (800cf70 <MX_USB_DEVICE_Init+0x54>)
 800cf38:	f7fb fec6 	bl	8008cc8 <USBD_RegisterClass>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf42:	f7f4 f935 	bl	80011b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf46:	490c      	ldr	r1, [pc, #48]	@ (800cf78 <MX_USB_DEVICE_Init+0x5c>)
 800cf48:	4809      	ldr	r0, [pc, #36]	@ (800cf70 <MX_USB_DEVICE_Init+0x54>)
 800cf4a:	f7fb fdfd 	bl	8008b48 <USBD_CDC_RegisterInterface>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf54:	f7f4 f92c 	bl	80011b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf58:	4805      	ldr	r0, [pc, #20]	@ (800cf70 <MX_USB_DEVICE_Init+0x54>)
 800cf5a:	f7fb feeb 	bl	8008d34 <USBD_Start>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf64:	f7f4 f924 	bl	80011b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf68:	bf00      	nop
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	200000b4 	.word	0x200000b4
 800cf70:	2000c0e0 	.word	0x2000c0e0
 800cf74:	2000001c 	.word	0x2000001c
 800cf78:	200000a0 	.word	0x200000a0

0800cf7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf80:	2200      	movs	r2, #0
 800cf82:	4905      	ldr	r1, [pc, #20]	@ (800cf98 <CDC_Init_FS+0x1c>)
 800cf84:	4805      	ldr	r0, [pc, #20]	@ (800cf9c <CDC_Init_FS+0x20>)
 800cf86:	f7fb fdf9 	bl	8008b7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf8a:	4905      	ldr	r1, [pc, #20]	@ (800cfa0 <CDC_Init_FS+0x24>)
 800cf8c:	4803      	ldr	r0, [pc, #12]	@ (800cf9c <CDC_Init_FS+0x20>)
 800cf8e:	f7fb fe17 	bl	8008bc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	2000cbbc 	.word	0x2000cbbc
 800cf9c:	2000c0e0 	.word	0x2000c0e0
 800cfa0:	2000c3bc 	.word	0x2000c3bc

0800cfa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cfa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	71fb      	strb	r3, [r7, #7]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfc4:	79fb      	ldrb	r3, [r7, #7]
 800cfc6:	2b23      	cmp	r3, #35	@ 0x23
 800cfc8:	d84a      	bhi.n	800d060 <CDC_Control_FS+0xac>
 800cfca:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd0 <CDC_Control_FS+0x1c>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800d061 	.word	0x0800d061
 800cfd4:	0800d061 	.word	0x0800d061
 800cfd8:	0800d061 	.word	0x0800d061
 800cfdc:	0800d061 	.word	0x0800d061
 800cfe0:	0800d061 	.word	0x0800d061
 800cfe4:	0800d061 	.word	0x0800d061
 800cfe8:	0800d061 	.word	0x0800d061
 800cfec:	0800d061 	.word	0x0800d061
 800cff0:	0800d061 	.word	0x0800d061
 800cff4:	0800d061 	.word	0x0800d061
 800cff8:	0800d061 	.word	0x0800d061
 800cffc:	0800d061 	.word	0x0800d061
 800d000:	0800d061 	.word	0x0800d061
 800d004:	0800d061 	.word	0x0800d061
 800d008:	0800d061 	.word	0x0800d061
 800d00c:	0800d061 	.word	0x0800d061
 800d010:	0800d061 	.word	0x0800d061
 800d014:	0800d061 	.word	0x0800d061
 800d018:	0800d061 	.word	0x0800d061
 800d01c:	0800d061 	.word	0x0800d061
 800d020:	0800d061 	.word	0x0800d061
 800d024:	0800d061 	.word	0x0800d061
 800d028:	0800d061 	.word	0x0800d061
 800d02c:	0800d061 	.word	0x0800d061
 800d030:	0800d061 	.word	0x0800d061
 800d034:	0800d061 	.word	0x0800d061
 800d038:	0800d061 	.word	0x0800d061
 800d03c:	0800d061 	.word	0x0800d061
 800d040:	0800d061 	.word	0x0800d061
 800d044:	0800d061 	.word	0x0800d061
 800d048:	0800d061 	.word	0x0800d061
 800d04c:	0800d061 	.word	0x0800d061
 800d050:	0800d061 	.word	0x0800d061
 800d054:	0800d061 	.word	0x0800d061
 800d058:	0800d061 	.word	0x0800d061
 800d05c:	0800d061 	.word	0x0800d061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d060:	bf00      	nop
  }

  return (USBD_OK);
 800d062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	4805      	ldr	r0, [pc, #20]	@ (800d094 <CDC_Receive_FS+0x24>)
 800d07e:	f7fb fd9f 	bl	8008bc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d082:	4804      	ldr	r0, [pc, #16]	@ (800d094 <CDC_Receive_FS+0x24>)
 800d084:	f7fb fdba 	bl	8008bfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d088:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	2000c0e0 	.word	0x2000c0e0

0800d098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d098:	b480      	push	{r7}
 800d09a:	b087      	sub	sp, #28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d0aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	371c      	adds	r7, #28
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
	...

0800d0bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	6039      	str	r1, [r7, #0]
 800d0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	2212      	movs	r2, #18
 800d0cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d0ce:	4b03      	ldr	r3, [pc, #12]	@ (800d0dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	200000d4 	.word	0x200000d4

0800d0e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2204      	movs	r2, #4
 800d0f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0f2:	4b03      	ldr	r3, [pc, #12]	@ (800d100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	200000f4 	.word	0x200000f4

0800d104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	4603      	mov	r3, r0
 800d10c:	6039      	str	r1, [r7, #0]
 800d10e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d110:	79fb      	ldrb	r3, [r7, #7]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d105      	bne.n	800d122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	4907      	ldr	r1, [pc, #28]	@ (800d138 <USBD_FS_ProductStrDescriptor+0x34>)
 800d11a:	4808      	ldr	r0, [pc, #32]	@ (800d13c <USBD_FS_ProductStrDescriptor+0x38>)
 800d11c:	f7fc ffe4 	bl	800a0e8 <USBD_GetString>
 800d120:	e004      	b.n	800d12c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	4904      	ldr	r1, [pc, #16]	@ (800d138 <USBD_FS_ProductStrDescriptor+0x34>)
 800d126:	4805      	ldr	r0, [pc, #20]	@ (800d13c <USBD_FS_ProductStrDescriptor+0x38>)
 800d128:	f7fc ffde 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d12c:	4b02      	ldr	r3, [pc, #8]	@ (800d138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	2000d3bc 	.word	0x2000d3bc
 800d13c:	08018130 	.word	0x08018130

0800d140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	6039      	str	r1, [r7, #0]
 800d14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	4904      	ldr	r1, [pc, #16]	@ (800d160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d150:	4804      	ldr	r0, [pc, #16]	@ (800d164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d152:	f7fc ffc9 	bl	800a0e8 <USBD_GetString>
  return USBD_StrDesc;
 800d156:	4b02      	ldr	r3, [pc, #8]	@ (800d160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	2000d3bc 	.word	0x2000d3bc
 800d164:	08018148 	.word	0x08018148

0800d168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	6039      	str	r1, [r7, #0]
 800d172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	221a      	movs	r2, #26
 800d178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d17a:	f000 f855 	bl	800d228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d17e:	4b02      	ldr	r3, [pc, #8]	@ (800d188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	200000f8 	.word	0x200000f8

0800d18c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	4603      	mov	r3, r0
 800d194:	6039      	str	r1, [r7, #0]
 800d196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d198:	79fb      	ldrb	r3, [r7, #7]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d105      	bne.n	800d1aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	4907      	ldr	r1, [pc, #28]	@ (800d1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1a2:	4808      	ldr	r0, [pc, #32]	@ (800d1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1a4:	f7fc ffa0 	bl	800a0e8 <USBD_GetString>
 800d1a8:	e004      	b.n	800d1b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	4904      	ldr	r1, [pc, #16]	@ (800d1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d1ae:	4805      	ldr	r0, [pc, #20]	@ (800d1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d1b0:	f7fc ff9a 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1b4:	4b02      	ldr	r3, [pc, #8]	@ (800d1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000d3bc 	.word	0x2000d3bc
 800d1c4:	0801815c 	.word	0x0801815c

0800d1c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	6039      	str	r1, [r7, #0]
 800d1d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d1d4:	79fb      	ldrb	r3, [r7, #7]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d105      	bne.n	800d1e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	4907      	ldr	r1, [pc, #28]	@ (800d1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1de:	4808      	ldr	r0, [pc, #32]	@ (800d200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1e0:	f7fc ff82 	bl	800a0e8 <USBD_GetString>
 800d1e4:	e004      	b.n	800d1f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d1e6:	683a      	ldr	r2, [r7, #0]
 800d1e8:	4904      	ldr	r1, [pc, #16]	@ (800d1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d1ea:	4805      	ldr	r0, [pc, #20]	@ (800d200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d1ec:	f7fc ff7c 	bl	800a0e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1f0:	4b02      	ldr	r3, [pc, #8]	@ (800d1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	2000d3bc 	.word	0x2000d3bc
 800d200:	08018168 	.word	0x08018168

0800d204 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	220c      	movs	r2, #12
 800d214:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d216:	4b03      	ldr	r3, [pc, #12]	@ (800d224 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	200000e8 	.word	0x200000e8

0800d228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d22e:	4b0f      	ldr	r3, [pc, #60]	@ (800d26c <Get_SerialNum+0x44>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d234:	4b0e      	ldr	r3, [pc, #56]	@ (800d270 <Get_SerialNum+0x48>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d23a:	4b0e      	ldr	r3, [pc, #56]	@ (800d274 <Get_SerialNum+0x4c>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4413      	add	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d009      	beq.n	800d262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d24e:	2208      	movs	r2, #8
 800d250:	4909      	ldr	r1, [pc, #36]	@ (800d278 <Get_SerialNum+0x50>)
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 f814 	bl	800d280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d258:	2204      	movs	r2, #4
 800d25a:	4908      	ldr	r1, [pc, #32]	@ (800d27c <Get_SerialNum+0x54>)
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f000 f80f 	bl	800d280 <IntToUnicode>
  }
}
 800d262:	bf00      	nop
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	1ff0f420 	.word	0x1ff0f420
 800d270:	1ff0f424 	.word	0x1ff0f424
 800d274:	1ff0f428 	.word	0x1ff0f428
 800d278:	200000fa 	.word	0x200000fa
 800d27c:	2000010a 	.word	0x2000010a

0800d280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d280:	b480      	push	{r7}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	4613      	mov	r3, r2
 800d28c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]
 800d296:	e027      	b.n	800d2e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	0f1b      	lsrs	r3, r3, #28
 800d29c:	2b09      	cmp	r3, #9
 800d29e:	d80b      	bhi.n	800d2b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	0f1b      	lsrs	r3, r3, #28
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	440b      	add	r3, r1
 800d2b0:	3230      	adds	r2, #48	@ 0x30
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	e00a      	b.n	800d2ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	0f1b      	lsrs	r3, r3, #28
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	440b      	add	r3, r1
 800d2c8:	3237      	adds	r2, #55	@ 0x37
 800d2ca:	b2d2      	uxtb	r2, r2
 800d2cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	3301      	adds	r3, #1
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	4413      	add	r3, r2
 800d2de:	2200      	movs	r2, #0
 800d2e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d2e2:	7dfb      	ldrb	r3, [r7, #23]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	75fb      	strb	r3, [r7, #23]
 800d2e8:	7dfa      	ldrb	r2, [r7, #23]
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d3d3      	bcc.n	800d298 <IntToUnicode+0x18>
  }
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	371c      	adds	r7, #28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
	...

0800d300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b0ae      	sub	sp, #184	@ 0xb8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d308:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	605a      	str	r2, [r3, #4]
 800d312:	609a      	str	r2, [r3, #8]
 800d314:	60da      	str	r2, [r3, #12]
 800d316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d318:	f107 0314 	add.w	r3, r7, #20
 800d31c:	2290      	movs	r2, #144	@ 0x90
 800d31e:	2100      	movs	r1, #0
 800d320:	4618      	mov	r0, r3
 800d322:	f009 ff67 	bl	80171f4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d32e:	d16e      	bne.n	800d40e <HAL_PCD_MspInit+0x10e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d330:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d334:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d336:	23c0      	movs	r3, #192	@ 0xc0
 800d338:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800d33a:	2302      	movs	r3, #2
 800d33c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800d33e:	2302      	movs	r3, #2
 800d340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800d342:	2301      	movs	r3, #1
 800d344:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800d346:	2301      	movs	r3, #1
 800d348:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800d34a:	2300      	movs	r3, #0
 800d34c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800d34e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d356:	f107 0314 	add.w	r3, r7, #20
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f7 fa1a 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 800d366:	f7f3 ff23 	bl	80011b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d36a:	4b2b      	ldr	r3, [pc, #172]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d36e:	4a2a      	ldr	r2, [pc, #168]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d370:	f043 0301 	orr.w	r3, r3, #1
 800d374:	6313      	str	r3, [r2, #48]	@ 0x30
 800d376:	4b28      	ldr	r3, [pc, #160]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d382:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d38a:	2302      	movs	r3, #2
 800d38c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d390:	2300      	movs	r3, #0
 800d392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d396:	2303      	movs	r3, #3
 800d398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d39c:	230a      	movs	r3, #10
 800d39e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	481c      	ldr	r0, [pc, #112]	@ (800d41c <HAL_PCD_MspInit+0x11c>)
 800d3aa:	f7f5 f89f 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d3ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d3b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d3c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	4814      	ldr	r0, [pc, #80]	@ (800d41c <HAL_PCD_MspInit+0x11c>)
 800d3ca:	f7f5 f88f 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3ce:	4b12      	ldr	r3, [pc, #72]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d2:	4a11      	ldr	r2, [pc, #68]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3d8:	6353      	str	r3, [r2, #52]	@ 0x34
 800d3da:	4b0f      	ldr	r3, [pc, #60]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ea:	4a0b      	ldr	r2, [pc, #44]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d3f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800d3f2:	4b09      	ldr	r3, [pc, #36]	@ (800d418 <HAL_PCD_MspInit+0x118>)
 800d3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3fa:	60bb      	str	r3, [r7, #8]
 800d3fc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d3fe:	2200      	movs	r2, #0
 800d400:	2105      	movs	r1, #5
 800d402:	2043      	movs	r0, #67	@ 0x43
 800d404:	f7f4 fc32 	bl	8001c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d408:	2043      	movs	r0, #67	@ 0x43
 800d40a:	f7f4 fc4b 	bl	8001ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d40e:	bf00      	nop
 800d410:	37b8      	adds	r7, #184	@ 0xb8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	40023800 	.word	0x40023800
 800d41c:	40020000 	.word	0x40020000

0800d420 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d434:	4619      	mov	r1, r3
 800d436:	4610      	mov	r0, r2
 800d438:	f7fb fcc9 	bl	8008dce <USBD_LL_SetupStage>
}
 800d43c:	bf00      	nop
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d456:	78fa      	ldrb	r2, [r7, #3]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	78fb      	ldrb	r3, [r7, #3]
 800d46c:	4619      	mov	r1, r3
 800d46e:	f7fb fd03 	bl	8008e78 <USBD_LL_DataOutStage>
}
 800d472:	bf00      	nop
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b082      	sub	sp, #8
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	460b      	mov	r3, r1
 800d484:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d48c:	78fa      	ldrb	r2, [r7, #3]
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	4613      	mov	r3, r2
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	3320      	adds	r3, #32
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	78fb      	ldrb	r3, [r7, #3]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f7fb fd9c 	bl	8008fde <USBD_LL_DataInStage>
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b082      	sub	sp, #8
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fb fed6 	bl	800926e <USBD_LL_SOF>
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b084      	sub	sp, #16
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	79db      	ldrb	r3, [r3, #7]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d102      	bne.n	800d4e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	73fb      	strb	r3, [r7, #15]
 800d4e2:	e008      	b.n	800d4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	79db      	ldrb	r3, [r3, #7]
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d102      	bne.n	800d4f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	73fb      	strb	r3, [r7, #15]
 800d4f0:	e001      	b.n	800d4f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d4f2:	f7f3 fe5d 	bl	80011b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d4fc:	7bfa      	ldrb	r2, [r7, #15]
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f7fb fe70 	bl	80091e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fb fe18 	bl	8009142 <USBD_LL_Reset>
}
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fb fe6b 	bl	8009206 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d542:	f043 0301 	orr.w	r3, r3, #1
 800d546:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	7adb      	ldrb	r3, [r3, #11]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d550:	4b04      	ldr	r3, [pc, #16]	@ (800d564 <HAL_PCD_SuspendCallback+0x48>)
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	4a03      	ldr	r2, [pc, #12]	@ (800d564 <HAL_PCD_SuspendCallback+0x48>)
 800d556:	f043 0306 	orr.w	r3, r3, #6
 800d55a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d55c:	bf00      	nop
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	e000ed00 	.word	0xe000ed00

0800d568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d576:	4618      	mov	r0, r3
 800d578:	f7fb fe61 	bl	800923e <USBD_LL_Resume>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fb feb9 	bl	8009312 <USBD_LL_IsoOUTIncomplete>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5ba:	78fa      	ldrb	r2, [r7, #3]
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fb fe75 	bl	80092ae <USBD_LL_IsoINIncomplete>
}
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fb fecb 	bl	8009376 <USBD_LL_DevConnected>
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fb fec8 	bl	800938c <USBD_LL_DevDisconnected>
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d13c      	bne.n	800d68e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d614:	4a20      	ldr	r2, [pc, #128]	@ (800d698 <USBD_LL_Init+0x94>)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a1e      	ldr	r2, [pc, #120]	@ (800d698 <USBD_LL_Init+0x94>)
 800d620:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d624:	4b1c      	ldr	r3, [pc, #112]	@ (800d698 <USBD_LL_Init+0x94>)
 800d626:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d62a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d62c:	4b1a      	ldr	r3, [pc, #104]	@ (800d698 <USBD_LL_Init+0x94>)
 800d62e:	2206      	movs	r2, #6
 800d630:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d632:	4b19      	ldr	r3, [pc, #100]	@ (800d698 <USBD_LL_Init+0x94>)
 800d634:	2202      	movs	r2, #2
 800d636:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d638:	4b17      	ldr	r3, [pc, #92]	@ (800d698 <USBD_LL_Init+0x94>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d63e:	4b16      	ldr	r3, [pc, #88]	@ (800d698 <USBD_LL_Init+0x94>)
 800d640:	2202      	movs	r2, #2
 800d642:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d644:	4b14      	ldr	r3, [pc, #80]	@ (800d698 <USBD_LL_Init+0x94>)
 800d646:	2200      	movs	r2, #0
 800d648:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d64a:	4b13      	ldr	r3, [pc, #76]	@ (800d698 <USBD_LL_Init+0x94>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d650:	4b11      	ldr	r3, [pc, #68]	@ (800d698 <USBD_LL_Init+0x94>)
 800d652:	2200      	movs	r2, #0
 800d654:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d656:	4b10      	ldr	r3, [pc, #64]	@ (800d698 <USBD_LL_Init+0x94>)
 800d658:	2200      	movs	r2, #0
 800d65a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d65c:	4b0e      	ldr	r3, [pc, #56]	@ (800d698 <USBD_LL_Init+0x94>)
 800d65e:	2200      	movs	r2, #0
 800d660:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d662:	480d      	ldr	r0, [pc, #52]	@ (800d698 <USBD_LL_Init+0x94>)
 800d664:	f7f5 f907 	bl	8002876 <HAL_PCD_Init>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d001      	beq.n	800d672 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d66e:	f7f3 fd9f 	bl	80011b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d672:	2180      	movs	r1, #128	@ 0x80
 800d674:	4808      	ldr	r0, [pc, #32]	@ (800d698 <USBD_LL_Init+0x94>)
 800d676:	f7f6 fb52 	bl	8003d1e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d67a:	2240      	movs	r2, #64	@ 0x40
 800d67c:	2100      	movs	r1, #0
 800d67e:	4806      	ldr	r0, [pc, #24]	@ (800d698 <USBD_LL_Init+0x94>)
 800d680:	f7f6 fb06 	bl	8003c90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d684:	2280      	movs	r2, #128	@ 0x80
 800d686:	2101      	movs	r1, #1
 800d688:	4803      	ldr	r0, [pc, #12]	@ (800d698 <USBD_LL_Init+0x94>)
 800d68a:	f7f6 fb01 	bl	8003c90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	2000d5bc 	.word	0x2000d5bc

0800d69c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f5 f9f5 	bl	8002aa2 <HAL_PCD_Start>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 f97e 	bl	800d9c0 <USBD_Get_USB_Status>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	4608      	mov	r0, r1
 800d6dc:	4611      	mov	r1, r2
 800d6de:	461a      	mov	r2, r3
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	70fb      	strb	r3, [r7, #3]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70bb      	strb	r3, [r7, #2]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6fa:	78bb      	ldrb	r3, [r7, #2]
 800d6fc:	883a      	ldrh	r2, [r7, #0]
 800d6fe:	78f9      	ldrb	r1, [r7, #3]
 800d700:	f7f5 fee3 	bl	80034ca <HAL_PCD_EP_Open>
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f000 f958 	bl	800d9c0 <USBD_Get_USB_Status>
 800d710:	4603      	mov	r3, r0
 800d712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d714:	7bbb      	ldrb	r3, [r7, #14]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	460b      	mov	r3, r1
 800d728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d738:	78fa      	ldrb	r2, [r7, #3]
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f5 ff2c 	bl	800359a <HAL_PCD_EP_Close>
 800d742:	4603      	mov	r3, r0
 800d744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 f939 	bl	800d9c0 <USBD_Get_USB_Status>
 800d74e:	4603      	mov	r3, r0
 800d750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d752:	7bbb      	ldrb	r3, [r7, #14]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	4611      	mov	r1, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7f5 ffe4 	bl	8003748 <HAL_PCD_EP_SetStall>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 f91a 	bl	800d9c0 <USBD_Get_USB_Status>
 800d78c:	4603      	mov	r3, r0
 800d78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d790:	7bbb      	ldrb	r3, [r7, #14]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b084      	sub	sp, #16
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7b4:	78fa      	ldrb	r2, [r7, #3]
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7f6 f828 	bl	800380e <HAL_PCD_EP_ClrStall>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f8fb 	bl	800d9c0 <USBD_Get_USB_Status>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d7ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	da0b      	bge.n	800d80c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d7fa:	68f9      	ldr	r1, [r7, #12]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	4413      	add	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	440b      	add	r3, r1
 800d806:	3316      	adds	r3, #22
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	e00b      	b.n	800d824 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d812:	68f9      	ldr	r1, [r7, #12]
 800d814:	4613      	mov	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d822:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d840:	2300      	movs	r3, #0
 800d842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d84a:	78fa      	ldrb	r2, [r7, #3]
 800d84c:	4611      	mov	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f5 fe17 	bl	8003482 <HAL_PCD_SetAddress>
 800d854:	4603      	mov	r3, r0
 800d856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f8b0 	bl	800d9c0 <USBD_Get_USB_Status>
 800d860:	4603      	mov	r3, r0
 800d862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d864:	7bbb      	ldrb	r3, [r7, #14]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b086      	sub	sp, #24
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
 800d87a:	460b      	mov	r3, r1
 800d87c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d88c:	7af9      	ldrb	r1, [r7, #11]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	f7f5 ff1f 	bl	80036d4 <HAL_PCD_EP_Transmit>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 f88f 	bl	800d9c0 <USBD_Get_USB_Status>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	607a      	str	r2, [r7, #4]
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8ce:	7af9      	ldrb	r1, [r7, #11]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	f7f5 feab 	bl	800362e <HAL_PCD_EP_Receive>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 f86e 	bl	800d9c0 <USBD_Get_USB_Status>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d8e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d904:	78fa      	ldrb	r2, [r7, #3]
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f5 fecb 	bl	80036a4 <HAL_PCD_EP_GetRxCount>
 800d90e:	4603      	mov	r3, r0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d002      	beq.n	800d930 <HAL_PCDEx_LPM_Callback+0x18>
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d01f      	beq.n	800d96e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d92e:	e03b      	b.n	800d9a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	7adb      	ldrb	r3, [r3, #11]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d938:	f000 f83c 	bl	800d9b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d93c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	4a1b      	ldr	r2, [pc, #108]	@ (800d9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d942:	f023 0306 	bic.w	r3, r3, #6
 800d946:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6812      	ldr	r2, [r2, #0]
 800d956:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d95a:	f023 0301 	bic.w	r3, r3, #1
 800d95e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d966:	4618      	mov	r0, r3
 800d968:	f7fb fc69 	bl	800923e <USBD_LL_Resume>
    break;
 800d96c:	e01c      	b.n	800d9a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6812      	ldr	r2, [r2, #0]
 800d97c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d980:	f043 0301 	orr.w	r3, r3, #1
 800d984:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fb fc3a 	bl	8009206 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	7adb      	ldrb	r3, [r3, #11]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d005      	beq.n	800d9a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d99a:	4b05      	ldr	r3, [pc, #20]	@ (800d9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	4a04      	ldr	r2, [pc, #16]	@ (800d9b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800d9a0:	f043 0306 	orr.w	r3, r3, #6
 800d9a4:	6113      	str	r3, [r2, #16]
    break;
 800d9a6:	bf00      	nop
}
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	e000ed00 	.word	0xe000ed00

0800d9b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d9b8:	f7f3 fb80 	bl	80010bc <SystemClock_Config>
}
 800d9bc:	bf00      	nop
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d817      	bhi.n	800da04 <USBD_Get_USB_Status+0x44>
 800d9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <USBD_Get_USB_Status+0x1c>)
 800d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9da:	bf00      	nop
 800d9dc:	0800d9ed 	.word	0x0800d9ed
 800d9e0:	0800d9f3 	.word	0x0800d9f3
 800d9e4:	0800d9f9 	.word	0x0800d9f9
 800d9e8:	0800d9ff 	.word	0x0800d9ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f0:	e00b      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f6:	e008      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d9fc:	e005      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9fe:	2303      	movs	r3, #3
 800da00:	73fb      	strb	r3, [r7, #15]
    break;
 800da02:	e002      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da04:	2303      	movs	r3, #3
 800da06:	73fb      	strb	r3, [r7, #15]
    break;
 800da08:	bf00      	nop
  }
  return usb_status;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <rcl_get_zero_initialized_node>:
 800da18:	4a03      	ldr	r2, [pc, #12]	@ (800da28 <rcl_get_zero_initialized_node+0x10>)
 800da1a:	4603      	mov	r3, r0
 800da1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da20:	e883 0003 	stmia.w	r3, {r0, r1}
 800da24:	4618      	mov	r0, r3
 800da26:	4770      	bx	lr
 800da28:	080181e4 	.word	0x080181e4

0800da2c <rcl_node_init>:
 800da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da30:	b0a9      	sub	sp, #164	@ 0xa4
 800da32:	4604      	mov	r4, r0
 800da34:	460e      	mov	r6, r1
 800da36:	4615      	mov	r5, r2
 800da38:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800da3c:	a823      	add	r0, sp, #140	@ 0x8c
 800da3e:	461f      	mov	r7, r3
 800da40:	f004 fd6c 	bl	801251c <rcl_guard_condition_get_default_options>
 800da44:	f1b8 0f00 	cmp.w	r8, #0
 800da48:	f000 80f3 	beq.w	800dc32 <rcl_node_init+0x206>
 800da4c:	4640      	mov	r0, r8
 800da4e:	f000 fb87 	bl	800e160 <rcutils_allocator_is_valid>
 800da52:	2d00      	cmp	r5, #0
 800da54:	bf18      	it	ne
 800da56:	2c00      	cmpne	r4, #0
 800da58:	f080 0001 	eor.w	r0, r0, #1
 800da5c:	bf0c      	ite	eq
 800da5e:	f04f 0c01 	moveq.w	ip, #1
 800da62:	f04f 0c00 	movne.w	ip, #0
 800da66:	2e00      	cmp	r6, #0
 800da68:	bf08      	it	eq
 800da6a:	f04c 0c01 	orreq.w	ip, ip, #1
 800da6e:	ea4c 0c00 	orr.w	ip, ip, r0
 800da72:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 800da76:	f040 80dc 	bne.w	800dc32 <rcl_node_init+0x206>
 800da7a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800da7e:	f1ba 0f00 	cmp.w	sl, #0
 800da82:	f040 80fc 	bne.w	800dc7e <rcl_node_init+0x252>
 800da86:	2f00      	cmp	r7, #0
 800da88:	f000 80d3 	beq.w	800dc32 <rcl_node_init+0x206>
 800da8c:	4638      	mov	r0, r7
 800da8e:	f004 fc53 	bl	8012338 <rcl_context_is_valid>
 800da92:	4683      	mov	fp, r0
 800da94:	2800      	cmp	r0, #0
 800da96:	f000 80d2 	beq.w	800dc3e <rcl_node_init+0x212>
 800da9a:	4652      	mov	r2, sl
 800da9c:	4630      	mov	r0, r6
 800da9e:	a922      	add	r1, sp, #136	@ 0x88
 800daa0:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 800daa4:	f000 fda2 	bl	800e5ec <rmw_validate_node_name>
 800daa8:	4682      	mov	sl, r0
 800daaa:	2800      	cmp	r0, #0
 800daac:	f040 80c3 	bne.w	800dc36 <rcl_node_init+0x20a>
 800dab0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800dab2:	2800      	cmp	r0, #0
 800dab4:	f040 80f1 	bne.w	800dc9a <rcl_node_init+0x26e>
 800dab8:	4628      	mov	r0, r5
 800daba:	f7f2 fbcb 	bl	8000254 <strlen>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f040 80c0 	bne.w	800dc44 <rcl_node_init+0x218>
 800dac4:	4d79      	ldr	r5, [pc, #484]	@ (800dcac <rcl_node_init+0x280>)
 800dac6:	a922      	add	r1, sp, #136	@ 0x88
 800dac8:	2200      	movs	r2, #0
 800daca:	4628      	mov	r0, r5
 800dacc:	f000 fd70 	bl	800e5b0 <rmw_validate_namespace>
 800dad0:	4682      	mov	sl, r0
 800dad2:	2800      	cmp	r0, #0
 800dad4:	f040 80af 	bne.w	800dc36 <rcl_node_init+0x20a>
 800dad8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800dada:	2800      	cmp	r0, #0
 800dadc:	f040 80d5 	bne.w	800dc8a <rcl_node_init+0x25e>
 800dae0:	f8d8 3000 	ldr.w	r3, [r8]
 800dae4:	2078      	movs	r0, #120	@ 0x78
 800dae6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800daea:	4798      	blx	r3
 800daec:	4682      	mov	sl, r0
 800daee:	6060      	str	r0, [r4, #4]
 800daf0:	2800      	cmp	r0, #0
 800daf2:	f000 80cf 	beq.w	800dc94 <rcl_node_init+0x268>
 800daf6:	2200      	movs	r2, #0
 800daf8:	2300      	movs	r3, #0
 800dafa:	a808      	add	r0, sp, #32
 800dafc:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 800db00:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 800db04:	f000 f902 	bl	800dd0c <rcl_node_get_default_options>
 800db08:	a908      	add	r1, sp, #32
 800db0a:	4650      	mov	r0, sl
 800db0c:	2268      	movs	r2, #104	@ 0x68
 800db0e:	f009 fc3a 	bl	8017386 <memcpy>
 800db12:	6861      	ldr	r1, [r4, #4]
 800db14:	4640      	mov	r0, r8
 800db16:	6027      	str	r7, [r4, #0]
 800db18:	f000 f906 	bl	800dd28 <rcl_node_options_copy>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d158      	bne.n	800dbd2 <rcl_node_init+0x1a6>
 800db20:	4628      	mov	r0, r5
 800db22:	f7f2 fb97 	bl	8000254 <strlen>
 800db26:	4428      	add	r0, r5
 800db28:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800db2c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800db30:	2b2f      	cmp	r3, #47	@ 0x2f
 800db32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	bf0c      	ite	eq
 800db3a:	4b5d      	ldreq	r3, [pc, #372]	@ (800dcb0 <rcl_node_init+0x284>)
 800db3c:	4b5d      	ldrne	r3, [pc, #372]	@ (800dcb4 <rcl_node_init+0x288>)
 800db3e:	9302      	str	r3, [sp, #8]
 800db40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800db4a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800db4e:	f000 fb5f 	bl	800e210 <rcutils_format_string_limit>
 800db52:	6823      	ldr	r3, [r4, #0]
 800db54:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 800db58:	4631      	mov	r1, r6
 800db5a:	6818      	ldr	r0, [r3, #0]
 800db5c:	462a      	mov	r2, r5
 800db5e:	6866      	ldr	r6, [r4, #4]
 800db60:	3028      	adds	r0, #40	@ 0x28
 800db62:	f000 fe39 	bl	800e7d8 <rmw_create_node>
 800db66:	6863      	ldr	r3, [r4, #4]
 800db68:	66b0      	str	r0, [r6, #104]	@ 0x68
 800db6a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d032      	beq.n	800dbd6 <rcl_node_init+0x1aa>
 800db70:	f000 fec2 	bl	800e8f8 <rmw_node_get_graph_guard_condition>
 800db74:	4682      	mov	sl, r0
 800db76:	b360      	cbz	r0, 800dbd2 <rcl_node_init+0x1a6>
 800db78:	f8d8 3000 	ldr.w	r3, [r8]
 800db7c:	2008      	movs	r0, #8
 800db7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800db82:	6866      	ldr	r6, [r4, #4]
 800db84:	4798      	blx	r3
 800db86:	6863      	ldr	r3, [r4, #4]
 800db88:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800db8a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800db8e:	f1bb 0f00 	cmp.w	fp, #0
 800db92:	d020      	beq.n	800dbd6 <rcl_node_init+0x1aa>
 800db94:	a806      	add	r0, sp, #24
 800db96:	ae23      	add	r6, sp, #140	@ 0x8c
 800db98:	f004 fc34 	bl	8012404 <rcl_get_zero_initialized_guard_condition>
 800db9c:	a806      	add	r0, sp, #24
 800db9e:	6863      	ldr	r3, [r4, #4]
 800dba0:	46c4      	mov	ip, r8
 800dba2:	c803      	ldmia	r0, {r0, r1}
 800dba4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800dba8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800dbac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dbb2:	f8dc 3000 	ldr.w	r3, [ip]
 800dbb6:	6033      	str	r3, [r6, #0]
 800dbb8:	ab28      	add	r3, sp, #160	@ 0xa0
 800dbba:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800dbbe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dbc2:	4651      	mov	r1, sl
 800dbc4:	463a      	mov	r2, r7
 800dbc6:	4670      	mov	r0, lr
 800dbc8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dbca:	f004 fc25 	bl	8012418 <rcl_guard_condition_init_from_rmw>
 800dbce:	4682      	mov	sl, r0
 800dbd0:	b328      	cbz	r0, 800dc1e <rcl_node_init+0x1f2>
 800dbd2:	6863      	ldr	r3, [r4, #4]
 800dbd4:	b1f3      	cbz	r3, 800dc14 <rcl_node_init+0x1e8>
 800dbd6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800dbd8:	b128      	cbz	r0, 800dbe6 <rcl_node_init+0x1ba>
 800dbda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbe2:	4798      	blx	r3
 800dbe4:	6863      	ldr	r3, [r4, #4]
 800dbe6:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800dbe8:	b110      	cbz	r0, 800dbf0 <rcl_node_init+0x1c4>
 800dbea:	f000 fe07 	bl	800e7fc <rmw_destroy_node>
 800dbee:	6863      	ldr	r3, [r4, #4]
 800dbf0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800dbf2:	b148      	cbz	r0, 800dc08 <rcl_node_init+0x1dc>
 800dbf4:	f004 fc6c 	bl	80124d0 <rcl_guard_condition_fini>
 800dbf8:	6863      	ldr	r3, [r4, #4]
 800dbfa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dbfe:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800dc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc04:	4798      	blx	r3
 800dc06:	6863      	ldr	r3, [r4, #4]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dc0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc12:	4798      	blx	r3
 800dc14:	2300      	movs	r3, #0
 800dc16:	f04f 0a01 	mov.w	sl, #1
 800dc1a:	e9c4 3300 	strd	r3, r3, [r4]
 800dc1e:	f1b9 0f00 	cmp.w	r9, #0
 800dc22:	d008      	beq.n	800dc36 <rcl_node_init+0x20a>
 800dc24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc28:	4628      	mov	r0, r5
 800dc2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dc2e:	4798      	blx	r3
 800dc30:	e001      	b.n	800dc36 <rcl_node_init+0x20a>
 800dc32:	f04f 0a0b 	mov.w	sl, #11
 800dc36:	4650      	mov	r0, sl
 800dc38:	b029      	add	sp, #164	@ 0xa4
 800dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc3e:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 800dc42:	e7f8      	b.n	800dc36 <rcl_node_init+0x20a>
 800dc44:	782b      	ldrb	r3, [r5, #0]
 800dc46:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc48:	f43f af3d 	beq.w	800dac6 <rcl_node_init+0x9a>
 800dc4c:	9503      	str	r5, [sp, #12]
 800dc4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	4b18      	ldr	r3, [pc, #96]	@ (800dcb8 <rcl_node_init+0x28c>)
 800dc56:	9302      	str	r3, [sp, #8]
 800dc58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800dc62:	f000 fad5 	bl	800e210 <rcutils_format_string_limit>
 800dc66:	4605      	mov	r5, r0
 800dc68:	b1e0      	cbz	r0, 800dca4 <rcl_node_init+0x278>
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	a922      	add	r1, sp, #136	@ 0x88
 800dc6e:	9222      	str	r2, [sp, #136]	@ 0x88
 800dc70:	f000 fc9e 	bl	800e5b0 <rmw_validate_namespace>
 800dc74:	4682      	mov	sl, r0
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d1d4      	bne.n	800dc24 <rcl_node_init+0x1f8>
 800dc7a:	46d9      	mov	r9, fp
 800dc7c:	e72c      	b.n	800dad8 <rcl_node_init+0xac>
 800dc7e:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 800dc82:	4650      	mov	r0, sl
 800dc84:	b029      	add	sp, #164	@ 0xa4
 800dc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8a:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 800dc8e:	f000 fca1 	bl	800e5d4 <rmw_namespace_validation_result_string>
 800dc92:	e7c4      	b.n	800dc1e <rcl_node_init+0x1f2>
 800dc94:	f04f 0a0a 	mov.w	sl, #10
 800dc98:	e7c1      	b.n	800dc1e <rcl_node_init+0x1f2>
 800dc9a:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 800dc9e:	f000 fcf9 	bl	800e694 <rmw_node_name_validation_result_string>
 800dca2:	e7c8      	b.n	800dc36 <rcl_node_init+0x20a>
 800dca4:	f04f 0a0a 	mov.w	sl, #10
 800dca8:	e7c5      	b.n	800dc36 <rcl_node_init+0x20a>
 800dcaa:	bf00      	nop
 800dcac:	080181cc 	.word	0x080181cc
 800dcb0:	080181d4 	.word	0x080181d4
 800dcb4:	080181dc 	.word	0x080181dc
 800dcb8:	080181d0 	.word	0x080181d0

0800dcbc <rcl_node_is_valid>:
 800dcbc:	b130      	cbz	r0, 800dccc <rcl_node_is_valid+0x10>
 800dcbe:	6843      	ldr	r3, [r0, #4]
 800dcc0:	b123      	cbz	r3, 800dccc <rcl_node_is_valid+0x10>
 800dcc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcc4:	b113      	cbz	r3, 800dccc <rcl_node_is_valid+0x10>
 800dcc6:	6800      	ldr	r0, [r0, #0]
 800dcc8:	f004 bb36 	b.w	8012338 <rcl_context_is_valid>
 800dccc:	2000      	movs	r0, #0
 800dcce:	4770      	bx	lr

0800dcd0 <rcl_node_get_name>:
 800dcd0:	b120      	cbz	r0, 800dcdc <rcl_node_get_name+0xc>
 800dcd2:	6840      	ldr	r0, [r0, #4]
 800dcd4:	b110      	cbz	r0, 800dcdc <rcl_node_get_name+0xc>
 800dcd6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dcd8:	b100      	cbz	r0, 800dcdc <rcl_node_get_name+0xc>
 800dcda:	6880      	ldr	r0, [r0, #8]
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop

0800dce0 <rcl_node_get_namespace>:
 800dce0:	b120      	cbz	r0, 800dcec <rcl_node_get_namespace+0xc>
 800dce2:	6840      	ldr	r0, [r0, #4]
 800dce4:	b110      	cbz	r0, 800dcec <rcl_node_get_namespace+0xc>
 800dce6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dce8:	b100      	cbz	r0, 800dcec <rcl_node_get_namespace+0xc>
 800dcea:	68c0      	ldr	r0, [r0, #12]
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop

0800dcf0 <rcl_node_get_options>:
 800dcf0:	b128      	cbz	r0, 800dcfe <rcl_node_get_options+0xe>
 800dcf2:	6840      	ldr	r0, [r0, #4]
 800dcf4:	b118      	cbz	r0, 800dcfe <rcl_node_get_options+0xe>
 800dcf6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	bf08      	it	eq
 800dcfc:	2000      	moveq	r0, #0
 800dcfe:	4770      	bx	lr

0800dd00 <rcl_node_get_rmw_handle>:
 800dd00:	b110      	cbz	r0, 800dd08 <rcl_node_get_rmw_handle+0x8>
 800dd02:	6840      	ldr	r0, [r0, #4]
 800dd04:	b100      	cbz	r0, 800dd08 <rcl_node_get_rmw_handle+0x8>
 800dd06:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop

0800dd0c <rcl_node_get_default_options>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	4604      	mov	r4, r0
 800dd10:	2268      	movs	r2, #104	@ 0x68
 800dd12:	2100      	movs	r1, #0
 800dd14:	f009 fa6e 	bl	80171f4 <memset>
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fa13 	bl	800e144 <rcutils_get_default_allocator>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	4620      	mov	r0, r4
 800dd22:	7523      	strb	r3, [r4, #20]
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	bf00      	nop

0800dd28 <rcl_node_options_copy>:
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	bf18      	it	ne
 800dd2c:	4288      	cmpne	r0, r1
 800dd2e:	d01b      	beq.n	800dd68 <rcl_node_options_copy+0x40>
 800dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd32:	fab1 f681 	clz	r6, r1
 800dd36:	460c      	mov	r4, r1
 800dd38:	0976      	lsrs	r6, r6, #5
 800dd3a:	b199      	cbz	r1, 800dd64 <rcl_node_options_copy+0x3c>
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	8a87      	ldrh	r7, [r0, #20]
 800dd40:	4684      	mov	ip, r0
 800dd42:	468e      	mov	lr, r1
 800dd44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800dd4a:	682b      	ldr	r3, [r5, #0]
 800dd4c:	2250      	movs	r2, #80	@ 0x50
 800dd4e:	f10c 0118 	add.w	r1, ip, #24
 800dd52:	f104 0018 	add.w	r0, r4, #24
 800dd56:	f8ce 3000 	str.w	r3, [lr]
 800dd5a:	82a7      	strh	r7, [r4, #20]
 800dd5c:	f009 fb13 	bl	8017386 <memcpy>
 800dd60:	4630      	mov	r0, r6
 800dd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd64:	200b      	movs	r0, #11
 800dd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd68:	200b      	movs	r0, #11
 800dd6a:	4770      	bx	lr

0800dd6c <rcl_get_zero_initialized_publisher>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	@ (800dd74 <rcl_get_zero_initialized_publisher+0x8>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	080181ec 	.word	0x080181ec

0800dd78 <rcl_publisher_init>:
 800dd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd7c:	b088      	sub	sp, #32
 800dd7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	d06b      	beq.n	800de5c <rcl_publisher_init+0xe4>
 800dd84:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800dd88:	4605      	mov	r5, r0
 800dd8a:	460f      	mov	r7, r1
 800dd8c:	4690      	mov	r8, r2
 800dd8e:	4650      	mov	r0, sl
 800dd90:	4699      	mov	r9, r3
 800dd92:	f000 f9e5 	bl	800e160 <rcutils_allocator_is_valid>
 800dd96:	f080 0401 	eor.w	r4, r0, #1
 800dd9a:	b2e4      	uxtb	r4, r4
 800dd9c:	2c00      	cmp	r4, #0
 800dd9e:	d15d      	bne.n	800de5c <rcl_publisher_init+0xe4>
 800dda0:	2d00      	cmp	r5, #0
 800dda2:	d05b      	beq.n	800de5c <rcl_publisher_init+0xe4>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b123      	cbz	r3, 800ddb2 <rcl_publisher_init+0x3a>
 800dda8:	2464      	movs	r4, #100	@ 0x64
 800ddaa:	4620      	mov	r0, r4
 800ddac:	b008      	add	sp, #32
 800ddae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	f7ff ff82 	bl	800dcbc <rcl_node_is_valid>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d054      	beq.n	800de66 <rcl_publisher_init+0xee>
 800ddbc:	f1b8 0f00 	cmp.w	r8, #0
 800ddc0:	d04c      	beq.n	800de5c <rcl_publisher_init+0xe4>
 800ddc2:	fab9 f389 	clz	r3, r9
 800ddc6:	095b      	lsrs	r3, r3, #5
 800ddc8:	f1b9 0f00 	cmp.w	r9, #0
 800ddcc:	d046      	beq.n	800de5c <rcl_publisher_init+0xe4>
 800ddce:	aa07      	add	r2, sp, #28
 800ddd0:	9307      	str	r3, [sp, #28]
 800ddd2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ddd6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ddda:	9205      	str	r2, [sp, #20]
 800dddc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dde0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800dde4:	4649      	mov	r1, r9
 800dde6:	4638      	mov	r0, r7
 800dde8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ddec:	f004 fdda 	bl	80129a4 <rcl_node_resolve_name>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d14f      	bne.n	800de94 <rcl_publisher_init+0x11c>
 800ddf4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ddf6:	20c8      	movs	r0, #200	@ 0xc8
 800ddf8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ddfa:	4798      	blx	r3
 800ddfc:	6028      	str	r0, [r5, #0]
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d050      	beq.n	800dea4 <rcl_publisher_init+0x12c>
 800de02:	4638      	mov	r0, r7
 800de04:	f7ff ff7c 	bl	800dd00 <rcl_node_get_rmw_handle>
 800de08:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800de0c:	4641      	mov	r1, r8
 800de0e:	9a07      	ldr	r2, [sp, #28]
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	4633      	mov	r3, r6
 800de14:	682c      	ldr	r4, [r5, #0]
 800de16:	f000 fdd9 	bl	800e9cc <rmw_create_publisher>
 800de1a:	682b      	ldr	r3, [r5, #0]
 800de1c:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800de20:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800de24:	b370      	cbz	r0, 800de84 <rcl_publisher_init+0x10c>
 800de26:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800de2a:	f000 feb3 	bl	800eb94 <rmw_publisher_get_actual_qos>
 800de2e:	682b      	ldr	r3, [r5, #0]
 800de30:	4604      	mov	r4, r0
 800de32:	b9d0      	cbnz	r0, 800de6a <rcl_publisher_init+0xf2>
 800de34:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800de38:	4631      	mov	r1, r6
 800de3a:	4618      	mov	r0, r3
 800de3c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800de40:	2270      	movs	r2, #112	@ 0x70
 800de42:	f009 faa0 	bl	8017386 <memcpy>
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800de4c:	9807      	ldr	r0, [sp, #28]
 800de4e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800de50:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de52:	4798      	blx	r3
 800de54:	4620      	mov	r0, r4
 800de56:	b008      	add	sp, #32
 800de58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de5c:	240b      	movs	r4, #11
 800de5e:	4620      	mov	r0, r4
 800de60:	b008      	add	sp, #32
 800de62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de66:	24c8      	movs	r4, #200	@ 0xc8
 800de68:	e79f      	b.n	800ddaa <rcl_publisher_init+0x32>
 800de6a:	b1cb      	cbz	r3, 800dea0 <rcl_publisher_init+0x128>
 800de6c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800de70:	b142      	cbz	r2, 800de84 <rcl_publisher_init+0x10c>
 800de72:	4638      	mov	r0, r7
 800de74:	f7ff ff44 	bl	800dd00 <rcl_node_get_rmw_handle>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800de7e:	f000 fe9d 	bl	800ebbc <rmw_destroy_publisher>
 800de82:	682b      	ldr	r3, [r5, #0]
 800de84:	4618      	mov	r0, r3
 800de86:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800de88:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800de8a:	2401      	movs	r4, #1
 800de8c:	4790      	blx	r2
 800de8e:	2300      	movs	r3, #0
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	e7db      	b.n	800de4c <rcl_publisher_init+0xd4>
 800de94:	2867      	cmp	r0, #103	@ 0x67
 800de96:	d007      	beq.n	800dea8 <rcl_publisher_init+0x130>
 800de98:	2869      	cmp	r0, #105	@ 0x69
 800de9a:	d005      	beq.n	800dea8 <rcl_publisher_init+0x130>
 800de9c:	280a      	cmp	r0, #10
 800de9e:	d001      	beq.n	800dea4 <rcl_publisher_init+0x12c>
 800dea0:	2401      	movs	r4, #1
 800dea2:	e7d3      	b.n	800de4c <rcl_publisher_init+0xd4>
 800dea4:	240a      	movs	r4, #10
 800dea6:	e7d1      	b.n	800de4c <rcl_publisher_init+0xd4>
 800dea8:	2467      	movs	r4, #103	@ 0x67
 800deaa:	e7cf      	b.n	800de4c <rcl_publisher_init+0xd4>

0800deac <rcl_publisher_get_default_options>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	4d14      	ldr	r5, [pc, #80]	@ (800df00 <rcl_publisher_get_default_options+0x54>)
 800deb0:	b088      	sub	sp, #32
 800deb2:	4604      	mov	r4, r0
 800deb4:	2250      	movs	r2, #80	@ 0x50
 800deb6:	4913      	ldr	r1, [pc, #76]	@ (800df04 <rcl_publisher_get_default_options+0x58>)
 800deb8:	4628      	mov	r0, r5
 800deba:	f009 fa64 	bl	8017386 <memcpy>
 800debe:	a802      	add	r0, sp, #8
 800dec0:	f000 f940 	bl	800e144 <rcutils_get_default_allocator>
 800dec4:	f10d 0c08 	add.w	ip, sp, #8
 800dec8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800decc:	466e      	mov	r6, sp
 800dece:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ded2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ded6:	f8dc 3000 	ldr.w	r3, [ip]
 800deda:	4630      	mov	r0, r6
 800dedc:	f8ce 3000 	str.w	r3, [lr]
 800dee0:	f000 fb0e 	bl	800e500 <rmw_get_default_publisher_options>
 800dee4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800dee8:	2270      	movs	r2, #112	@ 0x70
 800deea:	e896 0003 	ldmia.w	r6, {r0, r1}
 800deee:	e883 0003 	stmia.w	r3, {r0, r1}
 800def2:	4629      	mov	r1, r5
 800def4:	4620      	mov	r0, r4
 800def6:	f009 fa46 	bl	8017386 <memcpy>
 800defa:	4620      	mov	r0, r4
 800defc:	b008      	add	sp, #32
 800defe:	bd70      	pop	{r4, r5, r6, pc}
 800df00:	2000daa0 	.word	0x2000daa0
 800df04:	080181f0 	.word	0x080181f0

0800df08 <rcl_publish>:
 800df08:	b1f8      	cbz	r0, 800df4a <rcl_publish+0x42>
 800df0a:	6803      	ldr	r3, [r0, #0]
 800df0c:	b570      	push	{r4, r5, r6, lr}
 800df0e:	4604      	mov	r4, r0
 800df10:	b1b3      	cbz	r3, 800df40 <rcl_publish+0x38>
 800df12:	4616      	mov	r6, r2
 800df14:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800df18:	b192      	cbz	r2, 800df40 <rcl_publish+0x38>
 800df1a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800df1e:	460d      	mov	r5, r1
 800df20:	f004 fa0a 	bl	8012338 <rcl_context_is_valid>
 800df24:	b160      	cbz	r0, 800df40 <rcl_publish+0x38>
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800df2c:	b140      	cbz	r0, 800df40 <rcl_publish+0x38>
 800df2e:	b155      	cbz	r5, 800df46 <rcl_publish+0x3e>
 800df30:	4632      	mov	r2, r6
 800df32:	4629      	mov	r1, r5
 800df34:	f000 fcea 	bl	800e90c <rmw_publish>
 800df38:	3800      	subs	r0, #0
 800df3a:	bf18      	it	ne
 800df3c:	2001      	movne	r0, #1
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df44:	bd70      	pop	{r4, r5, r6, pc}
 800df46:	200b      	movs	r0, #11
 800df48:	bd70      	pop	{r4, r5, r6, pc}
 800df4a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800df4e:	4770      	bx	lr

0800df50 <rclc_support_init>:
 800df50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df54:	b086      	sub	sp, #24
 800df56:	b3bb      	cbz	r3, 800dfc8 <rclc_support_init+0x78>
 800df58:	4606      	mov	r6, r0
 800df5a:	b3a8      	cbz	r0, 800dfc8 <rclc_support_init+0x78>
 800df5c:	461c      	mov	r4, r3
 800df5e:	460f      	mov	r7, r1
 800df60:	4690      	mov	r8, r2
 800df62:	f004 fbfd 	bl	8012760 <rcl_get_zero_initialized_init_options>
 800df66:	f104 050c 	add.w	r5, r4, #12
 800df6a:	9005      	str	r0, [sp, #20]
 800df6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df70:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df74:	a805      	add	r0, sp, #20
 800df76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800df7a:	f004 fbf3 	bl	8012764 <rcl_init_options_init>
 800df7e:	4605      	mov	r5, r0
 800df80:	b9e0      	cbnz	r0, 800dfbc <rclc_support_init+0x6c>
 800df82:	ad02      	add	r5, sp, #8
 800df84:	4628      	mov	r0, r5
 800df86:	f004 f9cd 	bl	8012324 <rcl_get_zero_initialized_context>
 800df8a:	4633      	mov	r3, r6
 800df8c:	aa05      	add	r2, sp, #20
 800df8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df92:	e886 0003 	stmia.w	r6, {r0, r1}
 800df96:	4641      	mov	r1, r8
 800df98:	4638      	mov	r0, r7
 800df9a:	f004 fadb 	bl	8012554 <rcl_init>
 800df9e:	4605      	mov	r5, r0
 800dfa0:	b9b8      	cbnz	r0, 800dfd2 <rclc_support_init+0x82>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	f106 010c 	add.w	r1, r6, #12
 800dfa8:	2003      	movs	r0, #3
 800dfaa:	60b4      	str	r4, [r6, #8]
 800dfac:	f004 fee8 	bl	8012d80 <rcl_clock_init>
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	b970      	cbnz	r0, 800dfd2 <rclc_support_init+0x82>
 800dfb4:	a805      	add	r0, sp, #20
 800dfb6:	f004 fc3b 	bl	8012830 <rcl_init_options_fini>
 800dfba:	b108      	cbz	r0, 800dfc0 <rclc_support_init+0x70>
 800dfbc:	f000 f90c 	bl	800e1d8 <rcutils_reset_error>
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	b006      	add	sp, #24
 800dfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc8:	250b      	movs	r5, #11
 800dfca:	4628      	mov	r0, r5
 800dfcc:	b006      	add	sp, #24
 800dfce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd2:	f000 f901 	bl	800e1d8 <rcutils_reset_error>
 800dfd6:	a805      	add	r0, sp, #20
 800dfd8:	f004 fc2a 	bl	8012830 <rcl_init_options_fini>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d0ef      	beq.n	800dfc0 <rclc_support_init+0x70>
 800dfe0:	e7ec      	b.n	800dfbc <rclc_support_init+0x6c>
 800dfe2:	bf00      	nop

0800dfe4 <rclc_node_init_default>:
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	bf18      	it	ne
 800dfe8:	2a00      	cmpne	r2, #0
 800dfea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfee:	4616      	mov	r6, r2
 800dff0:	bf0c      	ite	eq
 800dff2:	2201      	moveq	r2, #1
 800dff4:	2200      	movne	r2, #0
 800dff6:	b0a1      	sub	sp, #132	@ 0x84
 800dff8:	2900      	cmp	r1, #0
 800dffa:	bf08      	it	eq
 800dffc:	f042 0201 	orreq.w	r2, r2, #1
 800e000:	bb22      	cbnz	r2, 800e04c <rclc_node_init_default+0x68>
 800e002:	4604      	mov	r4, r0
 800e004:	b310      	cbz	r0, 800e04c <rclc_node_init_default+0x68>
 800e006:	f10d 0810 	add.w	r8, sp, #16
 800e00a:	461f      	mov	r7, r3
 800e00c:	460d      	mov	r5, r1
 800e00e:	f10d 0918 	add.w	r9, sp, #24
 800e012:	4640      	mov	r0, r8
 800e014:	f7ff fd00 	bl	800da18 <rcl_get_zero_initialized_node>
 800e018:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e01c:	e884 0003 	stmia.w	r4, {r0, r1}
 800e020:	4648      	mov	r0, r9
 800e022:	f7ff fe73 	bl	800dd0c <rcl_node_get_default_options>
 800e026:	4640      	mov	r0, r8
 800e028:	f7ff fcf6 	bl	800da18 <rcl_get_zero_initialized_node>
 800e02c:	f8cd 9000 	str.w	r9, [sp]
 800e030:	463b      	mov	r3, r7
 800e032:	4632      	mov	r2, r6
 800e034:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e038:	e884 0003 	stmia.w	r4, {r0, r1}
 800e03c:	4629      	mov	r1, r5
 800e03e:	4620      	mov	r0, r4
 800e040:	f7ff fcf4 	bl	800da2c <rcl_node_init>
 800e044:	b930      	cbnz	r0, 800e054 <rclc_node_init_default+0x70>
 800e046:	b021      	add	sp, #132	@ 0x84
 800e048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e04c:	200b      	movs	r0, #11
 800e04e:	b021      	add	sp, #132	@ 0x84
 800e050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e054:	9003      	str	r0, [sp, #12]
 800e056:	f000 f8bf 	bl	800e1d8 <rcutils_reset_error>
 800e05a:	f000 f8bd 	bl	800e1d8 <rcutils_reset_error>
 800e05e:	9803      	ldr	r0, [sp, #12]
 800e060:	b021      	add	sp, #132	@ 0x84
 800e062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e066:	bf00      	nop

0800e068 <rclc_publisher_init_default>:
 800e068:	2b00      	cmp	r3, #0
 800e06a:	bf18      	it	ne
 800e06c:	2a00      	cmpne	r2, #0
 800e06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e072:	4616      	mov	r6, r2
 800e074:	bf0c      	ite	eq
 800e076:	2201      	moveq	r2, #1
 800e078:	2200      	movne	r2, #0
 800e07a:	b0a0      	sub	sp, #128	@ 0x80
 800e07c:	2900      	cmp	r1, #0
 800e07e:	bf08      	it	eq
 800e080:	f042 0201 	orreq.w	r2, r2, #1
 800e084:	bb1a      	cbnz	r2, 800e0ce <rclc_publisher_init_default+0x66>
 800e086:	4604      	mov	r4, r0
 800e088:	b308      	cbz	r0, 800e0ce <rclc_publisher_init_default+0x66>
 800e08a:	f10d 0810 	add.w	r8, sp, #16
 800e08e:	461f      	mov	r7, r3
 800e090:	460d      	mov	r5, r1
 800e092:	f7ff fe6b 	bl	800dd6c <rcl_get_zero_initialized_publisher>
 800e096:	6020      	str	r0, [r4, #0]
 800e098:	4640      	mov	r0, r8
 800e09a:	f7ff ff07 	bl	800deac <rcl_publisher_get_default_options>
 800e09e:	2250      	movs	r2, #80	@ 0x50
 800e0a0:	490d      	ldr	r1, [pc, #52]	@ (800e0d8 <rclc_publisher_init_default+0x70>)
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	f009 f96f 	bl	8017386 <memcpy>
 800e0a8:	463b      	mov	r3, r7
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f8cd 8000 	str.w	r8, [sp]
 800e0b4:	f7ff fe60 	bl	800dd78 <rcl_publisher_init>
 800e0b8:	b910      	cbnz	r0, 800e0c0 <rclc_publisher_init_default+0x58>
 800e0ba:	b020      	add	sp, #128	@ 0x80
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	9003      	str	r0, [sp, #12]
 800e0c2:	f000 f889 	bl	800e1d8 <rcutils_reset_error>
 800e0c6:	9803      	ldr	r0, [sp, #12]
 800e0c8:	b020      	add	sp, #128	@ 0x80
 800e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ce:	200b      	movs	r0, #11
 800e0d0:	b020      	add	sp, #128	@ 0x80
 800e0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d6:	bf00      	nop
 800e0d8:	08018240 	.word	0x08018240

0800e0dc <__default_zero_allocate>:
 800e0dc:	f008 bbaa 	b.w	8016834 <calloc>

0800e0e0 <__default_reallocate>:
 800e0e0:	f008 bd48 	b.w	8016b74 <realloc>

0800e0e4 <__default_deallocate>:
 800e0e4:	f008 bc24 	b.w	8016930 <free>

0800e0e8 <__default_allocate>:
 800e0e8:	f008 bc1a 	b.w	8016920 <malloc>

0800e0ec <rcutils_get_zero_initialized_allocator>:
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	4c05      	ldr	r4, [pc, #20]	@ (800e104 <rcutils_get_zero_initialized_allocator+0x18>)
 800e0f0:	4686      	mov	lr, r0
 800e0f2:	4684      	mov	ip, r0
 800e0f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	4670      	mov	r0, lr
 800e0fe:	f8cc 3000 	str.w	r3, [ip]
 800e102:	bd10      	pop	{r4, pc}
 800e104:	08018290 	.word	0x08018290

0800e108 <rcutils_set_default_allocator>:
 800e108:	b1a8      	cbz	r0, 800e136 <rcutils_set_default_allocator+0x2e>
 800e10a:	6802      	ldr	r2, [r0, #0]
 800e10c:	b1a2      	cbz	r2, 800e138 <rcutils_set_default_allocator+0x30>
 800e10e:	6841      	ldr	r1, [r0, #4]
 800e110:	b1a1      	cbz	r1, 800e13c <rcutils_set_default_allocator+0x34>
 800e112:	b410      	push	{r4}
 800e114:	68c4      	ldr	r4, [r0, #12]
 800e116:	b164      	cbz	r4, 800e132 <rcutils_set_default_allocator+0x2a>
 800e118:	6880      	ldr	r0, [r0, #8]
 800e11a:	b138      	cbz	r0, 800e12c <rcutils_set_default_allocator+0x24>
 800e11c:	4b08      	ldr	r3, [pc, #32]	@ (800e140 <rcutils_set_default_allocator+0x38>)
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	2200      	movs	r2, #0
 800e122:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e126:	2001      	movs	r0, #1
 800e128:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	4620      	mov	r0, r4
 800e134:	e7fa      	b.n	800e12c <rcutils_set_default_allocator+0x24>
 800e136:	4770      	bx	lr
 800e138:	4610      	mov	r0, r2
 800e13a:	4770      	bx	lr
 800e13c:	4608      	mov	r0, r1
 800e13e:	4770      	bx	lr
 800e140:	20000114 	.word	0x20000114

0800e144 <rcutils_get_default_allocator>:
 800e144:	b510      	push	{r4, lr}
 800e146:	4c05      	ldr	r4, [pc, #20]	@ (800e15c <rcutils_get_default_allocator+0x18>)
 800e148:	4686      	mov	lr, r0
 800e14a:	4684      	mov	ip, r0
 800e14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	4670      	mov	r0, lr
 800e156:	f8cc 3000 	str.w	r3, [ip]
 800e15a:	bd10      	pop	{r4, pc}
 800e15c:	20000114 	.word	0x20000114

0800e160 <rcutils_allocator_is_valid>:
 800e160:	b158      	cbz	r0, 800e17a <rcutils_allocator_is_valid+0x1a>
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	b143      	cbz	r3, 800e178 <rcutils_allocator_is_valid+0x18>
 800e166:	6843      	ldr	r3, [r0, #4]
 800e168:	b133      	cbz	r3, 800e178 <rcutils_allocator_is_valid+0x18>
 800e16a:	68c3      	ldr	r3, [r0, #12]
 800e16c:	b123      	cbz	r3, 800e178 <rcutils_allocator_is_valid+0x18>
 800e16e:	6880      	ldr	r0, [r0, #8]
 800e170:	3800      	subs	r0, #0
 800e172:	bf18      	it	ne
 800e174:	2001      	movne	r0, #1
 800e176:	4770      	bx	lr
 800e178:	4618      	mov	r0, r3
 800e17a:	4770      	bx	lr

0800e17c <rcutils_get_env>:
 800e17c:	b168      	cbz	r0, 800e19a <rcutils_get_env+0x1e>
 800e17e:	b510      	push	{r4, lr}
 800e180:	460c      	mov	r4, r1
 800e182:	b129      	cbz	r1, 800e190 <rcutils_get_env+0x14>
 800e184:	f008 fb84 	bl	8016890 <getenv>
 800e188:	b120      	cbz	r0, 800e194 <rcutils_get_env+0x18>
 800e18a:	6020      	str	r0, [r4, #0]
 800e18c:	2000      	movs	r0, #0
 800e18e:	bd10      	pop	{r4, pc}
 800e190:	4803      	ldr	r0, [pc, #12]	@ (800e1a0 <rcutils_get_env+0x24>)
 800e192:	bd10      	pop	{r4, pc}
 800e194:	4b03      	ldr	r3, [pc, #12]	@ (800e1a4 <rcutils_get_env+0x28>)
 800e196:	6023      	str	r3, [r4, #0]
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	4803      	ldr	r0, [pc, #12]	@ (800e1a8 <rcutils_get_env+0x2c>)
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	080182c0 	.word	0x080182c0
 800e1a4:	08018688 	.word	0x08018688
 800e1a8:	080182a4 	.word	0x080182a4

0800e1ac <rcutils_get_error_string>:
 800e1ac:	4b06      	ldr	r3, [pc, #24]	@ (800e1c8 <rcutils_get_error_string+0x1c>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	b13b      	cbz	r3, 800e1c2 <rcutils_get_error_string+0x16>
 800e1b2:	4b06      	ldr	r3, [pc, #24]	@ (800e1cc <rcutils_get_error_string+0x20>)
 800e1b4:	781a      	ldrb	r2, [r3, #0]
 800e1b6:	b90a      	cbnz	r2, 800e1bc <rcutils_get_error_string+0x10>
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	701a      	strb	r2, [r3, #0]
 800e1bc:	4b04      	ldr	r3, [pc, #16]	@ (800e1d0 <rcutils_get_error_string+0x24>)
 800e1be:	7818      	ldrb	r0, [r3, #0]
 800e1c0:	4770      	bx	lr
 800e1c2:	4b04      	ldr	r3, [pc, #16]	@ (800e1d4 <rcutils_get_error_string+0x28>)
 800e1c4:	7818      	ldrb	r0, [r3, #0]
 800e1c6:	4770      	bx	lr
 800e1c8:	2000db10 	.word	0x2000db10
 800e1cc:	2000db29 	.word	0x2000db29
 800e1d0:	2000db28 	.word	0x2000db28
 800e1d4:	080182dc 	.word	0x080182dc

0800e1d8 <rcutils_reset_error>:
 800e1d8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e1f8 <rcutils_reset_error+0x20>
 800e1dc:	2300      	movs	r3, #0
 800e1de:	4a08      	ldr	r2, [pc, #32]	@ (800e200 <rcutils_reset_error+0x28>)
 800e1e0:	4808      	ldr	r0, [pc, #32]	@ (800e204 <rcutils_reset_error+0x2c>)
 800e1e2:	8013      	strh	r3, [r2, #0]
 800e1e4:	4908      	ldr	r1, [pc, #32]	@ (800e208 <rcutils_reset_error+0x30>)
 800e1e6:	7003      	strb	r3, [r0, #0]
 800e1e8:	700b      	strb	r3, [r1, #0]
 800e1ea:	ed82 7b02 	vstr	d7, [r2, #8]
 800e1ee:	4a07      	ldr	r2, [pc, #28]	@ (800e20c <rcutils_reset_error+0x34>)
 800e1f0:	7013      	strb	r3, [r2, #0]
 800e1f2:	4770      	bx	lr
 800e1f4:	f3af 8000 	nop.w
	...
 800e200:	2000db18 	.word	0x2000db18
 800e204:	2000db29 	.word	0x2000db29
 800e208:	2000db28 	.word	0x2000db28
 800e20c:	2000db10 	.word	0x2000db10

0800e210 <rcutils_format_string_limit>:
 800e210:	b40f      	push	{r0, r1, r2, r3}
 800e212:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e214:	b083      	sub	sp, #12
 800e216:	ac08      	add	r4, sp, #32
 800e218:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800e21a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e21e:	b326      	cbz	r6, 800e26a <rcutils_format_string_limit+0x5a>
 800e220:	a808      	add	r0, sp, #32
 800e222:	f7ff ff9d 	bl	800e160 <rcutils_allocator_is_valid>
 800e226:	b300      	cbz	r0, 800e26a <rcutils_format_string_limit+0x5a>
 800e228:	2100      	movs	r1, #0
 800e22a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800e22c:	4632      	mov	r2, r6
 800e22e:	4608      	mov	r0, r1
 800e230:	e9cd 3300 	strd	r3, r3, [sp]
 800e234:	f000 f906 	bl	800e444 <rcutils_vsnprintf>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	4605      	mov	r5, r0
 800e23c:	d015      	beq.n	800e26a <rcutils_format_string_limit+0x5a>
 800e23e:	1c47      	adds	r7, r0, #1
 800e240:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e242:	429f      	cmp	r7, r3
 800e244:	d901      	bls.n	800e24a <rcutils_format_string_limit+0x3a>
 800e246:	1e5d      	subs	r5, r3, #1
 800e248:	461f      	mov	r7, r3
 800e24a:	9b08      	ldr	r3, [sp, #32]
 800e24c:	4638      	mov	r0, r7
 800e24e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e250:	4798      	blx	r3
 800e252:	4604      	mov	r4, r0
 800e254:	b148      	cbz	r0, 800e26a <rcutils_format_string_limit+0x5a>
 800e256:	4632      	mov	r2, r6
 800e258:	4639      	mov	r1, r7
 800e25a:	9b01      	ldr	r3, [sp, #4]
 800e25c:	f000 f8f2 	bl	800e444 <rcutils_vsnprintf>
 800e260:	2800      	cmp	r0, #0
 800e262:	db09      	blt.n	800e278 <rcutils_format_string_limit+0x68>
 800e264:	2300      	movs	r3, #0
 800e266:	5563      	strb	r3, [r4, r5]
 800e268:	e000      	b.n	800e26c <rcutils_format_string_limit+0x5c>
 800e26a:	2400      	movs	r4, #0
 800e26c:	4620      	mov	r0, r4
 800e26e:	b003      	add	sp, #12
 800e270:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e274:	b004      	add	sp, #16
 800e276:	4770      	bx	lr
 800e278:	4620      	mov	r0, r4
 800e27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e27e:	2400      	movs	r4, #0
 800e280:	4798      	blx	r3
 800e282:	e7f3      	b.n	800e26c <rcutils_format_string_limit+0x5c>

0800e284 <rcutils_repl_str>:
 800e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e288:	ed2d 8b02 	vpush	{d8}
 800e28c:	b087      	sub	sp, #28
 800e28e:	2600      	movs	r6, #0
 800e290:	4680      	mov	r8, r0
 800e292:	468a      	mov	sl, r1
 800e294:	9000      	str	r0, [sp, #0]
 800e296:	4608      	mov	r0, r1
 800e298:	ee08 2a10 	vmov	s16, r2
 800e29c:	4699      	mov	r9, r3
 800e29e:	2510      	movs	r5, #16
 800e2a0:	f7f1 ffd8 	bl	8000254 <strlen>
 800e2a4:	4637      	mov	r7, r6
 800e2a6:	46b3      	mov	fp, r6
 800e2a8:	9001      	str	r0, [sp, #4]
 800e2aa:	e01e      	b.n	800e2ea <rcutils_repl_str+0x66>
 800e2ac:	f10b 0b01 	add.w	fp, fp, #1
 800e2b0:	9b01      	ldr	r3, [sp, #4]
 800e2b2:	455e      	cmp	r6, fp
 800e2b4:	eb04 0803 	add.w	r8, r4, r3
 800e2b8:	d211      	bcs.n	800e2de <rcutils_repl_str+0x5a>
 800e2ba:	442e      	add	r6, r5
 800e2bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e2c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e2c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2c8:	00b1      	lsls	r1, r6, #2
 800e2ca:	4798      	blx	r3
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f000 8088 	beq.w	800e3e2 <rcutils_repl_str+0x15e>
 800e2d2:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	bf28      	it	cs
 800e2da:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800e2de:	9a00      	ldr	r2, [sp, #0]
 800e2e0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800e2e4:	1aa4      	subs	r4, r4, r2
 800e2e6:	f843 4c04 	str.w	r4, [r3, #-4]
 800e2ea:	4651      	mov	r1, sl
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	f008 ffa8 	bl	8017242 <strstr>
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	2c00      	cmp	r4, #0
 800e2f8:	d1d8      	bne.n	800e2ac <rcutils_repl_str+0x28>
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	f7f1 ffaa 	bl	8000254 <strlen>
 800e300:	9b00      	ldr	r3, [sp, #0]
 800e302:	eba8 0803 	sub.w	r8, r8, r3
 800e306:	eb08 0400 	add.w	r4, r8, r0
 800e30a:	9402      	str	r4, [sp, #8]
 800e30c:	f1bb 0f00 	cmp.w	fp, #0
 800e310:	d045      	beq.n	800e39e <rcutils_repl_str+0x11a>
 800e312:	ee18 0a10 	vmov	r0, s16
 800e316:	f7f1 ff9d 	bl	8000254 <strlen>
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	4606      	mov	r6, r0
 800e31e:	f8d9 3000 	ldr.w	r3, [r9]
 800e322:	1a82      	subs	r2, r0, r2
 800e324:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e328:	fb0b 4202 	mla	r2, fp, r2, r4
 800e32c:	1c50      	adds	r0, r2, #1
 800e32e:	9205      	str	r2, [sp, #20]
 800e330:	4798      	blx	r3
 800e332:	4682      	mov	sl, r0
 800e334:	2800      	cmp	r0, #0
 800e336:	d054      	beq.n	800e3e2 <rcutils_repl_str+0x15e>
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	463d      	mov	r5, r7
 800e33c:	9900      	ldr	r1, [sp, #0]
 800e33e:	2401      	movs	r4, #1
 800e340:	f009 f821 	bl	8017386 <memcpy>
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800e34a:	eb0a 0803 	add.w	r8, sl, r3
 800e34e:	ee18 7a10 	vmov	r7, s16
 800e352:	f8dd a000 	ldr.w	sl, [sp]
 800e356:	f8cd 9000 	str.w	r9, [sp]
 800e35a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e35e:	4632      	mov	r2, r6
 800e360:	4639      	mov	r1, r7
 800e362:	4640      	mov	r0, r8
 800e364:	44b0      	add	r8, r6
 800e366:	f009 f80e 	bl	8017386 <memcpy>
 800e36a:	f855 2b04 	ldr.w	r2, [r5], #4
 800e36e:	45a3      	cmp	fp, r4
 800e370:	444a      	add	r2, r9
 800e372:	eb0a 0102 	add.w	r1, sl, r2
 800e376:	d02a      	beq.n	800e3ce <rcutils_repl_str+0x14a>
 800e378:	6828      	ldr	r0, [r5, #0]
 800e37a:	1a82      	subs	r2, r0, r2
 800e37c:	4640      	mov	r0, r8
 800e37e:	4490      	add	r8, r2
 800e380:	f009 f801 	bl	8017386 <memcpy>
 800e384:	1c62      	adds	r2, r4, #1
 800e386:	45a3      	cmp	fp, r4
 800e388:	4614      	mov	r4, r2
 800e38a:	d8e8      	bhi.n	800e35e <rcutils_repl_str+0xda>
 800e38c:	f8dd 9000 	ldr.w	r9, [sp]
 800e390:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e394:	2300      	movs	r3, #0
 800e396:	9a05      	ldr	r2, [sp, #20]
 800e398:	f80a 3002 	strb.w	r3, [sl, r2]
 800e39c:	e00b      	b.n	800e3b6 <rcutils_repl_str+0x132>
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f8d9 3000 	ldr.w	r3, [r9]
 800e3a4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	4798      	blx	r3
 800e3ac:	4682      	mov	sl, r0
 800e3ae:	b110      	cbz	r0, 800e3b6 <rcutils_repl_str+0x132>
 800e3b0:	9900      	ldr	r1, [sp, #0]
 800e3b2:	f008 ffe0 	bl	8017376 <strcpy>
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e3bc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e3c0:	4798      	blx	r3
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	b007      	add	sp, #28
 800e3c6:	ecbd 8b02 	vpop	{d8}
 800e3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ce:	9b02      	ldr	r3, [sp, #8]
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	f8dd 9000 	ldr.w	r9, [sp]
 800e3d6:	1a9a      	subs	r2, r3, r2
 800e3d8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800e3dc:	f008 ffd3 	bl	8017386 <memcpy>
 800e3e0:	e7d8      	b.n	800e394 <rcutils_repl_str+0x110>
 800e3e2:	f04f 0a00 	mov.w	sl, #0
 800e3e6:	e7e6      	b.n	800e3b6 <rcutils_repl_str+0x132>

0800e3e8 <rcutils_snprintf>:
 800e3e8:	b40c      	push	{r2, r3}
 800e3ea:	b530      	push	{r4, r5, lr}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	ab06      	add	r3, sp, #24
 800e3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	b1e2      	cbz	r2, 800e432 <rcutils_snprintf+0x4a>
 800e3f8:	fab0 f480 	clz	r4, r0
 800e3fc:	fab1 f581 	clz	r5, r1
 800e400:	ea50 0c01 	orrs.w	ip, r0, r1
 800e404:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e408:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e40c:	d008      	beq.n	800e420 <rcutils_snprintf+0x38>
 800e40e:	b984      	cbnz	r4, 800e432 <rcutils_snprintf+0x4a>
 800e410:	b97d      	cbnz	r5, 800e432 <rcutils_snprintf+0x4a>
 800e412:	f008 fe4d 	bl	80170b0 <vsniprintf>
 800e416:	b003      	add	sp, #12
 800e418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e41c:	b002      	add	sp, #8
 800e41e:	4770      	bx	lr
 800e420:	4661      	mov	r1, ip
 800e422:	4660      	mov	r0, ip
 800e424:	f008 fe44 	bl	80170b0 <vsniprintf>
 800e428:	b003      	add	sp, #12
 800e42a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e42e:	b002      	add	sp, #8
 800e430:	4770      	bx	lr
 800e432:	f008 ff73 	bl	801731c <__errno>
 800e436:	2216      	movs	r2, #22
 800e438:	4603      	mov	r3, r0
 800e43a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	e7e9      	b.n	800e416 <rcutils_snprintf+0x2e>
 800e442:	bf00      	nop

0800e444 <rcutils_vsnprintf>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	b1b2      	cbz	r2, 800e476 <rcutils_vsnprintf+0x32>
 800e448:	fab0 f480 	clz	r4, r0
 800e44c:	fab1 f581 	clz	r5, r1
 800e450:	ea50 0c01 	orrs.w	ip, r0, r1
 800e454:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e458:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e45c:	d005      	beq.n	800e46a <rcutils_vsnprintf+0x26>
 800e45e:	b954      	cbnz	r4, 800e476 <rcutils_vsnprintf+0x32>
 800e460:	b94d      	cbnz	r5, 800e476 <rcutils_vsnprintf+0x32>
 800e462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e466:	f008 be23 	b.w	80170b0 <vsniprintf>
 800e46a:	4661      	mov	r1, ip
 800e46c:	4660      	mov	r0, ip
 800e46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e472:	f008 be1d 	b.w	80170b0 <vsniprintf>
 800e476:	f008 ff51 	bl	801731c <__errno>
 800e47a:	2316      	movs	r3, #22
 800e47c:	6003      	str	r3, [r0, #0]
 800e47e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e482:	bd70      	pop	{r4, r5, r6, pc}

0800e484 <rcutils_strdup>:
 800e484:	b084      	sub	sp, #16
 800e486:	b570      	push	{r4, r5, r6, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	4605      	mov	r5, r0
 800e48c:	ac07      	add	r4, sp, #28
 800e48e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e492:	b1b0      	cbz	r0, 800e4c2 <rcutils_strdup+0x3e>
 800e494:	f7f1 fede 	bl	8000254 <strlen>
 800e498:	1c42      	adds	r2, r0, #1
 800e49a:	9b07      	ldr	r3, [sp, #28]
 800e49c:	4606      	mov	r6, r0
 800e49e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4a0:	4610      	mov	r0, r2
 800e4a2:	9201      	str	r2, [sp, #4]
 800e4a4:	4798      	blx	r3
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	b128      	cbz	r0, 800e4b6 <rcutils_strdup+0x32>
 800e4aa:	9a01      	ldr	r2, [sp, #4]
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	f008 ff6a 	bl	8017386 <memcpy>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	55a3      	strb	r3, [r4, r6]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	b002      	add	sp, #8
 800e4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4be:	b004      	add	sp, #16
 800e4c0:	4770      	bx	lr
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	e7f7      	b.n	800e4b6 <rcutils_strdup+0x32>
 800e4c6:	bf00      	nop

0800e4c8 <rcutils_strndup>:
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4cc:	ac06      	add	r4, sp, #24
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	e884 000c 	stmia.w	r4, {r2, r3}
 800e4d4:	b188      	cbz	r0, 800e4fa <rcutils_strndup+0x32>
 800e4d6:	1c4f      	adds	r7, r1, #1
 800e4d8:	460e      	mov	r6, r1
 800e4da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4dc:	4638      	mov	r0, r7
 800e4de:	4790      	blx	r2
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	b128      	cbz	r0, 800e4f0 <rcutils_strndup+0x28>
 800e4e4:	463a      	mov	r2, r7
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	f008 ff4d 	bl	8017386 <memcpy>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	55a3      	strb	r3, [r4, r6]
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4f6:	b002      	add	sp, #8
 800e4f8:	4770      	bx	lr
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	e7f8      	b.n	800e4f0 <rcutils_strndup+0x28>
 800e4fe:	bf00      	nop

0800e500 <rmw_get_default_publisher_options>:
 800e500:	2200      	movs	r2, #0
 800e502:	6002      	str	r2, [r0, #0]
 800e504:	7102      	strb	r2, [r0, #4]
 800e506:	4770      	bx	lr

0800e508 <rmw_validate_namespace_with_size>:
 800e508:	2800      	cmp	r0, #0
 800e50a:	d043      	beq.n	800e594 <rmw_validate_namespace_with_size+0x8c>
 800e50c:	b570      	push	{r4, r5, r6, lr}
 800e50e:	4614      	mov	r4, r2
 800e510:	b0c2      	sub	sp, #264	@ 0x108
 800e512:	b32a      	cbz	r2, 800e560 <rmw_validate_namespace_with_size+0x58>
 800e514:	2901      	cmp	r1, #1
 800e516:	460d      	mov	r5, r1
 800e518:	461e      	mov	r6, r3
 800e51a:	d102      	bne.n	800e522 <rmw_validate_namespace_with_size+0x1a>
 800e51c:	7803      	ldrb	r3, [r0, #0]
 800e51e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e520:	d012      	beq.n	800e548 <rmw_validate_namespace_with_size+0x40>
 800e522:	aa01      	add	r2, sp, #4
 800e524:	4669      	mov	r1, sp
 800e526:	f004 ff0b 	bl	8013340 <rmw_validate_full_topic_name>
 800e52a:	b980      	cbnz	r0, 800e54e <rmw_validate_namespace_with_size+0x46>
 800e52c:	9a00      	ldr	r2, [sp, #0]
 800e52e:	b14a      	cbz	r2, 800e544 <rmw_validate_namespace_with_size+0x3c>
 800e530:	2a07      	cmp	r2, #7
 800e532:	d007      	beq.n	800e544 <rmw_validate_namespace_with_size+0x3c>
 800e534:	1e53      	subs	r3, r2, #1
 800e536:	2b05      	cmp	r3, #5
 800e538:	d82e      	bhi.n	800e598 <rmw_validate_namespace_with_size+0x90>
 800e53a:	e8df f003 	tbb	[pc, r3]
 800e53e:	1f1c      	.short	0x1f1c
 800e540:	14282522 	.word	0x14282522
 800e544:	2df5      	cmp	r5, #245	@ 0xf5
 800e546:	d804      	bhi.n	800e552 <rmw_validate_namespace_with_size+0x4a>
 800e548:	2300      	movs	r3, #0
 800e54a:	4618      	mov	r0, r3
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	b042      	add	sp, #264	@ 0x108
 800e550:	bd70      	pop	{r4, r5, r6, pc}
 800e552:	2307      	movs	r3, #7
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	2e00      	cmp	r6, #0
 800e558:	d0f9      	beq.n	800e54e <rmw_validate_namespace_with_size+0x46>
 800e55a:	23f4      	movs	r3, #244	@ 0xf4
 800e55c:	6033      	str	r3, [r6, #0]
 800e55e:	e7f6      	b.n	800e54e <rmw_validate_namespace_with_size+0x46>
 800e560:	200b      	movs	r0, #11
 800e562:	b042      	add	sp, #264	@ 0x108
 800e564:	bd70      	pop	{r4, r5, r6, pc}
 800e566:	2306      	movs	r3, #6
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	2e00      	cmp	r6, #0
 800e56c:	d0ef      	beq.n	800e54e <rmw_validate_namespace_with_size+0x46>
 800e56e:	9b01      	ldr	r3, [sp, #4]
 800e570:	6033      	str	r3, [r6, #0]
 800e572:	b042      	add	sp, #264	@ 0x108
 800e574:	bd70      	pop	{r4, r5, r6, pc}
 800e576:	2301      	movs	r3, #1
 800e578:	6023      	str	r3, [r4, #0]
 800e57a:	e7f6      	b.n	800e56a <rmw_validate_namespace_with_size+0x62>
 800e57c:	2302      	movs	r3, #2
 800e57e:	6023      	str	r3, [r4, #0]
 800e580:	e7f3      	b.n	800e56a <rmw_validate_namespace_with_size+0x62>
 800e582:	2303      	movs	r3, #3
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	e7f0      	b.n	800e56a <rmw_validate_namespace_with_size+0x62>
 800e588:	2304      	movs	r3, #4
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	e7ed      	b.n	800e56a <rmw_validate_namespace_with_size+0x62>
 800e58e:	2305      	movs	r3, #5
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	e7ea      	b.n	800e56a <rmw_validate_namespace_with_size+0x62>
 800e594:	200b      	movs	r0, #11
 800e596:	4770      	bx	lr
 800e598:	4613      	mov	r3, r2
 800e59a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e59e:	4a03      	ldr	r2, [pc, #12]	@ (800e5ac <rmw_validate_namespace_with_size+0xa4>)
 800e5a0:	a802      	add	r0, sp, #8
 800e5a2:	f7ff ff21 	bl	800e3e8 <rcutils_snprintf>
 800e5a6:	2001      	movs	r0, #1
 800e5a8:	e7d1      	b.n	800e54e <rmw_validate_namespace_with_size+0x46>
 800e5aa:	bf00      	nop
 800e5ac:	080182e0 	.word	0x080182e0

0800e5b0 <rmw_validate_namespace>:
 800e5b0:	b168      	cbz	r0, 800e5ce <rmw_validate_namespace+0x1e>
 800e5b2:	b570      	push	{r4, r5, r6, lr}
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	4616      	mov	r6, r2
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	f7f1 fe4b 	bl	8000254 <strlen>
 800e5be:	4633      	mov	r3, r6
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5ca:	f7ff bf9d 	b.w	800e508 <rmw_validate_namespace_with_size>
 800e5ce:	200b      	movs	r0, #11
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop

0800e5d4 <rmw_namespace_validation_result_string>:
 800e5d4:	2807      	cmp	r0, #7
 800e5d6:	d803      	bhi.n	800e5e0 <rmw_namespace_validation_result_string+0xc>
 800e5d8:	4b02      	ldr	r3, [pc, #8]	@ (800e5e4 <rmw_namespace_validation_result_string+0x10>)
 800e5da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e5de:	4770      	bx	lr
 800e5e0:	4801      	ldr	r0, [pc, #4]	@ (800e5e8 <rmw_namespace_validation_result_string+0x14>)
 800e5e2:	4770      	bx	lr
 800e5e4:	080184d8 	.word	0x080184d8
 800e5e8:	08018330 	.word	0x08018330

0800e5ec <rmw_validate_node_name>:
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d042      	beq.n	800e676 <rmw_validate_node_name+0x8a>
 800e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f4:	460d      	mov	r5, r1
 800e5f6:	2900      	cmp	r1, #0
 800e5f8:	d03f      	beq.n	800e67a <rmw_validate_node_name+0x8e>
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4616      	mov	r6, r2
 800e5fe:	f7f1 fe29 	bl	8000254 <strlen>
 800e602:	b310      	cbz	r0, 800e64a <rmw_validate_node_name+0x5e>
 800e604:	1e63      	subs	r3, r4, #1
 800e606:	f1c4 0101 	rsb	r1, r4, #1
 800e60a:	eb03 0800 	add.w	r8, r3, r0
 800e60e:	18cf      	adds	r7, r1, r3
 800e610:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e614:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800e618:	f02e 0c20 	bic.w	ip, lr, #32
 800e61c:	2a09      	cmp	r2, #9
 800e61e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800e622:	d905      	bls.n	800e630 <rmw_validate_node_name+0x44>
 800e624:	f1bc 0f19 	cmp.w	ip, #25
 800e628:	d902      	bls.n	800e630 <rmw_validate_node_name+0x44>
 800e62a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e62e:	d114      	bne.n	800e65a <rmw_validate_node_name+0x6e>
 800e630:	4598      	cmp	r8, r3
 800e632:	d1ec      	bne.n	800e60e <rmw_validate_node_name+0x22>
 800e634:	7822      	ldrb	r2, [r4, #0]
 800e636:	4b16      	ldr	r3, [pc, #88]	@ (800e690 <rmw_validate_node_name+0xa4>)
 800e638:	5cd3      	ldrb	r3, [r2, r3]
 800e63a:	f013 0304 	ands.w	r3, r3, #4
 800e63e:	d113      	bne.n	800e668 <rmw_validate_node_name+0x7c>
 800e640:	28ff      	cmp	r0, #255	@ 0xff
 800e642:	d81c      	bhi.n	800e67e <rmw_validate_node_name+0x92>
 800e644:	4618      	mov	r0, r3
 800e646:	602b      	str	r3, [r5, #0]
 800e648:	e00c      	b.n	800e664 <rmw_validate_node_name+0x78>
 800e64a:	2301      	movs	r3, #1
 800e64c:	602b      	str	r3, [r5, #0]
 800e64e:	b17e      	cbz	r6, 800e670 <rmw_validate_node_name+0x84>
 800e650:	2300      	movs	r3, #0
 800e652:	4618      	mov	r0, r3
 800e654:	6033      	str	r3, [r6, #0]
 800e656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65a:	2302      	movs	r3, #2
 800e65c:	602b      	str	r3, [r5, #0]
 800e65e:	b13e      	cbz	r6, 800e670 <rmw_validate_node_name+0x84>
 800e660:	2000      	movs	r0, #0
 800e662:	6037      	str	r7, [r6, #0]
 800e664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e668:	2303      	movs	r3, #3
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	2e00      	cmp	r6, #0
 800e66e:	d1ef      	bne.n	800e650 <rmw_validate_node_name+0x64>
 800e670:	2000      	movs	r0, #0
 800e672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e676:	200b      	movs	r0, #11
 800e678:	4770      	bx	lr
 800e67a:	200b      	movs	r0, #11
 800e67c:	e7f2      	b.n	800e664 <rmw_validate_node_name+0x78>
 800e67e:	2204      	movs	r2, #4
 800e680:	602a      	str	r2, [r5, #0]
 800e682:	2e00      	cmp	r6, #0
 800e684:	d0f4      	beq.n	800e670 <rmw_validate_node_name+0x84>
 800e686:	22fe      	movs	r2, #254	@ 0xfe
 800e688:	4618      	mov	r0, r3
 800e68a:	6032      	str	r2, [r6, #0]
 800e68c:	e7ea      	b.n	800e664 <rmw_validate_node_name+0x78>
 800e68e:	bf00      	nop
 800e690:	08018c5c 	.word	0x08018c5c

0800e694 <rmw_node_name_validation_result_string>:
 800e694:	2804      	cmp	r0, #4
 800e696:	d803      	bhi.n	800e6a0 <rmw_node_name_validation_result_string+0xc>
 800e698:	4b02      	ldr	r3, [pc, #8]	@ (800e6a4 <rmw_node_name_validation_result_string+0x10>)
 800e69a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e69e:	4770      	bx	lr
 800e6a0:	4801      	ldr	r0, [pc, #4]	@ (800e6a8 <rmw_node_name_validation_result_string+0x14>)
 800e6a2:	4770      	bx	lr
 800e6a4:	080185e4 	.word	0x080185e4
 800e6a8:	080184f8 	.word	0x080184f8

0800e6ac <rmw_uros_set_custom_transport>:
 800e6ac:	b470      	push	{r4, r5, r6}
 800e6ae:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e6b2:	b162      	cbz	r2, 800e6ce <rmw_uros_set_custom_transport+0x22>
 800e6b4:	b15b      	cbz	r3, 800e6ce <rmw_uros_set_custom_transport+0x22>
 800e6b6:	b155      	cbz	r5, 800e6ce <rmw_uros_set_custom_transport+0x22>
 800e6b8:	b14e      	cbz	r6, 800e6ce <rmw_uros_set_custom_transport+0x22>
 800e6ba:	4c06      	ldr	r4, [pc, #24]	@ (800e6d4 <rmw_uros_set_custom_transport+0x28>)
 800e6bc:	7020      	strb	r0, [r4, #0]
 800e6be:	2000      	movs	r0, #0
 800e6c0:	6166      	str	r6, [r4, #20]
 800e6c2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e6c6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6ca:	bc70      	pop	{r4, r5, r6}
 800e6cc:	4770      	bx	lr
 800e6ce:	200b      	movs	r0, #11
 800e6d0:	bc70      	pop	{r4, r5, r6}
 800e6d2:	4770      	bx	lr
 800e6d4:	2000db2c 	.word	0x2000db2c

0800e6d8 <create_node>:
 800e6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	b083      	sub	sp, #12
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d064      	beq.n	800e7ac <create_node+0xd4>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	4838      	ldr	r0, [pc, #224]	@ (800e7c8 <create_node+0xf0>)
 800e6e6:	460f      	mov	r7, r1
 800e6e8:	4690      	mov	r8, r2
 800e6ea:	461d      	mov	r5, r3
 800e6ec:	f004 fea4 	bl	8013438 <get_memory>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d05b      	beq.n	800e7ac <create_node+0xd4>
 800e6f4:	6884      	ldr	r4, [r0, #8]
 800e6f6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e6f8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e6fc:	f104 0518 	add.w	r5, r4, #24
 800e700:	6123      	str	r3, [r4, #16]
 800e702:	f004 ff01 	bl	8013508 <rmw_get_implementation_identifier>
 800e706:	f8c4 9020 	str.w	r9, [r4, #32]
 800e70a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e70e:	4630      	mov	r0, r6
 800e710:	f7f1 fda0 	bl	8000254 <strlen>
 800e714:	1c42      	adds	r2, r0, #1
 800e716:	2a3c      	cmp	r2, #60	@ 0x3c
 800e718:	d840      	bhi.n	800e79c <create_node+0xc4>
 800e71a:	4648      	mov	r0, r9
 800e71c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e720:	4631      	mov	r1, r6
 800e722:	f008 fe30 	bl	8017386 <memcpy>
 800e726:	4638      	mov	r0, r7
 800e728:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e72c:	f7f1 fd92 	bl	8000254 <strlen>
 800e730:	1c42      	adds	r2, r0, #1
 800e732:	2a3c      	cmp	r2, #60	@ 0x3c
 800e734:	d832      	bhi.n	800e79c <create_node+0xc4>
 800e736:	4639      	mov	r1, r7
 800e738:	4648      	mov	r0, r9
 800e73a:	f008 fe24 	bl	8017386 <memcpy>
 800e73e:	6923      	ldr	r3, [r4, #16]
 800e740:	2101      	movs	r1, #1
 800e742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e746:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e74a:	1842      	adds	r2, r0, r1
 800e74c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e750:	f001 f99a 	bl	800fa88 <uxr_object_id>
 800e754:	6160      	str	r0, [r4, #20]
 800e756:	783b      	ldrb	r3, [r7, #0]
 800e758:	2b2f      	cmp	r3, #47	@ 0x2f
 800e75a:	d12c      	bne.n	800e7b6 <create_node+0xde>
 800e75c:	787b      	ldrb	r3, [r7, #1]
 800e75e:	bb53      	cbnz	r3, 800e7b6 <create_node+0xde>
 800e760:	4633      	mov	r3, r6
 800e762:	4a1a      	ldr	r2, [pc, #104]	@ (800e7cc <create_node+0xf4>)
 800e764:	213c      	movs	r1, #60	@ 0x3c
 800e766:	481a      	ldr	r0, [pc, #104]	@ (800e7d0 <create_node+0xf8>)
 800e768:	f008 fbe0 	bl	8016f2c <sniprintf>
 800e76c:	6920      	ldr	r0, [r4, #16]
 800e76e:	2106      	movs	r1, #6
 800e770:	fa1f f388 	uxth.w	r3, r8
 800e774:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e778:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e77c:	9101      	str	r1, [sp, #4]
 800e77e:	4914      	ldr	r1, [pc, #80]	@ (800e7d0 <create_node+0xf8>)
 800e780:	9100      	str	r1, [sp, #0]
 800e782:	6811      	ldr	r1, [r2, #0]
 800e784:	6962      	ldr	r2, [r4, #20]
 800e786:	f001 f871 	bl	800f86c <uxr_buffer_create_participant_bin>
 800e78a:	4602      	mov	r2, r0
 800e78c:	6920      	ldr	r0, [r4, #16]
 800e78e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e792:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e796:	f000 fd47 	bl	800f228 <run_xrce_session>
 800e79a:	b918      	cbnz	r0, 800e7a4 <create_node+0xcc>
 800e79c:	4628      	mov	r0, r5
 800e79e:	2500      	movs	r5, #0
 800e7a0:	f000 fc6c 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	b003      	add	sp, #12
 800e7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ac:	2500      	movs	r5, #0
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	b003      	add	sp, #12
 800e7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7b6:	463b      	mov	r3, r7
 800e7b8:	4a06      	ldr	r2, [pc, #24]	@ (800e7d4 <create_node+0xfc>)
 800e7ba:	213c      	movs	r1, #60	@ 0x3c
 800e7bc:	9600      	str	r6, [sp, #0]
 800e7be:	4804      	ldr	r0, [pc, #16]	@ (800e7d0 <create_node+0xf8>)
 800e7c0:	f008 fbb4 	bl	8016f2c <sniprintf>
 800e7c4:	e7d2      	b.n	800e76c <create_node+0x94>
 800e7c6:	bf00      	nop
 800e7c8:	20012454 	.word	0x20012454
 800e7cc:	0801862c 	.word	0x0801862c
 800e7d0:	2000db48 	.word	0x2000db48
 800e7d4:	080181dc 	.word	0x080181dc

0800e7d8 <rmw_create_node>:
 800e7d8:	468c      	mov	ip, r1
 800e7da:	4611      	mov	r1, r2
 800e7dc:	f1bc 0f00 	cmp.w	ip, #0
 800e7e0:	d00a      	beq.n	800e7f8 <rmw_create_node+0x20>
 800e7e2:	f89c 3000 	ldrb.w	r3, [ip]
 800e7e6:	b13b      	cbz	r3, 800e7f8 <rmw_create_node+0x20>
 800e7e8:	b132      	cbz	r2, 800e7f8 <rmw_create_node+0x20>
 800e7ea:	7813      	ldrb	r3, [r2, #0]
 800e7ec:	b123      	cbz	r3, 800e7f8 <rmw_create_node+0x20>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e7f2:	4660      	mov	r0, ip
 800e7f4:	f7ff bf70 	b.w	800e6d8 <create_node>
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	4770      	bx	lr

0800e7fc <rmw_destroy_node>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	b328      	cbz	r0, 800e84c <rmw_destroy_node+0x50>
 800e800:	4607      	mov	r7, r0
 800e802:	6800      	ldr	r0, [r0, #0]
 800e804:	b120      	cbz	r0, 800e810 <rmw_destroy_node+0x14>
 800e806:	4b37      	ldr	r3, [pc, #220]	@ (800e8e4 <rmw_destroy_node+0xe8>)
 800e808:	6819      	ldr	r1, [r3, #0]
 800e80a:	f7f1 fd19 	bl	8000240 <strcmp>
 800e80e:	b9e8      	cbnz	r0, 800e84c <rmw_destroy_node+0x50>
 800e810:	687d      	ldr	r5, [r7, #4]
 800e812:	b1dd      	cbz	r5, 800e84c <rmw_destroy_node+0x50>
 800e814:	4b34      	ldr	r3, [pc, #208]	@ (800e8e8 <rmw_destroy_node+0xec>)
 800e816:	681c      	ldr	r4, [r3, #0]
 800e818:	2c00      	cmp	r4, #0
 800e81a:	d060      	beq.n	800e8de <rmw_destroy_node+0xe2>
 800e81c:	2600      	movs	r6, #0
 800e81e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e822:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e826:	429d      	cmp	r5, r3
 800e828:	d013      	beq.n	800e852 <rmw_destroy_node+0x56>
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	d1f7      	bne.n	800e81e <rmw_destroy_node+0x22>
 800e82e:	4b2f      	ldr	r3, [pc, #188]	@ (800e8ec <rmw_destroy_node+0xf0>)
 800e830:	681c      	ldr	r4, [r3, #0]
 800e832:	b1c4      	cbz	r4, 800e866 <rmw_destroy_node+0x6a>
 800e834:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e838:	6a0b      	ldr	r3, [r1, #32]
 800e83a:	429d      	cmp	r5, r3
 800e83c:	d1f9      	bne.n	800e832 <rmw_destroy_node+0x36>
 800e83e:	317c      	adds	r1, #124	@ 0x7c
 800e840:	4638      	mov	r0, r7
 800e842:	f000 fa53 	bl	800ecec <rmw_destroy_subscription>
 800e846:	2801      	cmp	r0, #1
 800e848:	4606      	mov	r6, r0
 800e84a:	d1f2      	bne.n	800e832 <rmw_destroy_node+0x36>
 800e84c:	2601      	movs	r6, #1
 800e84e:	4630      	mov	r0, r6
 800e850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e852:	3184      	adds	r1, #132	@ 0x84
 800e854:	4638      	mov	r0, r7
 800e856:	f000 f9b1 	bl	800ebbc <rmw_destroy_publisher>
 800e85a:	2801      	cmp	r0, #1
 800e85c:	4606      	mov	r6, r0
 800e85e:	d0f5      	beq.n	800e84c <rmw_destroy_node+0x50>
 800e860:	2c00      	cmp	r4, #0
 800e862:	d1dc      	bne.n	800e81e <rmw_destroy_node+0x22>
 800e864:	e7e3      	b.n	800e82e <rmw_destroy_node+0x32>
 800e866:	4b22      	ldr	r3, [pc, #136]	@ (800e8f0 <rmw_destroy_node+0xf4>)
 800e868:	681c      	ldr	r4, [r3, #0]
 800e86a:	b16c      	cbz	r4, 800e888 <rmw_destroy_node+0x8c>
 800e86c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e870:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e872:	429d      	cmp	r5, r3
 800e874:	d1f9      	bne.n	800e86a <rmw_destroy_node+0x6e>
 800e876:	317c      	adds	r1, #124	@ 0x7c
 800e878:	4638      	mov	r0, r7
 800e87a:	f000 f9f3 	bl	800ec64 <rmw_destroy_service>
 800e87e:	2801      	cmp	r0, #1
 800e880:	4606      	mov	r6, r0
 800e882:	d0e3      	beq.n	800e84c <rmw_destroy_node+0x50>
 800e884:	2c00      	cmp	r4, #0
 800e886:	d1f1      	bne.n	800e86c <rmw_destroy_node+0x70>
 800e888:	4b1a      	ldr	r3, [pc, #104]	@ (800e8f4 <rmw_destroy_node+0xf8>)
 800e88a:	681c      	ldr	r4, [r3, #0]
 800e88c:	b16c      	cbz	r4, 800e8aa <rmw_destroy_node+0xae>
 800e88e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e892:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e894:	429d      	cmp	r5, r3
 800e896:	d1f9      	bne.n	800e88c <rmw_destroy_node+0x90>
 800e898:	317c      	adds	r1, #124	@ 0x7c
 800e89a:	4638      	mov	r0, r7
 800e89c:	f004 fdf0 	bl	8013480 <rmw_destroy_client>
 800e8a0:	2801      	cmp	r0, #1
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	d0d2      	beq.n	800e84c <rmw_destroy_node+0x50>
 800e8a6:	2c00      	cmp	r4, #0
 800e8a8:	d1f1      	bne.n	800e88e <rmw_destroy_node+0x92>
 800e8aa:	6928      	ldr	r0, [r5, #16]
 800e8ac:	696a      	ldr	r2, [r5, #20]
 800e8ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e8b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8b6:	6819      	ldr	r1, [r3, #0]
 800e8b8:	f000 ff8c 	bl	800f7d4 <uxr_buffer_delete_entity>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	6928      	ldr	r0, [r5, #16]
 800e8c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e8c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e8c8:	f000 fcae 	bl	800f228 <run_xrce_session>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	bf08      	it	eq
 800e8d4:	2602      	moveq	r6, #2
 800e8d6:	f000 fbd1 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e8da:	4630      	mov	r0, r6
 800e8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8de:	4626      	mov	r6, r4
 800e8e0:	e7a5      	b.n	800e82e <rmw_destroy_node+0x32>
 800e8e2:	bf00      	nop
 800e8e4:	0801899c 	.word	0x0801899c
 800e8e8:	20012464 	.word	0x20012464
 800e8ec:	200124a4 	.word	0x200124a4
 800e8f0:	20012474 	.word	0x20012474
 800e8f4:	2000db84 	.word	0x2000db84

0800e8f8 <rmw_node_get_graph_guard_condition>:
 800e8f8:	6843      	ldr	r3, [r0, #4]
 800e8fa:	6918      	ldr	r0, [r3, #16]
 800e8fc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop

0800e904 <flush_session>:
 800e904:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e906:	f001 be85 	b.w	8010614 <uxr_run_session_until_confirm_delivery>
 800e90a:	bf00      	nop

0800e90c <rmw_publish>:
 800e90c:	2800      	cmp	r0, #0
 800e90e:	d053      	beq.n	800e9b8 <rmw_publish+0xac>
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	460d      	mov	r5, r1
 800e914:	b08e      	sub	sp, #56	@ 0x38
 800e916:	2900      	cmp	r1, #0
 800e918:	d04b      	beq.n	800e9b2 <rmw_publish+0xa6>
 800e91a:	4604      	mov	r4, r0
 800e91c:	6800      	ldr	r0, [r0, #0]
 800e91e:	f000 fcfd 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800e922:	2800      	cmp	r0, #0
 800e924:	d045      	beq.n	800e9b2 <rmw_publish+0xa6>
 800e926:	6866      	ldr	r6, [r4, #4]
 800e928:	2e00      	cmp	r6, #0
 800e92a:	d042      	beq.n	800e9b2 <rmw_publish+0xa6>
 800e92c:	69b4      	ldr	r4, [r6, #24]
 800e92e:	4628      	mov	r0, r5
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	4798      	blx	r3
 800e934:	69f3      	ldr	r3, [r6, #28]
 800e936:	9005      	str	r0, [sp, #20]
 800e938:	b113      	cbz	r3, 800e940 <rmw_publish+0x34>
 800e93a:	a805      	add	r0, sp, #20
 800e93c:	4798      	blx	r3
 800e93e:	9805      	ldr	r0, [sp, #20]
 800e940:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	9000      	str	r0, [sp, #0]
 800e948:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e94c:	6972      	ldr	r2, [r6, #20]
 800e94e:	ab06      	add	r3, sp, #24
 800e950:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e952:	f002 fc5d 	bl	8011210 <uxr_prepare_output_stream>
 800e956:	b1d8      	cbz	r0, 800e990 <rmw_publish+0x84>
 800e958:	68a3      	ldr	r3, [r4, #8]
 800e95a:	a906      	add	r1, sp, #24
 800e95c:	4628      	mov	r0, r5
 800e95e:	4798      	blx	r3
 800e960:	6a33      	ldr	r3, [r6, #32]
 800e962:	4604      	mov	r4, r0
 800e964:	b10b      	cbz	r3, 800e96a <rmw_publish+0x5e>
 800e966:	a806      	add	r0, sp, #24
 800e968:	4798      	blx	r3
 800e96a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e96e:	2b01      	cmp	r3, #1
 800e970:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e974:	d022      	beq.n	800e9bc <rmw_publish+0xb0>
 800e976:	6918      	ldr	r0, [r3, #16]
 800e978:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e97a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e97e:	f001 fe49 	bl	8010614 <uxr_run_session_until_confirm_delivery>
 800e982:	4020      	ands	r0, r4
 800e984:	b2c4      	uxtb	r4, r0
 800e986:	f084 0001 	eor.w	r0, r4, #1
 800e98a:	b2c0      	uxtb	r0, r0
 800e98c:	b00e      	add	sp, #56	@ 0x38
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	9b05      	ldr	r3, [sp, #20]
 800e998:	9602      	str	r6, [sp, #8]
 800e99a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	4b09      	ldr	r3, [pc, #36]	@ (800e9c8 <rmw_publish+0xbc>)
 800e9a2:	9301      	str	r3, [sp, #4]
 800e9a4:	ab06      	add	r3, sp, #24
 800e9a6:	6972      	ldr	r2, [r6, #20]
 800e9a8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e9aa:	f002 fc61 	bl	8011270 <uxr_prepare_output_stream_fragmented>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d1d2      	bne.n	800e958 <rmw_publish+0x4c>
 800e9b2:	2001      	movs	r0, #1
 800e9b4:	b00e      	add	sp, #56	@ 0x38
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	4770      	bx	lr
 800e9bc:	6918      	ldr	r0, [r3, #16]
 800e9be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9c2:	f001 faa7 	bl	800ff14 <uxr_flash_output_streams>
 800e9c6:	e7de      	b.n	800e986 <rmw_publish+0x7a>
 800e9c8:	0800e905 	.word	0x0800e905

0800e9cc <rmw_create_publisher>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	b087      	sub	sp, #28
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f000 80d2 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800e9d8:	460e      	mov	r6, r1
 800e9da:	2900      	cmp	r1, #0
 800e9dc:	f000 80ce 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	6800      	ldr	r0, [r0, #0]
 800e9e4:	4615      	mov	r5, r2
 800e9e6:	461f      	mov	r7, r3
 800e9e8:	f000 fc98 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800e9ec:	f080 0001 	eor.w	r0, r0, #1
 800e9f0:	b2c0      	uxtb	r0, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f040 80c2 	bne.w	800eb7c <rmw_create_publisher+0x1b0>
 800e9f8:	2d00      	cmp	r5, #0
 800e9fa:	f000 80bf 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800e9fe:	782b      	ldrb	r3, [r5, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 80bb 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800ea06:	2f00      	cmp	r7, #0
 800ea08:	f000 80b8 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800ea0c:	485e      	ldr	r0, [pc, #376]	@ (800eb88 <rmw_create_publisher+0x1bc>)
 800ea0e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ea12:	f004 fd11 	bl	8013438 <get_memory>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f000 80b0 	beq.w	800eb7c <rmw_create_publisher+0x1b0>
 800ea1c:	6884      	ldr	r4, [r0, #8]
 800ea1e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800ea22:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800ea26:	f004 fd6f 	bl	8013508 <rmw_get_implementation_identifier>
 800ea2a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800ea2e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7f1 fc0e 	bl	8000254 <strlen>
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800ea3e:	283c      	cmp	r0, #60	@ 0x3c
 800ea40:	f200 808f 	bhi.w	800eb62 <rmw_create_publisher+0x196>
 800ea44:	462b      	mov	r3, r5
 800ea46:	4a51      	ldr	r2, [pc, #324]	@ (800eb8c <rmw_create_publisher+0x1c0>)
 800ea48:	213c      	movs	r1, #60	@ 0x3c
 800ea4a:	4650      	mov	r0, sl
 800ea4c:	f008 fa6e 	bl	8016f2c <sniprintf>
 800ea50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea54:	4639      	mov	r1, r7
 800ea56:	2250      	movs	r2, #80	@ 0x50
 800ea58:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ea5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ea5e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ea62:	f008 fc90 	bl	8017386 <memcpy>
 800ea66:	7a3b      	ldrb	r3, [r7, #8]
 800ea68:	4630      	mov	r0, r6
 800ea6a:	4949      	ldr	r1, [pc, #292]	@ (800eb90 <rmw_create_publisher+0x1c4>)
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea72:	bf0c      	ite	eq
 800ea74:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ea78:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ea7c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ea7e:	2300      	movs	r3, #0
 800ea80:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ea84:	f000 fc58 	bl	800f338 <get_message_typesupport_handle>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d06a      	beq.n	800eb62 <rmw_create_publisher+0x196>
 800ea8c:	6842      	ldr	r2, [r0, #4]
 800ea8e:	61a2      	str	r2, [r4, #24]
 800ea90:	2a00      	cmp	r2, #0
 800ea92:	d066      	beq.n	800eb62 <rmw_create_publisher+0x196>
 800ea94:	4629      	mov	r1, r5
 800ea96:	463b      	mov	r3, r7
 800ea98:	4648      	mov	r0, r9
 800ea9a:	f004 ffcb 	bl	8013a34 <create_topic>
 800ea9e:	6260      	str	r0, [r4, #36]	@ 0x24
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d062      	beq.n	800eb6a <rmw_create_publisher+0x19e>
 800eaa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaa8:	2103      	movs	r1, #3
 800eaaa:	2506      	movs	r5, #6
 800eaac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eab0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800eab4:	1c42      	adds	r2, r0, #1
 800eab6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800eaba:	f000 ffe5 	bl	800fa88 <uxr_object_id>
 800eabe:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800eac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eac6:	6120      	str	r0, [r4, #16]
 800eac8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800eacc:	6910      	ldr	r0, [r2, #16]
 800eace:	9500      	str	r5, [sp, #0]
 800ead0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ead4:	6819      	ldr	r1, [r3, #0]
 800ead6:	6922      	ldr	r2, [r4, #16]
 800ead8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eadc:	f000 ff2e 	bl	800f93c <uxr_buffer_create_publisher_bin>
 800eae0:	4602      	mov	r2, r0
 800eae2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eae6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eaea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eaee:	f000 fb9b 	bl	800f228 <run_xrce_session>
 800eaf2:	b3b0      	cbz	r0, 800eb62 <rmw_create_publisher+0x196>
 800eaf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaf8:	2105      	movs	r1, #5
 800eafa:	f10d 0a10 	add.w	sl, sp, #16
 800eafe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb02:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800eb06:	1c42      	adds	r2, r0, #1
 800eb08:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800eb0c:	f000 ffbc 	bl	800fa88 <uxr_object_id>
 800eb10:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb14:	4639      	mov	r1, r7
 800eb16:	6160      	str	r0, [r4, #20]
 800eb18:	691e      	ldr	r6, [r3, #16]
 800eb1a:	4650      	mov	r0, sl
 800eb1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb20:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800eb24:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800eb28:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800eb2c:	f000 fb98 	bl	800f260 <convert_qos_profile>
 800eb30:	9503      	str	r5, [sp, #12]
 800eb32:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800eb36:	9001      	str	r0, [sp, #4]
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eb3e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eb4a:	f000 ff27 	bl	800f99c <uxr_buffer_create_datawriter_bin>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eb54:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb58:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb5c:	f000 fb64 	bl	800f228 <run_xrce_session>
 800eb60:	b970      	cbnz	r0, 800eb80 <rmw_create_publisher+0x1b4>
 800eb62:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb64:	b108      	cbz	r0, 800eb6a <rmw_create_publisher+0x19e>
 800eb66:	f000 faf9 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 800eb6a:	4640      	mov	r0, r8
 800eb6c:	f04f 0800 	mov.w	r8, #0
 800eb70:	f000 fa9c 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800eb74:	4640      	mov	r0, r8
 800eb76:	b007      	add	sp, #28
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7c:	f04f 0800 	mov.w	r8, #0
 800eb80:	4640      	mov	r0, r8
 800eb82:	b007      	add	sp, #28
 800eb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb88:	20012464 	.word	0x20012464
 800eb8c:	0801862c 	.word	0x0801862c
 800eb90:	080185f8 	.word	0x080185f8

0800eb94 <rmw_publisher_get_actual_qos>:
 800eb94:	b178      	cbz	r0, 800ebb6 <rmw_publisher_get_actual_qos+0x22>
 800eb96:	b510      	push	{r4, lr}
 800eb98:	fab1 f481 	clz	r4, r1
 800eb9c:	0964      	lsrs	r4, r4, #5
 800eb9e:	b141      	cbz	r1, 800ebb2 <rmw_publisher_get_actual_qos+0x1e>
 800eba0:	6843      	ldr	r3, [r0, #4]
 800eba2:	2250      	movs	r2, #80	@ 0x50
 800eba4:	4608      	mov	r0, r1
 800eba6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ebaa:	f008 fbec 	bl	8017386 <memcpy>
 800ebae:	4620      	mov	r0, r4
 800ebb0:	bd10      	pop	{r4, pc}
 800ebb2:	200b      	movs	r0, #11
 800ebb4:	bd10      	pop	{r4, pc}
 800ebb6:	200b      	movs	r0, #11
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop

0800ebbc <rmw_destroy_publisher>:
 800ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc0:	b128      	cbz	r0, 800ebce <rmw_destroy_publisher+0x12>
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	6800      	ldr	r0, [r0, #0]
 800ebc6:	460d      	mov	r5, r1
 800ebc8:	f000 fba8 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ebcc:	b918      	cbnz	r0, 800ebd6 <rmw_destroy_publisher+0x1a>
 800ebce:	2401      	movs	r4, #1
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd6:	6863      	ldr	r3, [r4, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d0f8      	beq.n	800ebce <rmw_destroy_publisher+0x12>
 800ebdc:	fab5 f485 	clz	r4, r5
 800ebe0:	0964      	lsrs	r4, r4, #5
 800ebe2:	2d00      	cmp	r5, #0
 800ebe4:	d0f3      	beq.n	800ebce <rmw_destroy_publisher+0x12>
 800ebe6:	6828      	ldr	r0, [r5, #0]
 800ebe8:	f000 fb98 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d0ee      	beq.n	800ebce <rmw_destroy_publisher+0x12>
 800ebf0:	686e      	ldr	r6, [r5, #4]
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	d0eb      	beq.n	800ebce <rmw_destroy_publisher+0x12>
 800ebf6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800ebf8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 800ebfc:	f004 ff6a 	bl	8013ad4 <destroy_topic>
 800ec00:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ec04:	6972      	ldr	r2, [r6, #20]
 800ec06:	6918      	ldr	r0, [r3, #16]
 800ec08:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec10:	6819      	ldr	r1, [r3, #0]
 800ec12:	f000 fddf 	bl	800f7d4 <uxr_buffer_delete_entity>
 800ec16:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ec1a:	4680      	mov	r8, r0
 800ec1c:	6932      	ldr	r2, [r6, #16]
 800ec1e:	6918      	ldr	r0, [r3, #16]
 800ec20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec28:	6819      	ldr	r1, [r3, #0]
 800ec2a:	f000 fdd3 	bl	800f7d4 <uxr_buffer_delete_entity>
 800ec2e:	4606      	mov	r6, r0
 800ec30:	6938      	ldr	r0, [r7, #16]
 800ec32:	4642      	mov	r2, r8
 800ec34:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec3c:	f000 faf4 	bl	800f228 <run_xrce_session>
 800ec40:	693f      	ldr	r7, [r7, #16]
 800ec42:	4632      	mov	r2, r6
 800ec44:	4606      	mov	r6, r0
 800ec46:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ec50:	f000 faea 	bl	800f228 <run_xrce_session>
 800ec54:	b126      	cbz	r6, 800ec60 <rmw_destroy_publisher+0xa4>
 800ec56:	b118      	cbz	r0, 800ec60 <rmw_destroy_publisher+0xa4>
 800ec58:	4628      	mov	r0, r5
 800ec5a:	f000 fa27 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800ec5e:	e7b7      	b.n	800ebd0 <rmw_destroy_publisher+0x14>
 800ec60:	2402      	movs	r4, #2
 800ec62:	e7f9      	b.n	800ec58 <rmw_destroy_publisher+0x9c>

0800ec64 <rmw_destroy_service>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	b128      	cbz	r0, 800ec74 <rmw_destroy_service+0x10>
 800ec68:	4604      	mov	r4, r0
 800ec6a:	6800      	ldr	r0, [r0, #0]
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	f000 fb55 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ec72:	b910      	cbnz	r0, 800ec7a <rmw_destroy_service+0x16>
 800ec74:	2401      	movs	r4, #1
 800ec76:	4620      	mov	r0, r4
 800ec78:	bd70      	pop	{r4, r5, r6, pc}
 800ec7a:	6863      	ldr	r3, [r4, #4]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d0f9      	beq.n	800ec74 <rmw_destroy_service+0x10>
 800ec80:	2d00      	cmp	r5, #0
 800ec82:	d0f7      	beq.n	800ec74 <rmw_destroy_service+0x10>
 800ec84:	6828      	ldr	r0, [r5, #0]
 800ec86:	f000 fb49 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0f2      	beq.n	800ec74 <rmw_destroy_service+0x10>
 800ec8e:	686e      	ldr	r6, [r5, #4]
 800ec90:	2e00      	cmp	r6, #0
 800ec92:	d0ef      	beq.n	800ec74 <rmw_destroy_service+0x10>
 800ec94:	6864      	ldr	r4, [r4, #4]
 800ec96:	6932      	ldr	r2, [r6, #16]
 800ec98:	6920      	ldr	r0, [r4, #16]
 800ec9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eca2:	6819      	ldr	r1, [r3, #0]
 800eca4:	f000 ff20 	bl	800fae8 <uxr_buffer_cancel_data>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	6920      	ldr	r0, [r4, #16]
 800ecac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ecb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecb4:	f000 fab8 	bl	800f228 <run_xrce_session>
 800ecb8:	6920      	ldr	r0, [r4, #16]
 800ecba:	6932      	ldr	r2, [r6, #16]
 800ecbc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecc4:	6819      	ldr	r1, [r3, #0]
 800ecc6:	f000 fd85 	bl	800f7d4 <uxr_buffer_delete_entity>
 800ecca:	4602      	mov	r2, r0
 800eccc:	6920      	ldr	r0, [r4, #16]
 800ecce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ecd2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecd6:	f000 faa7 	bl	800f228 <run_xrce_session>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	bf14      	ite	ne
 800ece2:	2400      	movne	r4, #0
 800ece4:	2402      	moveq	r4, #2
 800ece6:	f000 fa0d 	bl	800f104 <rmw_uxrce_fini_service_memory>
 800ecea:	e7c4      	b.n	800ec76 <rmw_destroy_service+0x12>

0800ecec <rmw_destroy_subscription>:
 800ecec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf0:	b128      	cbz	r0, 800ecfe <rmw_destroy_subscription+0x12>
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	6800      	ldr	r0, [r0, #0]
 800ecf6:	460d      	mov	r5, r1
 800ecf8:	f000 fb10 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ecfc:	b918      	cbnz	r0, 800ed06 <rmw_destroy_subscription+0x1a>
 800ecfe:	2401      	movs	r4, #1
 800ed00:	4620      	mov	r0, r4
 800ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed06:	6863      	ldr	r3, [r4, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0f8      	beq.n	800ecfe <rmw_destroy_subscription+0x12>
 800ed0c:	fab5 f485 	clz	r4, r5
 800ed10:	0964      	lsrs	r4, r4, #5
 800ed12:	2d00      	cmp	r5, #0
 800ed14:	d0f3      	beq.n	800ecfe <rmw_destroy_subscription+0x12>
 800ed16:	6828      	ldr	r0, [r5, #0]
 800ed18:	f000 fb00 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d0ee      	beq.n	800ecfe <rmw_destroy_subscription+0x12>
 800ed20:	686e      	ldr	r6, [r5, #4]
 800ed22:	2e00      	cmp	r6, #0
 800ed24:	d0eb      	beq.n	800ecfe <rmw_destroy_subscription+0x12>
 800ed26:	6a37      	ldr	r7, [r6, #32]
 800ed28:	6972      	ldr	r2, [r6, #20]
 800ed2a:	6938      	ldr	r0, [r7, #16]
 800ed2c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed34:	6819      	ldr	r1, [r3, #0]
 800ed36:	f000 fed7 	bl	800fae8 <uxr_buffer_cancel_data>
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	6938      	ldr	r0, [r7, #16]
 800ed3e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed42:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed46:	f000 fa6f 	bl	800f228 <run_xrce_session>
 800ed4a:	69f0      	ldr	r0, [r6, #28]
 800ed4c:	f004 fec2 	bl	8013ad4 <destroy_topic>
 800ed50:	6a33      	ldr	r3, [r6, #32]
 800ed52:	6972      	ldr	r2, [r6, #20]
 800ed54:	6918      	ldr	r0, [r3, #16]
 800ed56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed5e:	6819      	ldr	r1, [r3, #0]
 800ed60:	f000 fd38 	bl	800f7d4 <uxr_buffer_delete_entity>
 800ed64:	6a33      	ldr	r3, [r6, #32]
 800ed66:	4680      	mov	r8, r0
 800ed68:	6932      	ldr	r2, [r6, #16]
 800ed6a:	6918      	ldr	r0, [r3, #16]
 800ed6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	f000 fd2d 	bl	800f7d4 <uxr_buffer_delete_entity>
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	6938      	ldr	r0, [r7, #16]
 800ed7e:	4642      	mov	r2, r8
 800ed80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed88:	f000 fa4e 	bl	800f228 <run_xrce_session>
 800ed8c:	693f      	ldr	r7, [r7, #16]
 800ed8e:	4632      	mov	r2, r6
 800ed90:	4606      	mov	r6, r0
 800ed92:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ed96:	4638      	mov	r0, r7
 800ed98:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed9c:	f000 fa44 	bl	800f228 <run_xrce_session>
 800eda0:	b126      	cbz	r6, 800edac <rmw_destroy_subscription+0xc0>
 800eda2:	b118      	cbz	r0, 800edac <rmw_destroy_subscription+0xc0>
 800eda4:	4628      	mov	r0, r5
 800eda6:	f000 f997 	bl	800f0d8 <rmw_uxrce_fini_subscription_memory>
 800edaa:	e7a9      	b.n	800ed00 <rmw_destroy_subscription+0x14>
 800edac:	2402      	movs	r4, #2
 800edae:	e7f9      	b.n	800eda4 <rmw_destroy_subscription+0xb8>

0800edb0 <rmw_uxrce_init_service_memory>:
 800edb0:	b1e2      	cbz	r2, 800edec <rmw_uxrce_init_service_memory+0x3c>
 800edb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	7b05      	ldrb	r5, [r0, #12]
 800edb8:	4606      	mov	r6, r0
 800edba:	b9ad      	cbnz	r5, 800ede8 <rmw_uxrce_init_service_memory+0x38>
 800edbc:	23c8      	movs	r3, #200	@ 0xc8
 800edbe:	4617      	mov	r7, r2
 800edc0:	460c      	mov	r4, r1
 800edc2:	46a8      	mov	r8, r5
 800edc4:	6083      	str	r3, [r0, #8]
 800edc6:	f240 1301 	movw	r3, #257	@ 0x101
 800edca:	e9c0 5500 	strd	r5, r5, [r0]
 800edce:	8183      	strh	r3, [r0, #12]
 800edd0:	3501      	adds	r5, #1
 800edd2:	4621      	mov	r1, r4
 800edd4:	4630      	mov	r0, r6
 800edd6:	f004 fb3f 	bl	8013458 <put_memory>
 800edda:	42af      	cmp	r7, r5
 800eddc:	60a4      	str	r4, [r4, #8]
 800edde:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ede2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ede6:	d1f3      	bne.n	800edd0 <rmw_uxrce_init_service_memory+0x20>
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop

0800edf0 <rmw_uxrce_init_client_memory>:
 800edf0:	b1e2      	cbz	r2, 800ee2c <rmw_uxrce_init_client_memory+0x3c>
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	7b05      	ldrb	r5, [r0, #12]
 800edf8:	4606      	mov	r6, r0
 800edfa:	b9ad      	cbnz	r5, 800ee28 <rmw_uxrce_init_client_memory+0x38>
 800edfc:	23c8      	movs	r3, #200	@ 0xc8
 800edfe:	4617      	mov	r7, r2
 800ee00:	460c      	mov	r4, r1
 800ee02:	46a8      	mov	r8, r5
 800ee04:	6083      	str	r3, [r0, #8]
 800ee06:	f240 1301 	movw	r3, #257	@ 0x101
 800ee0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee0e:	8183      	strh	r3, [r0, #12]
 800ee10:	3501      	adds	r5, #1
 800ee12:	4621      	mov	r1, r4
 800ee14:	4630      	mov	r0, r6
 800ee16:	f004 fb1f 	bl	8013458 <put_memory>
 800ee1a:	42af      	cmp	r7, r5
 800ee1c:	60a4      	str	r4, [r4, #8]
 800ee1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee22:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ee26:	d1f3      	bne.n	800ee10 <rmw_uxrce_init_client_memory+0x20>
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <rmw_uxrce_init_publisher_memory>:
 800ee30:	b1e2      	cbz	r2, 800ee6c <rmw_uxrce_init_publisher_memory+0x3c>
 800ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee36:	7b05      	ldrb	r5, [r0, #12]
 800ee38:	4606      	mov	r6, r0
 800ee3a:	b9ad      	cbnz	r5, 800ee68 <rmw_uxrce_init_publisher_memory+0x38>
 800ee3c:	23d8      	movs	r3, #216	@ 0xd8
 800ee3e:	4617      	mov	r7, r2
 800ee40:	460c      	mov	r4, r1
 800ee42:	46a8      	mov	r8, r5
 800ee44:	6083      	str	r3, [r0, #8]
 800ee46:	f240 1301 	movw	r3, #257	@ 0x101
 800ee4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee4e:	8183      	strh	r3, [r0, #12]
 800ee50:	3501      	adds	r5, #1
 800ee52:	4621      	mov	r1, r4
 800ee54:	4630      	mov	r0, r6
 800ee56:	f004 faff 	bl	8013458 <put_memory>
 800ee5a:	42af      	cmp	r7, r5
 800ee5c:	60a4      	str	r4, [r4, #8]
 800ee5e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee62:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ee66:	d1f3      	bne.n	800ee50 <rmw_uxrce_init_publisher_memory+0x20>
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <rmw_uxrce_init_subscription_memory>:
 800ee70:	b1e2      	cbz	r2, 800eeac <rmw_uxrce_init_subscription_memory+0x3c>
 800ee72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee76:	7b05      	ldrb	r5, [r0, #12]
 800ee78:	4606      	mov	r6, r0
 800ee7a:	b9ad      	cbnz	r5, 800eea8 <rmw_uxrce_init_subscription_memory+0x38>
 800ee7c:	23d8      	movs	r3, #216	@ 0xd8
 800ee7e:	4617      	mov	r7, r2
 800ee80:	460c      	mov	r4, r1
 800ee82:	46a8      	mov	r8, r5
 800ee84:	6083      	str	r3, [r0, #8]
 800ee86:	f240 1301 	movw	r3, #257	@ 0x101
 800ee8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee8e:	8183      	strh	r3, [r0, #12]
 800ee90:	3501      	adds	r5, #1
 800ee92:	4621      	mov	r1, r4
 800ee94:	4630      	mov	r0, r6
 800ee96:	f004 fadf 	bl	8013458 <put_memory>
 800ee9a:	42af      	cmp	r7, r5
 800ee9c:	60a4      	str	r4, [r4, #8]
 800ee9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eea2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800eea6:	d1f3      	bne.n	800ee90 <rmw_uxrce_init_subscription_memory+0x20>
 800eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <rmw_uxrce_init_node_memory>:
 800eeb0:	b1e2      	cbz	r2, 800eeec <rmw_uxrce_init_node_memory+0x3c>
 800eeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb6:	7b05      	ldrb	r5, [r0, #12]
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b9ad      	cbnz	r5, 800eee8 <rmw_uxrce_init_node_memory+0x38>
 800eebc:	23a4      	movs	r3, #164	@ 0xa4
 800eebe:	4617      	mov	r7, r2
 800eec0:	460c      	mov	r4, r1
 800eec2:	46a8      	mov	r8, r5
 800eec4:	6083      	str	r3, [r0, #8]
 800eec6:	f240 1301 	movw	r3, #257	@ 0x101
 800eeca:	e9c0 5500 	strd	r5, r5, [r0]
 800eece:	8183      	strh	r3, [r0, #12]
 800eed0:	3501      	adds	r5, #1
 800eed2:	4621      	mov	r1, r4
 800eed4:	4630      	mov	r0, r6
 800eed6:	f004 fabf 	bl	8013458 <put_memory>
 800eeda:	42af      	cmp	r7, r5
 800eedc:	60a4      	str	r4, [r4, #8]
 800eede:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eee2:	f804 8c98 	strb.w	r8, [r4, #-152]
 800eee6:	d1f3      	bne.n	800eed0 <rmw_uxrce_init_node_memory+0x20>
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <rmw_uxrce_init_session_memory>:
 800eef0:	b1ea      	cbz	r2, 800ef2e <rmw_uxrce_init_session_memory+0x3e>
 800eef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef6:	7b05      	ldrb	r5, [r0, #12]
 800eef8:	4606      	mov	r6, r0
 800eefa:	b9b5      	cbnz	r5, 800ef2a <rmw_uxrce_init_session_memory+0x3a>
 800eefc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef00:	f240 1301 	movw	r3, #257	@ 0x101
 800ef04:	4617      	mov	r7, r2
 800ef06:	460c      	mov	r4, r1
 800ef08:	46a9      	mov	r9, r5
 800ef0a:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef0e:	8183      	strh	r3, [r0, #12]
 800ef10:	e9c0 5500 	strd	r5, r5, [r0]
 800ef14:	3501      	adds	r5, #1
 800ef16:	4621      	mov	r1, r4
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f004 fa9d 	bl	8013458 <put_memory>
 800ef1e:	42af      	cmp	r7, r5
 800ef20:	60a4      	str	r4, [r4, #8]
 800ef22:	f884 900c 	strb.w	r9, [r4, #12]
 800ef26:	4444      	add	r4, r8
 800ef28:	d1f4      	bne.n	800ef14 <rmw_uxrce_init_session_memory+0x24>
 800ef2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	4770      	bx	lr

0800ef30 <rmw_uxrce_init_topic_memory>:
 800ef30:	b1e2      	cbz	r2, 800ef6c <rmw_uxrce_init_topic_memory+0x3c>
 800ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef36:	7b05      	ldrb	r5, [r0, #12]
 800ef38:	4606      	mov	r6, r0
 800ef3a:	b9ad      	cbnz	r5, 800ef68 <rmw_uxrce_init_topic_memory+0x38>
 800ef3c:	231c      	movs	r3, #28
 800ef3e:	4617      	mov	r7, r2
 800ef40:	460c      	mov	r4, r1
 800ef42:	46a8      	mov	r8, r5
 800ef44:	6083      	str	r3, [r0, #8]
 800ef46:	f240 1301 	movw	r3, #257	@ 0x101
 800ef4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef4e:	8183      	strh	r3, [r0, #12]
 800ef50:	3501      	adds	r5, #1
 800ef52:	4621      	mov	r1, r4
 800ef54:	4630      	mov	r0, r6
 800ef56:	f004 fa7f 	bl	8013458 <put_memory>
 800ef5a:	42af      	cmp	r7, r5
 800ef5c:	60a4      	str	r4, [r4, #8]
 800ef5e:	f104 041c 	add.w	r4, r4, #28
 800ef62:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ef66:	d1f3      	bne.n	800ef50 <rmw_uxrce_init_topic_memory+0x20>
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop

0800ef70 <rmw_uxrce_init_static_input_buffer_memory>:
 800ef70:	b1ea      	cbz	r2, 800efae <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	7b05      	ldrb	r5, [r0, #12]
 800ef78:	4606      	mov	r6, r0
 800ef7a:	b9b5      	cbnz	r5, 800efaa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef7c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef80:	4617      	mov	r7, r2
 800ef82:	460c      	mov	r4, r1
 800ef84:	46a8      	mov	r8, r5
 800ef86:	6083      	str	r3, [r0, #8]
 800ef88:	f240 1301 	movw	r3, #257	@ 0x101
 800ef8c:	e9c0 5500 	strd	r5, r5, [r0]
 800ef90:	8183      	strh	r3, [r0, #12]
 800ef92:	3501      	adds	r5, #1
 800ef94:	4621      	mov	r1, r4
 800ef96:	4630      	mov	r0, r6
 800ef98:	f004 fa5e 	bl	8013458 <put_memory>
 800ef9c:	42af      	cmp	r7, r5
 800ef9e:	60a4      	str	r4, [r4, #8]
 800efa0:	f884 800c 	strb.w	r8, [r4, #12]
 800efa4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800efa8:	d1f3      	bne.n	800ef92 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	4770      	bx	lr

0800efb0 <rmw_uxrce_init_init_options_impl_memory>:
 800efb0:	b1e2      	cbz	r2, 800efec <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	7b05      	ldrb	r5, [r0, #12]
 800efb8:	4606      	mov	r6, r0
 800efba:	b9ad      	cbnz	r5, 800efe8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800efbc:	232c      	movs	r3, #44	@ 0x2c
 800efbe:	4617      	mov	r7, r2
 800efc0:	460c      	mov	r4, r1
 800efc2:	46a8      	mov	r8, r5
 800efc4:	6083      	str	r3, [r0, #8]
 800efc6:	f240 1301 	movw	r3, #257	@ 0x101
 800efca:	e9c0 5500 	strd	r5, r5, [r0]
 800efce:	8183      	strh	r3, [r0, #12]
 800efd0:	3501      	adds	r5, #1
 800efd2:	4621      	mov	r1, r4
 800efd4:	4630      	mov	r0, r6
 800efd6:	f004 fa3f 	bl	8013458 <put_memory>
 800efda:	42af      	cmp	r7, r5
 800efdc:	60a4      	str	r4, [r4, #8]
 800efde:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800efe2:	f804 8c20 	strb.w	r8, [r4, #-32]
 800efe6:	d1f3      	bne.n	800efd0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop

0800eff0 <rmw_uxrce_init_wait_set_memory>:
 800eff0:	b1e2      	cbz	r2, 800f02c <rmw_uxrce_init_wait_set_memory+0x3c>
 800eff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	7b05      	ldrb	r5, [r0, #12]
 800eff8:	4606      	mov	r6, r0
 800effa:	b9ad      	cbnz	r5, 800f028 <rmw_uxrce_init_wait_set_memory+0x38>
 800effc:	231c      	movs	r3, #28
 800effe:	4617      	mov	r7, r2
 800f000:	460c      	mov	r4, r1
 800f002:	46a8      	mov	r8, r5
 800f004:	6083      	str	r3, [r0, #8]
 800f006:	f240 1301 	movw	r3, #257	@ 0x101
 800f00a:	e9c0 5500 	strd	r5, r5, [r0]
 800f00e:	8183      	strh	r3, [r0, #12]
 800f010:	3501      	adds	r5, #1
 800f012:	4621      	mov	r1, r4
 800f014:	4630      	mov	r0, r6
 800f016:	f004 fa1f 	bl	8013458 <put_memory>
 800f01a:	42af      	cmp	r7, r5
 800f01c:	60a4      	str	r4, [r4, #8]
 800f01e:	f104 041c 	add.w	r4, r4, #28
 800f022:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f026:	d1f3      	bne.n	800f010 <rmw_uxrce_init_wait_set_memory+0x20>
 800f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <rmw_uxrce_init_guard_condition_memory>:
 800f030:	b1e2      	cbz	r2, 800f06c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f036:	7b05      	ldrb	r5, [r0, #12]
 800f038:	4606      	mov	r6, r0
 800f03a:	b9ad      	cbnz	r5, 800f068 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f03c:	2320      	movs	r3, #32
 800f03e:	4617      	mov	r7, r2
 800f040:	460c      	mov	r4, r1
 800f042:	46a8      	mov	r8, r5
 800f044:	6083      	str	r3, [r0, #8]
 800f046:	f240 1301 	movw	r3, #257	@ 0x101
 800f04a:	e9c0 5500 	strd	r5, r5, [r0]
 800f04e:	8183      	strh	r3, [r0, #12]
 800f050:	3501      	adds	r5, #1
 800f052:	4621      	mov	r1, r4
 800f054:	4630      	mov	r0, r6
 800f056:	f004 f9ff 	bl	8013458 <put_memory>
 800f05a:	42af      	cmp	r7, r5
 800f05c:	60a4      	str	r4, [r4, #8]
 800f05e:	f104 0420 	add.w	r4, r4, #32
 800f062:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f066:	d1f3      	bne.n	800f050 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop

0800f070 <rmw_uxrce_fini_session_memory>:
 800f070:	4601      	mov	r1, r0
 800f072:	4801      	ldr	r0, [pc, #4]	@ (800f078 <rmw_uxrce_fini_session_memory+0x8>)
 800f074:	f004 b9f0 	b.w	8013458 <put_memory>
 800f078:	20012484 	.word	0x20012484

0800f07c <rmw_uxrce_fini_node_memory>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	6800      	ldr	r0, [r0, #0]
 800f082:	b128      	cbz	r0, 800f090 <rmw_uxrce_fini_node_memory+0x14>
 800f084:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <rmw_uxrce_fini_node_memory+0x28>)
 800f086:	6819      	ldr	r1, [r3, #0]
 800f088:	f7f1 f8da 	bl	8000240 <strcmp>
 800f08c:	b940      	cbnz	r0, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f08e:	6020      	str	r0, [r4, #0]
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	b129      	cbz	r1, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f094:	2500      	movs	r5, #0
 800f096:	4804      	ldr	r0, [pc, #16]	@ (800f0a8 <rmw_uxrce_fini_node_memory+0x2c>)
 800f098:	610d      	str	r5, [r1, #16]
 800f09a:	f004 f9dd 	bl	8013458 <put_memory>
 800f09e:	6065      	str	r5, [r4, #4]
 800f0a0:	bd38      	pop	{r3, r4, r5, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801899c 	.word	0x0801899c
 800f0a8:	20012454 	.word	0x20012454

0800f0ac <rmw_uxrce_fini_publisher_memory>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	6800      	ldr	r0, [r0, #0]
 800f0b2:	b128      	cbz	r0, 800f0c0 <rmw_uxrce_fini_publisher_memory+0x14>
 800f0b4:	4b06      	ldr	r3, [pc, #24]	@ (800f0d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	f7f1 f8c2 	bl	8000240 <strcmp>
 800f0bc:	b938      	cbnz	r0, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	6861      	ldr	r1, [r4, #4]
 800f0c2:	b121      	cbz	r1, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0c4:	4803      	ldr	r0, [pc, #12]	@ (800f0d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f0c6:	f004 f9c7 	bl	8013458 <put_memory>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	6063      	str	r3, [r4, #4]
 800f0ce:	bd10      	pop	{r4, pc}
 800f0d0:	0801899c 	.word	0x0801899c
 800f0d4:	20012464 	.word	0x20012464

0800f0d8 <rmw_uxrce_fini_subscription_memory>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	6800      	ldr	r0, [r0, #0]
 800f0de:	b128      	cbz	r0, 800f0ec <rmw_uxrce_fini_subscription_memory+0x14>
 800f0e0:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	f7f1 f8ac 	bl	8000240 <strcmp>
 800f0e8:	b938      	cbnz	r0, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0ea:	6020      	str	r0, [r4, #0]
 800f0ec:	6861      	ldr	r1, [r4, #4]
 800f0ee:	b121      	cbz	r1, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0f0:	4803      	ldr	r0, [pc, #12]	@ (800f100 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0f2:	f004 f9b1 	bl	8013458 <put_memory>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	0801899c 	.word	0x0801899c
 800f100:	200124a4 	.word	0x200124a4

0800f104 <rmw_uxrce_fini_service_memory>:
 800f104:	b510      	push	{r4, lr}
 800f106:	4604      	mov	r4, r0
 800f108:	6800      	ldr	r0, [r0, #0]
 800f10a:	b128      	cbz	r0, 800f118 <rmw_uxrce_fini_service_memory+0x14>
 800f10c:	4b06      	ldr	r3, [pc, #24]	@ (800f128 <rmw_uxrce_fini_service_memory+0x24>)
 800f10e:	6819      	ldr	r1, [r3, #0]
 800f110:	f7f1 f896 	bl	8000240 <strcmp>
 800f114:	b938      	cbnz	r0, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f116:	6020      	str	r0, [r4, #0]
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	b121      	cbz	r1, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f11c:	4803      	ldr	r0, [pc, #12]	@ (800f12c <rmw_uxrce_fini_service_memory+0x28>)
 800f11e:	f004 f99b 	bl	8013458 <put_memory>
 800f122:	2300      	movs	r3, #0
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	bd10      	pop	{r4, pc}
 800f128:	0801899c 	.word	0x0801899c
 800f12c:	20012474 	.word	0x20012474

0800f130 <rmw_uxrce_fini_client_memory>:
 800f130:	b510      	push	{r4, lr}
 800f132:	4604      	mov	r4, r0
 800f134:	6800      	ldr	r0, [r0, #0]
 800f136:	b128      	cbz	r0, 800f144 <rmw_uxrce_fini_client_memory+0x14>
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <rmw_uxrce_fini_client_memory+0x24>)
 800f13a:	6819      	ldr	r1, [r3, #0]
 800f13c:	f7f1 f880 	bl	8000240 <strcmp>
 800f140:	b938      	cbnz	r0, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	b121      	cbz	r1, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f148:	4803      	ldr	r0, [pc, #12]	@ (800f158 <rmw_uxrce_fini_client_memory+0x28>)
 800f14a:	f004 f985 	bl	8013458 <put_memory>
 800f14e:	2300      	movs	r3, #0
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	bd10      	pop	{r4, pc}
 800f154:	0801899c 	.word	0x0801899c
 800f158:	2000db84 	.word	0x2000db84

0800f15c <rmw_uxrce_fini_topic_memory>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	4604      	mov	r4, r0
 800f160:	4803      	ldr	r0, [pc, #12]	@ (800f170 <rmw_uxrce_fini_topic_memory+0x14>)
 800f162:	4621      	mov	r1, r4
 800f164:	f004 f978 	bl	8013458 <put_memory>
 800f168:	2300      	movs	r3, #0
 800f16a:	61a3      	str	r3, [r4, #24]
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	200124b4 	.word	0x200124b4

0800f174 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f174:	b082      	sub	sp, #8
 800f176:	492b      	ldr	r1, [pc, #172]	@ (800f224 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f178:	b530      	push	{r4, r5, lr}
 800f17a:	680d      	ldr	r5, [r1, #0]
 800f17c:	ac03      	add	r4, sp, #12
 800f17e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f182:	461c      	mov	r4, r3
 800f184:	2d00      	cmp	r5, #0
 800f186:	d04b      	beq.n	800f220 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f188:	462b      	mov	r3, r5
 800f18a:	2100      	movs	r1, #0
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f194:	4290      	cmp	r0, r2
 800f196:	bf08      	it	eq
 800f198:	3101      	addeq	r1, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1f6      	bne.n	800f18c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f19e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d029      	beq.n	800f1fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1a6:	d820      	bhi.n	800f1ea <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f1a8:	428c      	cmp	r4, r1
 800f1aa:	d828      	bhi.n	800f1fe <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f1ac:	fab4 f284 	clz	r2, r4
 800f1b0:	0952      	lsrs	r2, r2, #5
 800f1b2:	b324      	cbz	r4, 800f1fe <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f1b4:	b1dd      	cbz	r5, 800f1ee <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f1b6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f1ba:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f1be:	e001      	b.n	800f1c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f1c0:	686d      	ldr	r5, [r5, #4]
 800f1c2:	b1ad      	cbz	r5, 800f1f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f1c4:	68ab      	ldr	r3, [r5, #8]
 800f1c6:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800f1ca:	4288      	cmp	r0, r1
 800f1cc:	d1f8      	bne.n	800f1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f1ce:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800f1d2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1d6:	4561      	cmp	r1, ip
 800f1d8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1dc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1e0:	daee      	bge.n	800f1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f1e2:	468c      	mov	ip, r1
 800f1e4:	461c      	mov	r4, r3
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	e7ea      	b.n	800f1c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f1ea:	2b03      	cmp	r3, #3
 800f1ec:	d0dc      	beq.n	800f1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f6:	b002      	add	sp, #8
 800f1f8:	4770      	bx	lr
 800f1fa:	428c      	cmp	r4, r1
 800f1fc:	d905      	bls.n	800f20a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f1fe:	4809      	ldr	r0, [pc, #36]	@ (800f224 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f204:	b002      	add	sp, #8
 800f206:	f004 b917 	b.w	8013438 <get_memory>
 800f20a:	fab4 f284 	clz	r2, r4
 800f20e:	0952      	lsrs	r2, r2, #5
 800f210:	2c00      	cmp	r4, #0
 800f212:	d1ed      	bne.n	800f1f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f214:	4803      	ldr	r0, [pc, #12]	@ (800f224 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f21a:	b002      	add	sp, #8
 800f21c:	f004 b90c 	b.w	8013438 <get_memory>
 800f220:	4629      	mov	r1, r5
 800f222:	e7bc      	b.n	800f19e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f224:	20012494 	.word	0x20012494

0800f228 <run_xrce_session>:
 800f228:	b510      	push	{r4, lr}
 800f22a:	788c      	ldrb	r4, [r1, #2]
 800f22c:	b086      	sub	sp, #24
 800f22e:	2c01      	cmp	r4, #1
 800f230:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f234:	d00c      	beq.n	800f250 <run_xrce_session+0x28>
 800f236:	2401      	movs	r4, #1
 800f238:	4619      	mov	r1, r3
 800f23a:	f10d 020e 	add.w	r2, sp, #14
 800f23e:	f10d 0317 	add.w	r3, sp, #23
 800f242:	9400      	str	r4, [sp, #0]
 800f244:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f248:	f001 fa08 	bl	801065c <uxr_run_session_until_all_status>
 800f24c:	b006      	add	sp, #24
 800f24e:	bd10      	pop	{r4, pc}
 800f250:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f254:	f000 fe5e 	bl	800ff14 <uxr_flash_output_streams>
 800f258:	4620      	mov	r0, r4
 800f25a:	b006      	add	sp, #24
 800f25c:	bd10      	pop	{r4, pc}
 800f25e:	bf00      	nop

0800f260 <convert_qos_profile>:
 800f260:	7a4a      	ldrb	r2, [r1, #9]
 800f262:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f266:	2a02      	cmp	r2, #2
 800f268:	bf18      	it	ne
 800f26a:	2200      	movne	r2, #0
 800f26c:	7002      	strb	r2, [r0, #0]
 800f26e:	f1ac 0202 	sub.w	r2, ip, #2
 800f272:	fab2 f282 	clz	r2, r2
 800f276:	0952      	lsrs	r2, r2, #5
 800f278:	7042      	strb	r2, [r0, #1]
 800f27a:	780a      	ldrb	r2, [r1, #0]
 800f27c:	8889      	ldrh	r1, [r1, #4]
 800f27e:	f1a2 0202 	sub.w	r2, r2, #2
 800f282:	8081      	strh	r1, [r0, #4]
 800f284:	fab2 f282 	clz	r2, r2
 800f288:	0952      	lsrs	r2, r2, #5
 800f28a:	7082      	strb	r2, [r0, #2]
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop

0800f290 <generate_type_name>:
 800f290:	2300      	movs	r3, #0
 800f292:	b530      	push	{r4, r5, lr}
 800f294:	700b      	strb	r3, [r1, #0]
 800f296:	b087      	sub	sp, #28
 800f298:	6803      	ldr	r3, [r0, #0]
 800f29a:	4614      	mov	r4, r2
 800f29c:	b1bb      	cbz	r3, 800f2ce <generate_type_name+0x3e>
 800f29e:	4a0e      	ldr	r2, [pc, #56]	@ (800f2d8 <generate_type_name+0x48>)
 800f2a0:	4615      	mov	r5, r2
 800f2a2:	9500      	str	r5, [sp, #0]
 800f2a4:	9203      	str	r2, [sp, #12]
 800f2a6:	4d0d      	ldr	r5, [pc, #52]	@ (800f2dc <generate_type_name+0x4c>)
 800f2a8:	6842      	ldr	r2, [r0, #4]
 800f2aa:	4608      	mov	r0, r1
 800f2ac:	490c      	ldr	r1, [pc, #48]	@ (800f2e0 <generate_type_name+0x50>)
 800f2ae:	9204      	str	r2, [sp, #16]
 800f2b0:	9105      	str	r1, [sp, #20]
 800f2b2:	9102      	str	r1, [sp, #8]
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	4a0b      	ldr	r2, [pc, #44]	@ (800f2e4 <generate_type_name+0x54>)
 800f2b8:	9501      	str	r5, [sp, #4]
 800f2ba:	f007 fe37 	bl	8016f2c <sniprintf>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	bfa8      	it	ge
 800f2c2:	4284      	cmpge	r4, r0
 800f2c4:	bfcc      	ite	gt
 800f2c6:	2001      	movgt	r0, #1
 800f2c8:	2000      	movle	r0, #0
 800f2ca:	b007      	add	sp, #28
 800f2cc:	bd30      	pop	{r4, r5, pc}
 800f2ce:	4b06      	ldr	r3, [pc, #24]	@ (800f2e8 <generate_type_name+0x58>)
 800f2d0:	4a01      	ldr	r2, [pc, #4]	@ (800f2d8 <generate_type_name+0x48>)
 800f2d2:	461d      	mov	r5, r3
 800f2d4:	e7e5      	b.n	800f2a2 <generate_type_name+0x12>
 800f2d6:	bf00      	nop
 800f2d8:	0801861c 	.word	0x0801861c
 800f2dc:	08018634 	.word	0x08018634
 800f2e0:	08018630 	.word	0x08018630
 800f2e4:	08018620 	.word	0x08018620
 800f2e8:	08018688 	.word	0x08018688

0800f2ec <generate_topic_name>:
 800f2ec:	b530      	push	{r4, r5, lr}
 800f2ee:	4614      	mov	r4, r2
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	4b07      	ldr	r3, [pc, #28]	@ (800f314 <generate_topic_name+0x28>)
 800f2f6:	4a08      	ldr	r2, [pc, #32]	@ (800f318 <generate_topic_name+0x2c>)
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	9500      	str	r5, [sp, #0]
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f007 fe15 	bl	8016f2c <sniprintf>
 800f302:	2800      	cmp	r0, #0
 800f304:	bfa8      	it	ge
 800f306:	4284      	cmpge	r4, r0
 800f308:	bfcc      	ite	gt
 800f30a:	2001      	movgt	r0, #1
 800f30c:	2000      	movle	r0, #0
 800f30e:	b003      	add	sp, #12
 800f310:	bd30      	pop	{r4, r5, pc}
 800f312:	bf00      	nop
 800f314:	08018638 	.word	0x08018638
 800f318:	080181d4 	.word	0x080181d4

0800f31c <is_uxrce_rmw_identifier_valid>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	4604      	mov	r4, r0
 800f320:	b140      	cbz	r0, 800f334 <is_uxrce_rmw_identifier_valid+0x18>
 800f322:	f004 f8f1 	bl	8013508 <rmw_get_implementation_identifier>
 800f326:	4601      	mov	r1, r0
 800f328:	4620      	mov	r0, r4
 800f32a:	f7f0 ff89 	bl	8000240 <strcmp>
 800f32e:	fab0 f080 	clz	r0, r0
 800f332:	0940      	lsrs	r0, r0, #5
 800f334:	bd10      	pop	{r4, pc}
 800f336:	bf00      	nop

0800f338 <get_message_typesupport_handle>:
 800f338:	6883      	ldr	r3, [r0, #8]
 800f33a:	4718      	bx	r3

0800f33c <get_message_typesupport_handle_function>:
 800f33c:	b510      	push	{r4, lr}
 800f33e:	4604      	mov	r4, r0
 800f340:	6800      	ldr	r0, [r0, #0]
 800f342:	f7f0 ff7d 	bl	8000240 <strcmp>
 800f346:	2800      	cmp	r0, #0
 800f348:	bf0c      	ite	eq
 800f34a:	4620      	moveq	r0, r4
 800f34c:	2000      	movne	r0, #0
 800f34e:	bd10      	pop	{r4, pc}

0800f350 <rosidl_runtime_c__String__init>:
 800f350:	b510      	push	{r4, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	b086      	sub	sp, #24
 800f356:	b170      	cbz	r0, 800f376 <rosidl_runtime_c__String__init+0x26>
 800f358:	a801      	add	r0, sp, #4
 800f35a:	f7fe fef3 	bl	800e144 <rcutils_get_default_allocator>
 800f35e:	9b01      	ldr	r3, [sp, #4]
 800f360:	9905      	ldr	r1, [sp, #20]
 800f362:	2001      	movs	r0, #1
 800f364:	4798      	blx	r3
 800f366:	6020      	str	r0, [r4, #0]
 800f368:	b128      	cbz	r0, 800f376 <rosidl_runtime_c__String__init+0x26>
 800f36a:	2100      	movs	r1, #0
 800f36c:	2201      	movs	r2, #1
 800f36e:	7001      	strb	r1, [r0, #0]
 800f370:	4610      	mov	r0, r2
 800f372:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f376:	b006      	add	sp, #24
 800f378:	bd10      	pop	{r4, pc}
 800f37a:	bf00      	nop

0800f37c <rosidl_runtime_c__String__fini>:
 800f37c:	b320      	cbz	r0, 800f3c8 <rosidl_runtime_c__String__fini+0x4c>
 800f37e:	6803      	ldr	r3, [r0, #0]
 800f380:	b510      	push	{r4, lr}
 800f382:	4604      	mov	r4, r0
 800f384:	b086      	sub	sp, #24
 800f386:	b173      	cbz	r3, 800f3a6 <rosidl_runtime_c__String__fini+0x2a>
 800f388:	6883      	ldr	r3, [r0, #8]
 800f38a:	b1f3      	cbz	r3, 800f3ca <rosidl_runtime_c__String__fini+0x4e>
 800f38c:	a801      	add	r0, sp, #4
 800f38e:	f7fe fed9 	bl	800e144 <rcutils_get_default_allocator>
 800f392:	9b02      	ldr	r3, [sp, #8]
 800f394:	9905      	ldr	r1, [sp, #20]
 800f396:	6820      	ldr	r0, [r4, #0]
 800f398:	4798      	blx	r3
 800f39a:	2300      	movs	r3, #0
 800f39c:	e9c4 3300 	strd	r3, r3, [r4]
 800f3a0:	60a3      	str	r3, [r4, #8]
 800f3a2:	b006      	add	sp, #24
 800f3a4:	bd10      	pop	{r4, pc}
 800f3a6:	6843      	ldr	r3, [r0, #4]
 800f3a8:	b9db      	cbnz	r3, 800f3e2 <rosidl_runtime_c__String__fini+0x66>
 800f3aa:	6883      	ldr	r3, [r0, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0f8      	beq.n	800f3a2 <rosidl_runtime_c__String__fini+0x26>
 800f3b0:	4b12      	ldr	r3, [pc, #72]	@ (800f3fc <rosidl_runtime_c__String__fini+0x80>)
 800f3b2:	2251      	movs	r2, #81	@ 0x51
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	4812      	ldr	r0, [pc, #72]	@ (800f400 <rosidl_runtime_c__String__fini+0x84>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	f007 fd96 	bl	8016eec <fwrite>
 800f3c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3c4:	f007 fa52 	bl	801686c <exit>
 800f3c8:	4770      	bx	lr
 800f3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f3fc <rosidl_runtime_c__String__fini+0x80>)
 800f3cc:	224c      	movs	r2, #76	@ 0x4c
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	480c      	ldr	r0, [pc, #48]	@ (800f404 <rosidl_runtime_c__String__fini+0x88>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	f007 fd89 	bl	8016eec <fwrite>
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3de:	f007 fa45 	bl	801686c <exit>
 800f3e2:	4b06      	ldr	r3, [pc, #24]	@ (800f3fc <rosidl_runtime_c__String__fini+0x80>)
 800f3e4:	224e      	movs	r2, #78	@ 0x4e
 800f3e6:	2101      	movs	r1, #1
 800f3e8:	4807      	ldr	r0, [pc, #28]	@ (800f408 <rosidl_runtime_c__String__fini+0x8c>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	f007 fd7d 	bl	8016eec <fwrite>
 800f3f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3f6:	f007 fa39 	bl	801686c <exit>
 800f3fa:	bf00      	nop
 800f3fc:	200001c0 	.word	0x200001c0
 800f400:	080186dc 	.word	0x080186dc
 800f404:	0801863c 	.word	0x0801863c
 800f408:	0801868c 	.word	0x0801868c

0800f40c <rosidl_runtime_c__String__assignn>:
 800f40c:	2900      	cmp	r1, #0
 800f40e:	bf18      	it	ne
 800f410:	f1b2 3fff 	cmpne.w	r2, #4294967295	@ 0xffffffff
 800f414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f418:	bf0c      	ite	eq
 800f41a:	2401      	moveq	r4, #1
 800f41c:	2400      	movne	r4, #0
 800f41e:	b087      	sub	sp, #28
 800f420:	2800      	cmp	r0, #0
 800f422:	bf08      	it	eq
 800f424:	f044 0401 	orreq.w	r4, r4, #1
 800f428:	b124      	cbz	r4, 800f434 <rosidl_runtime_c__String__assignn+0x28>
 800f42a:	2400      	movs	r4, #0
 800f42c:	4620      	mov	r0, r4
 800f42e:	b007      	add	sp, #28
 800f430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f434:	4616      	mov	r6, r2
 800f436:	4605      	mov	r5, r0
 800f438:	a801      	add	r0, sp, #4
 800f43a:	460f      	mov	r7, r1
 800f43c:	f106 0901 	add.w	r9, r6, #1
 800f440:	f7fe fe80 	bl	800e144 <rcutils_get_default_allocator>
 800f444:	9b03      	ldr	r3, [sp, #12]
 800f446:	9a05      	ldr	r2, [sp, #20]
 800f448:	4649      	mov	r1, r9
 800f44a:	6828      	ldr	r0, [r5, #0]
 800f44c:	4798      	blx	r3
 800f44e:	4680      	mov	r8, r0
 800f450:	2800      	cmp	r0, #0
 800f452:	d0eb      	beq.n	800f42c <rosidl_runtime_c__String__assignn+0x20>
 800f454:	4639      	mov	r1, r7
 800f456:	4632      	mov	r2, r6
 800f458:	f007 ff95 	bl	8017386 <memcpy>
 800f45c:	f808 4006 	strb.w	r4, [r8, r6]
 800f460:	2401      	movs	r4, #1
 800f462:	f8c5 9008 	str.w	r9, [r5, #8]
 800f466:	4620      	mov	r0, r4
 800f468:	e9c5 8600 	strd	r8, r6, [r5]
 800f46c:	b007      	add	sp, #28
 800f46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f472:	bf00      	nop

0800f474 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f474:	4b04      	ldr	r3, [pc, #16]	@ (800f488 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	b10a      	cbz	r2, 800f47e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800f47a:	4803      	ldr	r0, [pc, #12]	@ (800f488 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f47c:	4770      	bx	lr
 800f47e:	4a03      	ldr	r2, [pc, #12]	@ (800f48c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800f480:	4801      	ldr	r0, [pc, #4]	@ (800f488 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f482:	6812      	ldr	r2, [r2, #0]
 800f484:	601a      	str	r2, [r3, #0]
 800f486:	4770      	bx	lr
 800f488:	20000130 	.word	0x20000130
 800f48c:	200001ac 	.word	0x200001ac

0800f490 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f490:	4a02      	ldr	r2, [pc, #8]	@ (800f49c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800f492:	4b03      	ldr	r3, [pc, #12]	@ (800f4a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800f494:	6812      	ldr	r2, [r2, #0]
 800f496:	601a      	str	r2, [r3, #0]
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	200001ac 	.word	0x200001ac
 800f4a0:	20000130 	.word	0x20000130

0800f4a4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800f4a4:	f004 bb8c 	b.w	8013bc0 <std_msgs__msg__String__init>

0800f4a8 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800f4a8:	f004 bb9c 	b.w	8013be4 <std_msgs__msg__String__fini>

0800f4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f4ac:	4b04      	ldr	r3, [pc, #16]	@ (800f4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	b10a      	cbz	r2, 800f4b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800f4b2:	4803      	ldr	r0, [pc, #12]	@ (800f4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f4b4:	4770      	bx	lr
 800f4b6:	4a03      	ldr	r2, [pc, #12]	@ (800f4c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800f4b8:	4801      	ldr	r0, [pc, #4]	@ (800f4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f4ba:	6812      	ldr	r2, [r2, #0]
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	4770      	bx	lr
 800f4c0:	20000178 	.word	0x20000178
 800f4c4:	200001b0 	.word	0x200001b0

0800f4c8 <_String__max_serialized_size>:
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	4770      	bx	lr

0800f4cc <_String__cdr_serialize>:
 800f4cc:	b1c8      	cbz	r0, 800f502 <_String__cdr_serialize+0x36>
 800f4ce:	b570      	push	{r4, r5, r6, lr}
 800f4d0:	6806      	ldr	r6, [r0, #0]
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	460d      	mov	r5, r1
 800f4d6:	b15e      	cbz	r6, 800f4f0 <_String__cdr_serialize+0x24>
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f7f0 febb 	bl	8000254 <strlen>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	1c42      	adds	r2, r0, #1
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	6063      	str	r3, [r4, #4]
 800f4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4ec:	f000 b91a 	b.w	800f724 <ucdr_serialize_sequence_char>
 800f4f0:	4633      	mov	r3, r6
 800f4f2:	4632      	mov	r2, r6
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	6063      	str	r3, [r4, #4]
 800f4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4fe:	f000 b911 	b.w	800f724 <ucdr_serialize_sequence_char>
 800f502:	4770      	bx	lr

0800f504 <get_serialized_size_std_msgs__msg__String>:
 800f504:	b510      	push	{r4, lr}
 800f506:	4604      	mov	r4, r0
 800f508:	b130      	cbz	r0, 800f518 <get_serialized_size_std_msgs__msg__String+0x14>
 800f50a:	4608      	mov	r0, r1
 800f50c:	2104      	movs	r1, #4
 800f50e:	f000 f899 	bl	800f644 <ucdr_alignment>
 800f512:	6863      	ldr	r3, [r4, #4]
 800f514:	3305      	adds	r3, #5
 800f516:	4418      	add	r0, r3
 800f518:	bd10      	pop	{r4, pc}
 800f51a:	bf00      	nop

0800f51c <_String__cdr_deserialize>:
 800f51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f51e:	460c      	mov	r4, r1
 800f520:	b083      	sub	sp, #12
 800f522:	b1a1      	cbz	r1, 800f54e <_String__cdr_deserialize+0x32>
 800f524:	688f      	ldr	r7, [r1, #8]
 800f526:	ab01      	add	r3, sp, #4
 800f528:	6809      	ldr	r1, [r1, #0]
 800f52a:	4606      	mov	r6, r0
 800f52c:	463a      	mov	r2, r7
 800f52e:	f000 f90b 	bl	800f748 <ucdr_deserialize_sequence_char>
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	4605      	mov	r5, r0
 800f536:	b920      	cbnz	r0, 800f542 <_String__cdr_deserialize+0x26>
 800f538:	429f      	cmp	r7, r3
 800f53a:	d30c      	bcc.n	800f556 <_String__cdr_deserialize+0x3a>
 800f53c:	4628      	mov	r0, r5
 800f53e:	b003      	add	sp, #12
 800f540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f542:	b103      	cbz	r3, 800f546 <_String__cdr_deserialize+0x2a>
 800f544:	3b01      	subs	r3, #1
 800f546:	4628      	mov	r0, r5
 800f548:	6063      	str	r3, [r4, #4]
 800f54a:	b003      	add	sp, #12
 800f54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f54e:	460d      	mov	r5, r1
 800f550:	4628      	mov	r0, r5
 800f552:	b003      	add	sp, #12
 800f554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f556:	2101      	movs	r1, #1
 800f558:	4630      	mov	r0, r6
 800f55a:	75b5      	strb	r5, [r6, #22]
 800f55c:	7571      	strb	r1, [r6, #21]
 800f55e:	6065      	str	r5, [r4, #4]
 800f560:	f000 f888 	bl	800f674 <ucdr_align_to>
 800f564:	4630      	mov	r0, r6
 800f566:	9901      	ldr	r1, [sp, #4]
 800f568:	f000 f8bc 	bl	800f6e4 <ucdr_advance_buffer>
 800f56c:	4628      	mov	r0, r5
 800f56e:	b003      	add	sp, #12
 800f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f572:	bf00      	nop

0800f574 <_String__get_serialized_size>:
 800f574:	b510      	push	{r4, lr}
 800f576:	4604      	mov	r4, r0
 800f578:	b130      	cbz	r0, 800f588 <_String__get_serialized_size+0x14>
 800f57a:	2104      	movs	r1, #4
 800f57c:	2000      	movs	r0, #0
 800f57e:	f000 f861 	bl	800f644 <ucdr_alignment>
 800f582:	6863      	ldr	r3, [r4, #4]
 800f584:	3305      	adds	r3, #5
 800f586:	4418      	add	r0, r3
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	bf00      	nop

0800f58c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f58c:	4800      	ldr	r0, [pc, #0]	@ (800f590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800f58e:	4770      	bx	lr
 800f590:	20000184 	.word	0x20000184

0800f594 <ucdr_check_buffer_available_for>:
 800f594:	7d83      	ldrb	r3, [r0, #22]
 800f596:	b93b      	cbnz	r3, 800f5a8 <ucdr_check_buffer_available_for+0x14>
 800f598:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f59c:	4419      	add	r1, r3
 800f59e:	4288      	cmp	r0, r1
 800f5a0:	bf34      	ite	cc
 800f5a2:	2000      	movcc	r0, #0
 800f5a4:	2001      	movcs	r0, #1
 800f5a6:	4770      	bx	lr
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	4770      	bx	lr

0800f5ac <ucdr_check_final_buffer_behavior>:
 800f5ac:	7d83      	ldrb	r3, [r0, #22]
 800f5ae:	b943      	cbnz	r3, 800f5c2 <ucdr_check_final_buffer_behavior+0x16>
 800f5b0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f5b4:	b510      	push	{r4, lr}
 800f5b6:	4291      	cmp	r1, r2
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	d205      	bcs.n	800f5c8 <ucdr_check_final_buffer_behavior+0x1c>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	4618      	mov	r0, r3
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	4770      	bx	lr
 800f5c8:	6982      	ldr	r2, [r0, #24]
 800f5ca:	b13a      	cbz	r2, 800f5dc <ucdr_check_final_buffer_behavior+0x30>
 800f5cc:	69c1      	ldr	r1, [r0, #28]
 800f5ce:	4790      	blx	r2
 800f5d0:	f080 0301 	eor.w	r3, r0, #1
 800f5d4:	75a0      	strb	r0, [r4, #22]
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	4618      	mov	r0, r3
 800f5da:	bd10      	pop	{r4, pc}
 800f5dc:	2001      	movs	r0, #1
 800f5de:	75a0      	strb	r0, [r4, #22]
 800f5e0:	e7fa      	b.n	800f5d8 <ucdr_check_final_buffer_behavior+0x2c>
 800f5e2:	bf00      	nop

0800f5e4 <ucdr_set_on_full_buffer_callback>:
 800f5e4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop

0800f5ec <ucdr_init_buffer_origin_offset_endian>:
 800f5ec:	b410      	push	{r4}
 800f5ee:	9c01      	ldr	r4, [sp, #4]
 800f5f0:	440a      	add	r2, r1
 800f5f2:	6001      	str	r1, [r0, #0]
 800f5f4:	6042      	str	r2, [r0, #4]
 800f5f6:	190a      	adds	r2, r1, r4
 800f5f8:	441c      	add	r4, r3
 800f5fa:	6082      	str	r2, [r0, #8]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f602:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f606:	7542      	strb	r2, [r0, #21]
 800f608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f60c:	7582      	strb	r2, [r0, #22]
 800f60e:	7503      	strb	r3, [r0, #20]
 800f610:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop

0800f618 <ucdr_init_buffer_origin_offset>:
 800f618:	b510      	push	{r4, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	9c04      	ldr	r4, [sp, #16]
 800f61e:	9400      	str	r4, [sp, #0]
 800f620:	2401      	movs	r4, #1
 800f622:	9401      	str	r4, [sp, #4]
 800f624:	f7ff ffe2 	bl	800f5ec <ucdr_init_buffer_origin_offset_endian>
 800f628:	b002      	add	sp, #8
 800f62a:	bd10      	pop	{r4, pc}

0800f62c <ucdr_init_buffer_origin>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	2400      	movs	r4, #0
 800f630:	b082      	sub	sp, #8
 800f632:	9400      	str	r4, [sp, #0]
 800f634:	f7ff fff0 	bl	800f618 <ucdr_init_buffer_origin_offset>
 800f638:	b002      	add	sp, #8
 800f63a:	bd10      	pop	{r4, pc}

0800f63c <ucdr_init_buffer>:
 800f63c:	2300      	movs	r3, #0
 800f63e:	f7ff bff5 	b.w	800f62c <ucdr_init_buffer_origin>
 800f642:	bf00      	nop

0800f644 <ucdr_alignment>:
 800f644:	fbb0 f2f1 	udiv	r2, r0, r1
 800f648:	fb02 0011 	mls	r0, r2, r1, r0
 800f64c:	1e4b      	subs	r3, r1, #1
 800f64e:	1a08      	subs	r0, r1, r0
 800f650:	4018      	ands	r0, r3
 800f652:	4770      	bx	lr

0800f654 <ucdr_buffer_alignment>:
 800f654:	7d43      	ldrb	r3, [r0, #21]
 800f656:	428b      	cmp	r3, r1
 800f658:	d209      	bcs.n	800f66e <ucdr_buffer_alignment+0x1a>
 800f65a:	6903      	ldr	r3, [r0, #16]
 800f65c:	1e4a      	subs	r2, r1, #1
 800f65e:	fbb3 f0f1 	udiv	r0, r3, r1
 800f662:	fb01 3010 	mls	r0, r1, r0, r3
 800f666:	1a09      	subs	r1, r1, r0
 800f668:	ea01 0002 	and.w	r0, r1, r2
 800f66c:	4770      	bx	lr
 800f66e:	2000      	movs	r0, #0
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop

0800f674 <ucdr_align_to>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	4604      	mov	r4, r0
 800f678:	460d      	mov	r5, r1
 800f67a:	f7ff ffeb 	bl	800f654 <ucdr_buffer_alignment>
 800f67e:	68a3      	ldr	r3, [r4, #8]
 800f680:	7565      	strb	r5, [r4, #21]
 800f682:	181a      	adds	r2, r3, r0
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	4418      	add	r0, r3
 800f688:	6863      	ldr	r3, [r4, #4]
 800f68a:	4293      	cmp	r3, r2
 800f68c:	6120      	str	r0, [r4, #16]
 800f68e:	bf28      	it	cs
 800f690:	4613      	movcs	r3, r2
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	bd38      	pop	{r3, r4, r5, pc}
 800f696:	bf00      	nop

0800f698 <ucdr_buffer_length>:
 800f698:	6882      	ldr	r2, [r0, #8]
 800f69a:	6800      	ldr	r0, [r0, #0]
 800f69c:	1a10      	subs	r0, r2, r0
 800f69e:	4770      	bx	lr

0800f6a0 <ucdr_buffer_remaining>:
 800f6a0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f6a4:	1a10      	subs	r0, r2, r0
 800f6a6:	4770      	bx	lr

0800f6a8 <ucdr_check_final_buffer_behavior_array>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	7d83      	ldrb	r3, [r0, #22]
 800f6ac:	b9a3      	cbnz	r3, 800f6d8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d300      	bcc.n	800f6bc <ucdr_check_final_buffer_behavior_array+0x14>
 800f6ba:	b931      	cbnz	r1, 800f6ca <ucdr_check_final_buffer_behavior_array+0x22>
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7ff ffef 	bl	800f6a0 <ucdr_buffer_remaining>
 800f6c2:	42a8      	cmp	r0, r5
 800f6c4:	bf28      	it	cs
 800f6c6:	4628      	movcs	r0, r5
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	6983      	ldr	r3, [r0, #24]
 800f6cc:	b133      	cbz	r3, 800f6dc <ucdr_check_final_buffer_behavior_array+0x34>
 800f6ce:	69c1      	ldr	r1, [r0, #28]
 800f6d0:	4798      	blx	r3
 800f6d2:	75a0      	strb	r0, [r4, #22]
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d0f1      	beq.n	800f6bc <ucdr_check_final_buffer_behavior_array+0x14>
 800f6d8:	2000      	movs	r0, #0
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	2301      	movs	r3, #1
 800f6de:	7583      	strb	r3, [r0, #22]
 800f6e0:	e7fa      	b.n	800f6d8 <ucdr_check_final_buffer_behavior_array+0x30>
 800f6e2:	bf00      	nop

0800f6e4 <ucdr_advance_buffer>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	460d      	mov	r5, r1
 800f6ea:	f7ff ff53 	bl	800f594 <ucdr_check_buffer_available_for>
 800f6ee:	b178      	cbz	r0, 800f710 <ucdr_advance_buffer+0x2c>
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	68a2      	ldr	r2, [r4, #8]
 800f6f4:	442b      	add	r3, r5
 800f6f6:	442a      	add	r2, r5
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	60a2      	str	r2, [r4, #8]
 800f6fe:	7563      	strb	r3, [r4, #21]
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	68a2      	ldr	r2, [r4, #8]
 800f704:	1a2d      	subs	r5, r5, r0
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	4402      	add	r2, r0
 800f70a:	4418      	add	r0, r3
 800f70c:	60a2      	str	r2, [r4, #8]
 800f70e:	6120      	str	r0, [r4, #16]
 800f710:	4629      	mov	r1, r5
 800f712:	2201      	movs	r2, #1
 800f714:	4620      	mov	r0, r4
 800f716:	f7ff ffc7 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d1f1      	bne.n	800f702 <ucdr_advance_buffer+0x1e>
 800f71e:	2301      	movs	r3, #1
 800f720:	7563      	strb	r3, [r4, #21]
 800f722:	bd38      	pop	{r3, r4, r5, pc}

0800f724 <ucdr_serialize_sequence_char>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	4615      	mov	r5, r2
 800f728:	460e      	mov	r6, r1
 800f72a:	7d01      	ldrb	r1, [r0, #20]
 800f72c:	4604      	mov	r4, r0
 800f72e:	f004 fe6b 	bl	8014408 <ucdr_serialize_endian_uint32_t>
 800f732:	b90d      	cbnz	r5, 800f738 <ucdr_serialize_sequence_char+0x14>
 800f734:	2001      	movs	r0, #1
 800f736:	bd70      	pop	{r4, r5, r6, pc}
 800f738:	462b      	mov	r3, r5
 800f73a:	4632      	mov	r2, r6
 800f73c:	7d21      	ldrb	r1, [r4, #20]
 800f73e:	4620      	mov	r0, r4
 800f740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f744:	f004 ba52 	b.w	8013bec <ucdr_serialize_endian_array_char>

0800f748 <ucdr_deserialize_sequence_char>:
 800f748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f74c:	461d      	mov	r5, r3
 800f74e:	4616      	mov	r6, r2
 800f750:	460f      	mov	r7, r1
 800f752:	461a      	mov	r2, r3
 800f754:	7d01      	ldrb	r1, [r0, #20]
 800f756:	4604      	mov	r4, r0
 800f758:	f004 ff7e 	bl	8014658 <ucdr_deserialize_endian_uint32_t>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	429e      	cmp	r6, r3
 800f760:	d201      	bcs.n	800f766 <ucdr_deserialize_sequence_char+0x1e>
 800f762:	2201      	movs	r2, #1
 800f764:	75a2      	strb	r2, [r4, #22]
 800f766:	b913      	cbnz	r3, 800f76e <ucdr_deserialize_sequence_char+0x26>
 800f768:	2001      	movs	r0, #1
 800f76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76e:	463a      	mov	r2, r7
 800f770:	7d21      	ldrb	r1, [r4, #20]
 800f772:	4620      	mov	r0, r4
 800f774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	f004 ba6a 	b.w	8013c50 <ucdr_deserialize_endian_array_char>

0800f77c <ucdr_serialize_sequence_uint8_t>:
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	4615      	mov	r5, r2
 800f780:	460e      	mov	r6, r1
 800f782:	7d01      	ldrb	r1, [r0, #20]
 800f784:	4604      	mov	r4, r0
 800f786:	f004 fe3f 	bl	8014408 <ucdr_serialize_endian_uint32_t>
 800f78a:	b90d      	cbnz	r5, 800f790 <ucdr_serialize_sequence_uint8_t+0x14>
 800f78c:	2001      	movs	r0, #1
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
 800f790:	462b      	mov	r3, r5
 800f792:	4632      	mov	r2, r6
 800f794:	7d21      	ldrb	r1, [r4, #20]
 800f796:	4620      	mov	r0, r4
 800f798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f79c:	f004 babe 	b.w	8013d1c <ucdr_serialize_endian_array_uint8_t>

0800f7a0 <ucdr_deserialize_sequence_uint8_t>:
 800f7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a4:	461d      	mov	r5, r3
 800f7a6:	4616      	mov	r6, r2
 800f7a8:	460f      	mov	r7, r1
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	7d01      	ldrb	r1, [r0, #20]
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	f004 ff52 	bl	8014658 <ucdr_deserialize_endian_uint32_t>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	429e      	cmp	r6, r3
 800f7b8:	d201      	bcs.n	800f7be <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	75a2      	strb	r2, [r4, #22]
 800f7be:	b913      	cbnz	r3, 800f7c6 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c6:	463a      	mov	r2, r7
 800f7c8:	7d21      	ldrb	r1, [r4, #20]
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d0:	f004 bb0a 	b.w	8013de8 <ucdr_deserialize_endian_array_uint8_t>

0800f7d4 <uxr_buffer_delete_entity>:
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	b08e      	sub	sp, #56	@ 0x38
 800f7da:	4604      	mov	r4, r0
 800f7dc:	9103      	str	r1, [sp, #12]
 800f7de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	2204      	movs	r2, #4
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	ab06      	add	r3, sp, #24
 800f7ea:	f001 f963 	bl	8010ab4 <uxr_prepare_stream_to_write_submessage>
 800f7ee:	b918      	cbnz	r0, 800f7f8 <uxr_buffer_delete_entity+0x24>
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	b00e      	add	sp, #56	@ 0x38
 800f7f6:	bd10      	pop	{r4, pc}
 800f7f8:	9902      	ldr	r1, [sp, #8]
 800f7fa:	aa05      	add	r2, sp, #20
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f001 fa95 	bl	8010d2c <uxr_init_base_object_request>
 800f802:	4604      	mov	r4, r0
 800f804:	a905      	add	r1, sp, #20
 800f806:	a806      	add	r0, sp, #24
 800f808:	f002 fbfe 	bl	8012008 <uxr_serialize_DELETE_Payload>
 800f80c:	4620      	mov	r0, r4
 800f80e:	b00e      	add	sp, #56	@ 0x38
 800f810:	bd10      	pop	{r4, pc}
 800f812:	bf00      	nop

0800f814 <uxr_common_create_entity>:
 800f814:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f818:	b510      	push	{r4, lr}
 800f81a:	f1bc 0f01 	cmp.w	ip, #1
 800f81e:	b08c      	sub	sp, #48	@ 0x30
 800f820:	4604      	mov	r4, r0
 800f822:	9202      	str	r2, [sp, #8]
 800f824:	bf0c      	ite	eq
 800f826:	f003 0201 	andeq.w	r2, r3, #1
 800f82a:	2200      	movne	r2, #0
 800f82c:	330e      	adds	r3, #14
 800f82e:	9103      	str	r1, [sp, #12]
 800f830:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f834:	441a      	add	r2, r3
 800f836:	ab04      	add	r3, sp, #16
 800f838:	9101      	str	r1, [sp, #4]
 800f83a:	2101      	movs	r1, #1
 800f83c:	b292      	uxth	r2, r2
 800f83e:	9100      	str	r1, [sp, #0]
 800f840:	9903      	ldr	r1, [sp, #12]
 800f842:	f001 f937 	bl	8010ab4 <uxr_prepare_stream_to_write_submessage>
 800f846:	b918      	cbnz	r0, 800f850 <uxr_common_create_entity+0x3c>
 800f848:	4604      	mov	r4, r0
 800f84a:	4620      	mov	r0, r4
 800f84c:	b00c      	add	sp, #48	@ 0x30
 800f84e:	bd10      	pop	{r4, pc}
 800f850:	9902      	ldr	r1, [sp, #8]
 800f852:	4620      	mov	r0, r4
 800f854:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f856:	f001 fa69 	bl	8010d2c <uxr_init_base_object_request>
 800f85a:	4604      	mov	r4, r0
 800f85c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f85e:	a804      	add	r0, sp, #16
 800f860:	f002 fb2c 	bl	8011ebc <uxr_serialize_CREATE_Payload>
 800f864:	4620      	mov	r0, r4
 800f866:	b00c      	add	sp, #48	@ 0x30
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	bf00      	nop

0800f86c <uxr_buffer_create_participant_bin>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f872:	4605      	mov	r5, r0
 800f874:	ac11      	add	r4, sp, #68	@ 0x44
 800f876:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f87a:	2303      	movs	r3, #3
 800f87c:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f880:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f884:	7223      	strb	r3, [r4, #8]
 800f886:	2300      	movs	r3, #0
 800f888:	2201      	movs	r2, #1
 800f88a:	f88d 3014 	strb.w	r3, [sp, #20]
 800f88e:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f890:	7122      	strb	r2, [r4, #4]
 800f892:	b1cb      	cbz	r3, 800f8c8 <uxr_buffer_create_participant_bin+0x5c>
 800f894:	f88d 201c 	strb.w	r2, [sp, #28]
 800f898:	9308      	str	r3, [sp, #32]
 800f89a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f89e:	a915      	add	r1, sp, #84	@ 0x54
 800f8a0:	a809      	add	r0, sp, #36	@ 0x24
 800f8a2:	f7ff fecb 	bl	800f63c <ucdr_init_buffer>
 800f8a6:	a905      	add	r1, sp, #20
 800f8a8:	a809      	add	r0, sp, #36	@ 0x24
 800f8aa:	f001 ffdd 	bl	8011868 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8b0:	9600      	str	r6, [sp, #0]
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	9401      	str	r4, [sp, #4]
 800f8b6:	60e3      	str	r3, [r4, #12]
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8be:	f7ff ffa9 	bl	800f814 <uxr_common_create_entity>
 800f8c2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f8c6:	bd70      	pop	{r4, r5, r6, pc}
 800f8c8:	f88d 301c 	strb.w	r3, [sp, #28]
 800f8cc:	e7e5      	b.n	800f89a <uxr_buffer_create_participant_bin+0x2e>
 800f8ce:	bf00      	nop

0800f8d0 <uxr_buffer_create_topic_bin>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	4618      	mov	r0, r3
 800f8da:	9105      	str	r1, [sp, #20]
 800f8dc:	a997      	add	r1, sp, #604	@ 0x25c
 800f8de:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f8e2:	ac13      	add	r4, sp, #76	@ 0x4c
 800f8e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f8ee:	f000 f8ed 	bl	800facc <uxr_object_id_to_raw>
 800f8f2:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f8f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8f8:	a917      	add	r1, sp, #92	@ 0x5c
 800f8fa:	a80b      	add	r0, sp, #44	@ 0x2c
 800f8fc:	9306      	str	r3, [sp, #24]
 800f8fe:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f900:	930a      	str	r3, [sp, #40]	@ 0x28
 800f902:	2303      	movs	r3, #3
 800f904:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f908:	2301      	movs	r3, #1
 800f90a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f90e:	2300      	movs	r3, #0
 800f910:	f88d 301c 	strb.w	r3, [sp, #28]
 800f914:	f7ff fe92 	bl	800f63c <ucdr_init_buffer>
 800f918:	a906      	add	r1, sp, #24
 800f91a:	a80b      	add	r0, sp, #44	@ 0x2c
 800f91c:	f001 ffc6 	bl	80118ac <uxr_serialize_OBJK_Topic_Binary>
 800f920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f922:	4628      	mov	r0, r5
 800f924:	9600      	str	r6, [sp, #0]
 800f926:	9316      	str	r3, [sp, #88]	@ 0x58
 800f928:	b29b      	uxth	r3, r3
 800f92a:	9401      	str	r4, [sp, #4]
 800f92c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f930:	f7ff ff70 	bl	800f814 <uxr_common_create_entity>
 800f934:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f938:	bd70      	pop	{r4, r5, r6, pc}
 800f93a:	bf00      	nop

0800f93c <uxr_buffer_create_publisher_bin>:
 800f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f942:	2603      	movs	r6, #3
 800f944:	4605      	mov	r5, r0
 800f946:	4618      	mov	r0, r3
 800f948:	9105      	str	r1, [sp, #20]
 800f94a:	a992      	add	r1, sp, #584	@ 0x248
 800f94c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f950:	ac0e      	add	r4, sp, #56	@ 0x38
 800f952:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f956:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f95a:	f000 f8b7 	bl	800facc <uxr_object_id_to_raw>
 800f95e:	2300      	movs	r3, #0
 800f960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f964:	a912      	add	r1, sp, #72	@ 0x48
 800f966:	a806      	add	r0, sp, #24
 800f968:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f96c:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f970:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f974:	f7ff fe62 	bl	800f63c <ucdr_init_buffer>
 800f978:	a993      	add	r1, sp, #588	@ 0x24c
 800f97a:	a806      	add	r0, sp, #24
 800f97c:	f002 f84a 	bl	8011a14 <uxr_serialize_OBJK_Publisher_Binary>
 800f980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f982:	4628      	mov	r0, r5
 800f984:	9700      	str	r7, [sp, #0]
 800f986:	9311      	str	r3, [sp, #68]	@ 0x44
 800f988:	b29b      	uxth	r3, r3
 800f98a:	9401      	str	r4, [sp, #4]
 800f98c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f990:	f7ff ff40 	bl	800f814 <uxr_common_create_entity>
 800f994:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f99a:	bf00      	nop

0800f99c <uxr_buffer_create_datawriter_bin>:
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	2703      	movs	r7, #3
 800f9aa:	ac1d      	add	r4, sp, #116	@ 0x74
 800f9ac:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f9b0:	9105      	str	r1, [sp, #20]
 800f9b2:	a9a1      	add	r1, sp, #644	@ 0x284
 800f9b4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f9b8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f9bc:	2305      	movs	r3, #5
 800f9be:	7123      	strb	r3, [r4, #4]
 800f9c0:	f000 f884 	bl	800facc <uxr_object_id_to_raw>
 800f9c4:	a90e      	add	r1, sp, #56	@ 0x38
 800f9c6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f9c8:	7227      	strb	r7, [r4, #8]
 800f9ca:	f000 f87f 	bl	800facc <uxr_object_id_to_raw>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f9d4:	3d00      	subs	r5, #0
 800f9d6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f9da:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f9de:	bf18      	it	ne
 800f9e0:	2501      	movne	r5, #1
 800f9e2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f9e6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f9ea:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f9ee:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f9f8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f9fc:	bb8a      	cbnz	r2, 800fa62 <uxr_buffer_create_datawriter_bin+0xc6>
 800f9fe:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fa02:	f04f 0c13 	mov.w	ip, #19
 800fa06:	250b      	movs	r5, #11
 800fa08:	2221      	movs	r2, #33	@ 0x21
 800fa0a:	2111      	movs	r1, #17
 800fa0c:	2009      	movs	r0, #9
 800fa0e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fa12:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fa16:	b923      	cbnz	r3, 800fa22 <uxr_buffer_create_datawriter_bin+0x86>
 800fa18:	4672      	mov	r2, lr
 800fa1a:	4661      	mov	r1, ip
 800fa1c:	4628      	mov	r0, r5
 800fa1e:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fa22:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d025      	beq.n	800fa76 <uxr_buffer_create_datawriter_bin+0xda>
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d029      	beq.n	800fa82 <uxr_buffer_create_datawriter_bin+0xe6>
 800fa2e:	b32b      	cbz	r3, 800fa7c <uxr_buffer_create_datawriter_bin+0xe0>
 800fa30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa34:	a921      	add	r1, sp, #132	@ 0x84
 800fa36:	a806      	add	r0, sp, #24
 800fa38:	f7ff fe00 	bl	800f63c <ucdr_init_buffer>
 800fa3c:	a90e      	add	r1, sp, #56	@ 0x38
 800fa3e:	a806      	add	r0, sp, #24
 800fa40:	f002 f85e 	bl	8011b00 <uxr_serialize_OBJK_DataWriter_Binary>
 800fa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa46:	f8cd 8000 	str.w	r8, [sp]
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	9401      	str	r4, [sp, #4]
 800fa4e:	60e3      	str	r3, [r4, #12]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fa56:	f7ff fedd 	bl	800f814 <uxr_common_create_entity>
 800fa5a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa62:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fa66:	f04f 0c12 	mov.w	ip, #18
 800fa6a:	250a      	movs	r5, #10
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	2110      	movs	r1, #16
 800fa70:	2008      	movs	r0, #8
 800fa72:	2702      	movs	r7, #2
 800fa74:	e7cd      	b.n	800fa12 <uxr_buffer_create_datawriter_bin+0x76>
 800fa76:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fa7a:	e7d9      	b.n	800fa30 <uxr_buffer_create_datawriter_bin+0x94>
 800fa7c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fa80:	e7d6      	b.n	800fa30 <uxr_buffer_create_datawriter_bin+0x94>
 800fa82:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fa86:	e7d3      	b.n	800fa30 <uxr_buffer_create_datawriter_bin+0x94>

0800fa88 <uxr_object_id>:
 800fa88:	b082      	sub	sp, #8
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	f88d 1006 	strb.w	r1, [sp, #6]
 800fa90:	f360 030f 	bfi	r3, r0, #0, #16
 800fa94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fa98:	f362 431f 	bfi	r3, r2, #16, #16
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	b002      	add	sp, #8
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop

0800faa4 <uxr_object_id_from_raw>:
 800faa4:	7843      	ldrb	r3, [r0, #1]
 800faa6:	b082      	sub	sp, #8
 800faa8:	7801      	ldrb	r1, [r0, #0]
 800faaa:	2000      	movs	r0, #0
 800faac:	091a      	lsrs	r2, r3, #4
 800faae:	f003 030f 	and.w	r3, r3, #15
 800fab2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800fab6:	f88d 3006 	strb.w	r3, [sp, #6]
 800faba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fabe:	f362 000f 	bfi	r0, r2, #0, #16
 800fac2:	f363 401f 	bfi	r0, r3, #16, #16
 800fac6:	b002      	add	sp, #8
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop

0800facc <uxr_object_id_to_raw>:
 800facc:	4602      	mov	r2, r0
 800face:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fad2:	b082      	sub	sp, #8
 800fad4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800fad8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800fadc:	f881 c000 	strb.w	ip, [r1]
 800fae0:	7048      	strb	r0, [r1, #1]
 800fae2:	b002      	add	sp, #8
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop

0800fae8 <uxr_buffer_cancel_data>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	2300      	movs	r3, #0
 800faec:	b094      	sub	sp, #80	@ 0x50
 800faee:	4604      	mov	r4, r0
 800faf0:	9205      	str	r2, [sp, #20]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800faf8:	f88d 301e 	strb.w	r3, [sp, #30]
 800fafc:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800fb00:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800fb04:	2308      	movs	r3, #8
 800fb06:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb10:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800fb14:	2210      	movs	r2, #16
 800fb16:	f000 ffcd 	bl	8010ab4 <uxr_prepare_stream_to_write_submessage>
 800fb1a:	b918      	cbnz	r0, 800fb24 <uxr_buffer_cancel_data+0x3c>
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	4620      	mov	r0, r4
 800fb20:	b014      	add	sp, #80	@ 0x50
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	9905      	ldr	r1, [sp, #20]
 800fb26:	aa06      	add	r2, sp, #24
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f001 f8ff 	bl	8010d2c <uxr_init_base_object_request>
 800fb2e:	4604      	mov	r4, r0
 800fb30:	a906      	add	r1, sp, #24
 800fb32:	a80c      	add	r0, sp, #48	@ 0x30
 800fb34:	f002 fb12 	bl	801215c <uxr_serialize_READ_DATA_Payload>
 800fb38:	4620      	mov	r0, r4
 800fb3a:	b014      	add	sp, #80	@ 0x50
 800fb3c:	bd10      	pop	{r4, pc}
 800fb3e:	bf00      	nop

0800fb40 <read_submessage_format>:
 800fb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb44:	b095      	sub	sp, #84	@ 0x54
 800fb46:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800fb4a:	b113      	cbz	r3, 800fb52 <read_submessage_format+0x12>
 800fb4c:	b015      	add	sp, #84	@ 0x54
 800fb4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb52:	4606      	mov	r6, r0
 800fb54:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800fb56:	460c      	mov	r4, r1
 800fb58:	4615      	mov	r5, r2
 800fb5a:	9004      	str	r0, [sp, #16]
 800fb5c:	4699      	mov	r9, r3
 800fb5e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800fb60:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800fb64:	9005      	str	r0, [sp, #20]
 800fb66:	a80c      	add	r0, sp, #48	@ 0x30
 800fb68:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800fb6c:	1a52      	subs	r2, r2, r1
 800fb6e:	f7ff fd65 	bl	800f63c <ucdr_init_buffer>
 800fb72:	a80c      	add	r0, sp, #48	@ 0x30
 800fb74:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fb78:	f7ff fd34 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 800fb7c:	69e2      	ldr	r2, [r4, #28]
 800fb7e:	b19a      	cbz	r2, 800fba8 <read_submessage_format+0x68>
 800fb80:	f1b8 0f07 	cmp.w	r8, #7
 800fb84:	f882 9014 	strb.w	r9, [r2, #20]
 800fb88:	d040      	beq.n	800fc0c <read_submessage_format+0xcc>
 800fb8a:	f1b8 0f08 	cmp.w	r8, #8
 800fb8e:	d02e      	beq.n	800fbee <read_submessage_format+0xae>
 800fb90:	f1b8 0f06 	cmp.w	r8, #6
 800fb94:	d011      	beq.n	800fbba <read_submessage_format+0x7a>
 800fb96:	2301      	movs	r3, #1
 800fb98:	7513      	strb	r3, [r2, #20]
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f7ff fda1 	bl	800f6e4 <ucdr_advance_buffer>
 800fba2:	b015      	add	sp, #84	@ 0x54
 800fba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba8:	f1b8 0f07 	cmp.w	r8, #7
 800fbac:	d02e      	beq.n	800fc0c <read_submessage_format+0xcc>
 800fbae:	f1b8 0f08 	cmp.w	r8, #8
 800fbb2:	d01c      	beq.n	800fbee <read_submessage_format+0xae>
 800fbb4:	f1b8 0f06 	cmp.w	r8, #6
 800fbb8:	d1ef      	bne.n	800fb9a <read_submessage_format+0x5a>
 800fbba:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 800fbbe:	f1b8 0f00 	cmp.w	r8, #0
 800fbc2:	d011      	beq.n	800fbe8 <read_submessage_format+0xa8>
 800fbc4:	ab0c      	add	r3, sp, #48	@ 0x30
 800fbc6:	9501      	str	r5, [sp, #4]
 800fbc8:	463a      	mov	r2, r7
 800fbca:	4630      	mov	r0, r6
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	2306      	movs	r3, #6
 800fbd0:	f88d 3016 	strb.w	r3, [sp, #22]
 800fbd4:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800fbd8:	9302      	str	r3, [sp, #8]
 800fbda:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800fbde:	47c0      	blx	r8
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	69e2      	ldr	r2, [r4, #28]
 800fbe4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fbe8:	2a00      	cmp	r2, #0
 800fbea:	d1d4      	bne.n	800fb96 <read_submessage_format+0x56>
 800fbec:	e7d5      	b.n	800fb9a <read_submessage_format+0x5a>
 800fbee:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0f8      	beq.n	800fbe8 <read_submessage_format+0xa8>
 800fbf6:	a80c      	add	r0, sp, #48	@ 0x30
 800fbf8:	a906      	add	r1, sp, #24
 800fbfa:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fbfe:	f002 fb53 	bl	80122a8 <uxr_deserialize_SampleIdentity>
 800fc02:	b9a0      	cbnz	r0, 800fc2e <read_submessage_format+0xee>
 800fc04:	69e2      	ldr	r2, [r4, #28]
 800fc06:	2a00      	cmp	r2, #0
 800fc08:	d1c5      	bne.n	800fb96 <read_submessage_format+0x56>
 800fc0a:	e7c6      	b.n	800fb9a <read_submessage_format+0x5a>
 800fc0c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 800fc10:	b13b      	cbz	r3, 800fc22 <read_submessage_format+0xe2>
 800fc12:	a906      	add	r1, sp, #24
 800fc14:	a80c      	add	r0, sp, #48	@ 0x30
 800fc16:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800fc1a:	f002 f83f 	bl	8011c9c <uxr_deserialize_BaseObjectRequest>
 800fc1e:	bb60      	cbnz	r0, 800fc7a <read_submessage_format+0x13a>
 800fc20:	69e2      	ldr	r2, [r4, #28]
 800fc22:	68a3      	ldr	r3, [r4, #8]
 800fc24:	442b      	add	r3, r5
 800fc26:	60a3      	str	r3, [r4, #8]
 800fc28:	2a00      	cmp	r2, #0
 800fc2a:	d1b4      	bne.n	800fb96 <read_submessage_format+0x56>
 800fc2c:	e7b5      	b.n	800fb9a <read_submessage_format+0x5a>
 800fc2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc30:	a80c      	add	r0, sp, #48	@ 0x30
 800fc32:	eba8 0803 	sub.w	r8, r8, r3
 800fc36:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fc3a:	44a8      	add	r8, r5
 800fc3c:	1a52      	subs	r2, r2, r1
 800fc3e:	f7ff fcfd 	bl	800f63c <ucdr_init_buffer>
 800fc42:	a80c      	add	r0, sp, #48	@ 0x30
 800fc44:	fa1f f888 	uxth.w	r8, r8
 800fc48:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc4c:	f7ff fcca 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 800fc50:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc52:	2108      	movs	r1, #8
 800fc54:	f8cd 8004 	str.w	r8, [sp, #4]
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	463a      	mov	r2, r7
 800fc5c:	f88d 1016 	strb.w	r1, [sp, #22]
 800fc60:	ab06      	add	r3, sp, #24
 800fc62:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 800fc66:	4630      	mov	r0, r6
 800fc68:	9102      	str	r1, [sp, #8]
 800fc6a:	9905      	ldr	r1, [sp, #20]
 800fc6c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 800fc70:	47b8      	blx	r7
 800fc72:	2301      	movs	r3, #1
 800fc74:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fc78:	e7c4      	b.n	800fc04 <read_submessage_format+0xc4>
 800fc7a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800fc7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc80:	a80c      	add	r0, sp, #48	@ 0x30
 800fc82:	1a52      	subs	r2, r2, r1
 800fc84:	eba8 0803 	sub.w	r8, r8, r3
 800fc88:	f7ff fcd8 	bl	800f63c <ucdr_init_buffer>
 800fc8c:	a80c      	add	r0, sp, #48	@ 0x30
 800fc8e:	44a8      	add	r8, r5
 800fc90:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fc94:	f7ff fca6 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 800fc98:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc9a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800fc9e:	fa1f f888 	uxth.w	r8, r8
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	463a      	mov	r2, r7
 800fca6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f8cd 8004 	str.w	r8, [sp, #4]
 800fcb0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fcb4:	2107      	movs	r1, #7
 800fcb6:	f88d 1016 	strb.w	r1, [sp, #22]
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 800fcc0:	9102      	str	r1, [sp, #8]
 800fcc2:	9905      	ldr	r1, [sp, #20]
 800fcc4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 800fcc8:	47b8      	blx	r7
 800fcca:	2301      	movs	r3, #1
 800fccc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 800fcd0:	e7a6      	b.n	800fc20 <read_submessage_format+0xe0>
 800fcd2:	bf00      	nop

0800fcd4 <on_get_fragmentation_info>:
 800fcd4:	b500      	push	{lr}
 800fcd6:	b08b      	sub	sp, #44	@ 0x2c
 800fcd8:	4601      	mov	r1, r0
 800fcda:	2204      	movs	r2, #4
 800fcdc:	a802      	add	r0, sp, #8
 800fcde:	f7ff fcad 	bl	800f63c <ucdr_init_buffer>
 800fce2:	f10d 0305 	add.w	r3, sp, #5
 800fce6:	f10d 0206 	add.w	r2, sp, #6
 800fcea:	a901      	add	r1, sp, #4
 800fcec:	a802      	add	r0, sp, #8
 800fcee:	f001 f9a7 	bl	8011040 <uxr_read_submessage_header>
 800fcf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcf6:	2b0d      	cmp	r3, #13
 800fcf8:	d003      	beq.n	800fd02 <on_get_fragmentation_info+0x2e>
 800fcfa:	2000      	movs	r0, #0
 800fcfc:	b00b      	add	sp, #44	@ 0x2c
 800fcfe:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd06:	f013 0f02 	tst.w	r3, #2
 800fd0a:	bf14      	ite	ne
 800fd0c:	2002      	movne	r0, #2
 800fd0e:	2001      	moveq	r0, #1
 800fd10:	b00b      	add	sp, #44	@ 0x2c
 800fd12:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd16:	bf00      	nop

0800fd18 <read_submessage_get_info>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	2500      	movs	r5, #0
 800fd1c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800fd20:	460e      	mov	r6, r1
 800fd22:	4604      	mov	r4, r0
 800fd24:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800fd28:	4629      	mov	r1, r5
 800fd2a:	a810      	add	r0, sp, #64	@ 0x40
 800fd2c:	9503      	str	r5, [sp, #12]
 800fd2e:	9504      	str	r5, [sp, #16]
 800fd30:	f007 fa60 	bl	80171f4 <memset>
 800fd34:	a903      	add	r1, sp, #12
 800fd36:	4630      	mov	r0, r6
 800fd38:	f002 f950 	bl	8011fdc <uxr_deserialize_GET_INFO_Payload>
 800fd3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fd40:	4620      	mov	r0, r4
 800fd42:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fd46:	f000 ffe9 	bl	8010d1c <uxr_session_header_offset>
 800fd4a:	462b      	mov	r3, r5
 800fd4c:	220c      	movs	r2, #12
 800fd4e:	a905      	add	r1, sp, #20
 800fd50:	9000      	str	r0, [sp, #0]
 800fd52:	a808      	add	r0, sp, #32
 800fd54:	f7ff fc60 	bl	800f618 <ucdr_init_buffer_origin_offset>
 800fd58:	a910      	add	r1, sp, #64	@ 0x40
 800fd5a:	a808      	add	r0, sp, #32
 800fd5c:	f002 f9b2 	bl	80120c4 <uxr_serialize_INFO_Payload>
 800fd60:	9b08      	ldr	r3, [sp, #32]
 800fd62:	462a      	mov	r2, r5
 800fd64:	4629      	mov	r1, r5
 800fd66:	4620      	mov	r0, r4
 800fd68:	f000 ff84 	bl	8010c74 <uxr_stamp_session_header>
 800fd6c:	a808      	add	r0, sp, #32
 800fd6e:	f7ff fc93 	bl	800f698 <ucdr_buffer_length>
 800fd72:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd74:	4602      	mov	r2, r0
 800fd76:	a905      	add	r1, sp, #20
 800fd78:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fd7c:	47a0      	blx	r4
 800fd7e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800fd82:	bd70      	pop	{r4, r5, r6, pc}

0800fd84 <write_submessage_acknack.isra.0>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	b092      	sub	sp, #72	@ 0x48
 800fd88:	4605      	mov	r5, r0
 800fd8a:	460e      	mov	r6, r1
 800fd8c:	4614      	mov	r4, r2
 800fd8e:	f000 ffc5 	bl	8010d1c <uxr_session_header_offset>
 800fd92:	a905      	add	r1, sp, #20
 800fd94:	9000      	str	r0, [sp, #0]
 800fd96:	2300      	movs	r3, #0
 800fd98:	a80a      	add	r0, sp, #40	@ 0x28
 800fd9a:	2211      	movs	r2, #17
 800fd9c:	f7ff fc3c 	bl	800f618 <ucdr_init_buffer_origin_offset>
 800fda0:	2218      	movs	r2, #24
 800fda2:	2300      	movs	r3, #0
 800fda4:	210a      	movs	r1, #10
 800fda6:	fb02 5404 	mla	r4, r2, r4, r5
 800fdaa:	a80a      	add	r0, sp, #40	@ 0x28
 800fdac:	2205      	movs	r2, #5
 800fdae:	3450      	adds	r4, #80	@ 0x50
 800fdb0:	f001 f92c 	bl	801100c <uxr_buffer_submessage_header>
 800fdb4:	a903      	add	r1, sp, #12
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f005 f9a8 	bl	801510c <uxr_compute_acknack>
 800fdbc:	ba40      	rev16	r0, r0
 800fdbe:	a903      	add	r1, sp, #12
 800fdc0:	f88d 6010 	strb.w	r6, [sp, #16]
 800fdc4:	f8ad 000e 	strh.w	r0, [sp, #14]
 800fdc8:	a80a      	add	r0, sp, #40	@ 0x28
 800fdca:	f002 f9ed 	bl	80121a8 <uxr_serialize_ACKNACK_Payload>
 800fdce:	2200      	movs	r2, #0
 800fdd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	f000 ff4d 	bl	8010c74 <uxr_stamp_session_header>
 800fdda:	a80a      	add	r0, sp, #40	@ 0x28
 800fddc:	f7ff fc5c 	bl	800f698 <ucdr_buffer_length>
 800fde0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fde2:	4602      	mov	r2, r0
 800fde4:	a905      	add	r1, sp, #20
 800fde6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fdea:	47a0      	blx	r4
 800fdec:	b012      	add	sp, #72	@ 0x48
 800fdee:	bd70      	pop	{r4, r5, r6, pc}

0800fdf0 <uxr_init_session>:
 800fdf0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fe28 <uxr_init_session+0x38>
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	b510      	push	{r4, lr}
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fdfe:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800fe02:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800fe06:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800fe0a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800fe0e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800fe12:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800fe16:	2181      	movs	r1, #129	@ 0x81
 800fe18:	f000 fe90 	bl	8010b3c <uxr_init_session_info>
 800fe1c:	f104 0008 	add.w	r0, r4, #8
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	f001 b80e 	b.w	8010e44 <uxr_init_stream_storage>
	...

0800fe30 <uxr_set_status_callback>:
 800fe30:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop

0800fe38 <uxr_set_topic_callback>:
 800fe38:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop

0800fe40 <uxr_set_request_callback>:
 800fe40:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop

0800fe48 <uxr_set_reply_callback>:
 800fe48:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop

0800fe50 <uxr_create_output_best_effort_stream>:
 800fe50:	b510      	push	{r4, lr}
 800fe52:	4604      	mov	r4, r0
 800fe54:	b084      	sub	sp, #16
 800fe56:	e9cd 2100 	strd	r2, r1, [sp]
 800fe5a:	f000 ff5f 	bl	8010d1c <uxr_session_header_offset>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	f104 0008 	add.w	r0, r4, #8
 800fe64:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fe68:	b004      	add	sp, #16
 800fe6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe6e:	f001 b82f 	b.w	8010ed0 <uxr_add_output_best_effort_buffer>
 800fe72:	bf00      	nop

0800fe74 <uxr_create_output_reliable_stream>:
 800fe74:	b530      	push	{r4, r5, lr}
 800fe76:	b089      	sub	sp, #36	@ 0x24
 800fe78:	4604      	mov	r4, r0
 800fe7a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fe7e:	9303      	str	r3, [sp, #12]
 800fe80:	f000 ff4c 	bl	8010d1c <uxr_session_header_offset>
 800fe84:	4605      	mov	r5, r0
 800fe86:	9905      	ldr	r1, [sp, #20]
 800fe88:	f104 0008 	add.w	r0, r4, #8
 800fe8c:	9500      	str	r5, [sp, #0]
 800fe8e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fe92:	f001 f831 	bl	8010ef8 <uxr_add_output_reliable_buffer>
 800fe96:	2200      	movs	r2, #0
 800fe98:	fa5f fc80 	uxtb.w	ip, r0
 800fe9c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800fea0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800fea4:	0e03      	lsrs	r3, r0, #24
 800fea6:	f36c 0207 	bfi	r2, ip, #0, #8
 800feaa:	f364 220f 	bfi	r2, r4, #8, #8
 800feae:	f361 4217 	bfi	r2, r1, #16, #8
 800feb2:	f363 621f 	bfi	r2, r3, #24, #8
 800feb6:	4610      	mov	r0, r2
 800feb8:	b009      	add	sp, #36	@ 0x24
 800feba:	bd30      	pop	{r4, r5, pc}

0800febc <uxr_create_input_best_effort_stream>:
 800febc:	b082      	sub	sp, #8
 800febe:	3008      	adds	r0, #8
 800fec0:	b002      	add	sp, #8
 800fec2:	f001 b833 	b.w	8010f2c <uxr_add_input_best_effort_buffer>
 800fec6:	bf00      	nop

0800fec8 <uxr_create_input_reliable_stream>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	4c0c      	ldr	r4, [pc, #48]	@ (800fefc <uxr_create_input_reliable_stream+0x34>)
 800fecc:	b084      	sub	sp, #16
 800fece:	3008      	adds	r0, #8
 800fed0:	9400      	str	r4, [sp, #0]
 800fed2:	f001 f841 	bl	8010f58 <uxr_add_input_reliable_buffer>
 800fed6:	2200      	movs	r2, #0
 800fed8:	fa5f fe80 	uxtb.w	lr, r0
 800fedc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800fee0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800fee4:	0e03      	lsrs	r3, r0, #24
 800fee6:	f36e 0207 	bfi	r2, lr, #0, #8
 800feea:	f36c 220f 	bfi	r2, ip, #8, #8
 800feee:	f361 4217 	bfi	r2, r1, #16, #8
 800fef2:	f363 621f 	bfi	r2, r3, #24, #8
 800fef6:	4610      	mov	r0, r2
 800fef8:	b004      	add	sp, #16
 800fefa:	bd10      	pop	{r4, pc}
 800fefc:	0800fcd5 	.word	0x0800fcd5

0800ff00 <uxr_epoch_nanos>:
 800ff00:	b510      	push	{r4, lr}
 800ff02:	4604      	mov	r4, r0
 800ff04:	f001 f8e4 	bl	80110d0 <uxr_nanos>
 800ff08:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ff0c:	1ac0      	subs	r0, r0, r3
 800ff0e:	eb61 0102 	sbc.w	r1, r1, r2
 800ff12:	bd10      	pop	{r4, pc}

0800ff14 <uxr_flash_output_streams>:
 800ff14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff18:	7e03      	ldrb	r3, [r0, #24]
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	b1fb      	cbz	r3, 800ff60 <uxr_flash_output_streams+0x4c>
 800ff20:	f04f 0900 	mov.w	r9, #0
 800ff24:	f10d 0802 	add.w	r8, sp, #2
 800ff28:	af03      	add	r7, sp, #12
 800ff2a:	ae02      	add	r6, sp, #8
 800ff2c:	4648      	mov	r0, r9
 800ff2e:	2201      	movs	r2, #1
 800ff30:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ff34:	4611      	mov	r1, r2
 800ff36:	3508      	adds	r5, #8
 800ff38:	f000 ff2a 	bl	8010d90 <uxr_stream_id>
 800ff3c:	4684      	mov	ip, r0
 800ff3e:	4643      	mov	r3, r8
 800ff40:	463a      	mov	r2, r7
 800ff42:	4631      	mov	r1, r6
 800ff44:	4628      	mov	r0, r5
 800ff46:	f8cd c004 	str.w	ip, [sp, #4]
 800ff4a:	f005 f969 	bl	8015220 <uxr_prepare_best_effort_buffer_to_send>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d13d      	bne.n	800ffce <uxr_flash_output_streams+0xba>
 800ff52:	f109 0901 	add.w	r9, r9, #1
 800ff56:	7e23      	ldrb	r3, [r4, #24]
 800ff58:	fa5f f089 	uxtb.w	r0, r9
 800ff5c:	4283      	cmp	r3, r0
 800ff5e:	d8e6      	bhi.n	800ff2e <uxr_flash_output_streams+0x1a>
 800ff60:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ff64:	b383      	cbz	r3, 800ffc8 <uxr_flash_output_streams+0xb4>
 800ff66:	f04f 0900 	mov.w	r9, #0
 800ff6a:	f10d 0802 	add.w	r8, sp, #2
 800ff6e:	af03      	add	r7, sp, #12
 800ff70:	ae02      	add	r6, sp, #8
 800ff72:	4648      	mov	r0, r9
 800ff74:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ff78:	2201      	movs	r2, #1
 800ff7a:	2102      	movs	r1, #2
 800ff7c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ff80:	f000 ff06 	bl	8010d90 <uxr_stream_id>
 800ff84:	9001      	str	r0, [sp, #4]
 800ff86:	3520      	adds	r5, #32
 800ff88:	e00c      	b.n	800ffa4 <uxr_flash_output_streams+0x90>
 800ff8a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ff8e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ff92:	9b02      	ldr	r3, [sp, #8]
 800ff94:	f000 fe6e 	bl	8010c74 <uxr_stamp_session_header>
 800ff98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ff9a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ff9e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ffa2:	47d0      	blx	sl
 800ffa4:	4643      	mov	r3, r8
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f005 fb5c 	bl	8015668 <uxr_prepare_next_reliable_buffer_to_send>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1e8      	bne.n	800ff8a <uxr_flash_output_streams+0x76>
 800ffb8:	f109 0901 	add.w	r9, r9, #1
 800ffbc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ffc0:	fa5f f089 	uxtb.w	r0, r9
 800ffc4:	4283      	cmp	r3, r0
 800ffc6:	d8d5      	bhi.n	800ff74 <uxr_flash_output_streams+0x60>
 800ffc8:	b004      	add	sp, #16
 800ffca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffce:	9b02      	ldr	r3, [sp, #8]
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ffd6:	f109 0901 	add.w	r9, r9, #1
 800ffda:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ffde:	f000 fe49 	bl	8010c74 <uxr_stamp_session_header>
 800ffe2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ffe4:	9a03      	ldr	r2, [sp, #12]
 800ffe6:	685d      	ldr	r5, [r3, #4]
 800ffe8:	6818      	ldr	r0, [r3, #0]
 800ffea:	9902      	ldr	r1, [sp, #8]
 800ffec:	47a8      	blx	r5
 800ffee:	7e23      	ldrb	r3, [r4, #24]
 800fff0:	fa5f f089 	uxtb.w	r0, r9
 800fff4:	4283      	cmp	r3, r0
 800fff6:	d89a      	bhi.n	800ff2e <uxr_flash_output_streams+0x1a>
 800fff8:	e7b2      	b.n	800ff60 <uxr_flash_output_streams+0x4c>
 800fffa:	bf00      	nop

0800fffc <read_submessage_info>:
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	460d      	mov	r5, r1
 8010002:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010006:	4606      	mov	r6, r0
 8010008:	4669      	mov	r1, sp
 801000a:	4628      	mov	r0, r5
 801000c:	f001 fef8 	bl	8011e00 <uxr_deserialize_BaseObjectReply>
 8010010:	4604      	mov	r4, r0
 8010012:	a902      	add	r1, sp, #8
 8010014:	4628      	mov	r0, r5
 8010016:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801001a:	f003 ff2f 	bl	8013e7c <ucdr_deserialize_bool>
 801001e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010022:	4004      	ands	r4, r0
 8010024:	b2e4      	uxtb	r4, r4
 8010026:	b95b      	cbnz	r3, 8010040 <read_submessage_info+0x44>
 8010028:	a987      	add	r1, sp, #540	@ 0x21c
 801002a:	4628      	mov	r0, r5
 801002c:	f003 ff26 	bl	8013e7c <ucdr_deserialize_bool>
 8010030:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010034:	4680      	mov	r8, r0
 8010036:	b94b      	cbnz	r3, 801004c <read_submessage_info+0x50>
 8010038:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010040:	a903      	add	r1, sp, #12
 8010042:	4628      	mov	r0, r5
 8010044:	f001 fd88 	bl	8011b58 <uxr_deserialize_ObjectVariant>
 8010048:	4004      	ands	r4, r0
 801004a:	e7ed      	b.n	8010028 <read_submessage_info+0x2c>
 801004c:	a988      	add	r1, sp, #544	@ 0x220
 801004e:	4628      	mov	r0, r5
 8010050:	f003 ff42 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8010054:	ea14 0f08 	tst.w	r4, r8
 8010058:	d0ee      	beq.n	8010038 <read_submessage_info+0x3c>
 801005a:	2800      	cmp	r0, #0
 801005c:	d0ec      	beq.n	8010038 <read_submessage_info+0x3c>
 801005e:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010062:	2b0d      	cmp	r3, #13
 8010064:	d1e8      	bne.n	8010038 <read_submessage_info+0x3c>
 8010066:	a98a      	add	r1, sp, #552	@ 0x228
 8010068:	4628      	mov	r0, r5
 801006a:	f004 fcdb 	bl	8014a24 <ucdr_deserialize_int16_t>
 801006e:	b138      	cbz	r0, 8010080 <read_submessage_info+0x84>
 8010070:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010074:	2b00      	cmp	r3, #0
 8010076:	dd06      	ble.n	8010086 <read_submessage_info+0x8a>
 8010078:	2f00      	cmp	r7, #0
 801007a:	bf14      	ite	ne
 801007c:	2001      	movne	r0, #1
 801007e:	2002      	moveq	r0, #2
 8010080:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010084:	e7d8      	b.n	8010038 <read_submessage_info+0x3c>
 8010086:	2000      	movs	r0, #0
 8010088:	e7fa      	b.n	8010080 <read_submessage_info+0x84>
 801008a:	bf00      	nop

0801008c <read_submessage_list>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	4604      	mov	r4, r0
 8010092:	b097      	sub	sp, #92	@ 0x5c
 8010094:	460d      	mov	r5, r1
 8010096:	4ec1      	ldr	r6, [pc, #772]	@ (801039c <read_submessage_list+0x310>)
 8010098:	9209      	str	r2, [sp, #36]	@ 0x24
 801009a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801009e:	aa0c      	add	r2, sp, #48	@ 0x30
 80100a0:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80100a4:	4628      	mov	r0, r5
 80100a6:	f000 ffcb 	bl	8011040 <uxr_read_submessage_header>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	f000 8142 	beq.w	8010334 <read_submessage_list+0x2a8>
 80100b0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80100b4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80100b8:	3b02      	subs	r3, #2
 80100ba:	2b0d      	cmp	r3, #13
 80100bc:	d8ed      	bhi.n	801009a <read_submessage_list+0xe>
 80100be:	a101      	add	r1, pc, #4	@ (adr r1, 80100c4 <read_submessage_list+0x38>)
 80100c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100c4:	0801032b 	.word	0x0801032b
 80100c8:	0801009b 	.word	0x0801009b
 80100cc:	0801031b 	.word	0x0801031b
 80100d0:	080102b9 	.word	0x080102b9
 80100d4:	080102af 	.word	0x080102af
 80100d8:	0801009b 	.word	0x0801009b
 80100dc:	0801009b 	.word	0x0801009b
 80100e0:	08010205 	.word	0x08010205
 80100e4:	08010197 	.word	0x08010197
 80100e8:	08010157 	.word	0x08010157
 80100ec:	0801009b 	.word	0x0801009b
 80100f0:	0801009b 	.word	0x0801009b
 80100f4:	0801009b 	.word	0x0801009b
 80100f8:	080100fd 	.word	0x080100fd
 80100fc:	a910      	add	r1, sp, #64	@ 0x40
 80100fe:	4628      	mov	r0, r5
 8010100:	f002 f8a6 	bl	8012250 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010104:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8010108:	f1b8 0f00 	cmp.w	r8, #0
 801010c:	f000 811a 	beq.w	8010344 <read_submessage_list+0x2b8>
 8010110:	f000 ffde 	bl	80110d0 <uxr_nanos>
 8010114:	4602      	mov	r2, r0
 8010116:	460b      	mov	r3, r1
 8010118:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801011c:	2100      	movs	r1, #0
 801011e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8010120:	9006      	str	r0, [sp, #24]
 8010122:	468c      	mov	ip, r1
 8010124:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010126:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801012a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801012c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8010130:	468c      	mov	ip, r1
 8010132:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010134:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8010138:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801013c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8010140:	fbc7 0106 	smlal	r0, r1, r7, r6
 8010144:	e9cd 0100 	strd	r0, r1, [sp]
 8010148:	4620      	mov	r0, r4
 801014a:	47c0      	blx	r8
 801014c:	f04f 0301 	mov.w	r3, #1
 8010150:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010154:	e7a1      	b.n	801009a <read_submessage_list+0xe>
 8010156:	a910      	add	r1, sp, #64	@ 0x40
 8010158:	4628      	mov	r0, r5
 801015a:	f002 f865 	bl	8012228 <uxr_deserialize_HEARTBEAT_Payload>
 801015e:	2100      	movs	r1, #0
 8010160:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010164:	f000 fe42 	bl	8010dec <uxr_stream_id_from_raw>
 8010168:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801016c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801016e:	f104 0008 	add.w	r0, r4, #8
 8010172:	4641      	mov	r1, r8
 8010174:	f000 ff28 	bl	8010fc8 <uxr_get_input_reliable_stream>
 8010178:	2800      	cmp	r0, #0
 801017a:	d08e      	beq.n	801009a <read_submessage_list+0xe>
 801017c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010180:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010184:	f004 ffb6 	bl	80150f4 <uxr_process_heartbeat>
 8010188:	4642      	mov	r2, r8
 801018a:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801018e:	4620      	mov	r0, r4
 8010190:	f7ff fdf8 	bl	800fd84 <write_submessage_acknack.isra.0>
 8010194:	e781      	b.n	801009a <read_submessage_list+0xe>
 8010196:	a910      	add	r1, sp, #64	@ 0x40
 8010198:	4628      	mov	r0, r5
 801019a:	f002 f81d 	bl	80121d8 <uxr_deserialize_ACKNACK_Payload>
 801019e:	2100      	movs	r1, #0
 80101a0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80101a4:	f000 fe22 	bl	8010dec <uxr_stream_id_from_raw>
 80101a8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80101ac:	900d      	str	r0, [sp, #52]	@ 0x34
 80101ae:	f104 0008 	add.w	r0, r4, #8
 80101b2:	f000 fef3 	bl	8010f9c <uxr_get_output_reliable_stream>
 80101b6:	4680      	mov	r8, r0
 80101b8:	2800      	cmp	r0, #0
 80101ba:	f43f af6e 	beq.w	801009a <read_submessage_list+0xe>
 80101be:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80101c2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80101c6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80101ca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80101ce:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80101d2:	b289      	uxth	r1, r1
 80101d4:	f005 faf0 	bl	80157b8 <uxr_process_acknack>
 80101d8:	4640      	mov	r0, r8
 80101da:	f005 fab1 	bl	8015740 <uxr_begin_output_nack_buffer_it>
 80101de:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80101e2:	e005      	b.n	80101f0 <read_submessage_list+0x164>
 80101e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80101e6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80101ea:	e9d3 0900 	ldrd	r0, r9, [r3]
 80101ee:	47c8      	blx	r9
 80101f0:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80101f4:	aa0f      	add	r2, sp, #60	@ 0x3c
 80101f6:	4651      	mov	r1, sl
 80101f8:	4640      	mov	r0, r8
 80101fa:	f005 faa3 	bl	8015744 <uxr_next_reliable_nack_buffer_to_send>
 80101fe:	2800      	cmp	r0, #0
 8010200:	d1f0      	bne.n	80101e4 <read_submessage_list+0x158>
 8010202:	e74a      	b.n	801009a <read_submessage_list+0xe>
 8010204:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010208:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801020c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8010210:	4628      	mov	r0, r5
 8010212:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010216:	4651      	mov	r1, sl
 8010218:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801021c:	f1a8 0804 	sub.w	r8, r8, #4
 8010220:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010224:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010228:	fa1f f888 	uxth.w	r8, r8
 801022c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010230:	f009 090e 	and.w	r9, r9, #14
 8010234:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010238:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801023c:	f001 fd2e 	bl	8011c9c <uxr_deserialize_BaseObjectRequest>
 8010240:	4650      	mov	r0, sl
 8010242:	a90f      	add	r1, sp, #60	@ 0x3c
 8010244:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010248:	f000 fd90 	bl	8010d6c <uxr_parse_base_object_request>
 801024c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801024e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010252:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010256:	9110      	str	r1, [sp, #64]	@ 0x40
 8010258:	f1bb 0f00 	cmp.w	fp, #0
 801025c:	d006      	beq.n	801026c <read_submessage_list+0x1e0>
 801025e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010262:	4652      	mov	r2, sl
 8010264:	4620      	mov	r0, r4
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	2300      	movs	r3, #0
 801026a:	47d8      	blx	fp
 801026c:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801026e:	b182      	cbz	r2, 8010292 <read_submessage_list+0x206>
 8010270:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010272:	f04f 0c00 	mov.w	ip, #0
 8010276:	3902      	subs	r1, #2
 8010278:	e003      	b.n	8010282 <read_submessage_list+0x1f6>
 801027a:	f10c 0c01 	add.w	ip, ip, #1
 801027e:	4594      	cmp	ip, r2
 8010280:	d007      	beq.n	8010292 <read_submessage_list+0x206>
 8010282:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8010286:	4553      	cmp	r3, sl
 8010288:	d1f7      	bne.n	801027a <read_submessage_list+0x1ee>
 801028a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801028c:	2200      	movs	r2, #0
 801028e:	f803 200c 	strb.w	r2, [r3, ip]
 8010292:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010296:	464b      	mov	r3, r9
 8010298:	4642      	mov	r2, r8
 801029a:	4620      	mov	r0, r4
 801029c:	9102      	str	r1, [sp, #8]
 801029e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80102a0:	9101      	str	r1, [sp, #4]
 80102a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80102a4:	9100      	str	r1, [sp, #0]
 80102a6:	4629      	mov	r1, r5
 80102a8:	f7ff fc4a 	bl	800fb40 <read_submessage_format>
 80102ac:	e6f5      	b.n	801009a <read_submessage_list+0xe>
 80102ae:	4629      	mov	r1, r5
 80102b0:	4620      	mov	r0, r4
 80102b2:	f7ff fea3 	bl	800fffc <read_submessage_info>
 80102b6:	e6f0      	b.n	801009a <read_submessage_list+0xe>
 80102b8:	2a00      	cmp	r2, #0
 80102ba:	d03e      	beq.n	801033a <read_submessage_list+0x2ae>
 80102bc:	a910      	add	r1, sp, #64	@ 0x40
 80102be:	4628      	mov	r0, r5
 80102c0:	f001 fee2 	bl	8012088 <uxr_deserialize_STATUS_Payload>
 80102c4:	a90e      	add	r1, sp, #56	@ 0x38
 80102c6:	aa0d      	add	r2, sp, #52	@ 0x34
 80102c8:	a810      	add	r0, sp, #64	@ 0x40
 80102ca:	f000 fd4f 	bl	8010d6c <uxr_parse_base_object_request>
 80102ce:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80102d0:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80102d4:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80102d8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80102dc:	910f      	str	r1, [sp, #60]	@ 0x3c
 80102de:	f1ba 0f00 	cmp.w	sl, #0
 80102e2:	d006      	beq.n	80102f2 <read_submessage_list+0x266>
 80102e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80102e8:	4642      	mov	r2, r8
 80102ea:	4620      	mov	r0, r4
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	464b      	mov	r3, r9
 80102f0:	47d0      	blx	sl
 80102f2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80102f4:	2a00      	cmp	r2, #0
 80102f6:	f43f aed0 	beq.w	801009a <read_submessage_list+0xe>
 80102fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80102fc:	2100      	movs	r1, #0
 80102fe:	3802      	subs	r0, #2
 8010300:	e003      	b.n	801030a <read_submessage_list+0x27e>
 8010302:	3101      	adds	r1, #1
 8010304:	4291      	cmp	r1, r2
 8010306:	f43f aec8 	beq.w	801009a <read_submessage_list+0xe>
 801030a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801030e:	4543      	cmp	r3, r8
 8010310:	d1f7      	bne.n	8010302 <read_submessage_list+0x276>
 8010312:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010314:	f803 9001 	strb.w	r9, [r3, r1]
 8010318:	e6bf      	b.n	801009a <read_submessage_list+0xe>
 801031a:	2a00      	cmp	r2, #0
 801031c:	f47f aebd 	bne.w	801009a <read_submessage_list+0xe>
 8010320:	4629      	mov	r1, r5
 8010322:	4620      	mov	r0, r4
 8010324:	f000 fc66 	bl	8010bf4 <uxr_read_create_session_status>
 8010328:	e6b7      	b.n	801009a <read_submessage_list+0xe>
 801032a:	4629      	mov	r1, r5
 801032c:	4620      	mov	r0, r4
 801032e:	f7ff fcf3 	bl	800fd18 <read_submessage_get_info>
 8010332:	e6b2      	b.n	801009a <read_submessage_list+0xe>
 8010334:	b017      	add	sp, #92	@ 0x5c
 8010336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033a:	4629      	mov	r1, r5
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fc67 	bl	8010c10 <uxr_read_delete_session_status>
 8010342:	e6aa      	b.n	801009a <read_submessage_list+0xe>
 8010344:	f000 fec4 	bl	80110d0 <uxr_nanos>
 8010348:	4642      	mov	r2, r8
 801034a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801034c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801034e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010352:	1818      	adds	r0, r3, r0
 8010354:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010356:	eb42 0101 	adc.w	r1, r2, r1
 801035a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801035c:	4642      	mov	r2, r8
 801035e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8010362:	469c      	mov	ip, r3
 8010364:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8010368:	fbc3 7806 	smlal	r7, r8, r3, r6
 801036c:	4643      	mov	r3, r8
 801036e:	eb1c 0c07 	adds.w	ip, ip, r7
 8010372:	eb42 0203 	adc.w	r2, r2, r3
 8010376:	ebb0 030c 	subs.w	r3, r0, ip
 801037a:	eb61 0202 	sbc.w	r2, r1, r2
 801037e:	2a00      	cmp	r2, #0
 8010380:	db08      	blt.n	8010394 <read_submessage_list+0x308>
 8010382:	085b      	lsrs	r3, r3, #1
 8010384:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010388:	1052      	asrs	r2, r2, #1
 801038a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 801038e:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8010392:	e6db      	b.n	801014c <read_submessage_list+0xc0>
 8010394:	3301      	adds	r3, #1
 8010396:	f142 0200 	adc.w	r2, r2, #0
 801039a:	e7f2      	b.n	8010382 <read_submessage_list+0x2f6>
 801039c:	3b9aca00 	.word	0x3b9aca00

080103a0 <listen_message_reliably>:
 80103a0:	1e0b      	subs	r3, r1, #0
 80103a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a6:	bfb8      	it	lt
 80103a8:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80103ac:	b09d      	sub	sp, #116	@ 0x74
 80103ae:	4680      	mov	r8, r0
 80103b0:	9305      	str	r3, [sp, #20]
 80103b2:	f000 fe71 	bl	8011098 <uxr_millis>
 80103b6:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80103ba:	4681      	mov	r9, r0
 80103bc:	2a00      	cmp	r2, #0
 80103be:	f000 809a 	beq.w	80104f6 <listen_message_reliably+0x156>
 80103c2:	2600      	movs	r6, #0
 80103c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80103c8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80103cc:	460f      	mov	r7, r1
 80103ce:	4630      	mov	r0, r6
 80103d0:	9303      	str	r3, [sp, #12]
 80103d2:	e00e      	b.n	80103f2 <listen_message_reliably+0x52>
 80103d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103d6:	3601      	adds	r6, #1
 80103d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103da:	455a      	cmp	r2, fp
 80103dc:	9903      	ldr	r1, [sp, #12]
 80103de:	b2f0      	uxtb	r0, r6
 80103e0:	eb73 0101 	sbcs.w	r1, r3, r1
 80103e4:	da01      	bge.n	80103ea <listen_message_reliably+0x4a>
 80103e6:	4693      	mov	fp, r2
 80103e8:	9303      	str	r3, [sp, #12]
 80103ea:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80103ee:	4283      	cmp	r3, r0
 80103f0:	d95f      	bls.n	80104b2 <listen_message_reliably+0x112>
 80103f2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80103f6:	2102      	movs	r1, #2
 80103f8:	2201      	movs	r2, #1
 80103fa:	00e4      	lsls	r4, r4, #3
 80103fc:	f000 fcc8 	bl	8010d90 <uxr_stream_id>
 8010400:	4601      	mov	r1, r0
 8010402:	f104 0520 	add.w	r5, r4, #32
 8010406:	463b      	mov	r3, r7
 8010408:	464a      	mov	r2, r9
 801040a:	9109      	str	r1, [sp, #36]	@ 0x24
 801040c:	4445      	add	r5, r8
 801040e:	4628      	mov	r0, r5
 8010410:	f005 f96a 	bl	80156e8 <uxr_update_output_stream_heartbeat_timestamp>
 8010414:	eb08 0304 	add.w	r3, r8, r4
 8010418:	2800      	cmp	r0, #0
 801041a:	d0db      	beq.n	80103d4 <listen_message_reliably+0x34>
 801041c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010420:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010424:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010428:	4640      	mov	r0, r8
 801042a:	3501      	adds	r5, #1
 801042c:	4444      	add	r4, r8
 801042e:	9304      	str	r3, [sp, #16]
 8010430:	f000 fc74 	bl	8010d1c <uxr_session_header_offset>
 8010434:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010438:	2300      	movs	r3, #0
 801043a:	2211      	movs	r2, #17
 801043c:	a90c      	add	r1, sp, #48	@ 0x30
 801043e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010442:	9000      	str	r0, [sp, #0]
 8010444:	4650      	mov	r0, sl
 8010446:	3601      	adds	r6, #1
 8010448:	f7ff f8e6 	bl	800f618 <ucdr_init_buffer_origin_offset>
 801044c:	2300      	movs	r3, #0
 801044e:	2205      	movs	r2, #5
 8010450:	210b      	movs	r1, #11
 8010452:	4650      	mov	r0, sl
 8010454:	f000 fdda 	bl	801100c <uxr_buffer_submessage_header>
 8010458:	2101      	movs	r1, #1
 801045a:	8968      	ldrh	r0, [r5, #10]
 801045c:	f005 fa08 	bl	8015870 <uxr_seq_num_add>
 8010460:	892b      	ldrh	r3, [r5, #8]
 8010462:	4602      	mov	r2, r0
 8010464:	a90a      	add	r1, sp, #40	@ 0x28
 8010466:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801046a:	4650      	mov	r0, sl
 801046c:	9b04      	ldr	r3, [sp, #16]
 801046e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010472:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010476:	f001 fec3 	bl	8012200 <uxr_serialize_HEARTBEAT_Payload>
 801047a:	2200      	movs	r2, #0
 801047c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801047e:	4640      	mov	r0, r8
 8010480:	4611      	mov	r1, r2
 8010482:	f000 fbf7 	bl	8010c74 <uxr_stamp_session_header>
 8010486:	4650      	mov	r0, sl
 8010488:	f7ff f906 	bl	800f698 <ucdr_buffer_length>
 801048c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010490:	4602      	mov	r2, r0
 8010492:	a90c      	add	r1, sp, #48	@ 0x30
 8010494:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010498:	47a8      	blx	r5
 801049a:	9903      	ldr	r1, [sp, #12]
 801049c:	b2f0      	uxtb	r0, r6
 801049e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80104a2:	455a      	cmp	r2, fp
 80104a4:	eb73 0101 	sbcs.w	r1, r3, r1
 80104a8:	db9d      	blt.n	80103e6 <listen_message_reliably+0x46>
 80104aa:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80104ae:	4283      	cmp	r3, r0
 80104b0:	d89f      	bhi.n	80103f2 <listen_message_reliably+0x52>
 80104b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80104b6:	9a03      	ldr	r2, [sp, #12]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	bf08      	it	eq
 80104bc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80104c0:	d019      	beq.n	80104f6 <listen_message_reliably+0x156>
 80104c2:	ebab 0309 	sub.w	r3, fp, r9
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	9d05      	ldr	r5, [sp, #20]
 80104ca:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80104ce:	aa08      	add	r2, sp, #32
 80104d0:	bf08      	it	eq
 80104d2:	2301      	moveq	r3, #1
 80104d4:	a907      	add	r1, sp, #28
 80104d6:	6884      	ldr	r4, [r0, #8]
 80104d8:	429d      	cmp	r5, r3
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	bfa8      	it	ge
 80104de:	461d      	movge	r5, r3
 80104e0:	462b      	mov	r3, r5
 80104e2:	47a0      	blx	r4
 80104e4:	b948      	cbnz	r0, 80104fa <listen_message_reliably+0x15a>
 80104e6:	9b05      	ldr	r3, [sp, #20]
 80104e8:	1b5b      	subs	r3, r3, r5
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	9305      	str	r3, [sp, #20]
 80104ee:	f73f af60 	bgt.w	80103b2 <listen_message_reliably+0x12>
 80104f2:	4604      	mov	r4, r0
 80104f4:	e012      	b.n	801051c <listen_message_reliably+0x17c>
 80104f6:	9b05      	ldr	r3, [sp, #20]
 80104f8:	e7e5      	b.n	80104c6 <listen_message_reliably+0x126>
 80104fa:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80104fe:	4604      	mov	r4, r0
 8010500:	2500      	movs	r5, #0
 8010502:	a80c      	add	r0, sp, #48	@ 0x30
 8010504:	f7ff f89a 	bl	800f63c <ucdr_init_buffer>
 8010508:	f10d 031a 	add.w	r3, sp, #26
 801050c:	aa06      	add	r2, sp, #24
 801050e:	a90c      	add	r1, sp, #48	@ 0x30
 8010510:	4640      	mov	r0, r8
 8010512:	f88d 5018 	strb.w	r5, [sp, #24]
 8010516:	f000 fbc1 	bl	8010c9c <uxr_read_session_header>
 801051a:	b918      	cbnz	r0, 8010524 <listen_message_reliably+0x184>
 801051c:	4620      	mov	r0, r4
 801051e:	b01d      	add	sp, #116	@ 0x74
 8010520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010524:	4629      	mov	r1, r5
 8010526:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801052a:	f000 fc5f 	bl	8010dec <uxr_stream_id_from_raw>
 801052e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010532:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010536:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801053a:	2e01      	cmp	r6, #1
 801053c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010540:	d04b      	beq.n	80105da <listen_message_reliably+0x23a>
 8010542:	2e02      	cmp	r6, #2
 8010544:	d00f      	beq.n	8010566 <listen_message_reliably+0x1c6>
 8010546:	2e00      	cmp	r6, #0
 8010548:	d1e8      	bne.n	801051c <listen_message_reliably+0x17c>
 801054a:	4631      	mov	r1, r6
 801054c:	4630      	mov	r0, r6
 801054e:	f000 fc4d 	bl	8010dec <uxr_stream_id_from_raw>
 8010552:	4602      	mov	r2, r0
 8010554:	a90c      	add	r1, sp, #48	@ 0x30
 8010556:	4640      	mov	r0, r8
 8010558:	920a      	str	r2, [sp, #40]	@ 0x28
 801055a:	f7ff fd97 	bl	801008c <read_submessage_list>
 801055e:	4620      	mov	r0, r4
 8010560:	b01d      	add	sp, #116	@ 0x74
 8010562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010566:	4629      	mov	r1, r5
 8010568:	f108 0008 	add.w	r0, r8, #8
 801056c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010570:	f000 fd2a 	bl	8010fc8 <uxr_get_input_reliable_stream>
 8010574:	4607      	mov	r7, r0
 8010576:	b338      	cbz	r0, 80105c8 <listen_message_reliably+0x228>
 8010578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801057a:	a80c      	add	r0, sp, #48	@ 0x30
 801057c:	9203      	str	r2, [sp, #12]
 801057e:	f7ff f88f 	bl	800f6a0 <ucdr_buffer_remaining>
 8010582:	4603      	mov	r3, r0
 8010584:	f10d 0019 	add.w	r0, sp, #25
 8010588:	9a03      	ldr	r2, [sp, #12]
 801058a:	4651      	mov	r1, sl
 801058c:	9000      	str	r0, [sp, #0]
 801058e:	4638      	mov	r0, r7
 8010590:	f004 fcb4 	bl	8014efc <uxr_receive_reliable_message>
 8010594:	b1c0      	cbz	r0, 80105c8 <listen_message_reliably+0x228>
 8010596:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801059a:	b393      	cbz	r3, 8010602 <listen_message_reliably+0x262>
 801059c:	ae14      	add	r6, sp, #80	@ 0x50
 801059e:	f04f 0a02 	mov.w	sl, #2
 80105a2:	e00a      	b.n	80105ba <listen_message_reliably+0x21a>
 80105a4:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80105a8:	4631      	mov	r1, r6
 80105aa:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80105ae:	4640      	mov	r0, r8
 80105b0:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80105b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105b6:	f7ff fd69 	bl	801008c <read_submessage_list>
 80105ba:	2204      	movs	r2, #4
 80105bc:	4631      	mov	r1, r6
 80105be:	4638      	mov	r0, r7
 80105c0:	f004 fd1e 	bl	8015000 <uxr_next_input_reliable_buffer_available>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d1ed      	bne.n	80105a4 <listen_message_reliably+0x204>
 80105c8:	4640      	mov	r0, r8
 80105ca:	462a      	mov	r2, r5
 80105cc:	4649      	mov	r1, r9
 80105ce:	f7ff fbd9 	bl	800fd84 <write_submessage_acknack.isra.0>
 80105d2:	4620      	mov	r0, r4
 80105d4:	b01d      	add	sp, #116	@ 0x74
 80105d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105da:	4629      	mov	r1, r5
 80105dc:	f108 0008 	add.w	r0, r8, #8
 80105e0:	f000 fce8 	bl	8010fb4 <uxr_get_input_best_effort_stream>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d099      	beq.n	801051c <listen_message_reliably+0x17c>
 80105e8:	4651      	mov	r1, sl
 80105ea:	f004 fbfd 	bl	8014de8 <uxr_receive_best_effort_message>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d094      	beq.n	801051c <listen_message_reliably+0x17c>
 80105f2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80105f6:	a90c      	add	r1, sp, #48	@ 0x30
 80105f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105fa:	4640      	mov	r0, r8
 80105fc:	f7ff fd46 	bl	801008c <read_submessage_list>
 8010600:	e78c      	b.n	801051c <listen_message_reliably+0x17c>
 8010602:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010606:	a90c      	add	r1, sp, #48	@ 0x30
 8010608:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801060a:	4640      	mov	r0, r8
 801060c:	f7ff fd3e 	bl	801008c <read_submessage_list>
 8010610:	e7c4      	b.n	801059c <listen_message_reliably+0x1fc>
 8010612:	bf00      	nop

08010614 <uxr_run_session_until_confirm_delivery>:
 8010614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010618:	4606      	mov	r6, r0
 801061a:	460d      	mov	r5, r1
 801061c:	f000 fd3c 	bl	8011098 <uxr_millis>
 8010620:	4607      	mov	r7, r0
 8010622:	4630      	mov	r0, r6
 8010624:	f106 0808 	add.w	r8, r6, #8
 8010628:	f7ff fc74 	bl	800ff14 <uxr_flash_output_streams>
 801062c:	2d00      	cmp	r5, #0
 801062e:	db10      	blt.n	8010652 <uxr_run_session_until_confirm_delivery+0x3e>
 8010630:	462c      	mov	r4, r5
 8010632:	e006      	b.n	8010642 <uxr_run_session_until_confirm_delivery+0x2e>
 8010634:	f7ff feb4 	bl	80103a0 <listen_message_reliably>
 8010638:	f000 fd2e 	bl	8011098 <uxr_millis>
 801063c:	1bc3      	subs	r3, r0, r7
 801063e:	1aec      	subs	r4, r5, r3
 8010640:	d407      	bmi.n	8010652 <uxr_run_session_until_confirm_delivery+0x3e>
 8010642:	4640      	mov	r0, r8
 8010644:	f000 fccc 	bl	8010fe0 <uxr_output_streams_confirmed>
 8010648:	4603      	mov	r3, r0
 801064a:	4621      	mov	r1, r4
 801064c:	4630      	mov	r0, r6
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0f0      	beq.n	8010634 <uxr_run_session_until_confirm_delivery+0x20>
 8010652:	4640      	mov	r0, r8
 8010654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010658:	f000 bcc2 	b.w	8010fe0 <uxr_output_streams_confirmed>

0801065c <uxr_run_session_until_all_status>:
 801065c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010660:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8010664:	4606      	mov	r6, r0
 8010666:	4688      	mov	r8, r1
 8010668:	4692      	mov	sl, r2
 801066a:	461f      	mov	r7, r3
 801066c:	f7ff fc52 	bl	800ff14 <uxr_flash_output_streams>
 8010670:	f1bb 0f00 	cmp.w	fp, #0
 8010674:	d004      	beq.n	8010680 <uxr_run_session_until_all_status+0x24>
 8010676:	465a      	mov	r2, fp
 8010678:	21ff      	movs	r1, #255	@ 0xff
 801067a:	4638      	mov	r0, r7
 801067c:	f006 fdba 	bl	80171f4 <memset>
 8010680:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8010684:	1e7d      	subs	r5, r7, #1
 8010686:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 801068a:	f000 fd05 	bl	8011098 <uxr_millis>
 801068e:	4641      	mov	r1, r8
 8010690:	4681      	mov	r9, r0
 8010692:	4630      	mov	r0, r6
 8010694:	f7ff fe84 	bl	80103a0 <listen_message_reliably>
 8010698:	f000 fcfe 	bl	8011098 <uxr_millis>
 801069c:	eba0 0009 	sub.w	r0, r0, r9
 80106a0:	eba8 0100 	sub.w	r1, r8, r0
 80106a4:	f1bb 0f00 	cmp.w	fp, #0
 80106a8:	d029      	beq.n	80106fe <uxr_run_session_until_all_status+0xa2>
 80106aa:	46ae      	mov	lr, r5
 80106ac:	f04f 0c00 	mov.w	ip, #0
 80106b0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80106b4:	2cff      	cmp	r4, #255	@ 0xff
 80106b6:	d015      	beq.n	80106e4 <uxr_run_session_until_all_status+0x88>
 80106b8:	f10c 0c01 	add.w	ip, ip, #1
 80106bc:	45e3      	cmp	fp, ip
 80106be:	d8f7      	bhi.n	80106b0 <uxr_run_session_until_all_status+0x54>
 80106c0:	2300      	movs	r3, #0
 80106c2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80106c4:	e000      	b.n	80106c8 <uxr_run_session_until_all_status+0x6c>
 80106c6:	b158      	cbz	r0, 80106e0 <uxr_run_session_until_all_status+0x84>
 80106c8:	462b      	mov	r3, r5
 80106ca:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80106ce:	3302      	adds	r3, #2
 80106d0:	2801      	cmp	r0, #1
 80106d2:	eba3 0307 	sub.w	r3, r3, r7
 80106d6:	bf8c      	ite	hi
 80106d8:	2000      	movhi	r0, #0
 80106da:	2001      	movls	r0, #1
 80106dc:	459b      	cmp	fp, r3
 80106de:	d8f2      	bhi.n	80106c6 <uxr_run_session_until_all_status+0x6a>
 80106e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e4:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80106e8:	f10c 0c01 	add.w	ip, ip, #1
 80106ec:	45dc      	cmp	ip, fp
 80106ee:	d201      	bcs.n	80106f4 <uxr_run_session_until_all_status+0x98>
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d0dd      	beq.n	80106b0 <uxr_run_session_until_all_status+0x54>
 80106f4:	2900      	cmp	r1, #0
 80106f6:	dde3      	ble.n	80106c0 <uxr_run_session_until_all_status+0x64>
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1ca      	bne.n	8010692 <uxr_run_session_until_all_status+0x36>
 80106fc:	e7e0      	b.n	80106c0 <uxr_run_session_until_all_status+0x64>
 80106fe:	2001      	movs	r0, #1
 8010700:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8010704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010708 <wait_session_status>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	4604      	mov	r4, r0
 801070e:	b09d      	sub	sp, #116	@ 0x74
 8010710:	20ff      	movs	r0, #255	@ 0xff
 8010712:	9303      	str	r3, [sp, #12]
 8010714:	7160      	strb	r0, [r4, #5]
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 80b6 	beq.w	8010888 <wait_session_status+0x180>
 801071c:	4689      	mov	r9, r1
 801071e:	4692      	mov	sl, r2
 8010720:	f04f 0b00 	mov.w	fp, #0
 8010724:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010726:	4652      	mov	r2, sl
 8010728:	4649      	mov	r1, r9
 801072a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801072e:	47a8      	blx	r5
 8010730:	f000 fcb2 	bl	8011098 <uxr_millis>
 8010734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010738:	4605      	mov	r5, r0
 801073a:	e009      	b.n	8010750 <wait_session_status+0x48>
 801073c:	f000 fcac 	bl	8011098 <uxr_millis>
 8010740:	1b40      	subs	r0, r0, r5
 8010742:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010746:	2b00      	cmp	r3, #0
 8010748:	dd40      	ble.n	80107cc <wait_session_status+0xc4>
 801074a:	7960      	ldrb	r0, [r4, #5]
 801074c:	28ff      	cmp	r0, #255	@ 0xff
 801074e:	d145      	bne.n	80107dc <wait_session_status+0xd4>
 8010750:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010752:	a908      	add	r1, sp, #32
 8010754:	6896      	ldr	r6, [r2, #8]
 8010756:	6810      	ldr	r0, [r2, #0]
 8010758:	aa09      	add	r2, sp, #36	@ 0x24
 801075a:	47b0      	blx	r6
 801075c:	2800      	cmp	r0, #0
 801075e:	d0ed      	beq.n	801073c <wait_session_status+0x34>
 8010760:	a80c      	add	r0, sp, #48	@ 0x30
 8010762:	2600      	movs	r6, #0
 8010764:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010768:	f7fe ff68 	bl	800f63c <ucdr_init_buffer>
 801076c:	f10d 031e 	add.w	r3, sp, #30
 8010770:	aa07      	add	r2, sp, #28
 8010772:	a90c      	add	r1, sp, #48	@ 0x30
 8010774:	4620      	mov	r0, r4
 8010776:	f88d 601c 	strb.w	r6, [sp, #28]
 801077a:	f000 fa8f 	bl	8010c9c <uxr_read_session_header>
 801077e:	2800      	cmp	r0, #0
 8010780:	d0dc      	beq.n	801073c <wait_session_status+0x34>
 8010782:	4631      	mov	r1, r6
 8010784:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010788:	f000 fb30 	bl	8010dec <uxr_stream_id_from_raw>
 801078c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010790:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010794:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010798:	2f01      	cmp	r7, #1
 801079a:	9302      	str	r3, [sp, #8]
 801079c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80107a0:	d05c      	beq.n	801085c <wait_session_status+0x154>
 80107a2:	2f02      	cmp	r7, #2
 80107a4:	d020      	beq.n	80107e8 <wait_session_status+0xe0>
 80107a6:	2f00      	cmp	r7, #0
 80107a8:	d1c8      	bne.n	801073c <wait_session_status+0x34>
 80107aa:	4639      	mov	r1, r7
 80107ac:	4638      	mov	r0, r7
 80107ae:	f000 fb1d 	bl	8010dec <uxr_stream_id_from_raw>
 80107b2:	a90c      	add	r1, sp, #48	@ 0x30
 80107b4:	4602      	mov	r2, r0
 80107b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80107b8:	4620      	mov	r0, r4
 80107ba:	f7ff fc67 	bl	801008c <read_submessage_list>
 80107be:	f000 fc6b 	bl	8011098 <uxr_millis>
 80107c2:	1b40      	subs	r0, r0, r5
 80107c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dcbe      	bgt.n	801074a <wait_session_status+0x42>
 80107cc:	f10b 0b01 	add.w	fp, fp, #1
 80107d0:	9b03      	ldr	r3, [sp, #12]
 80107d2:	7960      	ldrb	r0, [r4, #5]
 80107d4:	455b      	cmp	r3, fp
 80107d6:	d001      	beq.n	80107dc <wait_session_status+0xd4>
 80107d8:	28ff      	cmp	r0, #255	@ 0xff
 80107da:	d0a3      	beq.n	8010724 <wait_session_status+0x1c>
 80107dc:	38ff      	subs	r0, #255	@ 0xff
 80107de:	bf18      	it	ne
 80107e0:	2001      	movne	r0, #1
 80107e2:	b01d      	add	sp, #116	@ 0x74
 80107e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80107ec:	4631      	mov	r1, r6
 80107ee:	f104 0008 	add.w	r0, r4, #8
 80107f2:	9304      	str	r3, [sp, #16]
 80107f4:	f000 fbe8 	bl	8010fc8 <uxr_get_input_reliable_stream>
 80107f8:	4680      	mov	r8, r0
 80107fa:	b348      	cbz	r0, 8010850 <wait_session_status+0x148>
 80107fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107fe:	a80c      	add	r0, sp, #48	@ 0x30
 8010800:	9205      	str	r2, [sp, #20]
 8010802:	f7fe ff4d 	bl	800f6a0 <ucdr_buffer_remaining>
 8010806:	4603      	mov	r3, r0
 8010808:	f10d 001d 	add.w	r0, sp, #29
 801080c:	9a05      	ldr	r2, [sp, #20]
 801080e:	9000      	str	r0, [sp, #0]
 8010810:	4640      	mov	r0, r8
 8010812:	9902      	ldr	r1, [sp, #8]
 8010814:	f004 fb72 	bl	8014efc <uxr_receive_reliable_message>
 8010818:	b1d0      	cbz	r0, 8010850 <wait_session_status+0x148>
 801081a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d03a      	beq.n	8010898 <wait_session_status+0x190>
 8010822:	9f04      	ldr	r7, [sp, #16]
 8010824:	e00a      	b.n	801083c <wait_session_status+0x134>
 8010826:	f04f 0302 	mov.w	r3, #2
 801082a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801082e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010832:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010838:	f7ff fc28 	bl	801008c <read_submessage_list>
 801083c:	a914      	add	r1, sp, #80	@ 0x50
 801083e:	2204      	movs	r2, #4
 8010840:	4640      	mov	r0, r8
 8010842:	f004 fbdd 	bl	8015000 <uxr_next_input_reliable_buffer_available>
 8010846:	4603      	mov	r3, r0
 8010848:	a914      	add	r1, sp, #80	@ 0x50
 801084a:	4620      	mov	r0, r4
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1ea      	bne.n	8010826 <wait_session_status+0x11e>
 8010850:	4632      	mov	r2, r6
 8010852:	9904      	ldr	r1, [sp, #16]
 8010854:	4620      	mov	r0, r4
 8010856:	f7ff fa95 	bl	800fd84 <write_submessage_acknack.isra.0>
 801085a:	e76f      	b.n	801073c <wait_session_status+0x34>
 801085c:	4631      	mov	r1, r6
 801085e:	f104 0008 	add.w	r0, r4, #8
 8010862:	f000 fba7 	bl	8010fb4 <uxr_get_input_best_effort_stream>
 8010866:	2800      	cmp	r0, #0
 8010868:	f43f af68 	beq.w	801073c <wait_session_status+0x34>
 801086c:	9902      	ldr	r1, [sp, #8]
 801086e:	f004 fabb 	bl	8014de8 <uxr_receive_best_effort_message>
 8010872:	2800      	cmp	r0, #0
 8010874:	f43f af62 	beq.w	801073c <wait_session_status+0x34>
 8010878:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801087c:	a90c      	add	r1, sp, #48	@ 0x30
 801087e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010880:	4620      	mov	r0, r4
 8010882:	f7ff fc03 	bl	801008c <read_submessage_list>
 8010886:	e759      	b.n	801073c <wait_session_status+0x34>
 8010888:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801088a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801088e:	47a0      	blx	r4
 8010890:	2001      	movs	r0, #1
 8010892:	b01d      	add	sp, #116	@ 0x74
 8010894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010898:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801089c:	a90c      	add	r1, sp, #48	@ 0x30
 801089e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108a0:	4620      	mov	r0, r4
 80108a2:	f7ff fbf3 	bl	801008c <read_submessage_list>
 80108a6:	e7bc      	b.n	8010822 <wait_session_status+0x11a>

080108a8 <uxr_delete_session_retries>:
 80108a8:	b530      	push	{r4, r5, lr}
 80108aa:	b08f      	sub	sp, #60	@ 0x3c
 80108ac:	4604      	mov	r4, r0
 80108ae:	460d      	mov	r5, r1
 80108b0:	f000 fa34 	bl	8010d1c <uxr_session_header_offset>
 80108b4:	2300      	movs	r3, #0
 80108b6:	2210      	movs	r2, #16
 80108b8:	a902      	add	r1, sp, #8
 80108ba:	9000      	str	r0, [sp, #0]
 80108bc:	a806      	add	r0, sp, #24
 80108be:	f7fe feab 	bl	800f618 <ucdr_init_buffer_origin_offset>
 80108c2:	a906      	add	r1, sp, #24
 80108c4:	4620      	mov	r0, r4
 80108c6:	f000 f979 	bl	8010bbc <uxr_buffer_delete_session>
 80108ca:	2200      	movs	r2, #0
 80108cc:	9b06      	ldr	r3, [sp, #24]
 80108ce:	4620      	mov	r0, r4
 80108d0:	4611      	mov	r1, r2
 80108d2:	f000 f9cf 	bl	8010c74 <uxr_stamp_session_header>
 80108d6:	a806      	add	r0, sp, #24
 80108d8:	f7fe fede 	bl	800f698 <ucdr_buffer_length>
 80108dc:	462b      	mov	r3, r5
 80108de:	4602      	mov	r2, r0
 80108e0:	a902      	add	r1, sp, #8
 80108e2:	4620      	mov	r0, r4
 80108e4:	f7ff ff10 	bl	8010708 <wait_session_status>
 80108e8:	b118      	cbz	r0, 80108f2 <uxr_delete_session_retries+0x4a>
 80108ea:	7960      	ldrb	r0, [r4, #5]
 80108ec:	fab0 f080 	clz	r0, r0
 80108f0:	0940      	lsrs	r0, r0, #5
 80108f2:	b00f      	add	sp, #60	@ 0x3c
 80108f4:	bd30      	pop	{r4, r5, pc}
 80108f6:	bf00      	nop

080108f8 <uxr_create_session>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	f100 0b08 	add.w	fp, r0, #8
 8010900:	4604      	mov	r4, r0
 8010902:	b0ab      	sub	sp, #172	@ 0xac
 8010904:	4658      	mov	r0, fp
 8010906:	465e      	mov	r6, fp
 8010908:	f000 faa6 	bl	8010e58 <uxr_reset_stream_storage>
 801090c:	4620      	mov	r0, r4
 801090e:	f000 fa05 	bl	8010d1c <uxr_session_header_offset>
 8010912:	2300      	movs	r3, #0
 8010914:	221c      	movs	r2, #28
 8010916:	a90b      	add	r1, sp, #44	@ 0x2c
 8010918:	9000      	str	r0, [sp, #0]
 801091a:	a812      	add	r0, sp, #72	@ 0x48
 801091c:	f7fe fe7c 	bl	800f618 <ucdr_init_buffer_origin_offset>
 8010920:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010922:	a912      	add	r1, sp, #72	@ 0x48
 8010924:	4620      	mov	r0, r4
 8010926:	8a1a      	ldrh	r2, [r3, #16]
 8010928:	3a04      	subs	r2, #4
 801092a:	b292      	uxth	r2, r2
 801092c:	f000 f91c 	bl	8010b68 <uxr_buffer_create_session>
 8010930:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010932:	4620      	mov	r0, r4
 8010934:	f000 f98a 	bl	8010c4c <uxr_stamp_create_session_header>
 8010938:	a812      	add	r0, sp, #72	@ 0x48
 801093a:	f7fe fead 	bl	800f698 <ucdr_buffer_length>
 801093e:	23ff      	movs	r3, #255	@ 0xff
 8010940:	4681      	mov	r9, r0
 8010942:	7163      	strb	r3, [r4, #5]
 8010944:	230a      	movs	r3, #10
 8010946:	9303      	str	r3, [sp, #12]
 8010948:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801094a:	464a      	mov	r2, r9
 801094c:	a90b      	add	r1, sp, #44	@ 0x2c
 801094e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010952:	47a8      	blx	r5
 8010954:	f000 fba0 	bl	8011098 <uxr_millis>
 8010958:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801095c:	4605      	mov	r5, r0
 801095e:	e009      	b.n	8010974 <uxr_create_session+0x7c>
 8010960:	f000 fb9a 	bl	8011098 <uxr_millis>
 8010964:	1b40      	subs	r0, r0, r5
 8010966:	7962      	ldrb	r2, [r4, #5]
 8010968:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801096c:	2b00      	cmp	r3, #0
 801096e:	dd38      	ble.n	80109e2 <uxr_create_session+0xea>
 8010970:	2aff      	cmp	r2, #255	@ 0xff
 8010972:	d13c      	bne.n	80109ee <uxr_create_session+0xf6>
 8010974:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010976:	a907      	add	r1, sp, #28
 8010978:	6897      	ldr	r7, [r2, #8]
 801097a:	6810      	ldr	r0, [r2, #0]
 801097c:	aa08      	add	r2, sp, #32
 801097e:	47b8      	blx	r7
 8010980:	2800      	cmp	r0, #0
 8010982:	d0ed      	beq.n	8010960 <uxr_create_session+0x68>
 8010984:	a81a      	add	r0, sp, #104	@ 0x68
 8010986:	2700      	movs	r7, #0
 8010988:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801098c:	f7fe fe56 	bl	800f63c <ucdr_init_buffer>
 8010990:	f10d 031a 	add.w	r3, sp, #26
 8010994:	aa06      	add	r2, sp, #24
 8010996:	a91a      	add	r1, sp, #104	@ 0x68
 8010998:	4620      	mov	r0, r4
 801099a:	f88d 7018 	strb.w	r7, [sp, #24]
 801099e:	f000 f97d 	bl	8010c9c <uxr_read_session_header>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d0dc      	beq.n	8010960 <uxr_create_session+0x68>
 80109a6:	4639      	mov	r1, r7
 80109a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80109ac:	f000 fa1e 	bl	8010dec <uxr_stream_id_from_raw>
 80109b0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80109b4:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80109b8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80109bc:	2f01      	cmp	r7, #1
 80109be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80109c2:	d053      	beq.n	8010a6c <uxr_create_session+0x174>
 80109c4:	2f02      	cmp	r7, #2
 80109c6:	d018      	beq.n	80109fa <uxr_create_session+0x102>
 80109c8:	2f00      	cmp	r7, #0
 80109ca:	d1c9      	bne.n	8010960 <uxr_create_session+0x68>
 80109cc:	4639      	mov	r1, r7
 80109ce:	4638      	mov	r0, r7
 80109d0:	f000 fa0c 	bl	8010dec <uxr_stream_id_from_raw>
 80109d4:	a91a      	add	r1, sp, #104	@ 0x68
 80109d6:	4602      	mov	r2, r0
 80109d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80109da:	4620      	mov	r0, r4
 80109dc:	f7ff fb56 	bl	801008c <read_submessage_list>
 80109e0:	e7be      	b.n	8010960 <uxr_create_session+0x68>
 80109e2:	9b03      	ldr	r3, [sp, #12]
 80109e4:	3b01      	subs	r3, #1
 80109e6:	9303      	str	r3, [sp, #12]
 80109e8:	d001      	beq.n	80109ee <uxr_create_session+0xf6>
 80109ea:	2aff      	cmp	r2, #255	@ 0xff
 80109ec:	d0ac      	beq.n	8010948 <uxr_create_session+0x50>
 80109ee:	2a00      	cmp	r2, #0
 80109f0:	d051      	beq.n	8010a96 <uxr_create_session+0x19e>
 80109f2:	2000      	movs	r0, #0
 80109f4:	b02b      	add	sp, #172	@ 0xac
 80109f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80109fe:	4641      	mov	r1, r8
 8010a00:	4630      	mov	r0, r6
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	f000 fae0 	bl	8010fc8 <uxr_get_input_reliable_stream>
 8010a08:	4682      	mov	sl, r0
 8010a0a:	b348      	cbz	r0, 8010a60 <uxr_create_session+0x168>
 8010a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a0e:	a81a      	add	r0, sp, #104	@ 0x68
 8010a10:	9205      	str	r2, [sp, #20]
 8010a12:	f7fe fe45 	bl	800f6a0 <ucdr_buffer_remaining>
 8010a16:	4603      	mov	r3, r0
 8010a18:	f10d 0019 	add.w	r0, sp, #25
 8010a1c:	9a05      	ldr	r2, [sp, #20]
 8010a1e:	4659      	mov	r1, fp
 8010a20:	9000      	str	r0, [sp, #0]
 8010a22:	4650      	mov	r0, sl
 8010a24:	f004 fa6a 	bl	8014efc <uxr_receive_reliable_message>
 8010a28:	b1d0      	cbz	r0, 8010a60 <uxr_create_session+0x168>
 8010a2a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d038      	beq.n	8010aa4 <uxr_create_session+0x1ac>
 8010a32:	9f04      	ldr	r7, [sp, #16]
 8010a34:	e00a      	b.n	8010a4c <uxr_create_session+0x154>
 8010a36:	f04f 0302 	mov.w	r3, #2
 8010a3a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8010a3e:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8010a42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a48:	f7ff fb20 	bl	801008c <read_submessage_list>
 8010a4c:	a922      	add	r1, sp, #136	@ 0x88
 8010a4e:	2204      	movs	r2, #4
 8010a50:	4650      	mov	r0, sl
 8010a52:	f004 fad5 	bl	8015000 <uxr_next_input_reliable_buffer_available>
 8010a56:	4603      	mov	r3, r0
 8010a58:	a922      	add	r1, sp, #136	@ 0x88
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d1ea      	bne.n	8010a36 <uxr_create_session+0x13e>
 8010a60:	4642      	mov	r2, r8
 8010a62:	9904      	ldr	r1, [sp, #16]
 8010a64:	4620      	mov	r0, r4
 8010a66:	f7ff f98d 	bl	800fd84 <write_submessage_acknack.isra.0>
 8010a6a:	e779      	b.n	8010960 <uxr_create_session+0x68>
 8010a6c:	4641      	mov	r1, r8
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f000 faa0 	bl	8010fb4 <uxr_get_input_best_effort_stream>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	f43f af73 	beq.w	8010960 <uxr_create_session+0x68>
 8010a7a:	4659      	mov	r1, fp
 8010a7c:	f004 f9b4 	bl	8014de8 <uxr_receive_best_effort_message>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	f43f af6d 	beq.w	8010960 <uxr_create_session+0x68>
 8010a86:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8010a8a:	a91a      	add	r1, sp, #104	@ 0x68
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f7ff fafc 	bl	801008c <read_submessage_list>
 8010a94:	e764      	b.n	8010960 <uxr_create_session+0x68>
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f9de 	bl	8010e58 <uxr_reset_stream_storage>
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	b02b      	add	sp, #172	@ 0xac
 8010aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa4:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8010aa8:	a91a      	add	r1, sp, #104	@ 0x68
 8010aaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010aac:	4620      	mov	r0, r4
 8010aae:	f7ff faed 	bl	801008c <read_submessage_list>
 8010ab2:	e7be      	b.n	8010a32 <uxr_create_session+0x13a>

08010ab4 <uxr_prepare_stream_to_write_submessage>:
 8010ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	4604      	mov	r4, r0
 8010abc:	4610      	mov	r0, r2
 8010abe:	4615      	mov	r5, r2
 8010ac0:	461e      	mov	r6, r3
 8010ac2:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8010ac6:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010aca:	f105 0904 	add.w	r9, r5, #4
 8010ace:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8010ad2:	9101      	str	r1, [sp, #4]
 8010ad4:	f000 fada 	bl	801108c <uxr_submessage_padding>
 8010ad8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010adc:	4481      	add	r9, r0
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d01d      	beq.n	8010b1e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d116      	bne.n	8010b14 <uxr_prepare_stream_to_write_submessage+0x60>
 8010ae6:	f104 0008 	add.w	r0, r4, #8
 8010aea:	4651      	mov	r1, sl
 8010aec:	f000 fa56 	bl	8010f9c <uxr_get_output_reliable_stream>
 8010af0:	4604      	mov	r4, r0
 8010af2:	b158      	cbz	r0, 8010b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8010af4:	4649      	mov	r1, r9
 8010af6:	4632      	mov	r2, r6
 8010af8:	f004 fc48 	bl	801538c <uxr_prepare_reliable_buffer_to_write>
 8010afc:	4604      	mov	r4, r0
 8010afe:	b12c      	cbz	r4, 8010b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8010b00:	4643      	mov	r3, r8
 8010b02:	b2aa      	uxth	r2, r5
 8010b04:	4639      	mov	r1, r7
 8010b06:	4630      	mov	r0, r6
 8010b08:	f000 fa80 	bl	801100c <uxr_buffer_submessage_header>
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	b002      	add	sp, #8
 8010b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b14:	2400      	movs	r4, #0
 8010b16:	4620      	mov	r0, r4
 8010b18:	b002      	add	sp, #8
 8010b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1e:	f104 0008 	add.w	r0, r4, #8
 8010b22:	4651      	mov	r1, sl
 8010b24:	f000 fa32 	bl	8010f8c <uxr_get_output_best_effort_stream>
 8010b28:	4604      	mov	r4, r0
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d0ee      	beq.n	8010b0c <uxr_prepare_stream_to_write_submessage+0x58>
 8010b2e:	4649      	mov	r1, r9
 8010b30:	4632      	mov	r2, r6
 8010b32:	f004 fb55 	bl	80151e0 <uxr_prepare_best_effort_buffer_to_write>
 8010b36:	4604      	mov	r4, r0
 8010b38:	e7e1      	b.n	8010afe <uxr_prepare_stream_to_write_submessage+0x4a>
 8010b3a:	bf00      	nop

08010b3c <uxr_init_session_info>:
 8010b3c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8010b40:	23ff      	movs	r3, #255	@ 0xff
 8010b42:	7102      	strb	r2, [r0, #4]
 8010b44:	f880 c001 	strb.w	ip, [r0, #1]
 8010b48:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010b4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8010b50:	7001      	strb	r1, [r0, #0]
 8010b52:	f880 c002 	strb.w	ip, [r0, #2]
 8010b56:	7143      	strb	r3, [r0, #5]
 8010b58:	70c2      	strb	r2, [r0, #3]
 8010b5a:	b500      	push	{lr}
 8010b5c:	f04f 0e09 	mov.w	lr, #9
 8010b60:	f8a0 e006 	strh.w	lr, [r0, #6]
 8010b64:	f85d fb04 	ldr.w	pc, [sp], #4

08010b68 <uxr_buffer_create_session>:
 8010b68:	b530      	push	{r4, r5, lr}
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	b089      	sub	sp, #36	@ 0x24
 8010b6e:	4d12      	ldr	r5, [pc, #72]	@ (8010bb8 <uxr_buffer_create_session+0x50>)
 8010b70:	460c      	mov	r4, r1
 8010b72:	9307      	str	r3, [sp, #28]
 8010b74:	4619      	mov	r1, r3
 8010b76:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	80c2      	strh	r2, [r0, #6]
 8010b80:	f88d 2004 	strb.w	r2, [sp, #4]
 8010b84:	682a      	ldr	r2, [r5, #0]
 8010b86:	9303      	str	r3, [sp, #12]
 8010b88:	9200      	str	r2, [sp, #0]
 8010b8a:	88aa      	ldrh	r2, [r5, #4]
 8010b8c:	9306      	str	r3, [sp, #24]
 8010b8e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010b92:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010b96:	9202      	str	r2, [sp, #8]
 8010b98:	7802      	ldrb	r2, [r0, #0]
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010ba0:	2210      	movs	r2, #16
 8010ba2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010ba6:	f000 fa31 	bl	801100c <uxr_buffer_submessage_header>
 8010baa:	4669      	mov	r1, sp
 8010bac:	4620      	mov	r0, r4
 8010bae:	f001 f983 	bl	8011eb8 <uxr_serialize_CREATE_CLIENT_Payload>
 8010bb2:	b009      	add	sp, #36	@ 0x24
 8010bb4:	bd30      	pop	{r4, r5, pc}
 8010bb6:	bf00      	nop
 8010bb8:	08018178 	.word	0x08018178

08010bbc <uxr_buffer_delete_session>:
 8010bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8010bf0 <uxr_buffer_delete_session+0x34>)
 8010bbe:	2302      	movs	r3, #2
 8010bc0:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8010bc4:	b510      	push	{r4, lr}
 8010bc6:	460c      	mov	r4, r1
 8010bc8:	b082      	sub	sp, #8
 8010bca:	8911      	ldrh	r1, [r2, #8]
 8010bcc:	2204      	movs	r2, #4
 8010bce:	80c3      	strh	r3, [r0, #6]
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	2103      	movs	r1, #3
 8010bda:	f8ad c004 	strh.w	ip, [sp, #4]
 8010bde:	f000 fa15 	bl	801100c <uxr_buffer_submessage_header>
 8010be2:	a901      	add	r1, sp, #4
 8010be4:	4620      	mov	r0, r4
 8010be6:	f001 fa0f 	bl	8012008 <uxr_serialize_DELETE_Payload>
 8010bea:	b002      	add	sp, #8
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	bf00      	nop
 8010bf0:	08018178 	.word	0x08018178

08010bf4 <uxr_read_create_session_status>:
 8010bf4:	b510      	push	{r4, lr}
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	b088      	sub	sp, #32
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	a901      	add	r1, sp, #4
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f001 fa12 	bl	8012028 <uxr_deserialize_STATUS_AGENT_Payload>
 8010c04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c08:	7163      	strb	r3, [r4, #5]
 8010c0a:	b008      	add	sp, #32
 8010c0c:	bd10      	pop	{r4, pc}
 8010c0e:	bf00      	nop

08010c10 <uxr_read_delete_session_status>:
 8010c10:	b510      	push	{r4, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	4604      	mov	r4, r0
 8010c16:	4608      	mov	r0, r1
 8010c18:	a902      	add	r1, sp, #8
 8010c1a:	f001 fa35 	bl	8012088 <uxr_deserialize_STATUS_Payload>
 8010c1e:	88e3      	ldrh	r3, [r4, #6]
 8010c20:	2b02      	cmp	r3, #2
 8010c22:	d001      	beq.n	8010c28 <uxr_read_delete_session_status+0x18>
 8010c24:	b004      	add	sp, #16
 8010c26:	bd10      	pop	{r4, pc}
 8010c28:	f10d 000a 	add.w	r0, sp, #10
 8010c2c:	f7fe ff3a 	bl	800faa4 <uxr_object_id_from_raw>
 8010c30:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010c34:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010c38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d1f0      	bne.n	8010c24 <uxr_read_delete_session_status+0x14>
 8010c42:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010c46:	7163      	strb	r3, [r4, #5]
 8010c48:	e7ec      	b.n	8010c24 <uxr_read_delete_session_status+0x14>
 8010c4a:	bf00      	nop

08010c4c <uxr_stamp_create_session_header>:
 8010c4c:	b510      	push	{r4, lr}
 8010c4e:	2208      	movs	r2, #8
 8010c50:	b08a      	sub	sp, #40	@ 0x28
 8010c52:	4604      	mov	r4, r0
 8010c54:	eb0d 0002 	add.w	r0, sp, r2
 8010c58:	f7fe fcf0 	bl	800f63c <ucdr_init_buffer>
 8010c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c60:	2300      	movs	r3, #0
 8010c62:	a802      	add	r0, sp, #8
 8010c64:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010c68:	9400      	str	r4, [sp, #0]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	f000 fbca 	bl	8011404 <uxr_serialize_message_header>
 8010c70:	b00a      	add	sp, #40	@ 0x28
 8010c72:	bd10      	pop	{r4, pc}

08010c74 <uxr_stamp_session_header>:
 8010c74:	b530      	push	{r4, r5, lr}
 8010c76:	b08d      	sub	sp, #52	@ 0x34
 8010c78:	4604      	mov	r4, r0
 8010c7a:	460d      	mov	r5, r1
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	a804      	add	r0, sp, #16
 8010c80:	9203      	str	r2, [sp, #12]
 8010c82:	2208      	movs	r2, #8
 8010c84:	f7fe fcda 	bl	800f63c <ucdr_init_buffer>
 8010c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c8c:	9b03      	ldr	r3, [sp, #12]
 8010c8e:	462a      	mov	r2, r5
 8010c90:	a804      	add	r0, sp, #16
 8010c92:	9400      	str	r4, [sp, #0]
 8010c94:	f000 fbb6 	bl	8011404 <uxr_serialize_message_header>
 8010c98:	b00d      	add	sp, #52	@ 0x34
 8010c9a:	bd30      	pop	{r4, r5, pc}

08010c9c <uxr_read_session_header>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4607      	mov	r7, r0
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	4608      	mov	r0, r1
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	4615      	mov	r5, r2
 8010caa:	461e      	mov	r6, r3
 8010cac:	f7fe fcf8 	bl	800f6a0 <ucdr_buffer_remaining>
 8010cb0:	2808      	cmp	r0, #8
 8010cb2:	d803      	bhi.n	8010cbc <uxr_read_session_header+0x20>
 8010cb4:	2000      	movs	r0, #0
 8010cb6:	b004      	add	sp, #16
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	f10d 080c 	add.w	r8, sp, #12
 8010cc0:	4633      	mov	r3, r6
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f10d 010b 	add.w	r1, sp, #11
 8010cca:	f8cd 8000 	str.w	r8, [sp]
 8010cce:	f000 fbb7 	bl	8011440 <uxr_deserialize_message_header>
 8010cd2:	783a      	ldrb	r2, [r7, #0]
 8010cd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d1eb      	bne.n	8010cb4 <uxr_read_session_header+0x18>
 8010cdc:	061b      	lsls	r3, r3, #24
 8010cde:	d41b      	bmi.n	8010d18 <uxr_read_session_header+0x7c>
 8010ce0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010ce4:	787b      	ldrb	r3, [r7, #1]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d003      	beq.n	8010cf2 <uxr_read_session_header+0x56>
 8010cea:	2001      	movs	r0, #1
 8010cec:	f080 0001 	eor.w	r0, r0, #1
 8010cf0:	e7e1      	b.n	8010cb6 <uxr_read_session_header+0x1a>
 8010cf2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010cf6:	1cb8      	adds	r0, r7, #2
 8010cf8:	78bb      	ldrb	r3, [r7, #2]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d1f5      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010cfe:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010d02:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d1ef      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010d0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010d0e:	7843      	ldrb	r3, [r0, #1]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d1ea      	bne.n	8010cea <uxr_read_session_header+0x4e>
 8010d14:	2000      	movs	r0, #0
 8010d16:	e7e9      	b.n	8010cec <uxr_read_session_header+0x50>
 8010d18:	2001      	movs	r0, #1
 8010d1a:	e7cc      	b.n	8010cb6 <uxr_read_session_header+0x1a>

08010d1c <uxr_session_header_offset>:
 8010d1c:	f990 3000 	ldrsb.w	r3, [r0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bfac      	ite	ge
 8010d24:	2008      	movge	r0, #8
 8010d26:	2004      	movlt	r0, #4
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop

08010d2c <uxr_init_base_object_request>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010d34:	9101      	str	r1, [sp, #4]
 8010d36:	88c3      	ldrh	r3, [r0, #6]
 8010d38:	f1a3 010a 	sub.w	r1, r3, #10
 8010d3c:	b289      	uxth	r1, r1
 8010d3e:	42a1      	cmp	r1, r4
 8010d40:	d80f      	bhi.n	8010d62 <uxr_init_base_object_request+0x36>
 8010d42:	3301      	adds	r3, #1
 8010d44:	b29c      	uxth	r4, r3
 8010d46:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	80c4      	strh	r4, [r0, #6]
 8010d4e:	1c91      	adds	r1, r2, #2
 8010d50:	9801      	ldr	r0, [sp, #4]
 8010d52:	f882 c000 	strb.w	ip, [r2]
 8010d56:	7053      	strb	r3, [r2, #1]
 8010d58:	f7fe feb8 	bl	800facc <uxr_object_id_to_raw>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd10      	pop	{r4, pc}
 8010d62:	230a      	movs	r3, #10
 8010d64:	f04f 0c00 	mov.w	ip, #0
 8010d68:	461c      	mov	r4, r3
 8010d6a:	e7ef      	b.n	8010d4c <uxr_init_base_object_request+0x20>

08010d6c <uxr_parse_base_object_request>:
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	4604      	mov	r4, r0
 8010d70:	3002      	adds	r0, #2
 8010d72:	460d      	mov	r5, r1
 8010d74:	4616      	mov	r6, r2
 8010d76:	f7fe fe95 	bl	800faa4 <uxr_object_id_from_raw>
 8010d7a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010d7e:	8028      	strh	r0, [r5, #0]
 8010d80:	806b      	strh	r3, [r5, #2]
 8010d82:	7822      	ldrb	r2, [r4, #0]
 8010d84:	7863      	ldrb	r3, [r4, #1]
 8010d86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010d8a:	8033      	strh	r3, [r6, #0]
 8010d8c:	bd70      	pop	{r4, r5, r6, pc}
 8010d8e:	bf00      	nop

08010d90 <uxr_stream_id>:
 8010d90:	2901      	cmp	r1, #1
 8010d92:	4684      	mov	ip, r0
 8010d94:	b500      	push	{lr}
 8010d96:	b083      	sub	sp, #12
 8010d98:	d01f      	beq.n	8010dda <uxr_stream_id+0x4a>
 8010d9a:	2902      	cmp	r1, #2
 8010d9c:	f04f 0e00 	mov.w	lr, #0
 8010da0:	d020      	beq.n	8010de4 <uxr_stream_id+0x54>
 8010da2:	2300      	movs	r3, #0
 8010da4:	2000      	movs	r0, #0
 8010da6:	f36e 0307 	bfi	r3, lr, #0, #8
 8010daa:	f36c 230f 	bfi	r3, ip, #8, #8
 8010dae:	f361 4317 	bfi	r3, r1, #16, #8
 8010db2:	f362 631f 	bfi	r3, r2, #24, #8
 8010db6:	fa5f fc83 	uxtb.w	ip, r3
 8010dba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010dbe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010dc2:	0e1b      	lsrs	r3, r3, #24
 8010dc4:	f36c 0007 	bfi	r0, ip, #0, #8
 8010dc8:	f361 200f 	bfi	r0, r1, #8, #8
 8010dcc:	f362 4017 	bfi	r0, r2, #16, #8
 8010dd0:	f363 601f 	bfi	r0, r3, #24, #8
 8010dd4:	b003      	add	sp, #12
 8010dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dda:	f100 0e01 	add.w	lr, r0, #1
 8010dde:	fa5f fe8e 	uxtb.w	lr, lr
 8010de2:	e7de      	b.n	8010da2 <uxr_stream_id+0x12>
 8010de4:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8010de8:	e7db      	b.n	8010da2 <uxr_stream_id+0x12>
 8010dea:	bf00      	nop

08010dec <uxr_stream_id_from_raw>:
 8010dec:	b082      	sub	sp, #8
 8010dee:	b130      	cbz	r0, 8010dfe <uxr_stream_id_from_raw+0x12>
 8010df0:	0603      	lsls	r3, r0, #24
 8010df2:	d421      	bmi.n	8010e38 <uxr_stream_id_from_raw+0x4c>
 8010df4:	1e42      	subs	r2, r0, #1
 8010df6:	f04f 0c01 	mov.w	ip, #1
 8010dfa:	b2d2      	uxtb	r2, r2
 8010dfc:	e001      	b.n	8010e02 <uxr_stream_id_from_raw+0x16>
 8010dfe:	4684      	mov	ip, r0
 8010e00:	4602      	mov	r2, r0
 8010e02:	2300      	movs	r3, #0
 8010e04:	f360 0307 	bfi	r3, r0, #0, #8
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f362 230f 	bfi	r3, r2, #8, #8
 8010e0e:	f36c 4317 	bfi	r3, ip, #16, #8
 8010e12:	f361 631f 	bfi	r3, r1, #24, #8
 8010e16:	fa5f fc83 	uxtb.w	ip, r3
 8010e1a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010e1e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010e22:	0e1b      	lsrs	r3, r3, #24
 8010e24:	f36c 0007 	bfi	r0, ip, #0, #8
 8010e28:	f361 200f 	bfi	r0, r1, #8, #8
 8010e2c:	f362 4017 	bfi	r0, r2, #16, #8
 8010e30:	f363 601f 	bfi	r0, r3, #24, #8
 8010e34:	b002      	add	sp, #8
 8010e36:	4770      	bx	lr
 8010e38:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010e3c:	f04f 0c02 	mov.w	ip, #2
 8010e40:	e7df      	b.n	8010e02 <uxr_stream_id_from_raw+0x16>
 8010e42:	bf00      	nop

08010e44 <uxr_init_stream_storage>:
 8010e44:	2300      	movs	r3, #0
 8010e46:	7403      	strb	r3, [r0, #16]
 8010e48:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010e4c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010e50:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop

08010e58 <uxr_reset_stream_storage>:
 8010e58:	b570      	push	{r4, r5, r6, lr}
 8010e5a:	7c03      	ldrb	r3, [r0, #16]
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	b14b      	cbz	r3, 8010e74 <uxr_reset_stream_storage+0x1c>
 8010e60:	4606      	mov	r6, r0
 8010e62:	2500      	movs	r5, #0
 8010e64:	4630      	mov	r0, r6
 8010e66:	3501      	adds	r5, #1
 8010e68:	f004 f9b4 	bl	80151d4 <uxr_reset_output_best_effort_stream>
 8010e6c:	7c23      	ldrb	r3, [r4, #16]
 8010e6e:	3610      	adds	r6, #16
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	d8f7      	bhi.n	8010e64 <uxr_reset_stream_storage+0xc>
 8010e74:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010e78:	b15b      	cbz	r3, 8010e92 <uxr_reset_stream_storage+0x3a>
 8010e7a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e7e:	2500      	movs	r5, #0
 8010e80:	4630      	mov	r0, r6
 8010e82:	3501      	adds	r5, #1
 8010e84:	f003 ffac 	bl	8014de0 <uxr_reset_input_best_effort_stream>
 8010e88:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010e8c:	3602      	adds	r6, #2
 8010e8e:	42ab      	cmp	r3, r5
 8010e90:	d8f6      	bhi.n	8010e80 <uxr_reset_stream_storage+0x28>
 8010e92:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010e96:	b15b      	cbz	r3, 8010eb0 <uxr_reset_stream_storage+0x58>
 8010e98:	f104 0618 	add.w	r6, r4, #24
 8010e9c:	2500      	movs	r5, #0
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	f004 fa45 	bl	8015330 <uxr_reset_output_reliable_stream>
 8010ea6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010eaa:	3628      	adds	r6, #40	@ 0x28
 8010eac:	42ab      	cmp	r3, r5
 8010eae:	d8f6      	bhi.n	8010e9e <uxr_reset_stream_storage+0x46>
 8010eb0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010eb4:	b15b      	cbz	r3, 8010ece <uxr_reset_stream_storage+0x76>
 8010eb6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010eba:	2500      	movs	r5, #0
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	3501      	adds	r5, #1
 8010ec0:	f003 fffa 	bl	8014eb8 <uxr_reset_input_reliable_stream>
 8010ec4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010ec8:	3618      	adds	r6, #24
 8010eca:	42ab      	cmp	r3, r5
 8010ecc:	d8f6      	bhi.n	8010ebc <uxr_reset_stream_storage+0x64>
 8010ece:	bd70      	pop	{r4, r5, r6, pc}

08010ed0 <uxr_add_output_best_effort_buffer>:
 8010ed0:	b510      	push	{r4, lr}
 8010ed2:	7c04      	ldrb	r4, [r0, #16]
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	f104 0c01 	add.w	ip, r4, #1
 8010eda:	f880 c010 	strb.w	ip, [r0, #16]
 8010ede:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010ee2:	f004 f96d 	bl	80151c0 <uxr_init_output_best_effort_stream>
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	4611      	mov	r1, r2
 8010eec:	b002      	add	sp, #8
 8010eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef2:	f7ff bf4d 	b.w	8010d90 <uxr_stream_id>
 8010ef6:	bf00      	nop

08010ef8 <uxr_add_output_reliable_buffer>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	4684      	mov	ip, r0
 8010efe:	2028      	movs	r0, #40	@ 0x28
 8010f00:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010f04:	9400      	str	r4, [sp, #0]
 8010f06:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010f0a:	fb00 c004 	mla	r0, r0, r4, ip
 8010f0e:	f104 0e01 	add.w	lr, r4, #1
 8010f12:	3018      	adds	r0, #24
 8010f14:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010f18:	f004 f9d2 	bl	80152c0 <uxr_init_output_reliable_stream>
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	2102      	movs	r1, #2
 8010f20:	4620      	mov	r0, r4
 8010f22:	b004      	add	sp, #16
 8010f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f28:	f7ff bf32 	b.w	8010d90 <uxr_stream_id>

08010f2c <uxr_add_input_best_effort_buffer>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010f32:	b082      	sub	sp, #8
 8010f34:	1c62      	adds	r2, r4, #1
 8010f36:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010f3a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010f3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010f42:	f003 ff49 	bl	8014dd8 <uxr_init_input_best_effort_stream>
 8010f46:	2200      	movs	r2, #0
 8010f48:	2101      	movs	r1, #1
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	b002      	add	sp, #8
 8010f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f52:	f7ff bf1d 	b.w	8010d90 <uxr_stream_id>
 8010f56:	bf00      	nop

08010f58 <uxr_add_input_reliable_buffer>:
 8010f58:	b510      	push	{r4, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	4684      	mov	ip, r0
 8010f5e:	2018      	movs	r0, #24
 8010f60:	9c06      	ldr	r4, [sp, #24]
 8010f62:	9400      	str	r4, [sp, #0]
 8010f64:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010f68:	fb00 c004 	mla	r0, r0, r4, ip
 8010f6c:	f104 0e01 	add.w	lr, r4, #1
 8010f70:	3048      	adds	r0, #72	@ 0x48
 8010f72:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010f76:	f003 ff79 	bl	8014e6c <uxr_init_input_reliable_stream>
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2102      	movs	r1, #2
 8010f7e:	4620      	mov	r0, r4
 8010f80:	b004      	add	sp, #16
 8010f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f86:	f7ff bf03 	b.w	8010d90 <uxr_stream_id>
 8010f8a:	bf00      	nop

08010f8c <uxr_get_output_best_effort_stream>:
 8010f8c:	7c03      	ldrb	r3, [r0, #16]
 8010f8e:	428b      	cmp	r3, r1
 8010f90:	bf8c      	ite	hi
 8010f92:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010f96:	2000      	movls	r0, #0
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop

08010f9c <uxr_get_output_reliable_stream>:
 8010f9c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010fa0:	428b      	cmp	r3, r1
 8010fa2:	d904      	bls.n	8010fae <uxr_get_output_reliable_stream+0x12>
 8010fa4:	2328      	movs	r3, #40	@ 0x28
 8010fa6:	fb03 0001 	mla	r0, r3, r1, r0
 8010faa:	3018      	adds	r0, #24
 8010fac:	4770      	bx	lr
 8010fae:	2000      	movs	r0, #0
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop

08010fb4 <uxr_get_input_best_effort_stream>:
 8010fb4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010fb8:	428b      	cmp	r3, r1
 8010fba:	d903      	bls.n	8010fc4 <uxr_get_input_best_effort_stream+0x10>
 8010fbc:	3121      	adds	r1, #33	@ 0x21
 8010fbe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8010fc2:	4770      	bx	lr
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	4770      	bx	lr

08010fc8 <uxr_get_input_reliable_stream>:
 8010fc8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010fcc:	428b      	cmp	r3, r1
 8010fce:	d904      	bls.n	8010fda <uxr_get_input_reliable_stream+0x12>
 8010fd0:	2318      	movs	r3, #24
 8010fd2:	fb03 0001 	mla	r0, r3, r1, r0
 8010fd6:	3048      	adds	r0, #72	@ 0x48
 8010fd8:	4770      	bx	lr
 8010fda:	2000      	movs	r0, #0
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop

08010fe0 <uxr_output_streams_confirmed>:
 8010fe0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010fe4:	b183      	cbz	r3, 8011008 <uxr_output_streams_confirmed+0x28>
 8010fe6:	b570      	push	{r4, r5, r6, lr}
 8010fe8:	4606      	mov	r6, r0
 8010fea:	f100 0518 	add.w	r5, r0, #24
 8010fee:	2400      	movs	r4, #0
 8010ff0:	e000      	b.n	8010ff4 <uxr_output_streams_confirmed+0x14>
 8010ff2:	b140      	cbz	r0, 8011006 <uxr_output_streams_confirmed+0x26>
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	3401      	adds	r4, #1
 8010ff8:	f004 fc0e 	bl	8015818 <uxr_is_output_up_to_date>
 8010ffc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011000:	3528      	adds	r5, #40	@ 0x28
 8011002:	42a3      	cmp	r3, r4
 8011004:	d8f5      	bhi.n	8010ff2 <uxr_output_streams_confirmed+0x12>
 8011006:	bd70      	pop	{r4, r5, r6, pc}
 8011008:	2001      	movs	r0, #1
 801100a:	4770      	bx	lr

0801100c <uxr_buffer_submessage_header>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	460e      	mov	r6, r1
 8011010:	2104      	movs	r1, #4
 8011012:	4604      	mov	r4, r0
 8011014:	4615      	mov	r5, r2
 8011016:	461f      	mov	r7, r3
 8011018:	f7fe fb2c 	bl	800f674 <ucdr_align_to>
 801101c:	2301      	movs	r3, #1
 801101e:	4631      	mov	r1, r6
 8011020:	4620      	mov	r0, r4
 8011022:	ea47 0203 	orr.w	r2, r7, r3
 8011026:	7523      	strb	r3, [r4, #20]
 8011028:	462b      	mov	r3, r5
 801102a:	f000 fa29 	bl	8011480 <uxr_serialize_submessage_header>
 801102e:	4620      	mov	r0, r4
 8011030:	f7fe fb36 	bl	800f6a0 <ucdr_buffer_remaining>
 8011034:	42a8      	cmp	r0, r5
 8011036:	bf34      	ite	cc
 8011038:	2000      	movcc	r0, #0
 801103a:	2001      	movcs	r0, #1
 801103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801103e:	bf00      	nop

08011040 <uxr_read_submessage_header>:
 8011040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011044:	4604      	mov	r4, r0
 8011046:	460d      	mov	r5, r1
 8011048:	2104      	movs	r1, #4
 801104a:	4616      	mov	r6, r2
 801104c:	4698      	mov	r8, r3
 801104e:	f7fe fb11 	bl	800f674 <ucdr_align_to>
 8011052:	4620      	mov	r0, r4
 8011054:	f7fe fb24 	bl	800f6a0 <ucdr_buffer_remaining>
 8011058:	2803      	cmp	r0, #3
 801105a:	bf8c      	ite	hi
 801105c:	2701      	movhi	r7, #1
 801105e:	2700      	movls	r7, #0
 8011060:	d802      	bhi.n	8011068 <uxr_read_submessage_header+0x28>
 8011062:	4638      	mov	r0, r7
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	4633      	mov	r3, r6
 801106a:	4642      	mov	r2, r8
 801106c:	4620      	mov	r0, r4
 801106e:	4629      	mov	r1, r5
 8011070:	f000 fa1a 	bl	80114a8 <uxr_deserialize_submessage_header>
 8011074:	f898 3000 	ldrb.w	r3, [r8]
 8011078:	4638      	mov	r0, r7
 801107a:	f003 0201 	and.w	r2, r3, #1
 801107e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011082:	f888 3000 	strb.w	r3, [r8]
 8011086:	7522      	strb	r2, [r4, #20]
 8011088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801108c <uxr_submessage_padding>:
 801108c:	f010 0003 	ands.w	r0, r0, #3
 8011090:	bf18      	it	ne
 8011092:	f1c0 0004 	rsbne	r0, r0, #4
 8011096:	4770      	bx	lr

08011098 <uxr_millis>:
 8011098:	b510      	push	{r4, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	2001      	movs	r0, #1
 801109e:	4669      	mov	r1, sp
 80110a0:	f7f0 f97a 	bl	8001398 <clock_gettime>
 80110a4:	4908      	ldr	r1, [pc, #32]	@ (80110c8 <uxr_millis+0x30>)
 80110a6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80110aa:	fba0 0301 	umull	r0, r3, r0, r1
 80110ae:	1900      	adds	r0, r0, r4
 80110b0:	fb01 3102 	mla	r1, r1, r2, r3
 80110b4:	4a05      	ldr	r2, [pc, #20]	@ (80110cc <uxr_millis+0x34>)
 80110b6:	f04f 0300 	mov.w	r3, #0
 80110ba:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80110be:	f7ef f927 	bl	8000310 <__aeabi_ldivmod>
 80110c2:	b004      	add	sp, #16
 80110c4:	bd10      	pop	{r4, pc}
 80110c6:	bf00      	nop
 80110c8:	3b9aca00 	.word	0x3b9aca00
 80110cc:	000f4240 	.word	0x000f4240

080110d0 <uxr_nanos>:
 80110d0:	b510      	push	{r4, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	2001      	movs	r0, #1
 80110d6:	4669      	mov	r1, sp
 80110d8:	f7f0 f95e 	bl	8001398 <clock_gettime>
 80110dc:	4a06      	ldr	r2, [pc, #24]	@ (80110f8 <uxr_nanos+0x28>)
 80110de:	9800      	ldr	r0, [sp, #0]
 80110e0:	9902      	ldr	r1, [sp, #8]
 80110e2:	fba0 0302 	umull	r0, r3, r0, r2
 80110e6:	9c01      	ldr	r4, [sp, #4]
 80110e8:	1840      	adds	r0, r0, r1
 80110ea:	fb02 3304 	mla	r3, r2, r4, r3
 80110ee:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80110f2:	b004      	add	sp, #16
 80110f4:	bd10      	pop	{r4, pc}
 80110f6:	bf00      	nop
 80110f8:	3b9aca00 	.word	0x3b9aca00

080110fc <on_full_output_buffer_fragmented>:
 80110fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011100:	460c      	mov	r4, r1
 8011102:	b08a      	sub	sp, #40	@ 0x28
 8011104:	4606      	mov	r6, r0
 8011106:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801110a:	f104 0008 	add.w	r0, r4, #8
 801110e:	f7ff ff45 	bl	8010f9c <uxr_get_output_reliable_stream>
 8011112:	4605      	mov	r5, r0
 8011114:	f004 fb8a 	bl	801582c <get_available_free_slots>
 8011118:	b968      	cbnz	r0, 8011136 <on_full_output_buffer_fragmented+0x3a>
 801111a:	4620      	mov	r0, r4
 801111c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011120:	4798      	blx	r3
 8011122:	b918      	cbnz	r0, 801112c <on_full_output_buffer_fragmented+0x30>
 8011124:	2001      	movs	r0, #1
 8011126:	b00a      	add	sp, #40	@ 0x28
 8011128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801112c:	4628      	mov	r0, r5
 801112e:	f004 fb7d 	bl	801582c <get_available_free_slots>
 8011132:	2800      	cmp	r0, #0
 8011134:	d0f6      	beq.n	8011124 <on_full_output_buffer_fragmented+0x28>
 8011136:	8929      	ldrh	r1, [r5, #8]
 8011138:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801113c:	89eb      	ldrh	r3, [r5, #14]
 801113e:	7b28      	ldrb	r0, [r5, #12]
 8011140:	686f      	ldr	r7, [r5, #4]
 8011142:	1a12      	subs	r2, r2, r0
 8011144:	fbb3 f0f1 	udiv	r0, r3, r1
 8011148:	fbb7 f7f1 	udiv	r7, r7, r1
 801114c:	fb01 3110 	mls	r1, r1, r0, r3
 8011150:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011154:	b289      	uxth	r1, r1
 8011156:	fb07 f101 	mul.w	r1, r7, r1
 801115a:	3f04      	subs	r7, #4
 801115c:	443a      	add	r2, r7
 801115e:	3104      	adds	r1, #4
 8011160:	fa1f f882 	uxth.w	r8, r2
 8011164:	463a      	mov	r2, r7
 8011166:	eba3 0308 	sub.w	r3, r3, r8
 801116a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801116e:	682b      	ldr	r3, [r5, #0]
 8011170:	4419      	add	r1, r3
 8011172:	2300      	movs	r3, #0
 8011174:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011178:	9000      	str	r0, [sp, #0]
 801117a:	a802      	add	r0, sp, #8
 801117c:	f7fe fa4c 	bl	800f618 <ucdr_init_buffer_origin_offset>
 8011180:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011184:	f102 0308 	add.w	r3, r2, #8
 8011188:	42bb      	cmp	r3, r7
 801118a:	d927      	bls.n	80111dc <on_full_output_buffer_fragmented+0xe0>
 801118c:	4642      	mov	r2, r8
 801118e:	2300      	movs	r3, #0
 8011190:	210d      	movs	r1, #13
 8011192:	a802      	add	r0, sp, #8
 8011194:	f7ff ff3a 	bl	801100c <uxr_buffer_submessage_header>
 8011198:	8929      	ldrh	r1, [r5, #8]
 801119a:	89eb      	ldrh	r3, [r5, #14]
 801119c:	686a      	ldr	r2, [r5, #4]
 801119e:	fbb3 f0f1 	udiv	r0, r3, r1
 80111a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80111a6:	fb01 3310 	mls	r3, r1, r0, r3
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	fb02 f303 	mul.w	r3, r2, r3
 80111b0:	682a      	ldr	r2, [r5, #0]
 80111b2:	50d7      	str	r7, [r2, r3]
 80111b4:	2101      	movs	r1, #1
 80111b6:	89e8      	ldrh	r0, [r5, #14]
 80111b8:	f004 fb5a 	bl	8015870 <uxr_seq_num_add>
 80111bc:	9904      	ldr	r1, [sp, #16]
 80111be:	9a03      	ldr	r2, [sp, #12]
 80111c0:	81e8      	strh	r0, [r5, #14]
 80111c2:	4630      	mov	r0, r6
 80111c4:	1a52      	subs	r2, r2, r1
 80111c6:	f7fe fa39 	bl	800f63c <ucdr_init_buffer>
 80111ca:	4630      	mov	r0, r6
 80111cc:	4622      	mov	r2, r4
 80111ce:	490f      	ldr	r1, [pc, #60]	@ (801120c <on_full_output_buffer_fragmented+0x110>)
 80111d0:	f7fe fa08 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 80111d4:	2000      	movs	r0, #0
 80111d6:	b00a      	add	sp, #40	@ 0x28
 80111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111dc:	b292      	uxth	r2, r2
 80111de:	2302      	movs	r3, #2
 80111e0:	210d      	movs	r1, #13
 80111e2:	a802      	add	r0, sp, #8
 80111e4:	f7ff ff12 	bl	801100c <uxr_buffer_submessage_header>
 80111e8:	8928      	ldrh	r0, [r5, #8]
 80111ea:	89eb      	ldrh	r3, [r5, #14]
 80111ec:	6869      	ldr	r1, [r5, #4]
 80111ee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80111f2:	fbb3 f7f0 	udiv	r7, r3, r0
 80111f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80111fa:	fb00 3317 	mls	r3, r0, r7, r3
 80111fe:	3208      	adds	r2, #8
 8011200:	b29b      	uxth	r3, r3
 8011202:	fb01 f303 	mul.w	r3, r1, r3
 8011206:	6829      	ldr	r1, [r5, #0]
 8011208:	50ca      	str	r2, [r1, r3]
 801120a:	e7d3      	b.n	80111b4 <on_full_output_buffer_fragmented+0xb8>
 801120c:	080110fd 	.word	0x080110fd

08011210 <uxr_prepare_output_stream>:
 8011210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011212:	b087      	sub	sp, #28
 8011214:	2707      	movs	r7, #7
 8011216:	2500      	movs	r5, #0
 8011218:	461c      	mov	r4, r3
 801121a:	4606      	mov	r6, r0
 801121c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011222:	e9cd 7500 	strd	r7, r5, [sp]
 8011226:	3204      	adds	r2, #4
 8011228:	f7ff fc44 	bl	8010ab4 <uxr_prepare_stream_to_write_submessage>
 801122c:	f080 0201 	eor.w	r2, r0, #1
 8011230:	b2d2      	uxtb	r2, r2
 8011232:	75a2      	strb	r2, [r4, #22]
 8011234:	b112      	cbz	r2, 801123c <uxr_prepare_output_stream+0x2c>
 8011236:	4628      	mov	r0, r5
 8011238:	b007      	add	sp, #28
 801123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801123c:	aa05      	add	r2, sp, #20
 801123e:	9902      	ldr	r1, [sp, #8]
 8011240:	4630      	mov	r0, r6
 8011242:	f7ff fd73 	bl	8010d2c <uxr_init_base_object_request>
 8011246:	a905      	add	r1, sp, #20
 8011248:	4605      	mov	r5, r0
 801124a:	4620      	mov	r0, r4
 801124c:	f000 ff9c 	bl	8012188 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011250:	69a6      	ldr	r6, [r4, #24]
 8011252:	69e7      	ldr	r7, [r4, #28]
 8011254:	4620      	mov	r0, r4
 8011256:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801125a:	1a52      	subs	r2, r2, r1
 801125c:	f7fe f9ee 	bl	800f63c <ucdr_init_buffer>
 8011260:	4620      	mov	r0, r4
 8011262:	463a      	mov	r2, r7
 8011264:	4631      	mov	r1, r6
 8011266:	f7fe f9bd 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 801126a:	4628      	mov	r0, r5
 801126c:	b007      	add	sp, #28
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011270 <uxr_prepare_output_stream_fragmented>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	b091      	sub	sp, #68	@ 0x44
 8011276:	4605      	mov	r5, r0
 8011278:	3008      	adds	r0, #8
 801127a:	461e      	mov	r6, r3
 801127c:	9105      	str	r1, [sp, #20]
 801127e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011282:	9204      	str	r2, [sp, #16]
 8011284:	f7ff fe8a 	bl	8010f9c <uxr_get_output_reliable_stream>
 8011288:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801128c:	2b01      	cmp	r3, #1
 801128e:	f000 8093 	beq.w	80113b8 <uxr_prepare_output_stream_fragmented+0x148>
 8011292:	4604      	mov	r4, r0
 8011294:	2800      	cmp	r0, #0
 8011296:	f000 808f 	beq.w	80113b8 <uxr_prepare_output_stream_fragmented+0x148>
 801129a:	f004 fac7 	bl	801582c <get_available_free_slots>
 801129e:	2800      	cmp	r0, #0
 80112a0:	f000 8085 	beq.w	80113ae <uxr_prepare_output_stream_fragmented+0x13e>
 80112a4:	8923      	ldrh	r3, [r4, #8]
 80112a6:	89e7      	ldrh	r7, [r4, #14]
 80112a8:	6862      	ldr	r2, [r4, #4]
 80112aa:	fbb7 f9f3 	udiv	r9, r7, r3
 80112ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80112b2:	fb03 7919 	mls	r9, r3, r9, r7
 80112b6:	6823      	ldr	r3, [r4, #0]
 80112b8:	f1a2 0b04 	sub.w	fp, r2, #4
 80112bc:	9203      	str	r2, [sp, #12]
 80112be:	fa1f f989 	uxth.w	r9, r9
 80112c2:	fb02 f909 	mul.w	r9, r2, r9
 80112c6:	f109 0904 	add.w	r9, r9, #4
 80112ca:	4499      	add	r9, r3
 80112cc:	7b23      	ldrb	r3, [r4, #12]
 80112ce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80112d2:	4543      	cmp	r3, r8
 80112d4:	d37c      	bcc.n	80113d0 <uxr_prepare_output_stream_fragmented+0x160>
 80112d6:	f1ab 0a04 	sub.w	sl, fp, #4
 80112da:	465a      	mov	r2, fp
 80112dc:	4649      	mov	r1, r9
 80112de:	a808      	add	r0, sp, #32
 80112e0:	ebaa 0a03 	sub.w	sl, sl, r3
 80112e4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80112e6:	f8cd 8000 	str.w	r8, [sp]
 80112ea:	3308      	adds	r3, #8
 80112ec:	fa1f fa8a 	uxth.w	sl, sl
 80112f0:	9302      	str	r3, [sp, #8]
 80112f2:	2300      	movs	r3, #0
 80112f4:	f7fe f990 	bl	800f618 <ucdr_init_buffer_origin_offset>
 80112f8:	9b02      	ldr	r3, [sp, #8]
 80112fa:	4652      	mov	r2, sl
 80112fc:	210d      	movs	r1, #13
 80112fe:	455b      	cmp	r3, fp
 8011300:	bf34      	ite	cc
 8011302:	2302      	movcc	r3, #2
 8011304:	2300      	movcs	r3, #0
 8011306:	a808      	add	r0, sp, #32
 8011308:	f7ff fe80 	bl	801100c <uxr_buffer_submessage_header>
 801130c:	8921      	ldrh	r1, [r4, #8]
 801130e:	6863      	ldr	r3, [r4, #4]
 8011310:	4638      	mov	r0, r7
 8011312:	fbb7 f2f1 	udiv	r2, r7, r1
 8011316:	fbb3 f3f1 	udiv	r3, r3, r1
 801131a:	fb01 7212 	mls	r2, r1, r2, r7
 801131e:	2101      	movs	r1, #1
 8011320:	b292      	uxth	r2, r2
 8011322:	fb02 f303 	mul.w	r3, r2, r3
 8011326:	6822      	ldr	r2, [r4, #0]
 8011328:	f842 b003 	str.w	fp, [r2, r3]
 801132c:	f004 faa0 	bl	8015870 <uxr_seq_num_add>
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	f108 0104 	add.w	r1, r8, #4
 8011336:	4607      	mov	r7, r0
 8011338:	f1a3 0208 	sub.w	r2, r3, #8
 801133c:	4630      	mov	r0, r6
 801133e:	4449      	add	r1, r9
 8011340:	eba2 0208 	sub.w	r2, r2, r8
 8011344:	f7fe f97a 	bl	800f63c <ucdr_init_buffer>
 8011348:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801134a:	2107      	movs	r1, #7
 801134c:	81e7      	strh	r7, [r4, #14]
 801134e:	1d1a      	adds	r2, r3, #4
 8011350:	2300      	movs	r3, #0
 8011352:	4630      	mov	r0, r6
 8011354:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011358:	bf28      	it	cs
 801135a:	461a      	movcs	r2, r3
 801135c:	b292      	uxth	r2, r2
 801135e:	f7ff fe55 	bl	801100c <uxr_buffer_submessage_header>
 8011362:	aa07      	add	r2, sp, #28
 8011364:	9904      	ldr	r1, [sp, #16]
 8011366:	4628      	mov	r0, r5
 8011368:	f7ff fce0 	bl	8010d2c <uxr_init_base_object_request>
 801136c:	4604      	mov	r4, r0
 801136e:	b320      	cbz	r0, 80113ba <uxr_prepare_output_stream_fragmented+0x14a>
 8011370:	a907      	add	r1, sp, #28
 8011372:	4630      	mov	r0, r6
 8011374:	f000 ff08 	bl	8012188 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011378:	4630      	mov	r0, r6
 801137a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801137e:	1a52      	subs	r2, r2, r1
 8011380:	f7fe f95c 	bl	800f63c <ucdr_init_buffer>
 8011384:	9b05      	ldr	r3, [sp, #20]
 8011386:	9a02      	ldr	r2, [sp, #8]
 8011388:	4630      	mov	r0, r6
 801138a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801138e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011390:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8011394:	462a      	mov	r2, r5
 8011396:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801139a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801139c:	4918      	ldr	r1, [pc, #96]	@ (8011400 <uxr_prepare_output_stream_fragmented+0x190>)
 801139e:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80113a2:	f7fe f91f 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 80113a6:	4620      	mov	r0, r4
 80113a8:	b011      	add	sp, #68	@ 0x44
 80113aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80113b0:	4628      	mov	r0, r5
 80113b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80113b4:	4798      	blx	r3
 80113b6:	b920      	cbnz	r0, 80113c2 <uxr_prepare_output_stream_fragmented+0x152>
 80113b8:	2400      	movs	r4, #0
 80113ba:	4620      	mov	r0, r4
 80113bc:	b011      	add	sp, #68	@ 0x44
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c2:	4620      	mov	r0, r4
 80113c4:	f004 fa32 	bl	801582c <get_available_free_slots>
 80113c8:	2800      	cmp	r0, #0
 80113ca:	f47f af6b 	bne.w	80112a4 <uxr_prepare_output_stream_fragmented+0x34>
 80113ce:	e7f3      	b.n	80113b8 <uxr_prepare_output_stream_fragmented+0x148>
 80113d0:	4638      	mov	r0, r7
 80113d2:	2101      	movs	r1, #1
 80113d4:	f004 fa4c 	bl	8015870 <uxr_seq_num_add>
 80113d8:	8922      	ldrh	r2, [r4, #8]
 80113da:	6863      	ldr	r3, [r4, #4]
 80113dc:	4607      	mov	r7, r0
 80113de:	fbb3 f9f2 	udiv	r9, r3, r2
 80113e2:	fbb0 f3f2 	udiv	r3, r0, r2
 80113e6:	fb02 0313 	mls	r3, r2, r3, r0
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	fb03 f909 	mul.w	r9, r3, r9
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	f109 0904 	add.w	r9, r9, #4
 80113f6:	4499      	add	r9, r3
 80113f8:	7b23      	ldrb	r3, [r4, #12]
 80113fa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80113fe:	e76a      	b.n	80112d6 <uxr_prepare_output_stream_fragmented+0x66>
 8011400:	080110fd 	.word	0x080110fd

08011404 <uxr_serialize_message_header>:
 8011404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011406:	4616      	mov	r6, r2
 8011408:	b083      	sub	sp, #12
 801140a:	4604      	mov	r4, r0
 801140c:	460d      	mov	r5, r1
 801140e:	9301      	str	r3, [sp, #4]
 8011410:	9f08      	ldr	r7, [sp, #32]
 8011412:	f002 fd4b 	bl	8013eac <ucdr_serialize_uint8_t>
 8011416:	4631      	mov	r1, r6
 8011418:	4620      	mov	r0, r4
 801141a:	f002 fd47 	bl	8013eac <ucdr_serialize_uint8_t>
 801141e:	9a01      	ldr	r2, [sp, #4]
 8011420:	2101      	movs	r1, #1
 8011422:	4620      	mov	r0, r4
 8011424:	f002 fdee 	bl	8014004 <ucdr_serialize_endian_uint16_t>
 8011428:	062b      	lsls	r3, r5, #24
 801142a:	d501      	bpl.n	8011430 <uxr_serialize_message_header+0x2c>
 801142c:	b003      	add	sp, #12
 801142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011430:	2204      	movs	r2, #4
 8011432:	4639      	mov	r1, r7
 8011434:	4620      	mov	r0, r4
 8011436:	b003      	add	sp, #12
 8011438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801143c:	f002 bc3c 	b.w	8013cb8 <ucdr_serialize_array_uint8_t>

08011440 <uxr_deserialize_message_header>:
 8011440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011442:	4616      	mov	r6, r2
 8011444:	b083      	sub	sp, #12
 8011446:	4604      	mov	r4, r0
 8011448:	460d      	mov	r5, r1
 801144a:	9301      	str	r3, [sp, #4]
 801144c:	9f08      	ldr	r7, [sp, #32]
 801144e:	f002 fd43 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011452:	4631      	mov	r1, r6
 8011454:	4620      	mov	r0, r4
 8011456:	f002 fd3f 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 801145a:	9a01      	ldr	r2, [sp, #4]
 801145c:	2101      	movs	r1, #1
 801145e:	4620      	mov	r0, r4
 8011460:	f002 fec4 	bl	80141ec <ucdr_deserialize_endian_uint16_t>
 8011464:	f995 3000 	ldrsb.w	r3, [r5]
 8011468:	2b00      	cmp	r3, #0
 801146a:	da01      	bge.n	8011470 <uxr_deserialize_message_header+0x30>
 801146c:	b003      	add	sp, #12
 801146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011470:	2204      	movs	r2, #4
 8011472:	4639      	mov	r1, r7
 8011474:	4620      	mov	r0, r4
 8011476:	b003      	add	sp, #12
 8011478:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801147c:	f002 bc80 	b.w	8013d80 <ucdr_deserialize_array_uint8_t>

08011480 <uxr_serialize_submessage_header>:
 8011480:	b530      	push	{r4, r5, lr}
 8011482:	4615      	mov	r5, r2
 8011484:	b083      	sub	sp, #12
 8011486:	4604      	mov	r4, r0
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	f002 fd0f 	bl	8013eac <ucdr_serialize_uint8_t>
 801148e:	4629      	mov	r1, r5
 8011490:	4620      	mov	r0, r4
 8011492:	f002 fd0b 	bl	8013eac <ucdr_serialize_uint8_t>
 8011496:	9a01      	ldr	r2, [sp, #4]
 8011498:	2101      	movs	r1, #1
 801149a:	4620      	mov	r0, r4
 801149c:	b003      	add	sp, #12
 801149e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114a2:	f002 bdaf 	b.w	8014004 <ucdr_serialize_endian_uint16_t>
 80114a6:	bf00      	nop

080114a8 <uxr_deserialize_submessage_header>:
 80114a8:	b530      	push	{r4, r5, lr}
 80114aa:	4615      	mov	r5, r2
 80114ac:	b083      	sub	sp, #12
 80114ae:	4604      	mov	r4, r0
 80114b0:	9301      	str	r3, [sp, #4]
 80114b2:	f002 fd11 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80114b6:	4629      	mov	r1, r5
 80114b8:	4620      	mov	r0, r4
 80114ba:	f002 fd0d 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80114be:	9a01      	ldr	r2, [sp, #4]
 80114c0:	2101      	movs	r1, #1
 80114c2:	4620      	mov	r0, r4
 80114c4:	b003      	add	sp, #12
 80114c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114ca:	f002 be8f 	b.w	80141ec <ucdr_deserialize_endian_uint16_t>
 80114ce:	bf00      	nop

080114d0 <uxr_serialize_CLIENT_Representation>:
 80114d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114d4:	2204      	movs	r2, #4
 80114d6:	460e      	mov	r6, r1
 80114d8:	4605      	mov	r5, r0
 80114da:	f002 fbed 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80114de:	4607      	mov	r7, r0
 80114e0:	2202      	movs	r2, #2
 80114e2:	1d31      	adds	r1, r6, #4
 80114e4:	4628      	mov	r0, r5
 80114e6:	f002 fbe7 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80114ea:	4038      	ands	r0, r7
 80114ec:	2202      	movs	r2, #2
 80114ee:	1db1      	adds	r1, r6, #6
 80114f0:	b2c7      	uxtb	r7, r0
 80114f2:	4628      	mov	r0, r5
 80114f4:	f002 fbe0 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80114f8:	2204      	movs	r2, #4
 80114fa:	4007      	ands	r7, r0
 80114fc:	f106 0108 	add.w	r1, r6, #8
 8011500:	4628      	mov	r0, r5
 8011502:	f002 fbd9 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011506:	4007      	ands	r7, r0
 8011508:	7b31      	ldrb	r1, [r6, #12]
 801150a:	4628      	mov	r0, r5
 801150c:	f002 fcce 	bl	8013eac <ucdr_serialize_uint8_t>
 8011510:	7b71      	ldrb	r1, [r6, #13]
 8011512:	4007      	ands	r7, r0
 8011514:	4628      	mov	r0, r5
 8011516:	f002 fc9b 	bl	8013e50 <ucdr_serialize_bool>
 801151a:	7b73      	ldrb	r3, [r6, #13]
 801151c:	ea07 0800 	and.w	r8, r7, r0
 8011520:	b93b      	cbnz	r3, 8011532 <uxr_serialize_CLIENT_Representation+0x62>
 8011522:	8bb1      	ldrh	r1, [r6, #28]
 8011524:	4628      	mov	r0, r5
 8011526:	f002 fced 	bl	8013f04 <ucdr_serialize_uint16_t>
 801152a:	ea08 0000 	and.w	r0, r8, r0
 801152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011532:	6931      	ldr	r1, [r6, #16]
 8011534:	4628      	mov	r0, r5
 8011536:	f002 fecf 	bl	80142d8 <ucdr_serialize_uint32_t>
 801153a:	6933      	ldr	r3, [r6, #16]
 801153c:	b1e3      	cbz	r3, 8011578 <uxr_serialize_CLIENT_Representation+0xa8>
 801153e:	b1c0      	cbz	r0, 8011572 <uxr_serialize_CLIENT_Representation+0xa2>
 8011540:	4637      	mov	r7, r6
 8011542:	f04f 0900 	mov.w	r9, #0
 8011546:	e000      	b.n	801154a <uxr_serialize_CLIENT_Representation+0x7a>
 8011548:	b19c      	cbz	r4, 8011572 <uxr_serialize_CLIENT_Representation+0xa2>
 801154a:	6979      	ldr	r1, [r7, #20]
 801154c:	4628      	mov	r0, r5
 801154e:	f003 fb6d 	bl	8014c2c <ucdr_serialize_string>
 8011552:	69b9      	ldr	r1, [r7, #24]
 8011554:	4604      	mov	r4, r0
 8011556:	4628      	mov	r0, r5
 8011558:	f003 fb68 	bl	8014c2c <ucdr_serialize_string>
 801155c:	f109 0901 	add.w	r9, r9, #1
 8011560:	6933      	ldr	r3, [r6, #16]
 8011562:	4004      	ands	r4, r0
 8011564:	3708      	adds	r7, #8
 8011566:	4599      	cmp	r9, r3
 8011568:	b2e4      	uxtb	r4, r4
 801156a:	d3ed      	bcc.n	8011548 <uxr_serialize_CLIENT_Representation+0x78>
 801156c:	ea08 0804 	and.w	r8, r8, r4
 8011570:	e7d7      	b.n	8011522 <uxr_serialize_CLIENT_Representation+0x52>
 8011572:	f04f 0800 	mov.w	r8, #0
 8011576:	e7d4      	b.n	8011522 <uxr_serialize_CLIENT_Representation+0x52>
 8011578:	ea08 0800 	and.w	r8, r8, r0
 801157c:	e7d1      	b.n	8011522 <uxr_serialize_CLIENT_Representation+0x52>
 801157e:	bf00      	nop

08011580 <uxr_deserialize_CLIENT_Representation>:
 8011580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011584:	2204      	movs	r2, #4
 8011586:	460c      	mov	r4, r1
 8011588:	4605      	mov	r5, r0
 801158a:	f002 fbf9 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 801158e:	4607      	mov	r7, r0
 8011590:	2202      	movs	r2, #2
 8011592:	1d21      	adds	r1, r4, #4
 8011594:	4628      	mov	r0, r5
 8011596:	f002 fbf3 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 801159a:	4038      	ands	r0, r7
 801159c:	2202      	movs	r2, #2
 801159e:	1da1      	adds	r1, r4, #6
 80115a0:	b2c6      	uxtb	r6, r0
 80115a2:	4628      	mov	r0, r5
 80115a4:	f002 fbec 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80115a8:	2204      	movs	r2, #4
 80115aa:	4006      	ands	r6, r0
 80115ac:	f104 0108 	add.w	r1, r4, #8
 80115b0:	4628      	mov	r0, r5
 80115b2:	f002 fbe5 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80115b6:	4006      	ands	r6, r0
 80115b8:	f104 010c 	add.w	r1, r4, #12
 80115bc:	4628      	mov	r0, r5
 80115be:	f002 fc8b 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80115c2:	f104 010d 	add.w	r1, r4, #13
 80115c6:	ea06 0700 	and.w	r7, r6, r0
 80115ca:	4628      	mov	r0, r5
 80115cc:	f002 fc56 	bl	8013e7c <ucdr_deserialize_bool>
 80115d0:	7b63      	ldrb	r3, [r4, #13]
 80115d2:	4007      	ands	r7, r0
 80115d4:	b93b      	cbnz	r3, 80115e6 <uxr_deserialize_CLIENT_Representation+0x66>
 80115d6:	f104 011c 	add.w	r1, r4, #28
 80115da:	4628      	mov	r0, r5
 80115dc:	f002 fd92 	bl	8014104 <ucdr_deserialize_uint16_t>
 80115e0:	4038      	ands	r0, r7
 80115e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e6:	f104 0110 	add.w	r1, r4, #16
 80115ea:	4628      	mov	r0, r5
 80115ec:	f002 ffa4 	bl	8014538 <ucdr_deserialize_uint32_t>
 80115f0:	6923      	ldr	r3, [r4, #16]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d903      	bls.n	80115fe <uxr_deserialize_CLIENT_Representation+0x7e>
 80115f6:	2301      	movs	r3, #1
 80115f8:	2700      	movs	r7, #0
 80115fa:	75ab      	strb	r3, [r5, #22]
 80115fc:	e7eb      	b.n	80115d6 <uxr_deserialize_CLIENT_Representation+0x56>
 80115fe:	b30b      	cbz	r3, 8011644 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011600:	b1f0      	cbz	r0, 8011640 <uxr_deserialize_CLIENT_Representation+0xc0>
 8011602:	46a0      	mov	r8, r4
 8011604:	f04f 0900 	mov.w	r9, #0
 8011608:	e000      	b.n	801160c <uxr_deserialize_CLIENT_Representation+0x8c>
 801160a:	b1ce      	cbz	r6, 8011640 <uxr_deserialize_CLIENT_Representation+0xc0>
 801160c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011610:	f108 0808 	add.w	r8, r8, #8
 8011614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011618:	4628      	mov	r0, r5
 801161a:	f003 fb17 	bl	8014c4c <ucdr_deserialize_string>
 801161e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011622:	4606      	mov	r6, r0
 8011624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011628:	4628      	mov	r0, r5
 801162a:	f109 0901 	add.w	r9, r9, #1
 801162e:	f003 fb0d 	bl	8014c4c <ucdr_deserialize_string>
 8011632:	6923      	ldr	r3, [r4, #16]
 8011634:	4006      	ands	r6, r0
 8011636:	4599      	cmp	r9, r3
 8011638:	b2f6      	uxtb	r6, r6
 801163a:	d3e6      	bcc.n	801160a <uxr_deserialize_CLIENT_Representation+0x8a>
 801163c:	4037      	ands	r7, r6
 801163e:	e7ca      	b.n	80115d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011640:	2700      	movs	r7, #0
 8011642:	e7c8      	b.n	80115d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8011644:	4007      	ands	r7, r0
 8011646:	e7c6      	b.n	80115d6 <uxr_deserialize_CLIENT_Representation+0x56>

08011648 <uxr_serialize_AGENT_Representation>:
 8011648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801164c:	2204      	movs	r2, #4
 801164e:	460f      	mov	r7, r1
 8011650:	4605      	mov	r5, r0
 8011652:	f002 fb31 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011656:	4604      	mov	r4, r0
 8011658:	2202      	movs	r2, #2
 801165a:	1d39      	adds	r1, r7, #4
 801165c:	4628      	mov	r0, r5
 801165e:	f002 fb2b 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011662:	4020      	ands	r0, r4
 8011664:	2202      	movs	r2, #2
 8011666:	1db9      	adds	r1, r7, #6
 8011668:	b2c4      	uxtb	r4, r0
 801166a:	4628      	mov	r0, r5
 801166c:	f002 fb24 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011670:	7a39      	ldrb	r1, [r7, #8]
 8011672:	4004      	ands	r4, r0
 8011674:	4628      	mov	r0, r5
 8011676:	f002 fbeb 	bl	8013e50 <ucdr_serialize_bool>
 801167a:	7a3b      	ldrb	r3, [r7, #8]
 801167c:	ea00 0804 	and.w	r8, r0, r4
 8011680:	b913      	cbnz	r3, 8011688 <uxr_serialize_AGENT_Representation+0x40>
 8011682:	4640      	mov	r0, r8
 8011684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011688:	68f9      	ldr	r1, [r7, #12]
 801168a:	4628      	mov	r0, r5
 801168c:	f002 fe24 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	b303      	cbz	r3, 80116d6 <uxr_serialize_AGENT_Representation+0x8e>
 8011694:	b1d0      	cbz	r0, 80116cc <uxr_serialize_AGENT_Representation+0x84>
 8011696:	463e      	mov	r6, r7
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	e000      	b.n	80116a0 <uxr_serialize_AGENT_Representation+0x58>
 801169e:	b1ac      	cbz	r4, 80116cc <uxr_serialize_AGENT_Representation+0x84>
 80116a0:	6931      	ldr	r1, [r6, #16]
 80116a2:	4628      	mov	r0, r5
 80116a4:	f003 fac2 	bl	8014c2c <ucdr_serialize_string>
 80116a8:	6971      	ldr	r1, [r6, #20]
 80116aa:	4604      	mov	r4, r0
 80116ac:	4628      	mov	r0, r5
 80116ae:	f003 fabd 	bl	8014c2c <ucdr_serialize_string>
 80116b2:	f109 0901 	add.w	r9, r9, #1
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	4004      	ands	r4, r0
 80116ba:	3608      	adds	r6, #8
 80116bc:	4599      	cmp	r9, r3
 80116be:	b2e4      	uxtb	r4, r4
 80116c0:	d3ed      	bcc.n	801169e <uxr_serialize_AGENT_Representation+0x56>
 80116c2:	ea08 0804 	and.w	r8, r8, r4
 80116c6:	4640      	mov	r0, r8
 80116c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116cc:	f04f 0800 	mov.w	r8, #0
 80116d0:	4640      	mov	r0, r8
 80116d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116d6:	ea08 0800 	and.w	r8, r8, r0
 80116da:	e7d2      	b.n	8011682 <uxr_serialize_AGENT_Representation+0x3a>

080116dc <uxr_serialize_DATAWRITER_Representation>:
 80116dc:	b570      	push	{r4, r5, r6, lr}
 80116de:	460d      	mov	r5, r1
 80116e0:	7809      	ldrb	r1, [r1, #0]
 80116e2:	4606      	mov	r6, r0
 80116e4:	f002 fbe2 	bl	8013eac <ucdr_serialize_uint8_t>
 80116e8:	4604      	mov	r4, r0
 80116ea:	b130      	cbz	r0, 80116fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 80116ec:	782b      	ldrb	r3, [r5, #0]
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	d00c      	beq.n	801170c <uxr_serialize_DATAWRITER_Representation+0x30>
 80116f2:	2b03      	cmp	r3, #3
 80116f4:	d010      	beq.n	8011718 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d008      	beq.n	801170c <uxr_serialize_DATAWRITER_Representation+0x30>
 80116fa:	2202      	movs	r2, #2
 80116fc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011700:	4630      	mov	r0, r6
 8011702:	f002 fad9 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011706:	4020      	ands	r0, r4
 8011708:	b2c0      	uxtb	r0, r0
 801170a:	bd70      	pop	{r4, r5, r6, pc}
 801170c:	6869      	ldr	r1, [r5, #4]
 801170e:	4630      	mov	r0, r6
 8011710:	f003 fa8c 	bl	8014c2c <ucdr_serialize_string>
 8011714:	4604      	mov	r4, r0
 8011716:	e7f0      	b.n	80116fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011718:	4629      	mov	r1, r5
 801171a:	4630      	mov	r0, r6
 801171c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011720:	3104      	adds	r1, #4
 8011722:	f7fe f82b 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011726:	4604      	mov	r4, r0
 8011728:	e7e7      	b.n	80116fa <uxr_serialize_DATAWRITER_Representation+0x1e>
 801172a:	bf00      	nop

0801172c <uxr_serialize_ObjectVariant.part.0>:
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	780b      	ldrb	r3, [r1, #0]
 8011730:	460c      	mov	r4, r1
 8011732:	4605      	mov	r5, r0
 8011734:	3b01      	subs	r3, #1
 8011736:	2b0d      	cmp	r3, #13
 8011738:	d854      	bhi.n	80117e4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801173a:	e8df f003 	tbb	[pc, r3]
 801173e:	0730      	.short	0x0730
 8011740:	07071b1b 	.word	0x07071b1b
 8011744:	0c530707 	.word	0x0c530707
 8011748:	494e0c0c 	.word	0x494e0c0c
 801174c:	3104      	adds	r1, #4
 801174e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011752:	f7ff bfc3 	b.w	80116dc <uxr_serialize_DATAWRITER_Representation>
 8011756:	7909      	ldrb	r1, [r1, #4]
 8011758:	f002 fba8 	bl	8013eac <ucdr_serialize_uint8_t>
 801175c:	b1e8      	cbz	r0, 801179a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801175e:	7923      	ldrb	r3, [r4, #4]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d001      	beq.n	8011768 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011764:	2b02      	cmp	r3, #2
 8011766:	d13d      	bne.n	80117e4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011768:	68a1      	ldr	r1, [r4, #8]
 801176a:	4628      	mov	r0, r5
 801176c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011770:	f003 ba5c 	b.w	8014c2c <ucdr_serialize_string>
 8011774:	7909      	ldrb	r1, [r1, #4]
 8011776:	f002 fb99 	bl	8013eac <ucdr_serialize_uint8_t>
 801177a:	4606      	mov	r6, r0
 801177c:	b120      	cbz	r0, 8011788 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801177e:	7923      	ldrb	r3, [r4, #4]
 8011780:	2b02      	cmp	r3, #2
 8011782:	d039      	beq.n	80117f8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011784:	2b03      	cmp	r3, #3
 8011786:	d02f      	beq.n	80117e8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011788:	2202      	movs	r2, #2
 801178a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801178e:	4628      	mov	r0, r5
 8011790:	f002 fa92 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011794:	4030      	ands	r0, r6
 8011796:	b2c0      	uxtb	r0, r0
 8011798:	bd70      	pop	{r4, r5, r6, pc}
 801179a:	2000      	movs	r0, #0
 801179c:	bd70      	pop	{r4, r5, r6, pc}
 801179e:	7909      	ldrb	r1, [r1, #4]
 80117a0:	f002 fb84 	bl	8013eac <ucdr_serialize_uint8_t>
 80117a4:	4606      	mov	r6, r0
 80117a6:	b158      	cbz	r0, 80117c0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80117a8:	7923      	ldrb	r3, [r4, #4]
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	d003      	beq.n	80117b6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	d028      	beq.n	8011804 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d104      	bne.n	80117c0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80117b6:	68a1      	ldr	r1, [r4, #8]
 80117b8:	4628      	mov	r0, r5
 80117ba:	f003 fa37 	bl	8014c2c <ucdr_serialize_string>
 80117be:	4606      	mov	r6, r0
 80117c0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80117c4:	4628      	mov	r0, r5
 80117c6:	f003 f8ad 	bl	8014924 <ucdr_serialize_int16_t>
 80117ca:	4030      	ands	r0, r6
 80117cc:	b2c0      	uxtb	r0, r0
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	3104      	adds	r1, #4
 80117d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117d6:	f7ff be7b 	b.w	80114d0 <uxr_serialize_CLIENT_Representation>
 80117da:	3104      	adds	r1, #4
 80117dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117e0:	f7ff bf32 	b.w	8011648 <uxr_serialize_AGENT_Representation>
 80117e4:	2001      	movs	r0, #1
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	68a2      	ldr	r2, [r4, #8]
 80117ea:	f104 010c 	add.w	r1, r4, #12
 80117ee:	4628      	mov	r0, r5
 80117f0:	f7fd ffc4 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 80117f4:	4606      	mov	r6, r0
 80117f6:	e7c7      	b.n	8011788 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80117f8:	68a1      	ldr	r1, [r4, #8]
 80117fa:	4628      	mov	r0, r5
 80117fc:	f003 fa16 	bl	8014c2c <ucdr_serialize_string>
 8011800:	4606      	mov	r6, r0
 8011802:	e7c1      	b.n	8011788 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011804:	68a2      	ldr	r2, [r4, #8]
 8011806:	f104 010c 	add.w	r1, r4, #12
 801180a:	4628      	mov	r0, r5
 801180c:	f7fd ffb6 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011810:	4606      	mov	r6, r0
 8011812:	e7d5      	b.n	80117c0 <uxr_serialize_ObjectVariant.part.0+0x94>

08011814 <uxr_deserialize_DATAWRITER_Representation>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4606      	mov	r6, r0
 8011818:	460d      	mov	r5, r1
 801181a:	f002 fb5d 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 801181e:	4604      	mov	r4, r0
 8011820:	b130      	cbz	r0, 8011830 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011822:	782b      	ldrb	r3, [r5, #0]
 8011824:	2b02      	cmp	r3, #2
 8011826:	d00c      	beq.n	8011842 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011828:	2b03      	cmp	r3, #3
 801182a:	d012      	beq.n	8011852 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801182c:	2b01      	cmp	r3, #1
 801182e:	d008      	beq.n	8011842 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011830:	2202      	movs	r2, #2
 8011832:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011836:	4630      	mov	r0, r6
 8011838:	f002 faa2 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 801183c:	4020      	ands	r0, r4
 801183e:	b2c0      	uxtb	r0, r0
 8011840:	bd70      	pop	{r4, r5, r6, pc}
 8011842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011846:	6869      	ldr	r1, [r5, #4]
 8011848:	4630      	mov	r0, r6
 801184a:	f003 f9ff 	bl	8014c4c <ucdr_deserialize_string>
 801184e:	4604      	mov	r4, r0
 8011850:	e7ee      	b.n	8011830 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011852:	1d2b      	adds	r3, r5, #4
 8011854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011858:	f105 0108 	add.w	r1, r5, #8
 801185c:	4630      	mov	r0, r6
 801185e:	f7fd ff9f 	bl	800f7a0 <ucdr_deserialize_sequence_uint8_t>
 8011862:	4604      	mov	r4, r0
 8011864:	e7e4      	b.n	8011830 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011866:	bf00      	nop

08011868 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011868:	b570      	push	{r4, r5, r6, lr}
 801186a:	460d      	mov	r5, r1
 801186c:	7809      	ldrb	r1, [r1, #0]
 801186e:	4606      	mov	r6, r0
 8011870:	f002 faee 	bl	8013e50 <ucdr_serialize_bool>
 8011874:	782b      	ldrb	r3, [r5, #0]
 8011876:	4604      	mov	r4, r0
 8011878:	b94b      	cbnz	r3, 801188e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801187a:	7a29      	ldrb	r1, [r5, #8]
 801187c:	4630      	mov	r0, r6
 801187e:	f002 fae7 	bl	8013e50 <ucdr_serialize_bool>
 8011882:	7a2b      	ldrb	r3, [r5, #8]
 8011884:	4004      	ands	r4, r0
 8011886:	b2e4      	uxtb	r4, r4
 8011888:	b943      	cbnz	r3, 801189c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801188a:	4620      	mov	r0, r4
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	6869      	ldr	r1, [r5, #4]
 8011890:	4630      	mov	r0, r6
 8011892:	f003 f9cb 	bl	8014c2c <ucdr_serialize_string>
 8011896:	4004      	ands	r4, r0
 8011898:	b2e4      	uxtb	r4, r4
 801189a:	e7ee      	b.n	801187a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801189c:	68e9      	ldr	r1, [r5, #12]
 801189e:	4630      	mov	r0, r6
 80118a0:	f003 f9c4 	bl	8014c2c <ucdr_serialize_string>
 80118a4:	4004      	ands	r4, r0
 80118a6:	4620      	mov	r0, r4
 80118a8:	bd70      	pop	{r4, r5, r6, pc}
 80118aa:	bf00      	nop

080118ac <uxr_serialize_OBJK_Topic_Binary>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	460d      	mov	r5, r1
 80118b0:	4606      	mov	r6, r0
 80118b2:	6809      	ldr	r1, [r1, #0]
 80118b4:	f003 f9ba 	bl	8014c2c <ucdr_serialize_string>
 80118b8:	4604      	mov	r4, r0
 80118ba:	7929      	ldrb	r1, [r5, #4]
 80118bc:	4630      	mov	r0, r6
 80118be:	f002 fac7 	bl	8013e50 <ucdr_serialize_bool>
 80118c2:	792b      	ldrb	r3, [r5, #4]
 80118c4:	4004      	ands	r4, r0
 80118c6:	b2e4      	uxtb	r4, r4
 80118c8:	b943      	cbnz	r3, 80118dc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80118ca:	7b29      	ldrb	r1, [r5, #12]
 80118cc:	4630      	mov	r0, r6
 80118ce:	f002 fabf 	bl	8013e50 <ucdr_serialize_bool>
 80118d2:	7b2b      	ldrb	r3, [r5, #12]
 80118d4:	4004      	ands	r4, r0
 80118d6:	b93b      	cbnz	r3, 80118e8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80118d8:	4620      	mov	r0, r4
 80118da:	bd70      	pop	{r4, r5, r6, pc}
 80118dc:	68a9      	ldr	r1, [r5, #8]
 80118de:	4630      	mov	r0, r6
 80118e0:	f003 f9a4 	bl	8014c2c <ucdr_serialize_string>
 80118e4:	4004      	ands	r4, r0
 80118e6:	e7f0      	b.n	80118ca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80118e8:	6929      	ldr	r1, [r5, #16]
 80118ea:	4630      	mov	r0, r6
 80118ec:	f003 f99e 	bl	8014c2c <ucdr_serialize_string>
 80118f0:	4004      	ands	r4, r0
 80118f2:	b2e4      	uxtb	r4, r4
 80118f4:	4620      	mov	r0, r4
 80118f6:	bd70      	pop	{r4, r5, r6, pc}

080118f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80118f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118fc:	460c      	mov	r4, r1
 80118fe:	7809      	ldrb	r1, [r1, #0]
 8011900:	4606      	mov	r6, r0
 8011902:	f002 faa5 	bl	8013e50 <ucdr_serialize_bool>
 8011906:	7823      	ldrb	r3, [r4, #0]
 8011908:	4605      	mov	r5, r0
 801190a:	b96b      	cbnz	r3, 8011928 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801190c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011910:	4630      	mov	r0, r6
 8011912:	f002 fa9d 	bl	8013e50 <ucdr_serialize_bool>
 8011916:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801191a:	4005      	ands	r5, r0
 801191c:	b2ed      	uxtb	r5, r5
 801191e:	2b00      	cmp	r3, #0
 8011920:	d169      	bne.n	80119f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011922:	4628      	mov	r0, r5
 8011924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011928:	6861      	ldr	r1, [r4, #4]
 801192a:	4630      	mov	r0, r6
 801192c:	f002 fcd4 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011930:	6863      	ldr	r3, [r4, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d06b      	beq.n	8011a0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011936:	2800      	cmp	r0, #0
 8011938:	d067      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801193a:	68a1      	ldr	r1, [r4, #8]
 801193c:	4630      	mov	r0, r6
 801193e:	f003 f975 	bl	8014c2c <ucdr_serialize_string>
 8011942:	6863      	ldr	r3, [r4, #4]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d953      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011948:	2800      	cmp	r0, #0
 801194a:	d05e      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801194c:	68e1      	ldr	r1, [r4, #12]
 801194e:	4630      	mov	r0, r6
 8011950:	f003 f96c 	bl	8014c2c <ucdr_serialize_string>
 8011954:	6863      	ldr	r3, [r4, #4]
 8011956:	2b02      	cmp	r3, #2
 8011958:	d94a      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801195a:	2800      	cmp	r0, #0
 801195c:	d055      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801195e:	6921      	ldr	r1, [r4, #16]
 8011960:	4630      	mov	r0, r6
 8011962:	f003 f963 	bl	8014c2c <ucdr_serialize_string>
 8011966:	6863      	ldr	r3, [r4, #4]
 8011968:	2b03      	cmp	r3, #3
 801196a:	d941      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801196c:	2800      	cmp	r0, #0
 801196e:	d04c      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011970:	6961      	ldr	r1, [r4, #20]
 8011972:	4630      	mov	r0, r6
 8011974:	f003 f95a 	bl	8014c2c <ucdr_serialize_string>
 8011978:	6863      	ldr	r3, [r4, #4]
 801197a:	2b04      	cmp	r3, #4
 801197c:	d938      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801197e:	2800      	cmp	r0, #0
 8011980:	d043      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011982:	69a1      	ldr	r1, [r4, #24]
 8011984:	4630      	mov	r0, r6
 8011986:	f003 f951 	bl	8014c2c <ucdr_serialize_string>
 801198a:	6863      	ldr	r3, [r4, #4]
 801198c:	2b05      	cmp	r3, #5
 801198e:	d92f      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011990:	2800      	cmp	r0, #0
 8011992:	d03a      	beq.n	8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011994:	69e1      	ldr	r1, [r4, #28]
 8011996:	4630      	mov	r0, r6
 8011998:	f003 f948 	bl	8014c2c <ucdr_serialize_string>
 801199c:	6863      	ldr	r3, [r4, #4]
 801199e:	2b06      	cmp	r3, #6
 80119a0:	d926      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80119a2:	b390      	cbz	r0, 8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119a4:	6a21      	ldr	r1, [r4, #32]
 80119a6:	4630      	mov	r0, r6
 80119a8:	f003 f940 	bl	8014c2c <ucdr_serialize_string>
 80119ac:	6863      	ldr	r3, [r4, #4]
 80119ae:	2b07      	cmp	r3, #7
 80119b0:	d91e      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80119b2:	b350      	cbz	r0, 8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80119b6:	4630      	mov	r0, r6
 80119b8:	f003 f938 	bl	8014c2c <ucdr_serialize_string>
 80119bc:	6863      	ldr	r3, [r4, #4]
 80119be:	2b08      	cmp	r3, #8
 80119c0:	d916      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80119c2:	b310      	cbz	r0, 8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80119c6:	4630      	mov	r0, r6
 80119c8:	f003 f930 	bl	8014c2c <ucdr_serialize_string>
 80119cc:	6863      	ldr	r3, [r4, #4]
 80119ce:	2b09      	cmp	r3, #9
 80119d0:	d90e      	bls.n	80119f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80119d2:	b1d0      	cbz	r0, 8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80119d8:	2709      	movs	r7, #9
 80119da:	e000      	b.n	80119de <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80119dc:	b1a8      	cbz	r0, 8011a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80119de:	f858 1b04 	ldr.w	r1, [r8], #4
 80119e2:	4630      	mov	r0, r6
 80119e4:	f003 f922 	bl	8014c2c <ucdr_serialize_string>
 80119e8:	3701      	adds	r7, #1
 80119ea:	6862      	ldr	r2, [r4, #4]
 80119ec:	4297      	cmp	r7, r2
 80119ee:	d3f5      	bcc.n	80119dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80119f0:	4005      	ands	r5, r0
 80119f2:	b2ed      	uxtb	r5, r5
 80119f4:	e78a      	b.n	801190c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80119f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80119f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7fd febd 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011a02:	4005      	ands	r5, r0
 8011a04:	4628      	mov	r0, r5
 8011a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0a:	2500      	movs	r5, #0
 8011a0c:	e77e      	b.n	801190c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011a0e:	4028      	ands	r0, r5
 8011a10:	b2c5      	uxtb	r5, r0
 8011a12:	e77b      	b.n	801190c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011a14 <uxr_serialize_OBJK_Publisher_Binary>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	460d      	mov	r5, r1
 8011a18:	7809      	ldrb	r1, [r1, #0]
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	f002 fa18 	bl	8013e50 <ucdr_serialize_bool>
 8011a20:	782b      	ldrb	r3, [r5, #0]
 8011a22:	4604      	mov	r4, r0
 8011a24:	b94b      	cbnz	r3, 8011a3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011a26:	7a29      	ldrb	r1, [r5, #8]
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f002 fa11 	bl	8013e50 <ucdr_serialize_bool>
 8011a2e:	7a2b      	ldrb	r3, [r5, #8]
 8011a30:	4004      	ands	r4, r0
 8011a32:	b2e4      	uxtb	r4, r4
 8011a34:	b943      	cbnz	r3, 8011a48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011a36:	4620      	mov	r0, r4
 8011a38:	bd70      	pop	{r4, r5, r6, pc}
 8011a3a:	6869      	ldr	r1, [r5, #4]
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f003 f8f5 	bl	8014c2c <ucdr_serialize_string>
 8011a42:	4004      	ands	r4, r0
 8011a44:	b2e4      	uxtb	r4, r4
 8011a46:	e7ee      	b.n	8011a26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011a48:	f105 010c 	add.w	r1, r5, #12
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	f7ff ff53 	bl	80118f8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011a52:	4004      	ands	r4, r0
 8011a54:	4620      	mov	r0, r4
 8011a56:	bd70      	pop	{r4, r5, r6, pc}

08011a58 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011a58:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011a5c:	4688      	mov	r8, r1
 8011a5e:	4681      	mov	r9, r0
 8011a60:	8809      	ldrh	r1, [r1, #0]
 8011a62:	f002 fa4f 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011a66:	4606      	mov	r6, r0
 8011a68:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011a6c:	4648      	mov	r0, r9
 8011a6e:	f002 f9ef 	bl	8013e50 <ucdr_serialize_bool>
 8011a72:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011a76:	4006      	ands	r6, r0
 8011a78:	b2f5      	uxtb	r5, r6
 8011a7a:	b9eb      	cbnz	r3, 8011ab8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011a7c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011a80:	4648      	mov	r0, r9
 8011a82:	f002 f9e5 	bl	8013e50 <ucdr_serialize_bool>
 8011a86:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011a8a:	4005      	ands	r5, r0
 8011a8c:	bb7b      	cbnz	r3, 8011aee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011a8e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011a92:	4648      	mov	r0, r9
 8011a94:	f002 f9dc 	bl	8013e50 <ucdr_serialize_bool>
 8011a98:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011a9c:	4005      	ands	r5, r0
 8011a9e:	b9f3      	cbnz	r3, 8011ade <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011aa0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011aa4:	4648      	mov	r0, r9
 8011aa6:	f002 f9d3 	bl	8013e50 <ucdr_serialize_bool>
 8011aaa:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011aae:	4005      	ands	r5, r0
 8011ab0:	b94b      	cbnz	r3, 8011ac6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011ab8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011abc:	4648      	mov	r0, r9
 8011abe:	f002 fa21 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011ac2:	4005      	ands	r5, r0
 8011ac4:	e7da      	b.n	8011a7c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011ac6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011aca:	f108 011c 	add.w	r1, r8, #28
 8011ace:	4648      	mov	r0, r9
 8011ad0:	f7fd fe54 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011ad4:	4028      	ands	r0, r5
 8011ad6:	b2c5      	uxtb	r5, r0
 8011ad8:	4628      	mov	r0, r5
 8011ada:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011ade:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011ae2:	4648      	mov	r0, r9
 8011ae4:	f002 fbf8 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011ae8:	4028      	ands	r0, r5
 8011aea:	b2c5      	uxtb	r5, r0
 8011aec:	e7d8      	b.n	8011aa0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011aee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011af2:	4648      	mov	r0, r9
 8011af4:	f002 fbf0 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011af8:	4028      	ands	r0, r5
 8011afa:	b2c5      	uxtb	r5, r0
 8011afc:	e7c7      	b.n	8011a8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011afe:	bf00      	nop

08011b00 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b02:	2202      	movs	r2, #2
 8011b04:	460d      	mov	r5, r1
 8011b06:	4606      	mov	r6, r0
 8011b08:	f002 f8d6 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	78a9      	ldrb	r1, [r5, #2]
 8011b10:	4630      	mov	r0, r6
 8011b12:	f002 f99d 	bl	8013e50 <ucdr_serialize_bool>
 8011b16:	78ab      	ldrb	r3, [r5, #2]
 8011b18:	4004      	ands	r4, r0
 8011b1a:	b2e4      	uxtb	r4, r4
 8011b1c:	b90b      	cbnz	r3, 8011b22 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011b1e:	4620      	mov	r0, r4
 8011b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b22:	f105 0108 	add.w	r1, r5, #8
 8011b26:	4630      	mov	r0, r6
 8011b28:	f7ff ff96 	bl	8011a58 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011b2c:	4607      	mov	r7, r0
 8011b2e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011b32:	4630      	mov	r0, r6
 8011b34:	f002 f98c 	bl	8013e50 <ucdr_serialize_bool>
 8011b38:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011b3c:	4038      	ands	r0, r7
 8011b3e:	b2c7      	uxtb	r7, r0
 8011b40:	b913      	cbnz	r3, 8011b48 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011b42:	403c      	ands	r4, r7
 8011b44:	4620      	mov	r0, r4
 8011b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b48:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f002 fe19 	bl	8014784 <ucdr_serialize_uint64_t>
 8011b52:	4007      	ands	r7, r0
 8011b54:	e7f5      	b.n	8011b42 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011b56:	bf00      	nop

08011b58 <uxr_deserialize_ObjectVariant>:
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	460e      	mov	r6, r1
 8011b5e:	f002 f9bb 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011b62:	b168      	cbz	r0, 8011b80 <uxr_deserialize_ObjectVariant+0x28>
 8011b64:	7833      	ldrb	r3, [r6, #0]
 8011b66:	4604      	mov	r4, r0
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	2b0d      	cmp	r3, #13
 8011b6c:	d809      	bhi.n	8011b82 <uxr_deserialize_ObjectVariant+0x2a>
 8011b6e:	e8df f003 	tbb	[pc, r3]
 8011b72:	0a41      	.short	0x0a41
 8011b74:	0a0a2323 	.word	0x0a0a2323
 8011b78:	10080a0a 	.word	0x10080a0a
 8011b7c:	565c1010 	.word	0x565c1010
 8011b80:	2400      	movs	r4, #0
 8011b82:	4620      	mov	r0, r4
 8011b84:	bd70      	pop	{r4, r5, r6, pc}
 8011b86:	1d31      	adds	r1, r6, #4
 8011b88:	4628      	mov	r0, r5
 8011b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b8e:	f7ff be41 	b.w	8011814 <uxr_deserialize_DATAWRITER_Representation>
 8011b92:	1d31      	adds	r1, r6, #4
 8011b94:	4628      	mov	r0, r5
 8011b96:	f002 f99f 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d0f0      	beq.n	8011b80 <uxr_deserialize_ObjectVariant+0x28>
 8011b9e:	7933      	ldrb	r3, [r6, #4]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d001      	beq.n	8011ba8 <uxr_deserialize_ObjectVariant+0x50>
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d1ec      	bne.n	8011b82 <uxr_deserialize_ObjectVariant+0x2a>
 8011ba8:	68b1      	ldr	r1, [r6, #8]
 8011baa:	4628      	mov	r0, r5
 8011bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bb4:	f003 b84a 	b.w	8014c4c <ucdr_deserialize_string>
 8011bb8:	1d31      	adds	r1, r6, #4
 8011bba:	4628      	mov	r0, r5
 8011bbc:	f002 f98c 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	b170      	cbz	r0, 8011be2 <uxr_deserialize_ObjectVariant+0x8a>
 8011bc4:	7933      	ldrb	r3, [r6, #4]
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d04c      	beq.n	8011c64 <uxr_deserialize_ObjectVariant+0x10c>
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	d109      	bne.n	8011be2 <uxr_deserialize_ObjectVariant+0x8a>
 8011bce:	f106 0308 	add.w	r3, r6, #8
 8011bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011bd6:	f106 010c 	add.w	r1, r6, #12
 8011bda:	4628      	mov	r0, r5
 8011bdc:	f7fd fde0 	bl	800f7a0 <ucdr_deserialize_sequence_uint8_t>
 8011be0:	4604      	mov	r4, r0
 8011be2:	2202      	movs	r2, #2
 8011be4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011be8:	4628      	mov	r0, r5
 8011bea:	f002 f8c9 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011bee:	4020      	ands	r0, r4
 8011bf0:	b2c4      	uxtb	r4, r0
 8011bf2:	e7c6      	b.n	8011b82 <uxr_deserialize_ObjectVariant+0x2a>
 8011bf4:	1d31      	adds	r1, r6, #4
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f002 f96e 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	b130      	cbz	r0, 8011c0e <uxr_deserialize_ObjectVariant+0xb6>
 8011c00:	7933      	ldrb	r3, [r6, #4]
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d036      	beq.n	8011c74 <uxr_deserialize_ObjectVariant+0x11c>
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	d03c      	beq.n	8011c84 <uxr_deserialize_ObjectVariant+0x12c>
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d032      	beq.n	8011c74 <uxr_deserialize_ObjectVariant+0x11c>
 8011c0e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011c12:	4628      	mov	r0, r5
 8011c14:	f002 ff06 	bl	8014a24 <ucdr_deserialize_int16_t>
 8011c18:	4020      	ands	r0, r4
 8011c1a:	b2c4      	uxtb	r4, r0
 8011c1c:	e7b1      	b.n	8011b82 <uxr_deserialize_ObjectVariant+0x2a>
 8011c1e:	1d31      	adds	r1, r6, #4
 8011c20:	4628      	mov	r0, r5
 8011c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c26:	f7ff bcab 	b.w	8011580 <uxr_deserialize_CLIENT_Representation>
 8011c2a:	2204      	movs	r2, #4
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	18b1      	adds	r1, r6, r2
 8011c30:	f002 f8a6 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011c34:	4604      	mov	r4, r0
 8011c36:	2202      	movs	r2, #2
 8011c38:	f106 0108 	add.w	r1, r6, #8
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f002 f89f 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011c42:	4004      	ands	r4, r0
 8011c44:	2202      	movs	r2, #2
 8011c46:	f106 010a 	add.w	r1, r6, #10
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	b2e4      	uxtb	r4, r4
 8011c4e:	f002 f897 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011c52:	4603      	mov	r3, r0
 8011c54:	f106 010c 	add.w	r1, r6, #12
 8011c58:	4628      	mov	r0, r5
 8011c5a:	401c      	ands	r4, r3
 8011c5c:	f002 f90e 	bl	8013e7c <ucdr_deserialize_bool>
 8011c60:	4004      	ands	r4, r0
 8011c62:	e78e      	b.n	8011b82 <uxr_deserialize_ObjectVariant+0x2a>
 8011c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c68:	68b1      	ldr	r1, [r6, #8]
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	f002 ffee 	bl	8014c4c <ucdr_deserialize_string>
 8011c70:	4604      	mov	r4, r0
 8011c72:	e7b6      	b.n	8011be2 <uxr_deserialize_ObjectVariant+0x8a>
 8011c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c78:	68b1      	ldr	r1, [r6, #8]
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	f002 ffe6 	bl	8014c4c <ucdr_deserialize_string>
 8011c80:	4604      	mov	r4, r0
 8011c82:	e7c4      	b.n	8011c0e <uxr_deserialize_ObjectVariant+0xb6>
 8011c84:	f106 0308 	add.w	r3, r6, #8
 8011c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c8c:	f106 010c 	add.w	r1, r6, #12
 8011c90:	4628      	mov	r0, r5
 8011c92:	f7fd fd85 	bl	800f7a0 <ucdr_deserialize_sequence_uint8_t>
 8011c96:	4604      	mov	r4, r0
 8011c98:	e7b9      	b.n	8011c0e <uxr_deserialize_ObjectVariant+0xb6>
 8011c9a:	bf00      	nop

08011c9c <uxr_deserialize_BaseObjectRequest>:
 8011c9c:	b570      	push	{r4, r5, r6, lr}
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	460e      	mov	r6, r1
 8011ca4:	f002 f86c 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011ca8:	2202      	movs	r2, #2
 8011caa:	4604      	mov	r4, r0
 8011cac:	4628      	mov	r0, r5
 8011cae:	18b1      	adds	r1, r6, r2
 8011cb0:	f002 f866 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011cb4:	4020      	ands	r0, r4
 8011cb6:	b2c0      	uxtb	r0, r0
 8011cb8:	bd70      	pop	{r4, r5, r6, pc}
 8011cba:	bf00      	nop

08011cbc <uxr_serialize_ActivityInfoVariant>:
 8011cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc0:	460e      	mov	r6, r1
 8011cc2:	7809      	ldrb	r1, [r1, #0]
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	f002 f8f1 	bl	8013eac <ucdr_serialize_uint8_t>
 8011cca:	4607      	mov	r7, r0
 8011ccc:	b138      	cbz	r0, 8011cde <uxr_serialize_ActivityInfoVariant+0x22>
 8011cce:	7833      	ldrb	r3, [r6, #0]
 8011cd0:	2b06      	cmp	r3, #6
 8011cd2:	f000 8081 	beq.w	8011dd8 <uxr_serialize_ActivityInfoVariant+0x11c>
 8011cd6:	2b0d      	cmp	r3, #13
 8011cd8:	d014      	beq.n	8011d04 <uxr_serialize_ActivityInfoVariant+0x48>
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	d002      	beq.n	8011ce4 <uxr_serialize_ActivityInfoVariant+0x28>
 8011cde:	4638      	mov	r0, r7
 8011ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011ce8:	4640      	mov	r0, r8
 8011cea:	f002 fe1b 	bl	8014924 <ucdr_serialize_int16_t>
 8011cee:	4607      	mov	r7, r0
 8011cf0:	4640      	mov	r0, r8
 8011cf2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8011cf6:	f002 fd45 	bl	8014784 <ucdr_serialize_uint64_t>
 8011cfa:	4038      	ands	r0, r7
 8011cfc:	b2c7      	uxtb	r7, r0
 8011cfe:	4638      	mov	r0, r7
 8011d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d04:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011d08:	4640      	mov	r0, r8
 8011d0a:	f002 fe0b 	bl	8014924 <ucdr_serialize_int16_t>
 8011d0e:	68f1      	ldr	r1, [r6, #12]
 8011d10:	4607      	mov	r7, r0
 8011d12:	4640      	mov	r0, r8
 8011d14:	f002 fae0 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011d18:	68f3      	ldr	r3, [r6, #12]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d0ed      	beq.n	8011cfa <uxr_serialize_ActivityInfoVariant+0x3e>
 8011d1e:	b318      	cbz	r0, 8011d68 <uxr_serialize_ActivityInfoVariant+0xac>
 8011d20:	f106 090c 	add.w	r9, r6, #12
 8011d24:	2400      	movs	r4, #0
 8011d26:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011d2a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8011d2e:	7c29      	ldrb	r1, [r5, #16]
 8011d30:	4640      	mov	r0, r8
 8011d32:	f002 f8bb 	bl	8013eac <ucdr_serialize_uint8_t>
 8011d36:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8011d3a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d051      	beq.n	8011de6 <uxr_serialize_ActivityInfoVariant+0x12a>
 8011d42:	7c2b      	ldrb	r3, [r5, #16]
 8011d44:	00c9      	lsls	r1, r1, #3
 8011d46:	2b03      	cmp	r3, #3
 8011d48:	d854      	bhi.n	8011df4 <uxr_serialize_ActivityInfoVariant+0x138>
 8011d4a:	e8df f003 	tbb	[pc, r3]
 8011d4e:	2133      	.short	0x2133
 8011d50:	020f      	.short	0x020f
 8011d52:	4449      	add	r1, r9
 8011d54:	4640      	mov	r0, r8
 8011d56:	6889      	ldr	r1, [r1, #8]
 8011d58:	f002 ff68 	bl	8014c2c <ucdr_serialize_string>
 8011d5c:	3401      	adds	r4, #1
 8011d5e:	68f2      	ldr	r2, [r6, #12]
 8011d60:	4294      	cmp	r4, r2
 8011d62:	d244      	bcs.n	8011dee <uxr_serialize_ActivityInfoVariant+0x132>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d1de      	bne.n	8011d26 <uxr_serialize_ActivityInfoVariant+0x6a>
 8011d68:	2700      	movs	r7, #0
 8011d6a:	e7b8      	b.n	8011cde <uxr_serialize_ActivityInfoVariant+0x22>
 8011d6c:	3108      	adds	r1, #8
 8011d6e:	44a2      	add	sl, r4
 8011d70:	2210      	movs	r2, #16
 8011d72:	4640      	mov	r0, r8
 8011d74:	4449      	add	r1, r9
 8011d76:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011d7a:	f001 ff9d 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011d7e:	4605      	mov	r5, r0
 8011d80:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8011d84:	4640      	mov	r0, r8
 8011d86:	f002 faa7 	bl	80142d8 <ucdr_serialize_uint32_t>
 8011d8a:	4028      	ands	r0, r5
 8011d8c:	b2c0      	uxtb	r0, r0
 8011d8e:	e7e5      	b.n	8011d5c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011d90:	3108      	adds	r1, #8
 8011d92:	44a2      	add	sl, r4
 8011d94:	2204      	movs	r2, #4
 8011d96:	4640      	mov	r0, r8
 8011d98:	4449      	add	r1, r9
 8011d9a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011d9e:	f001 ff8b 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011da2:	4605      	mov	r5, r0
 8011da4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8011da8:	4640      	mov	r0, r8
 8011daa:	f002 f8ab 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011dae:	4028      	ands	r0, r5
 8011db0:	b2c0      	uxtb	r0, r0
 8011db2:	e7d3      	b.n	8011d5c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011db4:	3108      	adds	r1, #8
 8011db6:	44a2      	add	sl, r4
 8011db8:	2202      	movs	r2, #2
 8011dba:	4640      	mov	r0, r8
 8011dbc:	4449      	add	r1, r9
 8011dbe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011dc2:	f001 ff79 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8011dcc:	4640      	mov	r0, r8
 8011dce:	f002 f86d 	bl	8013eac <ucdr_serialize_uint8_t>
 8011dd2:	4028      	ands	r0, r5
 8011dd4:	b2c0      	uxtb	r0, r0
 8011dd6:	e7c1      	b.n	8011d5c <uxr_serialize_ActivityInfoVariant+0xa0>
 8011dd8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8011ddc:	4640      	mov	r0, r8
 8011dde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de2:	f002 bd9f 	b.w	8014924 <ucdr_serialize_int16_t>
 8011de6:	3401      	adds	r4, #1
 8011de8:	68f2      	ldr	r2, [r6, #12]
 8011dea:	42a2      	cmp	r2, r4
 8011dec:	d8bc      	bhi.n	8011d68 <uxr_serialize_ActivityInfoVariant+0xac>
 8011dee:	4007      	ands	r7, r0
 8011df0:	b2ff      	uxtb	r7, r7
 8011df2:	e774      	b.n	8011cde <uxr_serialize_ActivityInfoVariant+0x22>
 8011df4:	3401      	adds	r4, #1
 8011df6:	68f3      	ldr	r3, [r6, #12]
 8011df8:	3518      	adds	r5, #24
 8011dfa:	429c      	cmp	r4, r3
 8011dfc:	d397      	bcc.n	8011d2e <uxr_serialize_ActivityInfoVariant+0x72>
 8011dfe:	e76e      	b.n	8011cde <uxr_serialize_ActivityInfoVariant+0x22>

08011e00 <uxr_deserialize_BaseObjectReply>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	2202      	movs	r2, #2
 8011e06:	4606      	mov	r6, r0
 8011e08:	460f      	mov	r7, r1
 8011e0a:	f001 ffb9 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011e0e:	2202      	movs	r2, #2
 8011e10:	4605      	mov	r5, r0
 8011e12:	4630      	mov	r0, r6
 8011e14:	18b9      	adds	r1, r7, r2
 8011e16:	f001 ffb3 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011e1a:	4680      	mov	r8, r0
 8011e1c:	1d39      	adds	r1, r7, #4
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f002 f85a 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011e24:	ea05 0508 	and.w	r5, r5, r8
 8011e28:	4604      	mov	r4, r0
 8011e2a:	1d79      	adds	r1, r7, #5
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	402c      	ands	r4, r5
 8011e30:	f002 f852 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8011e34:	4020      	ands	r0, r4
 8011e36:	b2c0      	uxtb	r0, r0
 8011e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e3c <uxr_serialize_ReadSpecification>:
 8011e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3e:	460e      	mov	r6, r1
 8011e40:	4607      	mov	r7, r0
 8011e42:	7809      	ldrb	r1, [r1, #0]
 8011e44:	f002 f832 	bl	8013eac <ucdr_serialize_uint8_t>
 8011e48:	4604      	mov	r4, r0
 8011e4a:	7871      	ldrb	r1, [r6, #1]
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f002 f82d 	bl	8013eac <ucdr_serialize_uint8_t>
 8011e52:	4004      	ands	r4, r0
 8011e54:	78b1      	ldrb	r1, [r6, #2]
 8011e56:	4638      	mov	r0, r7
 8011e58:	f001 fffa 	bl	8013e50 <ucdr_serialize_bool>
 8011e5c:	78b3      	ldrb	r3, [r6, #2]
 8011e5e:	b2e4      	uxtb	r4, r4
 8011e60:	4004      	ands	r4, r0
 8011e62:	b943      	cbnz	r3, 8011e76 <uxr_serialize_ReadSpecification+0x3a>
 8011e64:	7a31      	ldrb	r1, [r6, #8]
 8011e66:	4638      	mov	r0, r7
 8011e68:	f001 fff2 	bl	8013e50 <ucdr_serialize_bool>
 8011e6c:	7a33      	ldrb	r3, [r6, #8]
 8011e6e:	4004      	ands	r4, r0
 8011e70:	b93b      	cbnz	r3, 8011e82 <uxr_serialize_ReadSpecification+0x46>
 8011e72:	4620      	mov	r0, r4
 8011e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e76:	6871      	ldr	r1, [r6, #4]
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f002 fed7 	bl	8014c2c <ucdr_serialize_string>
 8011e7e:	4004      	ands	r4, r0
 8011e80:	e7f0      	b.n	8011e64 <uxr_serialize_ReadSpecification+0x28>
 8011e82:	8971      	ldrh	r1, [r6, #10]
 8011e84:	4638      	mov	r0, r7
 8011e86:	f002 f83d 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	89b1      	ldrh	r1, [r6, #12]
 8011e8e:	4638      	mov	r0, r7
 8011e90:	f002 f838 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011e94:	4005      	ands	r5, r0
 8011e96:	89f1      	ldrh	r1, [r6, #14]
 8011e98:	4638      	mov	r0, r7
 8011e9a:	b2ed      	uxtb	r5, r5
 8011e9c:	f002 f832 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011ea0:	8a31      	ldrh	r1, [r6, #16]
 8011ea2:	4025      	ands	r5, r4
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	4025      	ands	r5, r4
 8011eaa:	f002 f82b 	bl	8013f04 <ucdr_serialize_uint16_t>
 8011eae:	ea00 0405 	and.w	r4, r0, r5
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb6:	bf00      	nop

08011eb8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011eb8:	f7ff bb0a 	b.w	80114d0 <uxr_serialize_CLIENT_Representation>

08011ebc <uxr_serialize_CREATE_Payload>:
 8011ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ebe:	2202      	movs	r2, #2
 8011ec0:	4607      	mov	r7, r0
 8011ec2:	460e      	mov	r6, r1
 8011ec4:	f001 fef8 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011ec8:	2202      	movs	r2, #2
 8011eca:	4605      	mov	r5, r0
 8011ecc:	4638      	mov	r0, r7
 8011ece:	18b1      	adds	r1, r6, r2
 8011ed0:	f001 fef2 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011ed4:	7931      	ldrb	r1, [r6, #4]
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	4638      	mov	r0, r7
 8011eda:	f001 ffe7 	bl	8013eac <ucdr_serialize_uint8_t>
 8011ede:	b170      	cbz	r0, 8011efe <uxr_serialize_CREATE_Payload+0x42>
 8011ee0:	7933      	ldrb	r3, [r6, #4]
 8011ee2:	402c      	ands	r4, r5
 8011ee4:	3b01      	subs	r3, #1
 8011ee6:	b2e4      	uxtb	r4, r4
 8011ee8:	2b0d      	cmp	r3, #13
 8011eea:	d809      	bhi.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011eec:	e8df f003 	tbb	[pc, r3]
 8011ef0:	23230a4c 	.word	0x23230a4c
 8011ef4:	0a0a0a0a 	.word	0x0a0a0a0a
 8011ef8:	12121208 	.word	0x12121208
 8011efc:	3e45      	.short	0x3e45
 8011efe:	2400      	movs	r4, #0
 8011f00:	4620      	mov	r0, r4
 8011f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f04:	f106 0108 	add.w	r1, r6, #8
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f7ff fbe7 	bl	80116dc <uxr_serialize_DATAWRITER_Representation>
 8011f0e:	4004      	ands	r4, r0
 8011f10:	4620      	mov	r0, r4
 8011f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f14:	7a31      	ldrb	r1, [r6, #8]
 8011f16:	4638      	mov	r0, r7
 8011f18:	f001 ffc8 	bl	8013eac <ucdr_serialize_uint8_t>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d0ee      	beq.n	8011efe <uxr_serialize_CREATE_Payload+0x42>
 8011f20:	7a33      	ldrb	r3, [r6, #8]
 8011f22:	2b01      	cmp	r3, #1
 8011f24:	d001      	beq.n	8011f2a <uxr_serialize_CREATE_Payload+0x6e>
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d1ea      	bne.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011f2a:	68f1      	ldr	r1, [r6, #12]
 8011f2c:	4638      	mov	r0, r7
 8011f2e:	f002 fe7d 	bl	8014c2c <ucdr_serialize_string>
 8011f32:	4004      	ands	r4, r0
 8011f34:	e7e4      	b.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011f36:	7a31      	ldrb	r1, [r6, #8]
 8011f38:	4638      	mov	r0, r7
 8011f3a:	f001 ffb7 	bl	8013eac <ucdr_serialize_uint8_t>
 8011f3e:	4605      	mov	r5, r0
 8011f40:	b158      	cbz	r0, 8011f5a <uxr_serialize_CREATE_Payload+0x9e>
 8011f42:	7a33      	ldrb	r3, [r6, #8]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	d034      	beq.n	8011fb2 <uxr_serialize_CREATE_Payload+0xf6>
 8011f48:	2b03      	cmp	r3, #3
 8011f4a:	d106      	bne.n	8011f5a <uxr_serialize_CREATE_Payload+0x9e>
 8011f4c:	68f2      	ldr	r2, [r6, #12]
 8011f4e:	f106 0110 	add.w	r1, r6, #16
 8011f52:	4638      	mov	r0, r7
 8011f54:	f7fd fc12 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011f58:	4605      	mov	r5, r0
 8011f5a:	2202      	movs	r2, #2
 8011f5c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011f60:	4638      	mov	r0, r7
 8011f62:	f001 fea9 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8011f66:	4028      	ands	r0, r5
 8011f68:	4004      	ands	r4, r0
 8011f6a:	e7c9      	b.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011f6c:	f106 0108 	add.w	r1, r6, #8
 8011f70:	4638      	mov	r0, r7
 8011f72:	f7ff faad 	bl	80114d0 <uxr_serialize_CLIENT_Representation>
 8011f76:	4004      	ands	r4, r0
 8011f78:	e7c2      	b.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011f7a:	f106 0108 	add.w	r1, r6, #8
 8011f7e:	4638      	mov	r0, r7
 8011f80:	f7ff fb62 	bl	8011648 <uxr_serialize_AGENT_Representation>
 8011f84:	4004      	ands	r4, r0
 8011f86:	e7bb      	b.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011f88:	7a31      	ldrb	r1, [r6, #8]
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	f001 ff8e 	bl	8013eac <ucdr_serialize_uint8_t>
 8011f90:	4605      	mov	r5, r0
 8011f92:	b130      	cbz	r0, 8011fa2 <uxr_serialize_CREATE_Payload+0xe6>
 8011f94:	7a33      	ldrb	r3, [r6, #8]
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	d011      	beq.n	8011fbe <uxr_serialize_CREATE_Payload+0x102>
 8011f9a:	2b03      	cmp	r3, #3
 8011f9c:	d015      	beq.n	8011fca <uxr_serialize_CREATE_Payload+0x10e>
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d00d      	beq.n	8011fbe <uxr_serialize_CREATE_Payload+0x102>
 8011fa2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011fa6:	4638      	mov	r0, r7
 8011fa8:	f002 fcbc 	bl	8014924 <ucdr_serialize_int16_t>
 8011fac:	4028      	ands	r0, r5
 8011fae:	4004      	ands	r4, r0
 8011fb0:	e7a6      	b.n	8011f00 <uxr_serialize_CREATE_Payload+0x44>
 8011fb2:	68f1      	ldr	r1, [r6, #12]
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	f002 fe39 	bl	8014c2c <ucdr_serialize_string>
 8011fba:	4605      	mov	r5, r0
 8011fbc:	e7cd      	b.n	8011f5a <uxr_serialize_CREATE_Payload+0x9e>
 8011fbe:	68f1      	ldr	r1, [r6, #12]
 8011fc0:	4638      	mov	r0, r7
 8011fc2:	f002 fe33 	bl	8014c2c <ucdr_serialize_string>
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	e7eb      	b.n	8011fa2 <uxr_serialize_CREATE_Payload+0xe6>
 8011fca:	68f2      	ldr	r2, [r6, #12]
 8011fcc:	f106 0110 	add.w	r1, r6, #16
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	f7fd fbd3 	bl	800f77c <ucdr_serialize_sequence_uint8_t>
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	e7e3      	b.n	8011fa2 <uxr_serialize_CREATE_Payload+0xe6>
 8011fda:	bf00      	nop

08011fdc <uxr_deserialize_GET_INFO_Payload>:
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	2202      	movs	r2, #2
 8011fe0:	4605      	mov	r5, r0
 8011fe2:	460e      	mov	r6, r1
 8011fe4:	f001 fecc 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011fe8:	2202      	movs	r2, #2
 8011fea:	4604      	mov	r4, r0
 8011fec:	4628      	mov	r0, r5
 8011fee:	18b1      	adds	r1, r6, r2
 8011ff0:	f001 fec6 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	1d31      	adds	r1, r6, #4
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	401c      	ands	r4, r3
 8011ffc:	f002 fa9c 	bl	8014538 <ucdr_deserialize_uint32_t>
 8012000:	b2e4      	uxtb	r4, r4
 8012002:	4020      	ands	r0, r4
 8012004:	bd70      	pop	{r4, r5, r6, pc}
 8012006:	bf00      	nop

08012008 <uxr_serialize_DELETE_Payload>:
 8012008:	b570      	push	{r4, r5, r6, lr}
 801200a:	2202      	movs	r2, #2
 801200c:	4605      	mov	r5, r0
 801200e:	460e      	mov	r6, r1
 8012010:	f001 fe52 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8012014:	2202      	movs	r2, #2
 8012016:	4604      	mov	r4, r0
 8012018:	4628      	mov	r0, r5
 801201a:	18b1      	adds	r1, r6, r2
 801201c:	f001 fe4c 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8012020:	4020      	ands	r0, r4
 8012022:	b2c0      	uxtb	r0, r0
 8012024:	bd70      	pop	{r4, r5, r6, pc}
 8012026:	bf00      	nop

08012028 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801202c:	460e      	mov	r6, r1
 801202e:	4605      	mov	r5, r0
 8012030:	f001 ff52 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8012034:	4604      	mov	r4, r0
 8012036:	1c71      	adds	r1, r6, #1
 8012038:	4628      	mov	r0, r5
 801203a:	f001 ff4d 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 801203e:	2204      	movs	r2, #4
 8012040:	4681      	mov	r9, r0
 8012042:	4628      	mov	r0, r5
 8012044:	18b1      	adds	r1, r6, r2
 8012046:	f001 fe9b 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 801204a:	f106 0108 	add.w	r1, r6, #8
 801204e:	4680      	mov	r8, r0
 8012050:	2202      	movs	r2, #2
 8012052:	4628      	mov	r0, r5
 8012054:	f001 fe94 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8012058:	ea04 0309 	and.w	r3, r4, r9
 801205c:	4607      	mov	r7, r0
 801205e:	2202      	movs	r2, #2
 8012060:	b2db      	uxtb	r3, r3
 8012062:	f106 010a 	add.w	r1, r6, #10
 8012066:	4628      	mov	r0, r5
 8012068:	ea03 0408 	and.w	r4, r3, r8
 801206c:	f001 fe88 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8012070:	4603      	mov	r3, r0
 8012072:	4628      	mov	r0, r5
 8012074:	403c      	ands	r4, r7
 8012076:	f106 010c 	add.w	r1, r6, #12
 801207a:	461d      	mov	r5, r3
 801207c:	f001 fefe 	bl	8013e7c <ucdr_deserialize_bool>
 8012080:	4025      	ands	r5, r4
 8012082:	4028      	ands	r0, r5
 8012084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012088 <uxr_deserialize_STATUS_Payload>:
 8012088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208c:	2202      	movs	r2, #2
 801208e:	4606      	mov	r6, r0
 8012090:	460f      	mov	r7, r1
 8012092:	f001 fe75 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8012096:	2202      	movs	r2, #2
 8012098:	4605      	mov	r5, r0
 801209a:	4630      	mov	r0, r6
 801209c:	18b9      	adds	r1, r7, r2
 801209e:	f001 fe6f 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80120a2:	4680      	mov	r8, r0
 80120a4:	1d39      	adds	r1, r7, #4
 80120a6:	4630      	mov	r0, r6
 80120a8:	f001 ff16 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80120ac:	ea05 0508 	and.w	r5, r5, r8
 80120b0:	4604      	mov	r4, r0
 80120b2:	1d79      	adds	r1, r7, #5
 80120b4:	4630      	mov	r0, r6
 80120b6:	402c      	ands	r4, r5
 80120b8:	f001 ff0e 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80120bc:	4020      	ands	r0, r4
 80120be:	b2c0      	uxtb	r0, r0
 80120c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120c4 <uxr_serialize_INFO_Payload>:
 80120c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c8:	2202      	movs	r2, #2
 80120ca:	460c      	mov	r4, r1
 80120cc:	4605      	mov	r5, r0
 80120ce:	f001 fdf3 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80120d2:	2202      	movs	r2, #2
 80120d4:	4680      	mov	r8, r0
 80120d6:	4628      	mov	r0, r5
 80120d8:	18a1      	adds	r1, r4, r2
 80120da:	f001 fded 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80120de:	4607      	mov	r7, r0
 80120e0:	7921      	ldrb	r1, [r4, #4]
 80120e2:	4628      	mov	r0, r5
 80120e4:	f001 fee2 	bl	8013eac <ucdr_serialize_uint8_t>
 80120e8:	ea08 0807 	and.w	r8, r8, r7
 80120ec:	4606      	mov	r6, r0
 80120ee:	7961      	ldrb	r1, [r4, #5]
 80120f0:	4628      	mov	r0, r5
 80120f2:	ea06 0608 	and.w	r6, r6, r8
 80120f6:	f001 fed9 	bl	8013eac <ucdr_serialize_uint8_t>
 80120fa:	7a21      	ldrb	r1, [r4, #8]
 80120fc:	4030      	ands	r0, r6
 80120fe:	b2c7      	uxtb	r7, r0
 8012100:	4628      	mov	r0, r5
 8012102:	f001 fea5 	bl	8013e50 <ucdr_serialize_bool>
 8012106:	7a23      	ldrb	r3, [r4, #8]
 8012108:	4606      	mov	r6, r0
 801210a:	b96b      	cbnz	r3, 8012128 <uxr_serialize_INFO_Payload+0x64>
 801210c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012110:	4628      	mov	r0, r5
 8012112:	f001 fe9d 	bl	8013e50 <ucdr_serialize_bool>
 8012116:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801211a:	4030      	ands	r0, r6
 801211c:	b2c6      	uxtb	r6, r0
 801211e:	b983      	cbnz	r3, 8012142 <uxr_serialize_INFO_Payload+0x7e>
 8012120:	ea06 0007 	and.w	r0, r6, r7
 8012124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012128:	7b21      	ldrb	r1, [r4, #12]
 801212a:	4628      	mov	r0, r5
 801212c:	f001 febe 	bl	8013eac <ucdr_serialize_uint8_t>
 8012130:	b188      	cbz	r0, 8012156 <uxr_serialize_INFO_Payload+0x92>
 8012132:	f104 010c 	add.w	r1, r4, #12
 8012136:	4628      	mov	r0, r5
 8012138:	f7ff faf8 	bl	801172c <uxr_serialize_ObjectVariant.part.0>
 801213c:	4030      	ands	r0, r6
 801213e:	b2c6      	uxtb	r6, r0
 8012140:	e7e4      	b.n	801210c <uxr_serialize_INFO_Payload+0x48>
 8012142:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012146:	4628      	mov	r0, r5
 8012148:	f7ff fdb8 	bl	8011cbc <uxr_serialize_ActivityInfoVariant>
 801214c:	4006      	ands	r6, r0
 801214e:	ea06 0007 	and.w	r0, r6, r7
 8012152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012156:	4606      	mov	r6, r0
 8012158:	e7d8      	b.n	801210c <uxr_serialize_INFO_Payload+0x48>
 801215a:	bf00      	nop

0801215c <uxr_serialize_READ_DATA_Payload>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	2202      	movs	r2, #2
 8012160:	4605      	mov	r5, r0
 8012162:	460e      	mov	r6, r1
 8012164:	f001 fda8 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8012168:	2202      	movs	r2, #2
 801216a:	4604      	mov	r4, r0
 801216c:	4628      	mov	r0, r5
 801216e:	18b1      	adds	r1, r6, r2
 8012170:	f001 fda2 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8012174:	4603      	mov	r3, r0
 8012176:	1d31      	adds	r1, r6, #4
 8012178:	4628      	mov	r0, r5
 801217a:	401c      	ands	r4, r3
 801217c:	f7ff fe5e 	bl	8011e3c <uxr_serialize_ReadSpecification>
 8012180:	b2e4      	uxtb	r4, r4
 8012182:	4020      	ands	r0, r4
 8012184:	bd70      	pop	{r4, r5, r6, pc}
 8012186:	bf00      	nop

08012188 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012188:	b570      	push	{r4, r5, r6, lr}
 801218a:	2202      	movs	r2, #2
 801218c:	4605      	mov	r5, r0
 801218e:	460e      	mov	r6, r1
 8012190:	f001 fd92 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 8012194:	2202      	movs	r2, #2
 8012196:	4604      	mov	r4, r0
 8012198:	4628      	mov	r0, r5
 801219a:	18b1      	adds	r1, r6, r2
 801219c:	f001 fd8c 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80121a0:	4020      	ands	r0, r4
 80121a2:	b2c0      	uxtb	r0, r0
 80121a4:	bd70      	pop	{r4, r5, r6, pc}
 80121a6:	bf00      	nop

080121a8 <uxr_serialize_ACKNACK_Payload>:
 80121a8:	b570      	push	{r4, r5, r6, lr}
 80121aa:	460c      	mov	r4, r1
 80121ac:	4605      	mov	r5, r0
 80121ae:	460e      	mov	r6, r1
 80121b0:	f834 1b02 	ldrh.w	r1, [r4], #2
 80121b4:	f001 fea6 	bl	8013f04 <ucdr_serialize_uint16_t>
 80121b8:	2202      	movs	r2, #2
 80121ba:	4621      	mov	r1, r4
 80121bc:	4604      	mov	r4, r0
 80121be:	4628      	mov	r0, r5
 80121c0:	f001 fd7a 	bl	8013cb8 <ucdr_serialize_array_uint8_t>
 80121c4:	4603      	mov	r3, r0
 80121c6:	7931      	ldrb	r1, [r6, #4]
 80121c8:	4628      	mov	r0, r5
 80121ca:	401c      	ands	r4, r3
 80121cc:	f001 fe6e 	bl	8013eac <ucdr_serialize_uint8_t>
 80121d0:	b2e4      	uxtb	r4, r4
 80121d2:	4020      	ands	r0, r4
 80121d4:	bd70      	pop	{r4, r5, r6, pc}
 80121d6:	bf00      	nop

080121d8 <uxr_deserialize_ACKNACK_Payload>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	460e      	mov	r6, r1
 80121dc:	4605      	mov	r5, r0
 80121de:	f001 ff91 	bl	8014104 <ucdr_deserialize_uint16_t>
 80121e2:	2202      	movs	r2, #2
 80121e4:	4604      	mov	r4, r0
 80121e6:	4628      	mov	r0, r5
 80121e8:	18b1      	adds	r1, r6, r2
 80121ea:	f001 fdc9 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80121ee:	4603      	mov	r3, r0
 80121f0:	1d31      	adds	r1, r6, #4
 80121f2:	4628      	mov	r0, r5
 80121f4:	401c      	ands	r4, r3
 80121f6:	f001 fe6f 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80121fa:	b2e4      	uxtb	r4, r4
 80121fc:	4020      	ands	r0, r4
 80121fe:	bd70      	pop	{r4, r5, r6, pc}

08012200 <uxr_serialize_HEARTBEAT_Payload>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	460d      	mov	r5, r1
 8012204:	4606      	mov	r6, r0
 8012206:	8809      	ldrh	r1, [r1, #0]
 8012208:	f001 fe7c 	bl	8013f04 <ucdr_serialize_uint16_t>
 801220c:	8869      	ldrh	r1, [r5, #2]
 801220e:	4604      	mov	r4, r0
 8012210:	4630      	mov	r0, r6
 8012212:	f001 fe77 	bl	8013f04 <ucdr_serialize_uint16_t>
 8012216:	4603      	mov	r3, r0
 8012218:	7929      	ldrb	r1, [r5, #4]
 801221a:	4630      	mov	r0, r6
 801221c:	401c      	ands	r4, r3
 801221e:	f001 fe45 	bl	8013eac <ucdr_serialize_uint8_t>
 8012222:	b2e4      	uxtb	r4, r4
 8012224:	4020      	ands	r0, r4
 8012226:	bd70      	pop	{r4, r5, r6, pc}

08012228 <uxr_deserialize_HEARTBEAT_Payload>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	460e      	mov	r6, r1
 801222c:	4605      	mov	r5, r0
 801222e:	f001 ff69 	bl	8014104 <ucdr_deserialize_uint16_t>
 8012232:	4604      	mov	r4, r0
 8012234:	1cb1      	adds	r1, r6, #2
 8012236:	4628      	mov	r0, r5
 8012238:	f001 ff64 	bl	8014104 <ucdr_deserialize_uint16_t>
 801223c:	4603      	mov	r3, r0
 801223e:	1d31      	adds	r1, r6, #4
 8012240:	4628      	mov	r0, r5
 8012242:	401c      	ands	r4, r3
 8012244:	f001 fe48 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 8012248:	b2e4      	uxtb	r4, r4
 801224a:	4020      	ands	r0, r4
 801224c:	bd70      	pop	{r4, r5, r6, pc}
 801224e:	bf00      	nop

08012250 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012254:	460e      	mov	r6, r1
 8012256:	4605      	mov	r5, r0
 8012258:	f002 fc58 	bl	8014b0c <ucdr_deserialize_int32_t>
 801225c:	4607      	mov	r7, r0
 801225e:	1d31      	adds	r1, r6, #4
 8012260:	4628      	mov	r0, r5
 8012262:	f002 f969 	bl	8014538 <ucdr_deserialize_uint32_t>
 8012266:	4680      	mov	r8, r0
 8012268:	f106 0108 	add.w	r1, r6, #8
 801226c:	4628      	mov	r0, r5
 801226e:	f002 fc4d 	bl	8014b0c <ucdr_deserialize_int32_t>
 8012272:	ea07 0708 	and.w	r7, r7, r8
 8012276:	4604      	mov	r4, r0
 8012278:	f106 010c 	add.w	r1, r6, #12
 801227c:	4628      	mov	r0, r5
 801227e:	403c      	ands	r4, r7
 8012280:	f002 f95a 	bl	8014538 <ucdr_deserialize_uint32_t>
 8012284:	f106 0110 	add.w	r1, r6, #16
 8012288:	4004      	ands	r4, r0
 801228a:	4628      	mov	r0, r5
 801228c:	f002 fc3e 	bl	8014b0c <ucdr_deserialize_int32_t>
 8012290:	4603      	mov	r3, r0
 8012292:	b2e4      	uxtb	r4, r4
 8012294:	4628      	mov	r0, r5
 8012296:	461d      	mov	r5, r3
 8012298:	f106 0114 	add.w	r1, r6, #20
 801229c:	f002 f94c 	bl	8014538 <ucdr_deserialize_uint32_t>
 80122a0:	402c      	ands	r4, r5
 80122a2:	4020      	ands	r0, r4
 80122a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122a8 <uxr_deserialize_SampleIdentity>:
 80122a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ac:	4604      	mov	r4, r0
 80122ae:	460d      	mov	r5, r1
 80122b0:	220c      	movs	r2, #12
 80122b2:	f001 fd65 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80122b6:	2203      	movs	r2, #3
 80122b8:	f105 010c 	add.w	r1, r5, #12
 80122bc:	4607      	mov	r7, r0
 80122be:	4620      	mov	r0, r4
 80122c0:	f001 fd5e 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80122c4:	f105 010f 	add.w	r1, r5, #15
 80122c8:	4680      	mov	r8, r0
 80122ca:	4620      	mov	r0, r4
 80122cc:	f001 fe04 	bl	8013ed8 <ucdr_deserialize_uint8_t>
 80122d0:	f105 0110 	add.w	r1, r5, #16
 80122d4:	4606      	mov	r6, r0
 80122d6:	4620      	mov	r0, r4
 80122d8:	f002 fc18 	bl	8014b0c <ucdr_deserialize_int32_t>
 80122dc:	ea07 0708 	and.w	r7, r7, r8
 80122e0:	4603      	mov	r3, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	403e      	ands	r6, r7
 80122e6:	f105 0114 	add.w	r1, r5, #20
 80122ea:	461c      	mov	r4, r3
 80122ec:	f002 f924 	bl	8014538 <ucdr_deserialize_uint32_t>
 80122f0:	4034      	ands	r4, r6
 80122f2:	4020      	ands	r0, r4
 80122f4:	b2c0      	uxtb	r0, r0
 80122f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122fa:	bf00      	nop

080122fc <rcl_convert_rmw_ret_to_rcl_ret>:
 80122fc:	280b      	cmp	r0, #11
 80122fe:	dc0d      	bgt.n	801231c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012300:	2800      	cmp	r0, #0
 8012302:	db09      	blt.n	8012318 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012304:	280b      	cmp	r0, #11
 8012306:	d807      	bhi.n	8012318 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012308:	e8df f000 	tbb	[pc, r0]
 801230c:	07060607 	.word	0x07060607
 8012310:	06060606 	.word	0x06060606
 8012314:	07070606 	.word	0x07070606
 8012318:	2001      	movs	r0, #1
 801231a:	4770      	bx	lr
 801231c:	28cb      	cmp	r0, #203	@ 0xcb
 801231e:	bf18      	it	ne
 8012320:	2001      	movne	r0, #1
 8012322:	4770      	bx	lr

08012324 <rcl_get_zero_initialized_context>:
 8012324:	4a03      	ldr	r2, [pc, #12]	@ (8012334 <rcl_get_zero_initialized_context+0x10>)
 8012326:	4603      	mov	r3, r0
 8012328:	e892 0003 	ldmia.w	r2, {r0, r1}
 801232c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012330:	4618      	mov	r0, r3
 8012332:	4770      	bx	lr
 8012334:	08018880 	.word	0x08018880

08012338 <rcl_context_is_valid>:
 8012338:	b118      	cbz	r0, 8012342 <rcl_context_is_valid+0xa>
 801233a:	6840      	ldr	r0, [r0, #4]
 801233c:	3800      	subs	r0, #0
 801233e:	bf18      	it	ne
 8012340:	2001      	movne	r0, #1
 8012342:	4770      	bx	lr

08012344 <__cleanup_context>:
 8012344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012348:	4606      	mov	r6, r0
 801234a:	2300      	movs	r3, #0
 801234c:	6800      	ldr	r0, [r0, #0]
 801234e:	6073      	str	r3, [r6, #4]
 8012350:	2800      	cmp	r0, #0
 8012352:	d049      	beq.n	80123e8 <__cleanup_context+0xa4>
 8012354:	6947      	ldr	r7, [r0, #20]
 8012356:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801235a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801235e:	b137      	cbz	r7, 801236e <__cleanup_context+0x2a>
 8012360:	3014      	adds	r0, #20
 8012362:	f000 fa65 	bl	8012830 <rcl_init_options_fini>
 8012366:	4607      	mov	r7, r0
 8012368:	2800      	cmp	r0, #0
 801236a:	d144      	bne.n	80123f6 <__cleanup_context+0xb2>
 801236c:	6830      	ldr	r0, [r6, #0]
 801236e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012370:	b143      	cbz	r3, 8012384 <__cleanup_context+0x40>
 8012372:	3028      	adds	r0, #40	@ 0x28
 8012374:	f001 fb2c 	bl	80139d0 <rmw_context_fini>
 8012378:	b118      	cbz	r0, 8012382 <__cleanup_context+0x3e>
 801237a:	2f00      	cmp	r7, #0
 801237c:	d03e      	beq.n	80123fc <__cleanup_context+0xb8>
 801237e:	f7fb ff2b 	bl	800e1d8 <rcutils_reset_error>
 8012382:	6830      	ldr	r0, [r6, #0]
 8012384:	6a03      	ldr	r3, [r0, #32]
 8012386:	b1db      	cbz	r3, 80123c0 <__cleanup_context+0x7c>
 8012388:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801238c:	2a01      	cmp	r2, #1
 801238e:	f17c 0100 	sbcs.w	r1, ip, #0
 8012392:	db11      	blt.n	80123b8 <__cleanup_context+0x74>
 8012394:	2400      	movs	r4, #0
 8012396:	4625      	mov	r5, r4
 8012398:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801239c:	4649      	mov	r1, r9
 801239e:	b1b8      	cbz	r0, 80123d0 <__cleanup_context+0x8c>
 80123a0:	47c0      	blx	r8
 80123a2:	6833      	ldr	r3, [r6, #0]
 80123a4:	3401      	adds	r4, #1
 80123a6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80123aa:	f145 0500 	adc.w	r5, r5, #0
 80123ae:	6a1b      	ldr	r3, [r3, #32]
 80123b0:	4294      	cmp	r4, r2
 80123b2:	eb75 010c 	sbcs.w	r1, r5, ip
 80123b6:	dbef      	blt.n	8012398 <__cleanup_context+0x54>
 80123b8:	4618      	mov	r0, r3
 80123ba:	4649      	mov	r1, r9
 80123bc:	47c0      	blx	r8
 80123be:	6830      	ldr	r0, [r6, #0]
 80123c0:	4649      	mov	r1, r9
 80123c2:	47c0      	blx	r8
 80123c4:	2300      	movs	r3, #0
 80123c6:	4638      	mov	r0, r7
 80123c8:	e9c6 3300 	strd	r3, r3, [r6]
 80123cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123d0:	3401      	adds	r4, #1
 80123d2:	f145 0500 	adc.w	r5, r5, #0
 80123d6:	4294      	cmp	r4, r2
 80123d8:	eb75 010c 	sbcs.w	r1, r5, ip
 80123dc:	dbdc      	blt.n	8012398 <__cleanup_context+0x54>
 80123de:	4618      	mov	r0, r3
 80123e0:	4649      	mov	r1, r9
 80123e2:	47c0      	blx	r8
 80123e4:	6830      	ldr	r0, [r6, #0]
 80123e6:	e7eb      	b.n	80123c0 <__cleanup_context+0x7c>
 80123e8:	4607      	mov	r7, r0
 80123ea:	2300      	movs	r3, #0
 80123ec:	4638      	mov	r0, r7
 80123ee:	e9c6 3300 	strd	r3, r3, [r6]
 80123f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123f6:	f7fb feef 	bl	800e1d8 <rcutils_reset_error>
 80123fa:	e7b7      	b.n	801236c <__cleanup_context+0x28>
 80123fc:	f7ff ff7e 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 8012400:	4607      	mov	r7, r0
 8012402:	e7bc      	b.n	801237e <__cleanup_context+0x3a>

08012404 <rcl_get_zero_initialized_guard_condition>:
 8012404:	4a03      	ldr	r2, [pc, #12]	@ (8012414 <rcl_get_zero_initialized_guard_condition+0x10>)
 8012406:	4603      	mov	r3, r0
 8012408:	e892 0003 	ldmia.w	r2, {r0, r1}
 801240c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012410:	4618      	mov	r0, r3
 8012412:	4770      	bx	lr
 8012414:	08018888 	.word	0x08018888

08012418 <rcl_guard_condition_init_from_rmw>:
 8012418:	b082      	sub	sp, #8
 801241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801241e:	b086      	sub	sp, #24
 8012420:	4604      	mov	r4, r0
 8012422:	460e      	mov	r6, r1
 8012424:	4615      	mov	r5, r2
 8012426:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801242a:	f10d 0e04 	add.w	lr, sp, #4
 801242e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8012432:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012436:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801243a:	f8dc 3000 	ldr.w	r3, [ip]
 801243e:	a801      	add	r0, sp, #4
 8012440:	f8ce 3000 	str.w	r3, [lr]
 8012444:	f7fb fe8c 	bl	800e160 <rcutils_allocator_is_valid>
 8012448:	f080 0301 	eor.w	r3, r0, #1
 801244c:	b2db      	uxtb	r3, r3
 801244e:	bb3b      	cbnz	r3, 80124a0 <rcl_guard_condition_init_from_rmw+0x88>
 8012450:	b334      	cbz	r4, 80124a0 <rcl_guard_condition_init_from_rmw+0x88>
 8012452:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012456:	f1b8 0f00 	cmp.w	r8, #0
 801245a:	d11a      	bne.n	8012492 <rcl_guard_condition_init_from_rmw+0x7a>
 801245c:	b305      	cbz	r5, 80124a0 <rcl_guard_condition_init_from_rmw+0x88>
 801245e:	4628      	mov	r0, r5
 8012460:	f7ff ff6a 	bl	8012338 <rcl_context_is_valid>
 8012464:	b1f0      	cbz	r0, 80124a4 <rcl_guard_condition_init_from_rmw+0x8c>
 8012466:	9b01      	ldr	r3, [sp, #4]
 8012468:	201c      	movs	r0, #28
 801246a:	9905      	ldr	r1, [sp, #20]
 801246c:	4798      	blx	r3
 801246e:	4607      	mov	r7, r0
 8012470:	6060      	str	r0, [r4, #4]
 8012472:	b320      	cbz	r0, 80124be <rcl_guard_condition_init_from_rmw+0xa6>
 8012474:	b1c6      	cbz	r6, 80124a8 <rcl_guard_condition_init_from_rmw+0x90>
 8012476:	6006      	str	r6, [r0, #0]
 8012478:	f880 8004 	strb.w	r8, [r0, #4]
 801247c:	ac01      	add	r4, sp, #4
 801247e:	f107 0c08 	add.w	ip, r7, #8
 8012482:	2500      	movs	r5, #0
 8012484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	f8cc 3000 	str.w	r3, [ip]
 8012490:	e000      	b.n	8012494 <rcl_guard_condition_init_from_rmw+0x7c>
 8012492:	2564      	movs	r5, #100	@ 0x64
 8012494:	4628      	mov	r0, r5
 8012496:	b006      	add	sp, #24
 8012498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	b002      	add	sp, #8
 801249e:	4770      	bx	lr
 80124a0:	250b      	movs	r5, #11
 80124a2:	e7f7      	b.n	8012494 <rcl_guard_condition_init_from_rmw+0x7c>
 80124a4:	2565      	movs	r5, #101	@ 0x65
 80124a6:	e7f5      	b.n	8012494 <rcl_guard_condition_init_from_rmw+0x7c>
 80124a8:	6828      	ldr	r0, [r5, #0]
 80124aa:	3028      	adds	r0, #40	@ 0x28
 80124ac:	f001 f832 	bl	8013514 <rmw_create_guard_condition>
 80124b0:	6038      	str	r0, [r7, #0]
 80124b2:	6867      	ldr	r7, [r4, #4]
 80124b4:	683e      	ldr	r6, [r7, #0]
 80124b6:	b126      	cbz	r6, 80124c2 <rcl_guard_condition_init_from_rmw+0xaa>
 80124b8:	2301      	movs	r3, #1
 80124ba:	713b      	strb	r3, [r7, #4]
 80124bc:	e7de      	b.n	801247c <rcl_guard_condition_init_from_rmw+0x64>
 80124be:	250a      	movs	r5, #10
 80124c0:	e7e8      	b.n	8012494 <rcl_guard_condition_init_from_rmw+0x7c>
 80124c2:	9b02      	ldr	r3, [sp, #8]
 80124c4:	4638      	mov	r0, r7
 80124c6:	9905      	ldr	r1, [sp, #20]
 80124c8:	2501      	movs	r5, #1
 80124ca:	4798      	blx	r3
 80124cc:	6066      	str	r6, [r4, #4]
 80124ce:	e7e1      	b.n	8012494 <rcl_guard_condition_init_from_rmw+0x7c>

080124d0 <rcl_guard_condition_fini>:
 80124d0:	b570      	push	{r4, r5, r6, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	b1f0      	cbz	r0, 8012514 <rcl_guard_condition_fini+0x44>
 80124d6:	6843      	ldr	r3, [r0, #4]
 80124d8:	4604      	mov	r4, r0
 80124da:	b163      	cbz	r3, 80124f6 <rcl_guard_condition_fini+0x26>
 80124dc:	6818      	ldr	r0, [r3, #0]
 80124de:	68de      	ldr	r6, [r3, #12]
 80124e0:	6999      	ldr	r1, [r3, #24]
 80124e2:	b160      	cbz	r0, 80124fe <rcl_guard_condition_fini+0x2e>
 80124e4:	791d      	ldrb	r5, [r3, #4]
 80124e6:	b965      	cbnz	r5, 8012502 <rcl_guard_condition_fini+0x32>
 80124e8:	4618      	mov	r0, r3
 80124ea:	47b0      	blx	r6
 80124ec:	2300      	movs	r3, #0
 80124ee:	4628      	mov	r0, r5
 80124f0:	6063      	str	r3, [r4, #4]
 80124f2:	b002      	add	sp, #8
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	461d      	mov	r5, r3
 80124f8:	4628      	mov	r0, r5
 80124fa:	b002      	add	sp, #8
 80124fc:	bd70      	pop	{r4, r5, r6, pc}
 80124fe:	4605      	mov	r5, r0
 8012500:	e7f2      	b.n	80124e8 <rcl_guard_condition_fini+0x18>
 8012502:	9101      	str	r1, [sp, #4]
 8012504:	f001 f81c 	bl	8013540 <rmw_destroy_guard_condition>
 8012508:	1e05      	subs	r5, r0, #0
 801250a:	6863      	ldr	r3, [r4, #4]
 801250c:	9901      	ldr	r1, [sp, #4]
 801250e:	bf18      	it	ne
 8012510:	2501      	movne	r5, #1
 8012512:	e7e9      	b.n	80124e8 <rcl_guard_condition_fini+0x18>
 8012514:	250b      	movs	r5, #11
 8012516:	4628      	mov	r0, r5
 8012518:	b002      	add	sp, #8
 801251a:	bd70      	pop	{r4, r5, r6, pc}

0801251c <rcl_guard_condition_get_default_options>:
 801251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801251e:	b087      	sub	sp, #28
 8012520:	4606      	mov	r6, r0
 8012522:	4c0b      	ldr	r4, [pc, #44]	@ (8012550 <rcl_guard_condition_get_default_options+0x34>)
 8012524:	4668      	mov	r0, sp
 8012526:	f7fb fe0d 	bl	800e144 <rcutils_get_default_allocator>
 801252a:	46ee      	mov	lr, sp
 801252c:	46a4      	mov	ip, r4
 801252e:	4625      	mov	r5, r4
 8012530:	4634      	mov	r4, r6
 8012532:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801253a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801253c:	f8de 7000 	ldr.w	r7, [lr]
 8012540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012542:	4630      	mov	r0, r6
 8012544:	f8cc 7000 	str.w	r7, [ip]
 8012548:	6027      	str	r7, [r4, #0]
 801254a:	b007      	add	sp, #28
 801254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801254e:	bf00      	nop
 8012550:	200124d4 	.word	0x200124d4

08012554 <rcl_init>:
 8012554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012558:	1e05      	subs	r5, r0, #0
 801255a:	b09e      	sub	sp, #120	@ 0x78
 801255c:	460e      	mov	r6, r1
 801255e:	4690      	mov	r8, r2
 8012560:	461f      	mov	r7, r3
 8012562:	f340 809f 	ble.w	80126a4 <rcl_init+0x150>
 8012566:	2900      	cmp	r1, #0
 8012568:	f000 809f 	beq.w	80126aa <rcl_init+0x156>
 801256c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012570:	f04f 0c00 	mov.w	ip, #0
 8012574:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012578:	f10c 0c01 	add.w	ip, ip, #1
 801257c:	2c00      	cmp	r4, #0
 801257e:	f000 8094 	beq.w	80126aa <rcl_init+0x156>
 8012582:	4565      	cmp	r5, ip
 8012584:	d1f6      	bne.n	8012574 <rcl_init+0x20>
 8012586:	f1b8 0f00 	cmp.w	r8, #0
 801258a:	f000 808e 	beq.w	80126aa <rcl_init+0x156>
 801258e:	f8d8 4000 	ldr.w	r4, [r8]
 8012592:	2c00      	cmp	r4, #0
 8012594:	f000 8089 	beq.w	80126aa <rcl_init+0x156>
 8012598:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801259c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801259e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125a2:	6823      	ldr	r3, [r4, #0]
 80125a4:	a819      	add	r0, sp, #100	@ 0x64
 80125a6:	f8cc 3000 	str.w	r3, [ip]
 80125aa:	f7fb fdd9 	bl	800e160 <rcutils_allocator_is_valid>
 80125ae:	f080 0001 	eor.w	r0, r0, #1
 80125b2:	b2c0      	uxtb	r0, r0
 80125b4:	2800      	cmp	r0, #0
 80125b6:	d178      	bne.n	80126aa <rcl_init+0x156>
 80125b8:	2f00      	cmp	r7, #0
 80125ba:	d076      	beq.n	80126aa <rcl_init+0x156>
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d178      	bne.n	80126b4 <rcl_init+0x160>
 80125c2:	2178      	movs	r1, #120	@ 0x78
 80125c4:	2001      	movs	r0, #1
 80125c6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80125ca:	4798      	blx	r3
 80125cc:	4604      	mov	r4, r0
 80125ce:	6038      	str	r0, [r7, #0]
 80125d0:	2800      	cmp	r0, #0
 80125d2:	f000 80b6 	beq.w	8012742 <rcl_init+0x1ee>
 80125d6:	a802      	add	r0, sp, #8
 80125d8:	f000 fe8a 	bl	80132f0 <rmw_get_zero_initialized_context>
 80125dc:	a902      	add	r1, sp, #8
 80125de:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80125e2:	2250      	movs	r2, #80	@ 0x50
 80125e4:	f004 fecf 	bl	8017386 <memcpy>
 80125e8:	ac19      	add	r4, sp, #100	@ 0x64
 80125ea:	f8d7 e000 	ldr.w	lr, [r7]
 80125ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125f0:	46f4      	mov	ip, lr
 80125f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	f10e 0114 	add.w	r1, lr, #20
 80125fc:	4640      	mov	r0, r8
 80125fe:	f8cc 3000 	str.w	r3, [ip]
 8012602:	f000 f93f 	bl	8012884 <rcl_init_options_copy>
 8012606:	4604      	mov	r4, r0
 8012608:	2800      	cmp	r0, #0
 801260a:	d144      	bne.n	8012696 <rcl_init+0x142>
 801260c:	f8d7 9000 	ldr.w	r9, [r7]
 8012610:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012614:	f8c9 0020 	str.w	r0, [r9, #32]
 8012618:	f8c9 5018 	str.w	r5, [r9, #24]
 801261c:	f8c9 801c 	str.w	r8, [r9, #28]
 8012620:	2d00      	cmp	r5, #0
 8012622:	d04e      	beq.n	80126c2 <rcl_init+0x16e>
 8012624:	2e00      	cmp	r6, #0
 8012626:	d04c      	beq.n	80126c2 <rcl_init+0x16e>
 8012628:	2104      	movs	r1, #4
 801262a:	4628      	mov	r0, r5
 801262c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012630:	4798      	blx	r3
 8012632:	f8c9 0020 	str.w	r0, [r9, #32]
 8012636:	f8d7 9000 	ldr.w	r9, [r7]
 801263a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801263e:	46ca      	mov	sl, r9
 8012640:	b343      	cbz	r3, 8012694 <rcl_init+0x140>
 8012642:	2d01      	cmp	r5, #1
 8012644:	f178 0300 	sbcs.w	r3, r8, #0
 8012648:	db3b      	blt.n	80126c2 <rcl_init+0x16e>
 801264a:	2400      	movs	r4, #0
 801264c:	3e04      	subs	r6, #4
 801264e:	46a1      	mov	r9, r4
 8012650:	e00b      	b.n	801266a <rcl_init+0x116>
 8012652:	6831      	ldr	r1, [r6, #0]
 8012654:	f004 fe97 	bl	8017386 <memcpy>
 8012658:	3401      	adds	r4, #1
 801265a:	f149 0900 	adc.w	r9, r9, #0
 801265e:	45c8      	cmp	r8, r9
 8012660:	bf08      	it	eq
 8012662:	42a5      	cmpeq	r5, r4
 8012664:	d02b      	beq.n	80126be <rcl_init+0x16a>
 8012666:	f8d7 a000 	ldr.w	sl, [r7]
 801266a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801266e:	f7ed fdf1 	bl	8000254 <strlen>
 8012672:	1c42      	adds	r2, r0, #1
 8012674:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012676:	4610      	mov	r0, r2
 8012678:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801267a:	f8da a020 	ldr.w	sl, [sl, #32]
 801267e:	9201      	str	r2, [sp, #4]
 8012680:	4798      	blx	r3
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012688:	6a1b      	ldr	r3, [r3, #32]
 801268a:	9a01      	ldr	r2, [sp, #4]
 801268c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012690:	2800      	cmp	r0, #0
 8012692:	d1de      	bne.n	8012652 <rcl_init+0xfe>
 8012694:	240a      	movs	r4, #10
 8012696:	4638      	mov	r0, r7
 8012698:	f7ff fe54 	bl	8012344 <__cleanup_context>
 801269c:	4620      	mov	r0, r4
 801269e:	b01e      	add	sp, #120	@ 0x78
 80126a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a4:	2900      	cmp	r1, #0
 80126a6:	f43f af6e 	beq.w	8012586 <rcl_init+0x32>
 80126aa:	240b      	movs	r4, #11
 80126ac:	4620      	mov	r0, r4
 80126ae:	b01e      	add	sp, #120	@ 0x78
 80126b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b4:	2464      	movs	r4, #100	@ 0x64
 80126b6:	4620      	mov	r0, r4
 80126b8:	b01e      	add	sp, #120	@ 0x78
 80126ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126be:	f8d7 9000 	ldr.w	r9, [r7]
 80126c2:	4926      	ldr	r1, [pc, #152]	@ (801275c <rcl_init+0x208>)
 80126c4:	680b      	ldr	r3, [r1, #0]
 80126c6:	3301      	adds	r3, #1
 80126c8:	d036      	beq.n	8012738 <rcl_init+0x1e4>
 80126ca:	461a      	mov	r2, r3
 80126cc:	2400      	movs	r4, #0
 80126ce:	600b      	str	r3, [r1, #0]
 80126d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80126d4:	607b      	str	r3, [r7, #4]
 80126d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80126d8:	3301      	adds	r3, #1
 80126da:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80126de:	d034      	beq.n	801274a <rcl_init+0x1f6>
 80126e0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80126e4:	b93b      	cbnz	r3, 80126f6 <rcl_init+0x1a2>
 80126e6:	3030      	adds	r0, #48	@ 0x30
 80126e8:	f000 f93a 	bl	8012960 <rcl_get_localhost_only>
 80126ec:	4604      	mov	r4, r0
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d1d1      	bne.n	8012696 <rcl_init+0x142>
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	6958      	ldr	r0, [r3, #20]
 80126f6:	aa18      	add	r2, sp, #96	@ 0x60
 80126f8:	a917      	add	r1, sp, #92	@ 0x5c
 80126fa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80126fc:	f000 fc24 	bl	8012f48 <rcl_validate_enclave_name>
 8012700:	4604      	mov	r4, r0
 8012702:	2800      	cmp	r0, #0
 8012704:	d1c7      	bne.n	8012696 <rcl_init+0x142>
 8012706:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012708:	b9eb      	cbnz	r3, 8012746 <rcl_init+0x1f2>
 801270a:	6839      	ldr	r1, [r7, #0]
 801270c:	694b      	ldr	r3, [r1, #20]
 801270e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012712:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012714:	f000 fac8 	bl	8012ca8 <rcl_get_security_options_from_environment>
 8012718:	4604      	mov	r4, r0
 801271a:	2800      	cmp	r0, #0
 801271c:	d1bb      	bne.n	8012696 <rcl_init+0x142>
 801271e:	6839      	ldr	r1, [r7, #0]
 8012720:	6948      	ldr	r0, [r1, #20]
 8012722:	3128      	adds	r1, #40	@ 0x28
 8012724:	3018      	adds	r0, #24
 8012726:	f001 f81d 	bl	8013764 <rmw_init>
 801272a:	4604      	mov	r4, r0
 801272c:	2800      	cmp	r0, #0
 801272e:	d0bd      	beq.n	80126ac <rcl_init+0x158>
 8012730:	f7ff fde4 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 8012734:	4604      	mov	r4, r0
 8012736:	e7ae      	b.n	8012696 <rcl_init+0x142>
 8012738:	2201      	movs	r2, #1
 801273a:	461c      	mov	r4, r3
 801273c:	600a      	str	r2, [r1, #0]
 801273e:	4613      	mov	r3, r2
 8012740:	e7c6      	b.n	80126d0 <rcl_init+0x17c>
 8012742:	240a      	movs	r4, #10
 8012744:	e7b2      	b.n	80126ac <rcl_init+0x158>
 8012746:	2401      	movs	r4, #1
 8012748:	e7a5      	b.n	8012696 <rcl_init+0x142>
 801274a:	3024      	adds	r0, #36	@ 0x24
 801274c:	f003 fd2c 	bl	80161a8 <rcl_get_default_domain_id>
 8012750:	4604      	mov	r4, r0
 8012752:	2800      	cmp	r0, #0
 8012754:	d19f      	bne.n	8012696 <rcl_init+0x142>
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	6958      	ldr	r0, [r3, #20]
 801275a:	e7c1      	b.n	80126e0 <rcl_init+0x18c>
 801275c:	200124e8 	.word	0x200124e8

08012760 <rcl_get_zero_initialized_init_options>:
 8012760:	2000      	movs	r0, #0
 8012762:	4770      	bx	lr

08012764 <rcl_init_options_init>:
 8012764:	b084      	sub	sp, #16
 8012766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012768:	b097      	sub	sp, #92	@ 0x5c
 801276a:	ae1d      	add	r6, sp, #116	@ 0x74
 801276c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012770:	2800      	cmp	r0, #0
 8012772:	d058      	beq.n	8012826 <rcl_init_options_init+0xc2>
 8012774:	6803      	ldr	r3, [r0, #0]
 8012776:	4605      	mov	r5, r0
 8012778:	b133      	cbz	r3, 8012788 <rcl_init_options_init+0x24>
 801277a:	2464      	movs	r4, #100	@ 0x64
 801277c:	4620      	mov	r0, r4
 801277e:	b017      	add	sp, #92	@ 0x5c
 8012780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012784:	b004      	add	sp, #16
 8012786:	4770      	bx	lr
 8012788:	4630      	mov	r0, r6
 801278a:	f7fb fce9 	bl	800e160 <rcutils_allocator_is_valid>
 801278e:	2800      	cmp	r0, #0
 8012790:	d049      	beq.n	8012826 <rcl_init_options_init+0xc2>
 8012792:	46b4      	mov	ip, r6
 8012794:	ac11      	add	r4, sp, #68	@ 0x44
 8012796:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801279c:	f8dc 3000 	ldr.w	r3, [ip]
 80127a0:	2050      	movs	r0, #80	@ 0x50
 80127a2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80127a8:	4798      	blx	r3
 80127aa:	4604      	mov	r4, r0
 80127ac:	6028      	str	r0, [r5, #0]
 80127ae:	2800      	cmp	r0, #0
 80127b0:	d03b      	beq.n	801282a <rcl_init_options_init+0xc6>
 80127b2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80127b6:	4686      	mov	lr, r0
 80127b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127c0:	f8dc 3000 	ldr.w	r3, [ip]
 80127c4:	a802      	add	r0, sp, #8
 80127c6:	f8ce 3000 	str.w	r3, [lr]
 80127ca:	f000 fda5 	bl	8013318 <rmw_get_zero_initialized_init_options>
 80127ce:	f10d 0e08 	add.w	lr, sp, #8
 80127d2:	f104 0c18 	add.w	ip, r4, #24
 80127d6:	682f      	ldr	r7, [r5, #0]
 80127d8:	ac20      	add	r4, sp, #128	@ 0x80
 80127da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127f2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80127f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80127fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80127fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012802:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012806:	f107 0018 	add.w	r0, r7, #24
 801280a:	f000 fead 	bl	8013568 <rmw_init_options_init>
 801280e:	4604      	mov	r4, r0
 8012810:	2800      	cmp	r0, #0
 8012812:	d0b3      	beq.n	801277c <rcl_init_options_init+0x18>
 8012814:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012816:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012818:	6828      	ldr	r0, [r5, #0]
 801281a:	4798      	blx	r3
 801281c:	4620      	mov	r0, r4
 801281e:	f7ff fd6d 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 8012822:	4604      	mov	r4, r0
 8012824:	e7aa      	b.n	801277c <rcl_init_options_init+0x18>
 8012826:	240b      	movs	r4, #11
 8012828:	e7a8      	b.n	801277c <rcl_init_options_init+0x18>
 801282a:	240a      	movs	r4, #10
 801282c:	e7a6      	b.n	801277c <rcl_init_options_init+0x18>
 801282e:	bf00      	nop

08012830 <rcl_init_options_fini>:
 8012830:	b530      	push	{r4, r5, lr}
 8012832:	b087      	sub	sp, #28
 8012834:	b1f0      	cbz	r0, 8012874 <rcl_init_options_fini+0x44>
 8012836:	6803      	ldr	r3, [r0, #0]
 8012838:	4604      	mov	r4, r0
 801283a:	b1db      	cbz	r3, 8012874 <rcl_init_options_fini+0x44>
 801283c:	469c      	mov	ip, r3
 801283e:	f10d 0e04 	add.w	lr, sp, #4
 8012842:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012846:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801284a:	f8dc 3000 	ldr.w	r3, [ip]
 801284e:	a801      	add	r0, sp, #4
 8012850:	f8ce 3000 	str.w	r3, [lr]
 8012854:	f7fb fc84 	bl	800e160 <rcutils_allocator_is_valid>
 8012858:	b160      	cbz	r0, 8012874 <rcl_init_options_fini+0x44>
 801285a:	6820      	ldr	r0, [r4, #0]
 801285c:	3018      	adds	r0, #24
 801285e:	f000 ff3d 	bl	80136dc <rmw_init_options_fini>
 8012862:	4605      	mov	r5, r0
 8012864:	b950      	cbnz	r0, 801287c <rcl_init_options_fini+0x4c>
 8012866:	6820      	ldr	r0, [r4, #0]
 8012868:	9b02      	ldr	r3, [sp, #8]
 801286a:	9905      	ldr	r1, [sp, #20]
 801286c:	4798      	blx	r3
 801286e:	4628      	mov	r0, r5
 8012870:	b007      	add	sp, #28
 8012872:	bd30      	pop	{r4, r5, pc}
 8012874:	250b      	movs	r5, #11
 8012876:	4628      	mov	r0, r5
 8012878:	b007      	add	sp, #28
 801287a:	bd30      	pop	{r4, r5, pc}
 801287c:	f7ff fd3e 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 8012880:	4605      	mov	r5, r0
 8012882:	e7f8      	b.n	8012876 <rcl_init_options_fini+0x46>

08012884 <rcl_init_options_copy>:
 8012884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012888:	b094      	sub	sp, #80	@ 0x50
 801288a:	2800      	cmp	r0, #0
 801288c:	d05b      	beq.n	8012946 <rcl_init_options_copy+0xc2>
 801288e:	4604      	mov	r4, r0
 8012890:	6800      	ldr	r0, [r0, #0]
 8012892:	2800      	cmp	r0, #0
 8012894:	d057      	beq.n	8012946 <rcl_init_options_copy+0xc2>
 8012896:	460e      	mov	r6, r1
 8012898:	f7fb fc62 	bl	800e160 <rcutils_allocator_is_valid>
 801289c:	2e00      	cmp	r6, #0
 801289e:	d052      	beq.n	8012946 <rcl_init_options_copy+0xc2>
 80128a0:	f080 0001 	eor.w	r0, r0, #1
 80128a4:	b2c0      	uxtb	r0, r0
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d14d      	bne.n	8012946 <rcl_init_options_copy+0xc2>
 80128aa:	6833      	ldr	r3, [r6, #0]
 80128ac:	b123      	cbz	r3, 80128b8 <rcl_init_options_copy+0x34>
 80128ae:	2464      	movs	r4, #100	@ 0x64
 80128b0:	4620      	mov	r0, r4
 80128b2:	b014      	add	sp, #80	@ 0x50
 80128b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b8:	6827      	ldr	r7, [r4, #0]
 80128ba:	ad0f      	add	r5, sp, #60	@ 0x3c
 80128bc:	46bc      	mov	ip, r7
 80128be:	f8d7 8000 	ldr.w	r8, [r7]
 80128c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80128c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80128c8:	f8dc 3000 	ldr.w	r3, [ip]
 80128cc:	2050      	movs	r0, #80	@ 0x50
 80128ce:	4619      	mov	r1, r3
 80128d0:	602b      	str	r3, [r5, #0]
 80128d2:	47c0      	blx	r8
 80128d4:	4605      	mov	r5, r0
 80128d6:	6030      	str	r0, [r6, #0]
 80128d8:	b3d0      	cbz	r0, 8012950 <rcl_init_options_copy+0xcc>
 80128da:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80128de:	4686      	mov	lr, r0
 80128e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80128e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80128e8:	f8dc 3000 	ldr.w	r3, [ip]
 80128ec:	4668      	mov	r0, sp
 80128ee:	f8ce 3000 	str.w	r3, [lr]
 80128f2:	f000 fd11 	bl	8013318 <rmw_get_zero_initialized_init_options>
 80128f6:	46ee      	mov	lr, sp
 80128f8:	f105 0c18 	add.w	ip, r5, #24
 80128fc:	6824      	ldr	r4, [r4, #0]
 80128fe:	6835      	ldr	r5, [r6, #0]
 8012900:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012908:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801290c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012918:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801291c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012920:	f104 0018 	add.w	r0, r4, #24
 8012924:	f105 0118 	add.w	r1, r5, #24
 8012928:	f000 fe86 	bl	8013638 <rmw_init_options_copy>
 801292c:	4604      	mov	r4, r0
 801292e:	2800      	cmp	r0, #0
 8012930:	d0be      	beq.n	80128b0 <rcl_init_options_copy+0x2c>
 8012932:	f7fb fc3b 	bl	800e1ac <rcutils_get_error_string>
 8012936:	f7fb fc4f 	bl	800e1d8 <rcutils_reset_error>
 801293a:	4630      	mov	r0, r6
 801293c:	f7ff ff78 	bl	8012830 <rcl_init_options_fini>
 8012940:	b140      	cbz	r0, 8012954 <rcl_init_options_copy+0xd0>
 8012942:	4604      	mov	r4, r0
 8012944:	e7b4      	b.n	80128b0 <rcl_init_options_copy+0x2c>
 8012946:	240b      	movs	r4, #11
 8012948:	4620      	mov	r0, r4
 801294a:	b014      	add	sp, #80	@ 0x50
 801294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012950:	240a      	movs	r4, #10
 8012952:	e7ad      	b.n	80128b0 <rcl_init_options_copy+0x2c>
 8012954:	4620      	mov	r0, r4
 8012956:	b014      	add	sp, #80	@ 0x50
 8012958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801295c:	f7ff bcce 	b.w	80122fc <rcl_convert_rmw_ret_to_rcl_ret>

08012960 <rcl_get_localhost_only>:
 8012960:	b510      	push	{r4, lr}
 8012962:	2300      	movs	r3, #0
 8012964:	b082      	sub	sp, #8
 8012966:	9301      	str	r3, [sp, #4]
 8012968:	b1b8      	cbz	r0, 801299a <rcl_get_localhost_only+0x3a>
 801296a:	4604      	mov	r4, r0
 801296c:	a901      	add	r1, sp, #4
 801296e:	480c      	ldr	r0, [pc, #48]	@ (80129a0 <rcl_get_localhost_only+0x40>)
 8012970:	f7fb fc04 	bl	800e17c <rcutils_get_env>
 8012974:	b110      	cbz	r0, 801297c <rcl_get_localhost_only+0x1c>
 8012976:	2001      	movs	r0, #1
 8012978:	b002      	add	sp, #8
 801297a:	bd10      	pop	{r4, pc}
 801297c:	9b01      	ldr	r3, [sp, #4]
 801297e:	b113      	cbz	r3, 8012986 <rcl_get_localhost_only+0x26>
 8012980:	781a      	ldrb	r2, [r3, #0]
 8012982:	2a31      	cmp	r2, #49	@ 0x31
 8012984:	d004      	beq.n	8012990 <rcl_get_localhost_only+0x30>
 8012986:	2302      	movs	r3, #2
 8012988:	2000      	movs	r0, #0
 801298a:	7023      	strb	r3, [r4, #0]
 801298c:	b002      	add	sp, #8
 801298e:	bd10      	pop	{r4, pc}
 8012990:	785b      	ldrb	r3, [r3, #1]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d1f7      	bne.n	8012986 <rcl_get_localhost_only+0x26>
 8012996:	2301      	movs	r3, #1
 8012998:	e7f6      	b.n	8012988 <rcl_get_localhost_only+0x28>
 801299a:	200b      	movs	r0, #11
 801299c:	b002      	add	sp, #8
 801299e:	bd10      	pop	{r4, pc}
 80129a0:	08018890 	.word	0x08018890

080129a4 <rcl_node_resolve_name>:
 80129a4:	b082      	sub	sp, #8
 80129a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129aa:	b091      	sub	sp, #68	@ 0x44
 80129ac:	ac1a      	add	r4, sp, #104	@ 0x68
 80129ae:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80129b2:	e884 000c 	stmia.w	r4, {r2, r3}
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d03d      	beq.n	8012a36 <rcl_node_resolve_name+0x92>
 80129ba:	460c      	mov	r4, r1
 80129bc:	4605      	mov	r5, r0
 80129be:	f7fb f997 	bl	800dcf0 <rcl_node_get_options>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	d03a      	beq.n	8012a3c <rcl_node_resolve_name+0x98>
 80129c6:	4628      	mov	r0, r5
 80129c8:	f7fb f982 	bl	800dcd0 <rcl_node_get_name>
 80129cc:	4606      	mov	r6, r0
 80129ce:	4628      	mov	r0, r5
 80129d0:	ad0b      	add	r5, sp, #44	@ 0x2c
 80129d2:	f7fb f985 	bl	800dce0 <rcl_node_get_namespace>
 80129d6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80129da:	4607      	mov	r7, r0
 80129dc:	46ac      	mov	ip, r5
 80129de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129e6:	f8de 3000 	ldr.w	r3, [lr]
 80129ea:	f8cc 3000 	str.w	r3, [ip]
 80129ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80129f0:	b30b      	cbz	r3, 8012a36 <rcl_node_resolve_name+0x92>
 80129f2:	4689      	mov	r9, r1
 80129f4:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80129f8:	f000 fafe 	bl	8012ff8 <rcutils_get_zero_initialized_string_map>
 80129fc:	ab10      	add	r3, sp, #64	@ 0x40
 80129fe:	9008      	str	r0, [sp, #32]
 8012a00:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012a04:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a08:	2100      	movs	r1, #0
 8012a0a:	a808      	add	r0, sp, #32
 8012a0c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012a10:	f000 fb68 	bl	80130e4 <rcutils_string_map_init>
 8012a14:	4683      	mov	fp, r0
 8012a16:	b1a0      	cbz	r0, 8012a42 <rcl_node_resolve_name+0x9e>
 8012a18:	f7fb fbc8 	bl	800e1ac <rcutils_get_error_string>
 8012a1c:	f7fb fbdc 	bl	800e1d8 <rcutils_reset_error>
 8012a20:	f1bb 0f0a 	cmp.w	fp, #10
 8012a24:	bf18      	it	ne
 8012a26:	f04f 0b01 	movne.w	fp, #1
 8012a2a:	4658      	mov	r0, fp
 8012a2c:	b011      	add	sp, #68	@ 0x44
 8012a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a32:	b002      	add	sp, #8
 8012a34:	4770      	bx	lr
 8012a36:	f04f 0b0b 	mov.w	fp, #11
 8012a3a:	e7f6      	b.n	8012a2a <rcl_node_resolve_name+0x86>
 8012a3c:	f04f 0b01 	mov.w	fp, #1
 8012a40:	e7f3      	b.n	8012a2a <rcl_node_resolve_name+0x86>
 8012a42:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a44:	9007      	str	r0, [sp, #28]
 8012a46:	a808      	add	r0, sp, #32
 8012a48:	f003 fd42 	bl	80164d0 <rcl_get_default_topic_name_substitutions>
 8012a4c:	4683      	mov	fp, r0
 8012a4e:	b180      	cbz	r0, 8012a72 <rcl_node_resolve_name+0xce>
 8012a50:	280a      	cmp	r0, #10
 8012a52:	a808      	add	r0, sp, #32
 8012a54:	bf18      	it	ne
 8012a56:	f04f 0b01 	movne.w	fp, #1
 8012a5a:	f000 fb83 	bl	8013164 <rcutils_string_map_fini>
 8012a5e:	4604      	mov	r4, r0
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d15b      	bne.n	8012b1c <rcl_node_resolve_name+0x178>
 8012a64:	4651      	mov	r1, sl
 8012a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a68:	47c8      	blx	r9
 8012a6a:	4651      	mov	r1, sl
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	47c8      	blx	r9
 8012a70:	e7db      	b.n	8012a2a <rcl_node_resolve_name+0x86>
 8012a72:	ab09      	add	r3, sp, #36	@ 0x24
 8012a74:	46ec      	mov	ip, sp
 8012a76:	9305      	str	r3, [sp, #20]
 8012a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a7e:	682b      	ldr	r3, [r5, #0]
 8012a80:	463a      	mov	r2, r7
 8012a82:	4631      	mov	r1, r6
 8012a84:	4620      	mov	r0, r4
 8012a86:	f8cc 3000 	str.w	r3, [ip]
 8012a8a:	ab08      	add	r3, sp, #32
 8012a8c:	f003 fbc0 	bl	8016210 <rcl_expand_topic_name>
 8012a90:	4683      	mov	fp, r0
 8012a92:	b9d8      	cbnz	r0, 8012acc <rcl_node_resolve_name+0x128>
 8012a94:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012a96:	4602      	mov	r2, r0
 8012a98:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a9a:	a90a      	add	r1, sp, #40	@ 0x28
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f000 fc4f 	bl	8013340 <rmw_validate_full_topic_name>
 8012aa2:	bb50      	cbnz	r0, 8012afa <rcl_node_resolve_name+0x156>
 8012aa4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012aa6:	2d00      	cmp	r5, #0
 8012aa8:	d140      	bne.n	8012b2c <rcl_node_resolve_name+0x188>
 8012aaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012aac:	a808      	add	r0, sp, #32
 8012aae:	601c      	str	r4, [r3, #0]
 8012ab0:	f000 fb58 	bl	8013164 <rcutils_string_map_fini>
 8012ab4:	4683      	mov	fp, r0
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d043      	beq.n	8012b42 <rcl_node_resolve_name+0x19e>
 8012aba:	f7fb fb77 	bl	800e1ac <rcutils_get_error_string>
 8012abe:	46a8      	mov	r8, r5
 8012ac0:	f04f 0b01 	mov.w	fp, #1
 8012ac4:	462c      	mov	r4, r5
 8012ac6:	f7fb fb87 	bl	800e1d8 <rcutils_reset_error>
 8012aca:	e00a      	b.n	8012ae2 <rcl_node_resolve_name+0x13e>
 8012acc:	2867      	cmp	r0, #103	@ 0x67
 8012ace:	bf14      	ite	ne
 8012ad0:	f04f 0800 	movne.w	r8, #0
 8012ad4:	f008 0801 	andeq.w	r8, r8, #1
 8012ad8:	9c07      	ldr	r4, [sp, #28]
 8012ada:	a808      	add	r0, sp, #32
 8012adc:	f000 fb42 	bl	8013164 <rcutils_string_map_fini>
 8012ae0:	bb50      	cbnz	r0, 8012b38 <rcl_node_resolve_name+0x194>
 8012ae2:	4651      	mov	r1, sl
 8012ae4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ae6:	47c8      	blx	r9
 8012ae8:	4651      	mov	r1, sl
 8012aea:	4620      	mov	r0, r4
 8012aec:	47c8      	blx	r9
 8012aee:	f1b8 0f00 	cmp.w	r8, #0
 8012af2:	bf18      	it	ne
 8012af4:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8012af8:	e797      	b.n	8012a2a <rcl_node_resolve_name+0x86>
 8012afa:	f7fb fb57 	bl	800e1ac <rcutils_get_error_string>
 8012afe:	f7fb fb6b 	bl	800e1d8 <rcutils_reset_error>
 8012b02:	a808      	add	r0, sp, #32
 8012b04:	f000 fb2e 	bl	8013164 <rcutils_string_map_fini>
 8012b08:	b998      	cbnz	r0, 8012b32 <rcl_node_resolve_name+0x18e>
 8012b0a:	4651      	mov	r1, sl
 8012b0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b0e:	47c8      	blx	r9
 8012b10:	4651      	mov	r1, sl
 8012b12:	4620      	mov	r0, r4
 8012b14:	f04f 0b01 	mov.w	fp, #1
 8012b18:	47c8      	blx	r9
 8012b1a:	e786      	b.n	8012a2a <rcl_node_resolve_name+0x86>
 8012b1c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012b20:	f7fb fb44 	bl	800e1ac <rcutils_get_error_string>
 8012b24:	f7fb fb58 	bl	800e1d8 <rcutils_reset_error>
 8012b28:	4644      	mov	r4, r8
 8012b2a:	e7da      	b.n	8012ae2 <rcl_node_resolve_name+0x13e>
 8012b2c:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8012b30:	e7d3      	b.n	8012ada <rcl_node_resolve_name+0x136>
 8012b32:	46d8      	mov	r8, fp
 8012b34:	f04f 0b01 	mov.w	fp, #1
 8012b38:	f7fb fb38 	bl	800e1ac <rcutils_get_error_string>
 8012b3c:	f7fb fb4c 	bl	800e1d8 <rcutils_reset_error>
 8012b40:	e7cf      	b.n	8012ae2 <rcl_node_resolve_name+0x13e>
 8012b42:	4651      	mov	r1, sl
 8012b44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b46:	47c8      	blx	r9
 8012b48:	4651      	mov	r1, sl
 8012b4a:	4658      	mov	r0, fp
 8012b4c:	47c8      	blx	r9
 8012b4e:	e76c      	b.n	8012a2a <rcl_node_resolve_name+0x86>

08012b50 <exact_match_lookup>:
 8012b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b52:	f102 0708 	add.w	r7, r2, #8
 8012b56:	460b      	mov	r3, r1
 8012b58:	b085      	sub	sp, #20
 8012b5a:	4614      	mov	r4, r2
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012b62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b66:	4618      	mov	r0, r3
 8012b68:	4919      	ldr	r1, [pc, #100]	@ (8012bd0 <exact_match_lookup+0x80>)
 8012b6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012b6e:	f000 fa35 	bl	8012fdc <rcutils_join_path>
 8012b72:	7833      	ldrb	r3, [r6, #0]
 8012b74:	4605      	mov	r5, r0
 8012b76:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b78:	d023      	beq.n	8012bc2 <exact_match_lookup+0x72>
 8012b7a:	f104 030c 	add.w	r3, r4, #12
 8012b7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b82:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b86:	1c70      	adds	r0, r6, #1
 8012b88:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012b8c:	f000 fa2c 	bl	8012fe8 <rcutils_to_native_path>
 8012b90:	4606      	mov	r6, r0
 8012b92:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012b96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012ba2:	f000 fa1b 	bl	8012fdc <rcutils_join_path>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4630      	mov	r0, r6
 8012baa:	6862      	ldr	r2, [r4, #4]
 8012bac:	461e      	mov	r6, r3
 8012bae:	6921      	ldr	r1, [r4, #16]
 8012bb0:	4790      	blx	r2
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	4635      	mov	r5, r6
 8012bb6:	6863      	ldr	r3, [r4, #4]
 8012bb8:	6921      	ldr	r1, [r4, #16]
 8012bba:	4798      	blx	r3
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	b005      	add	sp, #20
 8012bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bc2:	7873      	ldrb	r3, [r6, #1]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d1d8      	bne.n	8012b7a <exact_match_lookup+0x2a>
 8012bc8:	4628      	mov	r0, r5
 8012bca:	b005      	add	sp, #20
 8012bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	080188e0 	.word	0x080188e0

08012bd4 <rcl_get_secure_root>:
 8012bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bd8:	b085      	sub	sp, #20
 8012bda:	b168      	cbz	r0, 8012bf8 <rcl_get_secure_root+0x24>
 8012bdc:	4607      	mov	r7, r0
 8012bde:	4608      	mov	r0, r1
 8012be0:	460c      	mov	r4, r1
 8012be2:	f7fb fabd 	bl	800e160 <rcutils_allocator_is_valid>
 8012be6:	b138      	cbz	r0, 8012bf8 <rcl_get_secure_root+0x24>
 8012be8:	2300      	movs	r3, #0
 8012bea:	482d      	ldr	r0, [pc, #180]	@ (8012ca0 <rcl_get_secure_root+0xcc>)
 8012bec:	a903      	add	r1, sp, #12
 8012bee:	9303      	str	r3, [sp, #12]
 8012bf0:	f7fb fac4 	bl	800e17c <rcutils_get_env>
 8012bf4:	4605      	mov	r5, r0
 8012bf6:	b120      	cbz	r0, 8012c02 <rcl_get_secure_root+0x2e>
 8012bf8:	2500      	movs	r5, #0
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	b005      	add	sp, #20
 8012bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c02:	9b03      	ldr	r3, [sp, #12]
 8012c04:	781a      	ldrb	r2, [r3, #0]
 8012c06:	2a00      	cmp	r2, #0
 8012c08:	d0f6      	beq.n	8012bf8 <rcl_get_secure_root+0x24>
 8012c0a:	f104 090c 	add.w	r9, r4, #12
 8012c0e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012c12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012c16:	4618      	mov	r0, r3
 8012c18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012c1c:	f7fb fc32 	bl	800e484 <rcutils_strdup>
 8012c20:	4680      	mov	r8, r0
 8012c22:	2800      	cmp	r0, #0
 8012c24:	d0e8      	beq.n	8012bf8 <rcl_get_secure_root+0x24>
 8012c26:	a903      	add	r1, sp, #12
 8012c28:	481e      	ldr	r0, [pc, #120]	@ (8012ca4 <rcl_get_secure_root+0xd0>)
 8012c2a:	9503      	str	r5, [sp, #12]
 8012c2c:	f7fb faa6 	bl	800e17c <rcutils_get_env>
 8012c30:	b160      	cbz	r0, 8012c4c <rcl_get_secure_root+0x78>
 8012c32:	2600      	movs	r6, #0
 8012c34:	4630      	mov	r0, r6
 8012c36:	6863      	ldr	r3, [r4, #4]
 8012c38:	6921      	ldr	r1, [r4, #16]
 8012c3a:	4798      	blx	r3
 8012c3c:	4640      	mov	r0, r8
 8012c3e:	6863      	ldr	r3, [r4, #4]
 8012c40:	6921      	ldr	r1, [r4, #16]
 8012c42:	4798      	blx	r3
 8012c44:	4628      	mov	r0, r5
 8012c46:	b005      	add	sp, #20
 8012c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c4c:	9b03      	ldr	r3, [sp, #12]
 8012c4e:	781e      	ldrb	r6, [r3, #0]
 8012c50:	b1f6      	cbz	r6, 8012c90 <rcl_get_secure_root+0xbc>
 8012c52:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012c56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012c60:	f7fb fc10 	bl	800e484 <rcutils_strdup>
 8012c64:	4606      	mov	r6, r0
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d0e3      	beq.n	8012c32 <rcl_get_secure_root+0x5e>
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	4641      	mov	r1, r8
 8012c6e:	f7ff ff6f 	bl	8012b50 <exact_match_lookup>
 8012c72:	4605      	mov	r5, r0
 8012c74:	2d00      	cmp	r5, #0
 8012c76:	d0dd      	beq.n	8012c34 <rcl_get_secure_root+0x60>
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f000 f9ad 	bl	8012fd8 <rcutils_is_directory>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d1d7      	bne.n	8012c34 <rcl_get_secure_root+0x60>
 8012c84:	4628      	mov	r0, r5
 8012c86:	6921      	ldr	r1, [r4, #16]
 8012c88:	461d      	mov	r5, r3
 8012c8a:	6863      	ldr	r3, [r4, #4]
 8012c8c:	4798      	blx	r3
 8012c8e:	e7d1      	b.n	8012c34 <rcl_get_secure_root+0x60>
 8012c90:	4622      	mov	r2, r4
 8012c92:	4638      	mov	r0, r7
 8012c94:	4641      	mov	r1, r8
 8012c96:	f7ff ff5b 	bl	8012b50 <exact_match_lookup>
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	e7ea      	b.n	8012c74 <rcl_get_secure_root+0xa0>
 8012c9e:	bf00      	nop
 8012ca0:	080188ec 	.word	0x080188ec
 8012ca4:	08018904 	.word	0x08018904

08012ca8 <rcl_get_security_options_from_environment>:
 8012ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cac:	b082      	sub	sp, #8
 8012cae:	2300      	movs	r3, #0
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	4821      	ldr	r0, [pc, #132]	@ (8012d3c <rcl_get_security_options_from_environment+0x94>)
 8012cb6:	a901      	add	r1, sp, #4
 8012cb8:	4690      	mov	r8, r2
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	f7fb fa5e 	bl	800e17c <rcutils_get_env>
 8012cc0:	b120      	cbz	r0, 8012ccc <rcl_get_security_options_from_environment+0x24>
 8012cc2:	2501      	movs	r5, #1
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	b002      	add	sp, #8
 8012cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ccc:	4604      	mov	r4, r0
 8012cce:	491c      	ldr	r1, [pc, #112]	@ (8012d40 <rcl_get_security_options_from_environment+0x98>)
 8012cd0:	9801      	ldr	r0, [sp, #4]
 8012cd2:	f7ed fab5 	bl	8000240 <strcmp>
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	b9f0      	cbnz	r0, 8012d18 <rcl_get_security_options_from_environment+0x70>
 8012cda:	9001      	str	r0, [sp, #4]
 8012cdc:	f1b8 0f00 	cmp.w	r8, #0
 8012ce0:	d021      	beq.n	8012d26 <rcl_get_security_options_from_environment+0x7e>
 8012ce2:	a901      	add	r1, sp, #4
 8012ce4:	4817      	ldr	r0, [pc, #92]	@ (8012d44 <rcl_get_security_options_from_environment+0x9c>)
 8012ce6:	f7fb fa49 	bl	800e17c <rcutils_get_env>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	d1e9      	bne.n	8012cc2 <rcl_get_security_options_from_environment+0x1a>
 8012cee:	4916      	ldr	r1, [pc, #88]	@ (8012d48 <rcl_get_security_options_from_environment+0xa0>)
 8012cf0:	9801      	ldr	r0, [sp, #4]
 8012cf2:	f7ed faa5 	bl	8000240 <strcmp>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	fab3 f383 	clz	r3, r3
 8012d00:	095b      	lsrs	r3, r3, #5
 8012d02:	f888 3000 	strb.w	r3, [r8]
 8012d06:	f7ff ff65 	bl	8012bd4 <rcl_get_secure_root>
 8012d0a:	b170      	cbz	r0, 8012d2a <rcl_get_security_options_from_environment+0x82>
 8012d0c:	f8c8 0004 	str.w	r0, [r8, #4]
 8012d10:	4628      	mov	r0, r5
 8012d12:	b002      	add	sp, #8
 8012d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d18:	4625      	mov	r5, r4
 8012d1a:	f888 4000 	strb.w	r4, [r8]
 8012d1e:	4628      	mov	r0, r5
 8012d20:	b002      	add	sp, #8
 8012d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d26:	250b      	movs	r5, #11
 8012d28:	e7cc      	b.n	8012cc4 <rcl_get_security_options_from_environment+0x1c>
 8012d2a:	f898 5000 	ldrb.w	r5, [r8]
 8012d2e:	f1a5 0501 	sub.w	r5, r5, #1
 8012d32:	fab5 f585 	clz	r5, r5
 8012d36:	096d      	lsrs	r5, r5, #5
 8012d38:	e7c4      	b.n	8012cc4 <rcl_get_security_options_from_environment+0x1c>
 8012d3a:	bf00      	nop
 8012d3c:	080188a4 	.word	0x080188a4
 8012d40:	080188b8 	.word	0x080188b8
 8012d44:	080188c0 	.word	0x080188c0
 8012d48:	080188d8 	.word	0x080188d8

08012d4c <rcl_get_system_time>:
 8012d4c:	4608      	mov	r0, r1
 8012d4e:	f000 ba81 	b.w	8013254 <rcutils_system_time_now>
 8012d52:	bf00      	nop

08012d54 <rcl_get_steady_time>:
 8012d54:	4608      	mov	r0, r1
 8012d56:	f000 baa3 	b.w	80132a0 <rcutils_steady_time_now>
 8012d5a:	bf00      	nop

08012d5c <rcl_get_ros_time>:
 8012d5c:	7a03      	ldrb	r3, [r0, #8]
 8012d5e:	b510      	push	{r4, lr}
 8012d60:	460c      	mov	r4, r1
 8012d62:	b143      	cbz	r3, 8012d76 <rcl_get_ros_time+0x1a>
 8012d64:	2105      	movs	r1, #5
 8012d66:	f000 f901 	bl	8012f6c <__atomic_load_8>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	2000      	movs	r0, #0
 8012d70:	e9c4 2300 	strd	r2, r3, [r4]
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	4608      	mov	r0, r1
 8012d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d7c:	f000 ba6a 	b.w	8013254 <rcutils_system_time_now>

08012d80 <rcl_clock_init>:
 8012d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d82:	4605      	mov	r5, r0
 8012d84:	4610      	mov	r0, r2
 8012d86:	4614      	mov	r4, r2
 8012d88:	460e      	mov	r6, r1
 8012d8a:	f7fb f9e9 	bl	800e160 <rcutils_allocator_is_valid>
 8012d8e:	b128      	cbz	r0, 8012d9c <rcl_clock_init+0x1c>
 8012d90:	2d03      	cmp	r5, #3
 8012d92:	d803      	bhi.n	8012d9c <rcl_clock_init+0x1c>
 8012d94:	e8df f005 	tbb	[pc, r5]
 8012d98:	0659301f 	.word	0x0659301f
 8012d9c:	f04f 0c0b 	mov.w	ip, #11
 8012da0:	4660      	mov	r0, ip
 8012da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da4:	2c00      	cmp	r4, #0
 8012da6:	d0f9      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012da8:	fab6 f386 	clz	r3, r6
 8012dac:	095b      	lsrs	r3, r3, #5
 8012dae:	2e00      	cmp	r6, #0
 8012db0:	d0f4      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012db2:	6133      	str	r3, [r6, #16]
 8012db4:	469c      	mov	ip, r3
 8012db6:	f106 0514 	add.w	r5, r6, #20
 8012dba:	4f32      	ldr	r7, [pc, #200]	@ (8012e84 <rcl_clock_init+0x104>)
 8012dbc:	f04f 0e03 	mov.w	lr, #3
 8012dc0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012dc8:	6823      	ldr	r3, [r4, #0]
 8012dca:	4660      	mov	r0, ip
 8012dcc:	602b      	str	r3, [r5, #0]
 8012dce:	60f7      	str	r7, [r6, #12]
 8012dd0:	f886 e000 	strb.w	lr, [r6]
 8012dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd6:	2e00      	cmp	r6, #0
 8012dd8:	d0e0      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	f106 0514 	add.w	r5, r6, #20
 8012de0:	7033      	strb	r3, [r6, #0]
 8012de2:	469c      	mov	ip, r3
 8012de4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012de8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	4660      	mov	r0, ip
 8012df4:	602b      	str	r3, [r5, #0]
 8012df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df8:	2c00      	cmp	r4, #0
 8012dfa:	d0cf      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012dfc:	fab6 f586 	clz	r5, r6
 8012e00:	096d      	lsrs	r5, r5, #5
 8012e02:	2e00      	cmp	r6, #0
 8012e04:	d0ca      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012e06:	46a6      	mov	lr, r4
 8012e08:	7035      	strb	r5, [r6, #0]
 8012e0a:	f106 0c14 	add.w	ip, r6, #20
 8012e0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e12:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012e16:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8012e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e1e:	f8de 3000 	ldr.w	r3, [lr]
 8012e22:	2010      	movs	r0, #16
 8012e24:	f8cc 3000 	str.w	r3, [ip]
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	6921      	ldr	r1, [r4, #16]
 8012e2c:	4798      	blx	r3
 8012e2e:	6130      	str	r0, [r6, #16]
 8012e30:	b320      	cbz	r0, 8012e7c <rcl_clock_init+0xfc>
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	46ac      	mov	ip, r5
 8012e38:	7205      	strb	r5, [r0, #8]
 8012e3a:	e9c0 2300 	strd	r2, r3, [r0]
 8012e3e:	4a12      	ldr	r2, [pc, #72]	@ (8012e88 <rcl_clock_init+0x108>)
 8012e40:	2301      	movs	r3, #1
 8012e42:	4660      	mov	r0, ip
 8012e44:	60f2      	str	r2, [r6, #12]
 8012e46:	7033      	strb	r3, [r6, #0]
 8012e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e4a:	2c00      	cmp	r4, #0
 8012e4c:	d0a6      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012e4e:	fab6 f386 	clz	r3, r6
 8012e52:	095b      	lsrs	r3, r3, #5
 8012e54:	2e00      	cmp	r6, #0
 8012e56:	d0a1      	beq.n	8012d9c <rcl_clock_init+0x1c>
 8012e58:	6133      	str	r3, [r6, #16]
 8012e5a:	469c      	mov	ip, r3
 8012e5c:	f106 0514 	add.w	r5, r6, #20
 8012e60:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8012e8c <rcl_clock_init+0x10c>
 8012e64:	2702      	movs	r7, #2
 8012e66:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	4660      	mov	r0, ip
 8012e72:	602b      	str	r3, [r5, #0]
 8012e74:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012e78:	7037      	strb	r7, [r6, #0]
 8012e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e7c:	f04f 0c0a 	mov.w	ip, #10
 8012e80:	e78e      	b.n	8012da0 <rcl_clock_init+0x20>
 8012e82:	bf00      	nop
 8012e84:	08012d55 	.word	0x08012d55
 8012e88:	08012d5d 	.word	0x08012d5d
 8012e8c:	08012d4d 	.word	0x08012d4d

08012e90 <rcl_validate_enclave_name_with_size>:
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d049      	beq.n	8012f28 <rcl_validate_enclave_name_with_size+0x98>
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	4615      	mov	r5, r2
 8012e98:	b0c2      	sub	sp, #264	@ 0x108
 8012e9a:	b19a      	cbz	r2, 8012ec4 <rcl_validate_enclave_name_with_size+0x34>
 8012e9c:	461e      	mov	r6, r3
 8012e9e:	466a      	mov	r2, sp
 8012ea0:	ab01      	add	r3, sp, #4
 8012ea2:	460c      	mov	r4, r1
 8012ea4:	f7fb fb30 	bl	800e508 <rmw_validate_namespace_with_size>
 8012ea8:	4684      	mov	ip, r0
 8012eaa:	b9b8      	cbnz	r0, 8012edc <rcl_validate_enclave_name_with_size+0x4c>
 8012eac:	9900      	ldr	r1, [sp, #0]
 8012eae:	b171      	cbz	r1, 8012ece <rcl_validate_enclave_name_with_size+0x3e>
 8012eb0:	2907      	cmp	r1, #7
 8012eb2:	d019      	beq.n	8012ee8 <rcl_validate_enclave_name_with_size+0x58>
 8012eb4:	1e4b      	subs	r3, r1, #1
 8012eb6:	2b05      	cmp	r3, #5
 8012eb8:	d83a      	bhi.n	8012f30 <rcl_validate_enclave_name_with_size+0xa0>
 8012eba:	e8df f003 	tbb	[pc, r3]
 8012ebe:	2926      	.short	0x2926
 8012ec0:	1d322f2c 	.word	0x1d322f2c
 8012ec4:	f04f 0c0b 	mov.w	ip, #11
 8012ec8:	4660      	mov	r0, ip
 8012eca:	b042      	add	sp, #264	@ 0x108
 8012ecc:	bd70      	pop	{r4, r5, r6, pc}
 8012ece:	2907      	cmp	r1, #7
 8012ed0:	d00a      	beq.n	8012ee8 <rcl_validate_enclave_name_with_size+0x58>
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	4660      	mov	r0, ip
 8012ed6:	602b      	str	r3, [r5, #0]
 8012ed8:	b042      	add	sp, #264	@ 0x108
 8012eda:	bd70      	pop	{r4, r5, r6, pc}
 8012edc:	f7ff fa0e 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 8012ee0:	4684      	mov	ip, r0
 8012ee2:	4660      	mov	r0, ip
 8012ee4:	b042      	add	sp, #264	@ 0x108
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	2cff      	cmp	r4, #255	@ 0xff
 8012eea:	d9f2      	bls.n	8012ed2 <rcl_validate_enclave_name_with_size+0x42>
 8012eec:	6029      	str	r1, [r5, #0]
 8012eee:	2e00      	cmp	r6, #0
 8012ef0:	d0ea      	beq.n	8012ec8 <rcl_validate_enclave_name_with_size+0x38>
 8012ef2:	23fe      	movs	r3, #254	@ 0xfe
 8012ef4:	6033      	str	r3, [r6, #0]
 8012ef6:	e7e7      	b.n	8012ec8 <rcl_validate_enclave_name_with_size+0x38>
 8012ef8:	2306      	movs	r3, #6
 8012efa:	602b      	str	r3, [r5, #0]
 8012efc:	2e00      	cmp	r6, #0
 8012efe:	d0e3      	beq.n	8012ec8 <rcl_validate_enclave_name_with_size+0x38>
 8012f00:	9b01      	ldr	r3, [sp, #4]
 8012f02:	4660      	mov	r0, ip
 8012f04:	6033      	str	r3, [r6, #0]
 8012f06:	b042      	add	sp, #264	@ 0x108
 8012f08:	bd70      	pop	{r4, r5, r6, pc}
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	602b      	str	r3, [r5, #0]
 8012f0e:	e7f5      	b.n	8012efc <rcl_validate_enclave_name_with_size+0x6c>
 8012f10:	2302      	movs	r3, #2
 8012f12:	602b      	str	r3, [r5, #0]
 8012f14:	e7f2      	b.n	8012efc <rcl_validate_enclave_name_with_size+0x6c>
 8012f16:	2303      	movs	r3, #3
 8012f18:	602b      	str	r3, [r5, #0]
 8012f1a:	e7ef      	b.n	8012efc <rcl_validate_enclave_name_with_size+0x6c>
 8012f1c:	2304      	movs	r3, #4
 8012f1e:	602b      	str	r3, [r5, #0]
 8012f20:	e7ec      	b.n	8012efc <rcl_validate_enclave_name_with_size+0x6c>
 8012f22:	2305      	movs	r3, #5
 8012f24:	602b      	str	r3, [r5, #0]
 8012f26:	e7e9      	b.n	8012efc <rcl_validate_enclave_name_with_size+0x6c>
 8012f28:	f04f 0c0b 	mov.w	ip, #11
 8012f2c:	4660      	mov	r0, ip
 8012f2e:	4770      	bx	lr
 8012f30:	460b      	mov	r3, r1
 8012f32:	4a04      	ldr	r2, [pc, #16]	@ (8012f44 <rcl_validate_enclave_name_with_size+0xb4>)
 8012f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f38:	a802      	add	r0, sp, #8
 8012f3a:	f7fb fa55 	bl	800e3e8 <rcutils_snprintf>
 8012f3e:	f04f 0c01 	mov.w	ip, #1
 8012f42:	e7c1      	b.n	8012ec8 <rcl_validate_enclave_name_with_size+0x38>
 8012f44:	08018924 	.word	0x08018924

08012f48 <rcl_validate_enclave_name>:
 8012f48:	b168      	cbz	r0, 8012f66 <rcl_validate_enclave_name+0x1e>
 8012f4a:	b570      	push	{r4, r5, r6, lr}
 8012f4c:	460d      	mov	r5, r1
 8012f4e:	4616      	mov	r6, r2
 8012f50:	4604      	mov	r4, r0
 8012f52:	f7ed f97f 	bl	8000254 <strlen>
 8012f56:	4633      	mov	r3, r6
 8012f58:	4601      	mov	r1, r0
 8012f5a:	462a      	mov	r2, r5
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f62:	f7ff bf95 	b.w	8012e90 <rcl_validate_enclave_name_with_size>
 8012f66:	200b      	movs	r0, #11
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop

08012f6c <__atomic_load_8>:
 8012f6c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f70:	4a16      	ldr	r2, [pc, #88]	@ (8012fcc <__atomic_load_8+0x60>)
 8012f72:	4b17      	ldr	r3, [pc, #92]	@ (8012fd0 <__atomic_load_8+0x64>)
 8012f74:	f04f 0c01 	mov.w	ip, #1
 8012f78:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f80:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f84:	fb02 f101 	mul.w	r1, r2, r1
 8012f88:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012f8c:	fba3 2301 	umull	r2, r3, r3, r1
 8012f90:	091b      	lsrs	r3, r3, #4
 8012f92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012f96:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012f9a:	b4d0      	push	{r4, r6, r7}
 8012f9c:	1ac9      	subs	r1, r1, r3
 8012f9e:	4c0d      	ldr	r4, [pc, #52]	@ (8012fd4 <__atomic_load_8+0x68>)
 8012fa0:	1862      	adds	r2, r4, r1
 8012fa2:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012fa6:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012faa:	2e00      	cmp	r6, #0
 8012fac:	d1f9      	bne.n	8012fa2 <__atomic_load_8+0x36>
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	f3bf 8f5b 	dmb	ish
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d1f4      	bne.n	8012fa2 <__atomic_load_8+0x36>
 8012fb8:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012fbc:	f3bf 8f5b 	dmb	ish
 8012fc0:	5463      	strb	r3, [r4, r1]
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	4639      	mov	r1, r7
 8012fc6:	bcd0      	pop	{r4, r6, r7}
 8012fc8:	4770      	bx	lr
 8012fca:	bf00      	nop
 8012fcc:	27d4eb2d 	.word	0x27d4eb2d
 8012fd0:	b21642c9 	.word	0xb21642c9
 8012fd4:	200124ec 	.word	0x200124ec

08012fd8 <rcutils_is_directory>:
 8012fd8:	2000      	movs	r0, #0
 8012fda:	4770      	bx	lr

08012fdc <rcutils_join_path>:
 8012fdc:	b082      	sub	sp, #8
 8012fde:	2000      	movs	r0, #0
 8012fe0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012fe4:	b002      	add	sp, #8
 8012fe6:	4770      	bx	lr

08012fe8 <rcutils_to_native_path>:
 8012fe8:	b084      	sub	sp, #16
 8012fea:	2000      	movs	r0, #0
 8012fec:	f10d 0c04 	add.w	ip, sp, #4
 8012ff0:	b004      	add	sp, #16
 8012ff2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012ff6:	4770      	bx	lr

08012ff8 <rcutils_get_zero_initialized_string_map>:
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	4b01      	ldr	r3, [pc, #4]	@ (8013000 <rcutils_get_zero_initialized_string_map+0x8>)
 8012ffc:	6018      	str	r0, [r3, #0]
 8012ffe:	4770      	bx	lr
 8013000:	20012504 	.word	0x20012504

08013004 <rcutils_string_map_reserve>:
 8013004:	2800      	cmp	r0, #0
 8013006:	d05e      	beq.n	80130c6 <rcutils_string_map_reserve+0xc2>
 8013008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801300c:	460c      	mov	r4, r1
 801300e:	6801      	ldr	r1, [r0, #0]
 8013010:	b082      	sub	sp, #8
 8013012:	4605      	mov	r5, r0
 8013014:	b129      	cbz	r1, 8013022 <rcutils_string_map_reserve+0x1e>
 8013016:	68cb      	ldr	r3, [r1, #12]
 8013018:	42a3      	cmp	r3, r4
 801301a:	d906      	bls.n	801302a <rcutils_string_map_reserve+0x26>
 801301c:	461c      	mov	r4, r3
 801301e:	2900      	cmp	r1, #0
 8013020:	d1f9      	bne.n	8013016 <rcutils_string_map_reserve+0x12>
 8013022:	201f      	movs	r0, #31
 8013024:	b002      	add	sp, #8
 8013026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801302a:	688b      	ldr	r3, [r1, #8]
 801302c:	42a3      	cmp	r3, r4
 801302e:	d046      	beq.n	80130be <rcutils_string_map_reserve+0xba>
 8013030:	6a0e      	ldr	r6, [r1, #32]
 8013032:	2c00      	cmp	r4, #0
 8013034:	d033      	beq.n	801309e <rcutils_string_map_reserve+0x9a>
 8013036:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801303a:	d242      	bcs.n	80130c2 <rcutils_string_map_reserve+0xbe>
 801303c:	00a7      	lsls	r7, r4, #2
 801303e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8013042:	6808      	ldr	r0, [r1, #0]
 8013044:	4632      	mov	r2, r6
 8013046:	4639      	mov	r1, r7
 8013048:	47c0      	blx	r8
 801304a:	2800      	cmp	r0, #0
 801304c:	d039      	beq.n	80130c2 <rcutils_string_map_reserve+0xbe>
 801304e:	682b      	ldr	r3, [r5, #0]
 8013050:	4632      	mov	r2, r6
 8013052:	4639      	mov	r1, r7
 8013054:	6018      	str	r0, [r3, #0]
 8013056:	6858      	ldr	r0, [r3, #4]
 8013058:	47c0      	blx	r8
 801305a:	2800      	cmp	r0, #0
 801305c:	d031      	beq.n	80130c2 <rcutils_string_map_reserve+0xbe>
 801305e:	682d      	ldr	r5, [r5, #0]
 8013060:	68ab      	ldr	r3, [r5, #8]
 8013062:	6068      	str	r0, [r5, #4]
 8013064:	42a3      	cmp	r3, r4
 8013066:	d225      	bcs.n	80130b4 <rcutils_string_map_reserve+0xb0>
 8013068:	682a      	ldr	r2, [r5, #0]
 801306a:	eb00 0c07 	add.w	ip, r0, r7
 801306e:	0099      	lsls	r1, r3, #2
 8013070:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8013074:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013078:	45e6      	cmp	lr, ip
 801307a:	d203      	bcs.n	8013084 <rcutils_string_map_reserve+0x80>
 801307c:	eb02 0c07 	add.w	ip, r2, r7
 8013080:	4566      	cmp	r6, ip
 8013082:	d322      	bcc.n	80130ca <rcutils_string_map_reserve+0xc6>
 8013084:	1ae3      	subs	r3, r4, r3
 8013086:	4670      	mov	r0, lr
 8013088:	2100      	movs	r1, #0
 801308a:	009a      	lsls	r2, r3, #2
 801308c:	9201      	str	r2, [sp, #4]
 801308e:	f004 f8b1 	bl	80171f4 <memset>
 8013092:	9a01      	ldr	r2, [sp, #4]
 8013094:	2100      	movs	r1, #0
 8013096:	4630      	mov	r0, r6
 8013098:	f004 f8ac 	bl	80171f4 <memset>
 801309c:	e00a      	b.n	80130b4 <rcutils_string_map_reserve+0xb0>
 801309e:	694f      	ldr	r7, [r1, #20]
 80130a0:	6808      	ldr	r0, [r1, #0]
 80130a2:	4631      	mov	r1, r6
 80130a4:	47b8      	blx	r7
 80130a6:	682b      	ldr	r3, [r5, #0]
 80130a8:	4631      	mov	r1, r6
 80130aa:	6858      	ldr	r0, [r3, #4]
 80130ac:	601c      	str	r4, [r3, #0]
 80130ae:	47b8      	blx	r7
 80130b0:	682d      	ldr	r5, [r5, #0]
 80130b2:	606c      	str	r4, [r5, #4]
 80130b4:	2000      	movs	r0, #0
 80130b6:	60ac      	str	r4, [r5, #8]
 80130b8:	b002      	add	sp, #8
 80130ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130be:	2000      	movs	r0, #0
 80130c0:	e7b0      	b.n	8013024 <rcutils_string_map_reserve+0x20>
 80130c2:	200a      	movs	r0, #10
 80130c4:	e7ae      	b.n	8013024 <rcutils_string_map_reserve+0x20>
 80130c6:	200b      	movs	r0, #11
 80130c8:	4770      	bx	lr
 80130ca:	1f0b      	subs	r3, r1, #4
 80130cc:	4418      	add	r0, r3
 80130ce:	4413      	add	r3, r2
 80130d0:	3a04      	subs	r2, #4
 80130d2:	4417      	add	r7, r2
 80130d4:	2200      	movs	r2, #0
 80130d6:	f843 2f04 	str.w	r2, [r3, #4]!
 80130da:	42bb      	cmp	r3, r7
 80130dc:	f840 2f04 	str.w	r2, [r0, #4]!
 80130e0:	d1f9      	bne.n	80130d6 <rcutils_string_map_reserve+0xd2>
 80130e2:	e7e7      	b.n	80130b4 <rcutils_string_map_reserve+0xb0>

080130e4 <rcutils_string_map_init>:
 80130e4:	b082      	sub	sp, #8
 80130e6:	b570      	push	{r4, r5, r6, lr}
 80130e8:	ac04      	add	r4, sp, #16
 80130ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80130ee:	b380      	cbz	r0, 8013152 <rcutils_string_map_init+0x6e>
 80130f0:	6806      	ldr	r6, [r0, #0]
 80130f2:	4604      	mov	r4, r0
 80130f4:	b12e      	cbz	r6, 8013102 <rcutils_string_map_init+0x1e>
 80130f6:	251e      	movs	r5, #30
 80130f8:	4628      	mov	r0, r5
 80130fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fe:	b002      	add	sp, #8
 8013100:	4770      	bx	lr
 8013102:	a804      	add	r0, sp, #16
 8013104:	460d      	mov	r5, r1
 8013106:	f7fb f82b 	bl	800e160 <rcutils_allocator_is_valid>
 801310a:	b310      	cbz	r0, 8013152 <rcutils_string_map_init+0x6e>
 801310c:	9b04      	ldr	r3, [sp, #16]
 801310e:	2024      	movs	r0, #36	@ 0x24
 8013110:	9908      	ldr	r1, [sp, #32]
 8013112:	4798      	blx	r3
 8013114:	6020      	str	r0, [r4, #0]
 8013116:	b310      	cbz	r0, 801315e <rcutils_string_map_init+0x7a>
 8013118:	f10d 0e10 	add.w	lr, sp, #16
 801311c:	f100 0c10 	add.w	ip, r0, #16
 8013120:	e9c0 6600 	strd	r6, r6, [r0]
 8013124:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8013128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801312c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013130:	f8de 3000 	ldr.w	r3, [lr]
 8013134:	4629      	mov	r1, r5
 8013136:	4620      	mov	r0, r4
 8013138:	f8cc 3000 	str.w	r3, [ip]
 801313c:	f7ff ff62 	bl	8013004 <rcutils_string_map_reserve>
 8013140:	4605      	mov	r5, r0
 8013142:	2800      	cmp	r0, #0
 8013144:	d0d8      	beq.n	80130f8 <rcutils_string_map_init+0x14>
 8013146:	9b05      	ldr	r3, [sp, #20]
 8013148:	9908      	ldr	r1, [sp, #32]
 801314a:	6820      	ldr	r0, [r4, #0]
 801314c:	4798      	blx	r3
 801314e:	6026      	str	r6, [r4, #0]
 8013150:	e7d2      	b.n	80130f8 <rcutils_string_map_init+0x14>
 8013152:	250b      	movs	r5, #11
 8013154:	4628      	mov	r0, r5
 8013156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801315a:	b002      	add	sp, #8
 801315c:	4770      	bx	lr
 801315e:	250a      	movs	r5, #10
 8013160:	e7ca      	b.n	80130f8 <rcutils_string_map_init+0x14>
 8013162:	bf00      	nop

08013164 <rcutils_string_map_fini>:
 8013164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	2800      	cmp	r0, #0
 801316c:	d03a      	beq.n	80131e4 <rcutils_string_map_fini+0x80>
 801316e:	6804      	ldr	r4, [r0, #0]
 8013170:	4606      	mov	r6, r0
 8013172:	2c00      	cmp	r4, #0
 8013174:	d032      	beq.n	80131dc <rcutils_string_map_fini+0x78>
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	b32b      	cbz	r3, 80131c6 <rcutils_string_map_fini+0x62>
 801317a:	2500      	movs	r5, #0
 801317c:	6822      	ldr	r2, [r4, #0]
 801317e:	462f      	mov	r7, r5
 8013180:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013184:	b1e0      	cbz	r0, 80131c0 <rcutils_string_map_fini+0x5c>
 8013186:	6a21      	ldr	r1, [r4, #32]
 8013188:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801318c:	9101      	str	r1, [sp, #4]
 801318e:	47c0      	blx	r8
 8013190:	9901      	ldr	r1, [sp, #4]
 8013192:	e9d4 3200 	ldrd	r3, r2, [r4]
 8013196:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801319a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801319e:	47c0      	blx	r8
 80131a0:	68e3      	ldr	r3, [r4, #12]
 80131a2:	6862      	ldr	r2, [r4, #4]
 80131a4:	3b01      	subs	r3, #1
 80131a6:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80131aa:	3501      	adds	r5, #1
 80131ac:	60e3      	str	r3, [r4, #12]
 80131ae:	6834      	ldr	r4, [r6, #0]
 80131b0:	68a3      	ldr	r3, [r4, #8]
 80131b2:	429d      	cmp	r5, r3
 80131b4:	d207      	bcs.n	80131c6 <rcutils_string_map_fini+0x62>
 80131b6:	6822      	ldr	r2, [r4, #0]
 80131b8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80131bc:	2800      	cmp	r0, #0
 80131be:	d1e2      	bne.n	8013186 <rcutils_string_map_fini+0x22>
 80131c0:	3501      	adds	r5, #1
 80131c2:	429d      	cmp	r5, r3
 80131c4:	d3dc      	bcc.n	8013180 <rcutils_string_map_fini+0x1c>
 80131c6:	2100      	movs	r1, #0
 80131c8:	4630      	mov	r0, r6
 80131ca:	f7ff ff1b 	bl	8013004 <rcutils_string_map_reserve>
 80131ce:	4604      	mov	r4, r0
 80131d0:	b920      	cbnz	r0, 80131dc <rcutils_string_map_fini+0x78>
 80131d2:	6830      	ldr	r0, [r6, #0]
 80131d4:	6943      	ldr	r3, [r0, #20]
 80131d6:	6a01      	ldr	r1, [r0, #32]
 80131d8:	4798      	blx	r3
 80131da:	6034      	str	r4, [r6, #0]
 80131dc:	4620      	mov	r0, r4
 80131de:	b002      	add	sp, #8
 80131e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e4:	240b      	movs	r4, #11
 80131e6:	4620      	mov	r0, r4
 80131e8:	b002      	add	sp, #8
 80131ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ee:	bf00      	nop

080131f0 <rcutils_string_map_getn>:
 80131f0:	b378      	cbz	r0, 8013252 <rcutils_string_map_getn+0x62>
 80131f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f6:	f8d0 b000 	ldr.w	fp, [r0]
 80131fa:	f1bb 0f00 	cmp.w	fp, #0
 80131fe:	d01f      	beq.n	8013240 <rcutils_string_map_getn+0x50>
 8013200:	fab1 f481 	clz	r4, r1
 8013204:	4688      	mov	r8, r1
 8013206:	0964      	lsrs	r4, r4, #5
 8013208:	b1d1      	cbz	r1, 8013240 <rcutils_string_map_getn+0x50>
 801320a:	f8db 7008 	ldr.w	r7, [fp, #8]
 801320e:	f8db 6000 	ldr.w	r6, [fp]
 8013212:	b1af      	cbz	r7, 8013240 <rcutils_string_map_getn+0x50>
 8013214:	4691      	mov	r9, r2
 8013216:	3e04      	subs	r6, #4
 8013218:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801321c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8013220:	3401      	adds	r4, #1
 8013222:	4628      	mov	r0, r5
 8013224:	b155      	cbz	r5, 801323c <rcutils_string_map_getn+0x4c>
 8013226:	f7ed f815 	bl	8000254 <strlen>
 801322a:	4602      	mov	r2, r0
 801322c:	4629      	mov	r1, r5
 801322e:	4640      	mov	r0, r8
 8013230:	454a      	cmp	r2, r9
 8013232:	bf38      	it	cc
 8013234:	464a      	movcc	r2, r9
 8013236:	f003 fff2 	bl	801721e <strncmp>
 801323a:	b120      	cbz	r0, 8013246 <rcutils_string_map_getn+0x56>
 801323c:	42a7      	cmp	r7, r4
 801323e:	d1eb      	bne.n	8013218 <rcutils_string_map_getn+0x28>
 8013240:	2000      	movs	r0, #0
 8013242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013246:	f8db 3004 	ldr.w	r3, [fp, #4]
 801324a:	f853 000a 	ldr.w	r0, [r3, sl]
 801324e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013252:	4770      	bx	lr

08013254 <rcutils_system_time_now>:
 8013254:	b300      	cbz	r0, 8013298 <rcutils_system_time_now+0x44>
 8013256:	b570      	push	{r4, r5, r6, lr}
 8013258:	b084      	sub	sp, #16
 801325a:	4604      	mov	r4, r0
 801325c:	2001      	movs	r0, #1
 801325e:	4669      	mov	r1, sp
 8013260:	f7ee f89a 	bl	8001398 <clock_gettime>
 8013264:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013268:	2900      	cmp	r1, #0
 801326a:	db12      	blt.n	8013292 <rcutils_system_time_now+0x3e>
 801326c:	ea53 0201 	orrs.w	r2, r3, r1
 8013270:	9d02      	ldr	r5, [sp, #8]
 8013272:	d101      	bne.n	8013278 <rcutils_system_time_now+0x24>
 8013274:	2d00      	cmp	r5, #0
 8013276:	db0c      	blt.n	8013292 <rcutils_system_time_now+0x3e>
 8013278:	4e08      	ldr	r6, [pc, #32]	@ (801329c <rcutils_system_time_now+0x48>)
 801327a:	2000      	movs	r0, #0
 801327c:	fba3 3206 	umull	r3, r2, r3, r6
 8013280:	195b      	adds	r3, r3, r5
 8013282:	fb06 2201 	mla	r2, r6, r1, r2
 8013286:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801328a:	e9c4 3200 	strd	r3, r2, [r4]
 801328e:	b004      	add	sp, #16
 8013290:	bd70      	pop	{r4, r5, r6, pc}
 8013292:	2002      	movs	r0, #2
 8013294:	b004      	add	sp, #16
 8013296:	bd70      	pop	{r4, r5, r6, pc}
 8013298:	200b      	movs	r0, #11
 801329a:	4770      	bx	lr
 801329c:	3b9aca00 	.word	0x3b9aca00

080132a0 <rcutils_steady_time_now>:
 80132a0:	b300      	cbz	r0, 80132e4 <rcutils_steady_time_now+0x44>
 80132a2:	b570      	push	{r4, r5, r6, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	4604      	mov	r4, r0
 80132a8:	2000      	movs	r0, #0
 80132aa:	4669      	mov	r1, sp
 80132ac:	f7ee f874 	bl	8001398 <clock_gettime>
 80132b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80132b4:	2900      	cmp	r1, #0
 80132b6:	db12      	blt.n	80132de <rcutils_steady_time_now+0x3e>
 80132b8:	ea53 0201 	orrs.w	r2, r3, r1
 80132bc:	9d02      	ldr	r5, [sp, #8]
 80132be:	d101      	bne.n	80132c4 <rcutils_steady_time_now+0x24>
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	db0c      	blt.n	80132de <rcutils_steady_time_now+0x3e>
 80132c4:	4e08      	ldr	r6, [pc, #32]	@ (80132e8 <rcutils_steady_time_now+0x48>)
 80132c6:	2000      	movs	r0, #0
 80132c8:	fba3 3206 	umull	r3, r2, r3, r6
 80132cc:	195b      	adds	r3, r3, r5
 80132ce:	fb06 2201 	mla	r2, r6, r1, r2
 80132d2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80132d6:	e9c4 3200 	strd	r3, r2, [r4]
 80132da:	b004      	add	sp, #16
 80132dc:	bd70      	pop	{r4, r5, r6, pc}
 80132de:	2002      	movs	r0, #2
 80132e0:	b004      	add	sp, #16
 80132e2:	bd70      	pop	{r4, r5, r6, pc}
 80132e4:	200b      	movs	r0, #11
 80132e6:	4770      	bx	lr
 80132e8:	3b9aca00 	.word	0x3b9aca00
 80132ec:	00000000 	.word	0x00000000

080132f0 <rmw_get_zero_initialized_context>:
 80132f0:	b510      	push	{r4, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	3010      	adds	r0, #16
 80132f6:	f000 f80f 	bl	8013318 <rmw_get_zero_initialized_init_options>
 80132fa:	2300      	movs	r3, #0
 80132fc:	4620      	mov	r0, r4
 80132fe:	60a3      	str	r3, [r4, #8]
 8013300:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013302:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8013304:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8013310 <rmw_get_zero_initialized_context+0x20>
 8013308:	ed84 7b00 	vstr	d7, [r4]
 801330c:	bd10      	pop	{r4, pc}
 801330e:	bf00      	nop
	...

08013318 <rmw_get_zero_initialized_init_options>:
 8013318:	b510      	push	{r4, lr}
 801331a:	4604      	mov	r4, r0
 801331c:	2238      	movs	r2, #56	@ 0x38
 801331e:	2100      	movs	r1, #0
 8013320:	f003 ff68 	bl	80171f4 <memset>
 8013324:	f104 0010 	add.w	r0, r4, #16
 8013328:	f000 f806 	bl	8013338 <rmw_get_default_security_options>
 801332c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013330:	4620      	mov	r0, r4
 8013332:	60e3      	str	r3, [r4, #12]
 8013334:	bd10      	pop	{r4, pc}
 8013336:	bf00      	nop

08013338 <rmw_get_default_security_options>:
 8013338:	2200      	movs	r2, #0
 801333a:	7002      	strb	r2, [r0, #0]
 801333c:	6042      	str	r2, [r0, #4]
 801333e:	4770      	bx	lr

08013340 <rmw_validate_full_topic_name>:
 8013340:	2800      	cmp	r0, #0
 8013342:	d05d      	beq.n	8013400 <rmw_validate_full_topic_name+0xc0>
 8013344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013348:	460d      	mov	r5, r1
 801334a:	2900      	cmp	r1, #0
 801334c:	d05a      	beq.n	8013404 <rmw_validate_full_topic_name+0xc4>
 801334e:	4604      	mov	r4, r0
 8013350:	4616      	mov	r6, r2
 8013352:	f7ec ff7f 	bl	8000254 <strlen>
 8013356:	b150      	cbz	r0, 801336e <rmw_validate_full_topic_name+0x2e>
 8013358:	7823      	ldrb	r3, [r4, #0]
 801335a:	2b2f      	cmp	r3, #47	@ 0x2f
 801335c:	d00e      	beq.n	801337c <rmw_validate_full_topic_name+0x3c>
 801335e:	2302      	movs	r3, #2
 8013360:	602b      	str	r3, [r5, #0]
 8013362:	b146      	cbz	r6, 8013376 <rmw_validate_full_topic_name+0x36>
 8013364:	2300      	movs	r3, #0
 8013366:	4618      	mov	r0, r3
 8013368:	6033      	str	r3, [r6, #0]
 801336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336e:	2301      	movs	r3, #1
 8013370:	602b      	str	r3, [r5, #0]
 8013372:	2e00      	cmp	r6, #0
 8013374:	d1f6      	bne.n	8013364 <rmw_validate_full_topic_name+0x24>
 8013376:	2000      	movs	r0, #0
 8013378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337c:	1e43      	subs	r3, r0, #1
 801337e:	5ce2      	ldrb	r2, [r4, r3]
 8013380:	2a2f      	cmp	r2, #47	@ 0x2f
 8013382:	d041      	beq.n	8013408 <rmw_validate_full_topic_name+0xc8>
 8013384:	1e62      	subs	r2, r4, #1
 8013386:	f1c4 0e01 	rsb	lr, r4, #1
 801338a:	eb02 0800 	add.w	r8, r2, r0
 801338e:	eb0e 0702 	add.w	r7, lr, r2
 8013392:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013396:	f023 0120 	bic.w	r1, r3, #32
 801339a:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801339e:	3941      	subs	r1, #65	@ 0x41
 80133a0:	2919      	cmp	r1, #25
 80133a2:	d90f      	bls.n	80133c4 <rmw_validate_full_topic_name+0x84>
 80133a4:	f1bc 0f0a 	cmp.w	ip, #10
 80133a8:	d90c      	bls.n	80133c4 <rmw_validate_full_topic_name+0x84>
 80133aa:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80133ae:	fab3 f383 	clz	r3, r3
 80133b2:	095b      	lsrs	r3, r3, #5
 80133b4:	b933      	cbnz	r3, 80133c4 <rmw_validate_full_topic_name+0x84>
 80133b6:	2204      	movs	r2, #4
 80133b8:	602a      	str	r2, [r5, #0]
 80133ba:	2e00      	cmp	r6, #0
 80133bc:	d0db      	beq.n	8013376 <rmw_validate_full_topic_name+0x36>
 80133be:	4618      	mov	r0, r3
 80133c0:	6037      	str	r7, [r6, #0]
 80133c2:	e7d2      	b.n	801336a <rmw_validate_full_topic_name+0x2a>
 80133c4:	4542      	cmp	r2, r8
 80133c6:	d1e2      	bne.n	801338e <rmw_validate_full_topic_name+0x4e>
 80133c8:	2301      	movs	r3, #1
 80133ca:	4f1a      	ldr	r7, [pc, #104]	@ (8013434 <rmw_validate_full_topic_name+0xf4>)
 80133cc:	e004      	b.n	80133d8 <rmw_validate_full_topic_name+0x98>
 80133ce:	4298      	cmp	r0, r3
 80133d0:	f104 0401 	add.w	r4, r4, #1
 80133d4:	4613      	mov	r3, r2
 80133d6:	d91c      	bls.n	8013412 <rmw_validate_full_topic_name+0xd2>
 80133d8:	4298      	cmp	r0, r3
 80133da:	f103 0201 	add.w	r2, r3, #1
 80133de:	d0f6      	beq.n	80133ce <rmw_validate_full_topic_name+0x8e>
 80133e0:	7821      	ldrb	r1, [r4, #0]
 80133e2:	292f      	cmp	r1, #47	@ 0x2f
 80133e4:	d1f3      	bne.n	80133ce <rmw_validate_full_topic_name+0x8e>
 80133e6:	7861      	ldrb	r1, [r4, #1]
 80133e8:	292f      	cmp	r1, #47	@ 0x2f
 80133ea:	d01e      	beq.n	801342a <rmw_validate_full_topic_name+0xea>
 80133ec:	5dc9      	ldrb	r1, [r1, r7]
 80133ee:	0749      	lsls	r1, r1, #29
 80133f0:	d5ed      	bpl.n	80133ce <rmw_validate_full_topic_name+0x8e>
 80133f2:	2206      	movs	r2, #6
 80133f4:	602a      	str	r2, [r5, #0]
 80133f6:	2e00      	cmp	r6, #0
 80133f8:	d0bd      	beq.n	8013376 <rmw_validate_full_topic_name+0x36>
 80133fa:	2000      	movs	r0, #0
 80133fc:	6033      	str	r3, [r6, #0]
 80133fe:	e7b4      	b.n	801336a <rmw_validate_full_topic_name+0x2a>
 8013400:	200b      	movs	r0, #11
 8013402:	4770      	bx	lr
 8013404:	200b      	movs	r0, #11
 8013406:	e7b0      	b.n	801336a <rmw_validate_full_topic_name+0x2a>
 8013408:	2203      	movs	r2, #3
 801340a:	602a      	str	r2, [r5, #0]
 801340c:	2e00      	cmp	r6, #0
 801340e:	d1f4      	bne.n	80133fa <rmw_validate_full_topic_name+0xba>
 8013410:	e7b1      	b.n	8013376 <rmw_validate_full_topic_name+0x36>
 8013412:	28f7      	cmp	r0, #247	@ 0xf7
 8013414:	d803      	bhi.n	801341e <rmw_validate_full_topic_name+0xde>
 8013416:	2300      	movs	r3, #0
 8013418:	4618      	mov	r0, r3
 801341a:	602b      	str	r3, [r5, #0]
 801341c:	e7a5      	b.n	801336a <rmw_validate_full_topic_name+0x2a>
 801341e:	2307      	movs	r3, #7
 8013420:	602b      	str	r3, [r5, #0]
 8013422:	2e00      	cmp	r6, #0
 8013424:	d0a7      	beq.n	8013376 <rmw_validate_full_topic_name+0x36>
 8013426:	23f6      	movs	r3, #246	@ 0xf6
 8013428:	e7e7      	b.n	80133fa <rmw_validate_full_topic_name+0xba>
 801342a:	2205      	movs	r2, #5
 801342c:	602a      	str	r2, [r5, #0]
 801342e:	2e00      	cmp	r6, #0
 8013430:	d1e3      	bne.n	80133fa <rmw_validate_full_topic_name+0xba>
 8013432:	e7a0      	b.n	8013376 <rmw_validate_full_topic_name+0x36>
 8013434:	08018c5c 	.word	0x08018c5c

08013438 <get_memory>:
 8013438:	4603      	mov	r3, r0
 801343a:	6840      	ldr	r0, [r0, #4]
 801343c:	b158      	cbz	r0, 8013456 <get_memory+0x1e>
 801343e:	6842      	ldr	r2, [r0, #4]
 8013440:	605a      	str	r2, [r3, #4]
 8013442:	b10a      	cbz	r2, 8013448 <get_memory+0x10>
 8013444:	2100      	movs	r1, #0
 8013446:	6011      	str	r1, [r2, #0]
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	6042      	str	r2, [r0, #4]
 801344c:	b102      	cbz	r2, 8013450 <get_memory+0x18>
 801344e:	6010      	str	r0, [r2, #0]
 8013450:	2200      	movs	r2, #0
 8013452:	6002      	str	r2, [r0, #0]
 8013454:	6018      	str	r0, [r3, #0]
 8013456:	4770      	bx	lr

08013458 <put_memory>:
 8013458:	680b      	ldr	r3, [r1, #0]
 801345a:	b10b      	cbz	r3, 8013460 <put_memory+0x8>
 801345c:	684a      	ldr	r2, [r1, #4]
 801345e:	605a      	str	r2, [r3, #4]
 8013460:	684a      	ldr	r2, [r1, #4]
 8013462:	b102      	cbz	r2, 8013466 <put_memory+0xe>
 8013464:	6013      	str	r3, [r2, #0]
 8013466:	6803      	ldr	r3, [r0, #0]
 8013468:	428b      	cmp	r3, r1
 801346a:	6843      	ldr	r3, [r0, #4]
 801346c:	bf08      	it	eq
 801346e:	6002      	streq	r2, [r0, #0]
 8013470:	604b      	str	r3, [r1, #4]
 8013472:	b103      	cbz	r3, 8013476 <put_memory+0x1e>
 8013474:	6019      	str	r1, [r3, #0]
 8013476:	2300      	movs	r3, #0
 8013478:	600b      	str	r3, [r1, #0]
 801347a:	6041      	str	r1, [r0, #4]
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop

08013480 <rmw_destroy_client>:
 8013480:	b570      	push	{r4, r5, r6, lr}
 8013482:	b128      	cbz	r0, 8013490 <rmw_destroy_client+0x10>
 8013484:	4604      	mov	r4, r0
 8013486:	6800      	ldr	r0, [r0, #0]
 8013488:	460d      	mov	r5, r1
 801348a:	f7fb ff47 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 801348e:	b910      	cbnz	r0, 8013496 <rmw_destroy_client+0x16>
 8013490:	2401      	movs	r4, #1
 8013492:	4620      	mov	r0, r4
 8013494:	bd70      	pop	{r4, r5, r6, pc}
 8013496:	6863      	ldr	r3, [r4, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d0f9      	beq.n	8013490 <rmw_destroy_client+0x10>
 801349c:	2d00      	cmp	r5, #0
 801349e:	d0f7      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134a0:	6828      	ldr	r0, [r5, #0]
 80134a2:	f7fb ff3b 	bl	800f31c <is_uxrce_rmw_identifier_valid>
 80134a6:	2800      	cmp	r0, #0
 80134a8:	d0f2      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134aa:	686e      	ldr	r6, [r5, #4]
 80134ac:	2e00      	cmp	r6, #0
 80134ae:	d0ef      	beq.n	8013490 <rmw_destroy_client+0x10>
 80134b0:	6864      	ldr	r4, [r4, #4]
 80134b2:	6932      	ldr	r2, [r6, #16]
 80134b4:	6920      	ldr	r0, [r4, #16]
 80134b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80134ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134be:	6819      	ldr	r1, [r3, #0]
 80134c0:	f7fc fb12 	bl	800fae8 <uxr_buffer_cancel_data>
 80134c4:	4602      	mov	r2, r0
 80134c6:	6920      	ldr	r0, [r4, #16]
 80134c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80134cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134d0:	f7fb feaa 	bl	800f228 <run_xrce_session>
 80134d4:	6920      	ldr	r0, [r4, #16]
 80134d6:	6932      	ldr	r2, [r6, #16]
 80134d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80134dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134e0:	6819      	ldr	r1, [r3, #0]
 80134e2:	f7fc f977 	bl	800f7d4 <uxr_buffer_delete_entity>
 80134e6:	4602      	mov	r2, r0
 80134e8:	6920      	ldr	r0, [r4, #16]
 80134ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80134ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80134f2:	f7fb fe99 	bl	800f228 <run_xrce_session>
 80134f6:	4603      	mov	r3, r0
 80134f8:	4628      	mov	r0, r5
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	bf14      	ite	ne
 80134fe:	2400      	movne	r4, #0
 8013500:	2402      	moveq	r4, #2
 8013502:	f7fb fe15 	bl	800f130 <rmw_uxrce_fini_client_memory>
 8013506:	e7c4      	b.n	8013492 <rmw_destroy_client+0x12>

08013508 <rmw_get_implementation_identifier>:
 8013508:	4b01      	ldr	r3, [pc, #4]	@ (8013510 <rmw_get_implementation_identifier+0x8>)
 801350a:	6818      	ldr	r0, [r3, #0]
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	0801899c 	.word	0x0801899c

08013514 <rmw_create_guard_condition>:
 8013514:	b538      	push	{r3, r4, r5, lr}
 8013516:	4605      	mov	r5, r0
 8013518:	4808      	ldr	r0, [pc, #32]	@ (801353c <rmw_create_guard_condition+0x28>)
 801351a:	f7ff ff8d 	bl	8013438 <get_memory>
 801351e:	4603      	mov	r3, r0
 8013520:	b148      	cbz	r0, 8013536 <rmw_create_guard_condition+0x22>
 8013522:	6884      	ldr	r4, [r0, #8]
 8013524:	2300      	movs	r3, #0
 8013526:	61e5      	str	r5, [r4, #28]
 8013528:	7423      	strb	r3, [r4, #16]
 801352a:	f7ff ffed 	bl	8013508 <rmw_get_implementation_identifier>
 801352e:	f104 0314 	add.w	r3, r4, #20
 8013532:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013536:	4618      	mov	r0, r3
 8013538:	bd38      	pop	{r3, r4, r5, pc}
 801353a:	bf00      	nop
 801353c:	20012434 	.word	0x20012434

08013540 <rmw_destroy_guard_condition>:
 8013540:	b508      	push	{r3, lr}
 8013542:	4b08      	ldr	r3, [pc, #32]	@ (8013564 <rmw_destroy_guard_condition+0x24>)
 8013544:	6819      	ldr	r1, [r3, #0]
 8013546:	b911      	cbnz	r1, 801354e <rmw_destroy_guard_condition+0xe>
 8013548:	e00a      	b.n	8013560 <rmw_destroy_guard_condition+0x20>
 801354a:	6849      	ldr	r1, [r1, #4]
 801354c:	b141      	cbz	r1, 8013560 <rmw_destroy_guard_condition+0x20>
 801354e:	688b      	ldr	r3, [r1, #8]
 8013550:	3314      	adds	r3, #20
 8013552:	4298      	cmp	r0, r3
 8013554:	d1f9      	bne.n	801354a <rmw_destroy_guard_condition+0xa>
 8013556:	4803      	ldr	r0, [pc, #12]	@ (8013564 <rmw_destroy_guard_condition+0x24>)
 8013558:	f7ff ff7e 	bl	8013458 <put_memory>
 801355c:	2000      	movs	r0, #0
 801355e:	bd08      	pop	{r3, pc}
 8013560:	2001      	movs	r0, #1
 8013562:	bd08      	pop	{r3, pc}
 8013564:	20012434 	.word	0x20012434

08013568 <rmw_init_options_init>:
 8013568:	b084      	sub	sp, #16
 801356a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801356c:	b083      	sub	sp, #12
 801356e:	ad09      	add	r5, sp, #36	@ 0x24
 8013570:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013574:	b130      	cbz	r0, 8013584 <rmw_init_options_init+0x1c>
 8013576:	4604      	mov	r4, r0
 8013578:	4628      	mov	r0, r5
 801357a:	f7fa fdf1 	bl	800e160 <rcutils_allocator_is_valid>
 801357e:	b108      	cbz	r0, 8013584 <rmw_init_options_init+0x1c>
 8013580:	68a6      	ldr	r6, [r4, #8]
 8013582:	b12e      	cbz	r6, 8013590 <rmw_init_options_init+0x28>
 8013584:	200b      	movs	r0, #11
 8013586:	b003      	add	sp, #12
 8013588:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801358c:	b004      	add	sp, #16
 801358e:	4770      	bx	lr
 8013590:	2200      	movs	r2, #0
 8013592:	2300      	movs	r3, #0
 8013594:	f104 0c20 	add.w	ip, r4, #32
 8013598:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8013634 <rmw_init_options_init+0xcc>
 801359c:	466f      	mov	r7, sp
 801359e:	e9c4 2300 	strd	r2, r3, [r4]
 80135a2:	4b20      	ldr	r3, [pc, #128]	@ (8013624 <rmw_init_options_init+0xbc>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	60a3      	str	r3, [r4, #8]
 80135a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ae:	682b      	ldr	r3, [r5, #0]
 80135b0:	4638      	mov	r0, r7
 80135b2:	f8cc 3000 	str.w	r3, [ip]
 80135b6:	f8c4 e01c 	str.w	lr, [r4, #28]
 80135ba:	60e6      	str	r6, [r4, #12]
 80135bc:	f7ff febc 	bl	8013338 <rmw_get_default_security_options>
 80135c0:	f104 0310 	add.w	r3, r4, #16
 80135c4:	2203      	movs	r2, #3
 80135c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80135ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80135ce:	4816      	ldr	r0, [pc, #88]	@ (8013628 <rmw_init_options_init+0xc0>)
 80135d0:	4916      	ldr	r1, [pc, #88]	@ (801362c <rmw_init_options_init+0xc4>)
 80135d2:	7626      	strb	r6, [r4, #24]
 80135d4:	f7fb fcec 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 80135d8:	4813      	ldr	r0, [pc, #76]	@ (8013628 <rmw_init_options_init+0xc0>)
 80135da:	f7ff ff2d 	bl	8013438 <get_memory>
 80135de:	b1f0      	cbz	r0, 801361e <rmw_init_options_init+0xb6>
 80135e0:	4a13      	ldr	r2, [pc, #76]	@ (8013630 <rmw_init_options_init+0xc8>)
 80135e2:	6883      	ldr	r3, [r0, #8]
 80135e4:	6851      	ldr	r1, [r2, #4]
 80135e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80135e8:	7810      	ldrb	r0, [r2, #0]
 80135ea:	6159      	str	r1, [r3, #20]
 80135ec:	68d1      	ldr	r1, [r2, #12]
 80135ee:	7418      	strb	r0, [r3, #16]
 80135f0:	61d9      	str	r1, [r3, #28]
 80135f2:	6911      	ldr	r1, [r2, #16]
 80135f4:	6219      	str	r1, [r3, #32]
 80135f6:	6951      	ldr	r1, [r2, #20]
 80135f8:	6892      	ldr	r2, [r2, #8]
 80135fa:	6259      	str	r1, [r3, #36]	@ 0x24
 80135fc:	619a      	str	r2, [r3, #24]
 80135fe:	f7fd fd67 	bl	80110d0 <uxr_nanos>
 8013602:	f003 fa4b 	bl	8016a9c <srand>
 8013606:	f003 fa77 	bl	8016af8 <rand>
 801360a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801360c:	6298      	str	r0, [r3, #40]	@ 0x28
 801360e:	2800      	cmp	r0, #0
 8013610:	d0f9      	beq.n	8013606 <rmw_init_options_init+0x9e>
 8013612:	2000      	movs	r0, #0
 8013614:	b003      	add	sp, #12
 8013616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801361a:	b004      	add	sp, #16
 801361c:	4770      	bx	lr
 801361e:	2001      	movs	r0, #1
 8013620:	e7b1      	b.n	8013586 <rmw_init_options_init+0x1e>
 8013622:	bf00      	nop
 8013624:	0801899c 	.word	0x0801899c
 8013628:	20012444 	.word	0x20012444
 801362c:	2000dce0 	.word	0x2000dce0
 8013630:	2000db2c 	.word	0x2000db2c
 8013634:	080181cc 	.word	0x080181cc

08013638 <rmw_init_options_copy>:
 8013638:	2800      	cmp	r0, #0
 801363a:	d047      	beq.n	80136cc <rmw_init_options_copy+0x94>
 801363c:	b570      	push	{r4, r5, r6, lr}
 801363e:	460d      	mov	r5, r1
 8013640:	b149      	cbz	r1, 8013656 <rmw_init_options_copy+0x1e>
 8013642:	4604      	mov	r4, r0
 8013644:	6880      	ldr	r0, [r0, #8]
 8013646:	b120      	cbz	r0, 8013652 <rmw_init_options_copy+0x1a>
 8013648:	4b22      	ldr	r3, [pc, #136]	@ (80136d4 <rmw_init_options_copy+0x9c>)
 801364a:	6819      	ldr	r1, [r3, #0]
 801364c:	f7ec fdf8 	bl	8000240 <strcmp>
 8013650:	bba8      	cbnz	r0, 80136be <rmw_init_options_copy+0x86>
 8013652:	68ab      	ldr	r3, [r5, #8]
 8013654:	b11b      	cbz	r3, 801365e <rmw_init_options_copy+0x26>
 8013656:	f04f 0c0b 	mov.w	ip, #11
 801365a:	4660      	mov	r0, ip
 801365c:	bd70      	pop	{r4, r5, r6, pc}
 801365e:	4623      	mov	r3, r4
 8013660:	462a      	mov	r2, r5
 8013662:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8013666:	f8d3 e000 	ldr.w	lr, [r3]
 801366a:	3310      	adds	r3, #16
 801366c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8013670:	3210      	adds	r2, #16
 8013672:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8013676:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801367a:	42b3      	cmp	r3, r6
 801367c:	f842 ec10 	str.w	lr, [r2, #-16]
 8013680:	f842 cc0c 	str.w	ip, [r2, #-12]
 8013684:	f842 0c08 	str.w	r0, [r2, #-8]
 8013688:	f842 1c04 	str.w	r1, [r2, #-4]
 801368c:	d1eb      	bne.n	8013666 <rmw_init_options_copy+0x2e>
 801368e:	6819      	ldr	r1, [r3, #0]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	4811      	ldr	r0, [pc, #68]	@ (80136d8 <rmw_init_options_copy+0xa0>)
 8013694:	6011      	str	r1, [r2, #0]
 8013696:	6053      	str	r3, [r2, #4]
 8013698:	f7ff fece 	bl	8013438 <get_memory>
 801369c:	b198      	cbz	r0, 80136c6 <rmw_init_options_copy+0x8e>
 801369e:	6883      	ldr	r3, [r0, #8]
 80136a0:	f04f 0c00 	mov.w	ip, #0
 80136a4:	636b      	str	r3, [r5, #52]	@ 0x34
 80136a6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80136a8:	f103 0410 	add.w	r4, r3, #16
 80136ac:	3510      	adds	r5, #16
 80136ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80136b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136ba:	4660      	mov	r0, ip
 80136bc:	bd70      	pop	{r4, r5, r6, pc}
 80136be:	f04f 0c0c 	mov.w	ip, #12
 80136c2:	4660      	mov	r0, ip
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
 80136c6:	f04f 0c01 	mov.w	ip, #1
 80136ca:	e7c6      	b.n	801365a <rmw_init_options_copy+0x22>
 80136cc:	f04f 0c0b 	mov.w	ip, #11
 80136d0:	4660      	mov	r0, ip
 80136d2:	4770      	bx	lr
 80136d4:	0801899c 	.word	0x0801899c
 80136d8:	20012444 	.word	0x20012444

080136dc <rmw_init_options_fini>:
 80136dc:	b510      	push	{r4, lr}
 80136de:	b08e      	sub	sp, #56	@ 0x38
 80136e0:	b388      	cbz	r0, 8013746 <rmw_init_options_fini+0x6a>
 80136e2:	4604      	mov	r4, r0
 80136e4:	3020      	adds	r0, #32
 80136e6:	f7fa fd3b 	bl	800e160 <rcutils_allocator_is_valid>
 80136ea:	b360      	cbz	r0, 8013746 <rmw_init_options_fini+0x6a>
 80136ec:	68a0      	ldr	r0, [r4, #8]
 80136ee:	b120      	cbz	r0, 80136fa <rmw_init_options_fini+0x1e>
 80136f0:	4b1a      	ldr	r3, [pc, #104]	@ (801375c <rmw_init_options_fini+0x80>)
 80136f2:	6819      	ldr	r1, [r3, #0]
 80136f4:	f7ec fda4 	bl	8000240 <strcmp>
 80136f8:	bb68      	cbnz	r0, 8013756 <rmw_init_options_fini+0x7a>
 80136fa:	4b19      	ldr	r3, [pc, #100]	@ (8013760 <rmw_init_options_fini+0x84>)
 80136fc:	6819      	ldr	r1, [r3, #0]
 80136fe:	b331      	cbz	r1, 801374e <rmw_init_options_fini+0x72>
 8013700:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013702:	e001      	b.n	8013708 <rmw_init_options_fini+0x2c>
 8013704:	6849      	ldr	r1, [r1, #4]
 8013706:	b311      	cbz	r1, 801374e <rmw_init_options_fini+0x72>
 8013708:	688b      	ldr	r3, [r1, #8]
 801370a:	429a      	cmp	r2, r3
 801370c:	d1fa      	bne.n	8013704 <rmw_init_options_fini+0x28>
 801370e:	4814      	ldr	r0, [pc, #80]	@ (8013760 <rmw_init_options_fini+0x84>)
 8013710:	f7ff fea2 	bl	8013458 <put_memory>
 8013714:	4668      	mov	r0, sp
 8013716:	f7ff fdff 	bl	8013318 <rmw_get_zero_initialized_init_options>
 801371a:	46ee      	mov	lr, sp
 801371c:	46a4      	mov	ip, r4
 801371e:	2400      	movs	r4, #0
 8013720:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013724:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013728:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801372c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013730:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013738:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801373c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013740:	4620      	mov	r0, r4
 8013742:	b00e      	add	sp, #56	@ 0x38
 8013744:	bd10      	pop	{r4, pc}
 8013746:	240b      	movs	r4, #11
 8013748:	4620      	mov	r0, r4
 801374a:	b00e      	add	sp, #56	@ 0x38
 801374c:	bd10      	pop	{r4, pc}
 801374e:	2401      	movs	r4, #1
 8013750:	4620      	mov	r0, r4
 8013752:	b00e      	add	sp, #56	@ 0x38
 8013754:	bd10      	pop	{r4, pc}
 8013756:	240c      	movs	r4, #12
 8013758:	e7f2      	b.n	8013740 <rmw_init_options_fini+0x64>
 801375a:	bf00      	nop
 801375c:	0801899c 	.word	0x0801899c
 8013760:	20012444 	.word	0x20012444

08013764 <rmw_init>:
 8013764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013768:	b083      	sub	sp, #12
 801376a:	2800      	cmp	r0, #0
 801376c:	f000 80d3 	beq.w	8013916 <rmw_init+0x1b2>
 8013770:	460e      	mov	r6, r1
 8013772:	2900      	cmp	r1, #0
 8013774:	f000 80cf 	beq.w	8013916 <rmw_init+0x1b2>
 8013778:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801377a:	4605      	mov	r5, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	f000 80ca 	beq.w	8013916 <rmw_init+0x1b2>
 8013782:	4b78      	ldr	r3, [pc, #480]	@ (8013964 <rmw_init+0x200>)
 8013784:	6880      	ldr	r0, [r0, #8]
 8013786:	681f      	ldr	r7, [r3, #0]
 8013788:	b128      	cbz	r0, 8013796 <rmw_init+0x32>
 801378a:	4639      	mov	r1, r7
 801378c:	f7ec fd58 	bl	8000240 <strcmp>
 8013790:	2800      	cmp	r0, #0
 8013792:	f040 80ca 	bne.w	801392a <rmw_init+0x1c6>
 8013796:	4c74      	ldr	r4, [pc, #464]	@ (8013968 <rmw_init+0x204>)
 8013798:	f04f 0800 	mov.w	r8, #0
 801379c:	4973      	ldr	r1, [pc, #460]	@ (801396c <rmw_init+0x208>)
 801379e:	4874      	ldr	r0, [pc, #464]	@ (8013970 <rmw_init+0x20c>)
 80137a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80137a4:	60b7      	str	r7, [r6, #8]
 80137a6:	e9c6 2300 	strd	r2, r3, [r6]
 80137aa:	68eb      	ldr	r3, [r5, #12]
 80137ac:	2201      	movs	r2, #1
 80137ae:	64b3      	str	r3, [r6, #72]	@ 0x48
 80137b0:	f7fb fb9e 	bl	800eef0 <rmw_uxrce_init_session_memory>
 80137b4:	4620      	mov	r0, r4
 80137b6:	2204      	movs	r2, #4
 80137b8:	496e      	ldr	r1, [pc, #440]	@ (8013974 <rmw_init+0x210>)
 80137ba:	f7fb fbd9 	bl	800ef70 <rmw_uxrce_init_static_input_buffer_memory>
 80137be:	486c      	ldr	r0, [pc, #432]	@ (8013970 <rmw_init+0x20c>)
 80137c0:	f884 800d 	strb.w	r8, [r4, #13]
 80137c4:	f7ff fe38 	bl	8013438 <get_memory>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	f000 80a9 	beq.w	8013920 <rmw_init+0x1bc>
 80137ce:	6884      	ldr	r4, [r0, #8]
 80137d0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80137d2:	f104 0910 	add.w	r9, r4, #16
 80137d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80137d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80137dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80137e0:	9101      	str	r1, [sp, #4]
 80137e2:	4661      	mov	r1, ip
 80137e4:	6a00      	ldr	r0, [r0, #32]
 80137e6:	9000      	str	r0, [sp, #0]
 80137e8:	4648      	mov	r0, r9
 80137ea:	f001 fab3 	bl	8014d54 <uxr_set_custom_transport_callbacks>
 80137ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80137f2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80137f6:	4960      	ldr	r1, [pc, #384]	@ (8013978 <rmw_init+0x214>)
 80137f8:	4860      	ldr	r0, [pc, #384]	@ (801397c <rmw_init+0x218>)
 80137fa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80137fe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8013802:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8013806:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801380a:	2201      	movs	r2, #1
 801380c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8013810:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8013814:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8013818:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801381c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801381e:	f7fb fb47 	bl	800eeb0 <rmw_uxrce_init_node_memory>
 8013822:	2205      	movs	r2, #5
 8013824:	4956      	ldr	r1, [pc, #344]	@ (8013980 <rmw_init+0x21c>)
 8013826:	4857      	ldr	r0, [pc, #348]	@ (8013984 <rmw_init+0x220>)
 8013828:	f7fb fb22 	bl	800ee70 <rmw_uxrce_init_subscription_memory>
 801382c:	220a      	movs	r2, #10
 801382e:	4956      	ldr	r1, [pc, #344]	@ (8013988 <rmw_init+0x224>)
 8013830:	4856      	ldr	r0, [pc, #344]	@ (801398c <rmw_init+0x228>)
 8013832:	f7fb fafd 	bl	800ee30 <rmw_uxrce_init_publisher_memory>
 8013836:	2201      	movs	r2, #1
 8013838:	4955      	ldr	r1, [pc, #340]	@ (8013990 <rmw_init+0x22c>)
 801383a:	4856      	ldr	r0, [pc, #344]	@ (8013994 <rmw_init+0x230>)
 801383c:	f7fb fab8 	bl	800edb0 <rmw_uxrce_init_service_memory>
 8013840:	2201      	movs	r2, #1
 8013842:	4955      	ldr	r1, [pc, #340]	@ (8013998 <rmw_init+0x234>)
 8013844:	4855      	ldr	r0, [pc, #340]	@ (801399c <rmw_init+0x238>)
 8013846:	f7fb fad3 	bl	800edf0 <rmw_uxrce_init_client_memory>
 801384a:	220f      	movs	r2, #15
 801384c:	4954      	ldr	r1, [pc, #336]	@ (80139a0 <rmw_init+0x23c>)
 801384e:	4855      	ldr	r0, [pc, #340]	@ (80139a4 <rmw_init+0x240>)
 8013850:	f7fb fb6e 	bl	800ef30 <rmw_uxrce_init_topic_memory>
 8013854:	2203      	movs	r2, #3
 8013856:	4954      	ldr	r1, [pc, #336]	@ (80139a8 <rmw_init+0x244>)
 8013858:	4854      	ldr	r0, [pc, #336]	@ (80139ac <rmw_init+0x248>)
 801385a:	f7fb fba9 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 801385e:	2204      	movs	r2, #4
 8013860:	4953      	ldr	r1, [pc, #332]	@ (80139b0 <rmw_init+0x24c>)
 8013862:	4854      	ldr	r0, [pc, #336]	@ (80139b4 <rmw_init+0x250>)
 8013864:	f7fb fbc4 	bl	800eff0 <rmw_uxrce_init_wait_set_memory>
 8013868:	4953      	ldr	r1, [pc, #332]	@ (80139b8 <rmw_init+0x254>)
 801386a:	4854      	ldr	r0, [pc, #336]	@ (80139bc <rmw_init+0x258>)
 801386c:	2204      	movs	r2, #4
 801386e:	f7fb fbdf 	bl	800f030 <rmw_uxrce_init_guard_condition_memory>
 8013872:	4642      	mov	r2, r8
 8013874:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8013876:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8013878:	f000 f94e 	bl	8013b18 <rmw_uxrce_transport_init>
 801387c:	4607      	mov	r7, r0
 801387e:	2800      	cmp	r0, #0
 8013880:	d158      	bne.n	8013934 <rmw_init+0x1d0>
 8013882:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8013884:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8013888:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801388c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801388e:	4628      	mov	r0, r5
 8013890:	f7fc faae 	bl	800fdf0 <uxr_init_session>
 8013894:	4622      	mov	r2, r4
 8013896:	494a      	ldr	r1, [pc, #296]	@ (80139c0 <rmw_init+0x25c>)
 8013898:	4628      	mov	r0, r5
 801389a:	f7fc facd 	bl	800fe38 <uxr_set_topic_callback>
 801389e:	463a      	mov	r2, r7
 80138a0:	4948      	ldr	r1, [pc, #288]	@ (80139c4 <rmw_init+0x260>)
 80138a2:	4628      	mov	r0, r5
 80138a4:	f7fc fac4 	bl	800fe30 <uxr_set_status_callback>
 80138a8:	463a      	mov	r2, r7
 80138aa:	4947      	ldr	r1, [pc, #284]	@ (80139c8 <rmw_init+0x264>)
 80138ac:	4628      	mov	r0, r5
 80138ae:	f7fc fac7 	bl	800fe40 <uxr_set_request_callback>
 80138b2:	463a      	mov	r2, r7
 80138b4:	4945      	ldr	r1, [pc, #276]	@ (80139cc <rmw_init+0x268>)
 80138b6:	4628      	mov	r0, r5
 80138b8:	f7fc fac6 	bl	800fe48 <uxr_set_reply_callback>
 80138bc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80138c0:	2304      	movs	r3, #4
 80138c2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80138c6:	0092      	lsls	r2, r2, #2
 80138c8:	4628      	mov	r0, r5
 80138ca:	f7fc fafd 	bl	800fec8 <uxr_create_input_reliable_stream>
 80138ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80138d2:	2304      	movs	r3, #4
 80138d4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80138d8:	0092      	lsls	r2, r2, #2
 80138da:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80138de:	4628      	mov	r0, r5
 80138e0:	f7fc fac8 	bl	800fe74 <uxr_create_output_reliable_stream>
 80138e4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80138e8:	4628      	mov	r0, r5
 80138ea:	f7fc fae7 	bl	800febc <uxr_create_input_best_effort_stream>
 80138ee:	f241 3194 	movw	r1, #5012	@ 0x1394
 80138f2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80138f6:	4628      	mov	r0, r5
 80138f8:	4421      	add	r1, r4
 80138fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80138fe:	f7fc faa7 	bl	800fe50 <uxr_create_output_best_effort_stream>
 8013902:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8013906:	4628      	mov	r0, r5
 8013908:	f7fc fff6 	bl	80108f8 <uxr_create_session>
 801390c:	b1f8      	cbz	r0, 801394e <rmw_init+0x1ea>
 801390e:	4638      	mov	r0, r7
 8013910:	b003      	add	sp, #12
 8013912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013916:	270b      	movs	r7, #11
 8013918:	4638      	mov	r0, r7
 801391a:	b003      	add	sp, #12
 801391c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013920:	2701      	movs	r7, #1
 8013922:	4638      	mov	r0, r7
 8013924:	b003      	add	sp, #12
 8013926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801392a:	270c      	movs	r7, #12
 801392c:	4638      	mov	r0, r7
 801392e:	b003      	add	sp, #12
 8013930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013934:	4648      	mov	r0, r9
 8013936:	f001 fa4b 	bl	8014dd0 <uxr_close_custom_transport>
 801393a:	4621      	mov	r1, r4
 801393c:	480c      	ldr	r0, [pc, #48]	@ (8013970 <rmw_init+0x20c>)
 801393e:	f7ff fd8b 	bl	8013458 <put_memory>
 8013942:	4638      	mov	r0, r7
 8013944:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8013948:	b003      	add	sp, #12
 801394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801394e:	4648      	mov	r0, r9
 8013950:	f001 fa3e 	bl	8014dd0 <uxr_close_custom_transport>
 8013954:	4621      	mov	r1, r4
 8013956:	4806      	ldr	r0, [pc, #24]	@ (8013970 <rmw_init+0x20c>)
 8013958:	f7ff fd7e 	bl	8013458 <put_memory>
 801395c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801395e:	2701      	movs	r7, #1
 8013960:	e7d5      	b.n	801390e <rmw_init+0x1aa>
 8013962:	bf00      	nop
 8013964:	0801899c 	.word	0x0801899c
 8013968:	20012494 	.word	0x20012494
 801396c:	2000e740 	.word	0x2000e740
 8013970:	20012484 	.word	0x20012484
 8013974:	2000fce8 	.word	0x2000fce8
 8013978:	2000dd64 	.word	0x2000dd64
 801397c:	20012454 	.word	0x20012454
 8013980:	20011de8 	.word	0x20011de8
 8013984:	200124a4 	.word	0x200124a4
 8013988:	2000de08 	.word	0x2000de08
 801398c:	20012464 	.word	0x20012464
 8013990:	2000e678 	.word	0x2000e678
 8013994:	20012474 	.word	0x20012474
 8013998:	2000db98 	.word	0x2000db98
 801399c:	2000db84 	.word	0x2000db84
 80139a0:	20012220 	.word	0x20012220
 80139a4:	200124b4 	.word	0x200124b4
 80139a8:	2000dce0 	.word	0x2000dce0
 80139ac:	20012444 	.word	0x20012444
 80139b0:	200123c4 	.word	0x200123c4
 80139b4:	200124c4 	.word	0x200124c4
 80139b8:	2000dc60 	.word	0x2000dc60
 80139bc:	20012434 	.word	0x20012434
 80139c0:	0801666d 	.word	0x0801666d
 80139c4:	08016665 	.word	0x08016665
 80139c8:	08016705 	.word	0x08016705
 80139cc:	080167a1 	.word	0x080167a1

080139d0 <rmw_context_fini>:
 80139d0:	4b17      	ldr	r3, [pc, #92]	@ (8013a30 <rmw_context_fini+0x60>)
 80139d2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	681c      	ldr	r4, [r3, #0]
 80139d8:	4605      	mov	r5, r0
 80139da:	b334      	cbz	r4, 8013a2a <rmw_context_fini+0x5a>
 80139dc:	2600      	movs	r6, #0
 80139de:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80139e2:	6902      	ldr	r2, [r0, #16]
 80139e4:	428a      	cmp	r2, r1
 80139e6:	d018      	beq.n	8013a1a <rmw_context_fini+0x4a>
 80139e8:	2c00      	cmp	r4, #0
 80139ea:	d1f8      	bne.n	80139de <rmw_context_fini+0xe>
 80139ec:	b189      	cbz	r1, 8013a12 <rmw_context_fini+0x42>
 80139ee:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80139f2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80139f6:	789b      	ldrb	r3, [r3, #2]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	bf14      	ite	ne
 80139fc:	210a      	movne	r1, #10
 80139fe:	2100      	moveq	r1, #0
 8013a00:	f7fc ff52 	bl	80108a8 <uxr_delete_session_retries>
 8013a04:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013a06:	f7fb fb33 	bl	800f070 <rmw_uxrce_fini_session_memory>
 8013a0a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8013a0c:	3010      	adds	r0, #16
 8013a0e:	f001 f9df 	bl	8014dd0 <uxr_close_custom_transport>
 8013a12:	2300      	movs	r3, #0
 8013a14:	4630      	mov	r0, r6
 8013a16:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8013a18:	bd70      	pop	{r4, r5, r6, pc}
 8013a1a:	3018      	adds	r0, #24
 8013a1c:	f7fa feee 	bl	800e7fc <rmw_destroy_node>
 8013a20:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8013a22:	4606      	mov	r6, r0
 8013a24:	2c00      	cmp	r4, #0
 8013a26:	d1da      	bne.n	80139de <rmw_context_fini+0xe>
 8013a28:	e7e0      	b.n	80139ec <rmw_context_fini+0x1c>
 8013a2a:	4626      	mov	r6, r4
 8013a2c:	e7de      	b.n	80139ec <rmw_context_fini+0x1c>
 8013a2e:	bf00      	nop
 8013a30:	20012454 	.word	0x20012454

08013a34 <create_topic>:
 8013a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a38:	4605      	mov	r5, r0
 8013a3a:	b084      	sub	sp, #16
 8013a3c:	4822      	ldr	r0, [pc, #136]	@ (8013ac8 <create_topic+0x94>)
 8013a3e:	460f      	mov	r7, r1
 8013a40:	4616      	mov	r6, r2
 8013a42:	f7ff fcf9 	bl	8013438 <get_memory>
 8013a46:	4604      	mov	r4, r0
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d039      	beq.n	8013ac0 <create_topic+0x8c>
 8013a4c:	692b      	ldr	r3, [r5, #16]
 8013a4e:	2102      	movs	r1, #2
 8013a50:	6884      	ldr	r4, [r0, #8]
 8013a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013a56:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8013ad0 <create_topic+0x9c>
 8013a5a:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013a5e:	1c42      	adds	r2, r0, #1
 8013a60:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8013a64:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013a68:	f7fc f80e 	bl	800fa88 <uxr_object_id>
 8013a6c:	223c      	movs	r2, #60	@ 0x3c
 8013a6e:	6120      	str	r0, [r4, #16]
 8013a70:	4641      	mov	r1, r8
 8013a72:	4638      	mov	r0, r7
 8013a74:	f7fb fc3a 	bl	800f2ec <generate_topic_name>
 8013a78:	b1f0      	cbz	r0, 8013ab8 <create_topic+0x84>
 8013a7a:	4f14      	ldr	r7, [pc, #80]	@ (8013acc <create_topic+0x98>)
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	2264      	movs	r2, #100	@ 0x64
 8013a80:	4639      	mov	r1, r7
 8013a82:	f7fb fc05 	bl	800f290 <generate_type_name>
 8013a86:	b1b8      	cbz	r0, 8013ab8 <create_topic+0x84>
 8013a88:	6928      	ldr	r0, [r5, #16]
 8013a8a:	2106      	movs	r1, #6
 8013a8c:	696b      	ldr	r3, [r5, #20]
 8013a8e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013a92:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a96:	f8cd 8000 	str.w	r8, [sp]
 8013a9a:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8013a9e:	6811      	ldr	r1, [r2, #0]
 8013aa0:	6922      	ldr	r2, [r4, #16]
 8013aa2:	f7fb ff15 	bl	800f8d0 <uxr_buffer_create_topic_bin>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	6928      	ldr	r0, [r5, #16]
 8013aaa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013aae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013ab2:	f7fb fbb9 	bl	800f228 <run_xrce_session>
 8013ab6:	b918      	cbnz	r0, 8013ac0 <create_topic+0x8c>
 8013ab8:	4620      	mov	r0, r4
 8013aba:	2400      	movs	r4, #0
 8013abc:	f7fb fb4e 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	b004      	add	sp, #16
 8013ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ac8:	200124b4 	.word	0x200124b4
 8013acc:	20012544 	.word	0x20012544
 8013ad0:	20012508 	.word	0x20012508

08013ad4 <destroy_topic>:
 8013ad4:	b538      	push	{r3, r4, r5, lr}
 8013ad6:	6985      	ldr	r5, [r0, #24]
 8013ad8:	b1dd      	cbz	r5, 8013b12 <destroy_topic+0x3e>
 8013ada:	4604      	mov	r4, r0
 8013adc:	6928      	ldr	r0, [r5, #16]
 8013ade:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013ae2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013ae6:	6922      	ldr	r2, [r4, #16]
 8013ae8:	6819      	ldr	r1, [r3, #0]
 8013aea:	f7fb fe73 	bl	800f7d4 <uxr_buffer_delete_entity>
 8013aee:	4602      	mov	r2, r0
 8013af0:	6928      	ldr	r0, [r5, #16]
 8013af2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013af6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013afa:	f7fb fb95 	bl	800f228 <run_xrce_session>
 8013afe:	4603      	mov	r3, r0
 8013b00:	4620      	mov	r0, r4
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	bf14      	ite	ne
 8013b06:	2400      	movne	r4, #0
 8013b08:	2402      	moveq	r4, #2
 8013b0a:	f7fb fb27 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8013b0e:	4620      	mov	r0, r4
 8013b10:	bd38      	pop	{r3, r4, r5, pc}
 8013b12:	2401      	movs	r4, #1
 8013b14:	4620      	mov	r0, r4
 8013b16:	bd38      	pop	{r3, r4, r5, pc}

08013b18 <rmw_uxrce_transport_init>:
 8013b18:	b508      	push	{r3, lr}
 8013b1a:	b108      	cbz	r0, 8013b20 <rmw_uxrce_transport_init+0x8>
 8013b1c:	f100 0210 	add.w	r2, r0, #16
 8013b20:	b139      	cbz	r1, 8013b32 <rmw_uxrce_transport_init+0x1a>
 8013b22:	6949      	ldr	r1, [r1, #20]
 8013b24:	4610      	mov	r0, r2
 8013b26:	f001 f91f 	bl	8014d68 <uxr_init_custom_transport>
 8013b2a:	f080 0001 	eor.w	r0, r0, #1
 8013b2e:	b2c0      	uxtb	r0, r0
 8013b30:	bd08      	pop	{r3, pc}
 8013b32:	4b04      	ldr	r3, [pc, #16]	@ (8013b44 <rmw_uxrce_transport_init+0x2c>)
 8013b34:	4610      	mov	r0, r2
 8013b36:	6859      	ldr	r1, [r3, #4]
 8013b38:	f001 f916 	bl	8014d68 <uxr_init_custom_transport>
 8013b3c:	f080 0001 	eor.w	r0, r0, #1
 8013b40:	b2c0      	uxtb	r0, r0
 8013b42:	bd08      	pop	{r3, pc}
 8013b44:	2000db2c 	.word	0x2000db2c

08013b48 <rmw_uros_epoch_nanos>:
 8013b48:	4b05      	ldr	r3, [pc, #20]	@ (8013b60 <rmw_uros_epoch_nanos+0x18>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	b123      	cbz	r3, 8013b58 <rmw_uros_epoch_nanos+0x10>
 8013b4e:	6898      	ldr	r0, [r3, #8]
 8013b50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013b54:	f7fc b9d4 	b.w	800ff00 <uxr_epoch_nanos>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	20012484 	.word	0x20012484

08013b64 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b68:	6805      	ldr	r5, [r0, #0]
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	460e      	mov	r6, r1
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7ec fb66 	bl	8000240 <strcmp>
 8013b74:	b1c8      	cbz	r0, 8013baa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013b76:	4b11      	ldr	r3, [pc, #68]	@ (8013bbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	429d      	cmp	r5, r3
 8013b7c:	d112      	bne.n	8013ba4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b7e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013b82:	f8d8 4000 	ldr.w	r4, [r8]
 8013b86:	b16c      	cbz	r4, 8013ba4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013b88:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013b8c:	2700      	movs	r7, #0
 8013b8e:	3d04      	subs	r5, #4
 8013b90:	4631      	mov	r1, r6
 8013b92:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013b96:	f7ec fb53 	bl	8000240 <strcmp>
 8013b9a:	00bb      	lsls	r3, r7, #2
 8013b9c:	b140      	cbz	r0, 8013bb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013b9e:	3701      	adds	r7, #1
 8013ba0:	42bc      	cmp	r4, r7
 8013ba2:	d1f5      	bne.n	8013b90 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013baa:	4620      	mov	r0, r4
 8013bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb8:	58d3      	ldr	r3, [r2, r3]
 8013bba:	4718      	bx	r3
 8013bbc:	200001ac 	.word	0x200001ac

08013bc0 <std_msgs__msg__String__init>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	b128      	cbz	r0, 8013bd2 <std_msgs__msg__String__init+0x12>
 8013bc6:	f7fb fbc3 	bl	800f350 <rosidl_runtime_c__String__init>
 8013bca:	4605      	mov	r5, r0
 8013bcc:	b120      	cbz	r0, 8013bd8 <std_msgs__msg__String__init+0x18>
 8013bce:	4628      	mov	r0, r5
 8013bd0:	bd38      	pop	{r3, r4, r5, pc}
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	4620      	mov	r0, r4
 8013bda:	f7fb fbcf 	bl	800f37c <rosidl_runtime_c__String__fini>
 8013bde:	4628      	mov	r0, r5
 8013be0:	bd38      	pop	{r3, r4, r5, pc}
 8013be2:	bf00      	nop

08013be4 <std_msgs__msg__String__fini>:
 8013be4:	b108      	cbz	r0, 8013bea <std_msgs__msg__String__fini+0x6>
 8013be6:	f7fb bbc9 	b.w	800f37c <rosidl_runtime_c__String__fini>
 8013bea:	4770      	bx	lr

08013bec <ucdr_serialize_endian_array_char>:
 8013bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	461f      	mov	r7, r3
 8013bf4:	4605      	mov	r5, r0
 8013bf6:	4690      	mov	r8, r2
 8013bf8:	f7fb fccc 	bl	800f594 <ucdr_check_buffer_available_for>
 8013bfc:	b9e0      	cbnz	r0, 8013c38 <ucdr_serialize_endian_array_char+0x4c>
 8013bfe:	463e      	mov	r6, r7
 8013c00:	e00b      	b.n	8013c1a <ucdr_serialize_endian_array_char+0x2e>
 8013c02:	4441      	add	r1, r8
 8013c04:	68a8      	ldr	r0, [r5, #8]
 8013c06:	4622      	mov	r2, r4
 8013c08:	1b36      	subs	r6, r6, r4
 8013c0a:	f003 fbbc 	bl	8017386 <memcpy>
 8013c0e:	68ab      	ldr	r3, [r5, #8]
 8013c10:	6928      	ldr	r0, [r5, #16]
 8013c12:	4423      	add	r3, r4
 8013c14:	4420      	add	r0, r4
 8013c16:	60ab      	str	r3, [r5, #8]
 8013c18:	6128      	str	r0, [r5, #16]
 8013c1a:	4631      	mov	r1, r6
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	4628      	mov	r0, r5
 8013c20:	f7fb fd42 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013c24:	1bb9      	subs	r1, r7, r6
 8013c26:	4604      	mov	r4, r0
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	d1ea      	bne.n	8013c02 <ucdr_serialize_endian_array_char+0x16>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	7da8      	ldrb	r0, [r5, #22]
 8013c30:	756b      	strb	r3, [r5, #21]
 8013c32:	4058      	eors	r0, r3
 8013c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c38:	463a      	mov	r2, r7
 8013c3a:	4641      	mov	r1, r8
 8013c3c:	68a8      	ldr	r0, [r5, #8]
 8013c3e:	f003 fba2 	bl	8017386 <memcpy>
 8013c42:	68aa      	ldr	r2, [r5, #8]
 8013c44:	692b      	ldr	r3, [r5, #16]
 8013c46:	443a      	add	r2, r7
 8013c48:	443b      	add	r3, r7
 8013c4a:	60aa      	str	r2, [r5, #8]
 8013c4c:	612b      	str	r3, [r5, #16]
 8013c4e:	e7ed      	b.n	8013c2c <ucdr_serialize_endian_array_char+0x40>

08013c50 <ucdr_deserialize_endian_array_char>:
 8013c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c54:	4619      	mov	r1, r3
 8013c56:	461f      	mov	r7, r3
 8013c58:	4605      	mov	r5, r0
 8013c5a:	4690      	mov	r8, r2
 8013c5c:	f7fb fc9a 	bl	800f594 <ucdr_check_buffer_available_for>
 8013c60:	b9e8      	cbnz	r0, 8013c9e <ucdr_deserialize_endian_array_char+0x4e>
 8013c62:	463e      	mov	r6, r7
 8013c64:	e00c      	b.n	8013c80 <ucdr_deserialize_endian_array_char+0x30>
 8013c66:	eb08 0003 	add.w	r0, r8, r3
 8013c6a:	68a9      	ldr	r1, [r5, #8]
 8013c6c:	4622      	mov	r2, r4
 8013c6e:	1b36      	subs	r6, r6, r4
 8013c70:	f003 fb89 	bl	8017386 <memcpy>
 8013c74:	68ab      	ldr	r3, [r5, #8]
 8013c76:	6928      	ldr	r0, [r5, #16]
 8013c78:	4423      	add	r3, r4
 8013c7a:	4420      	add	r0, r4
 8013c7c:	60ab      	str	r3, [r5, #8]
 8013c7e:	6128      	str	r0, [r5, #16]
 8013c80:	4631      	mov	r1, r6
 8013c82:	2201      	movs	r2, #1
 8013c84:	4628      	mov	r0, r5
 8013c86:	f7fb fd0f 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013c8a:	1bbb      	subs	r3, r7, r6
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	d1e9      	bne.n	8013c66 <ucdr_deserialize_endian_array_char+0x16>
 8013c92:	2301      	movs	r3, #1
 8013c94:	7da8      	ldrb	r0, [r5, #22]
 8013c96:	756b      	strb	r3, [r5, #21]
 8013c98:	4058      	eors	r0, r3
 8013c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c9e:	463a      	mov	r2, r7
 8013ca0:	68a9      	ldr	r1, [r5, #8]
 8013ca2:	4640      	mov	r0, r8
 8013ca4:	f003 fb6f 	bl	8017386 <memcpy>
 8013ca8:	68aa      	ldr	r2, [r5, #8]
 8013caa:	692b      	ldr	r3, [r5, #16]
 8013cac:	443a      	add	r2, r7
 8013cae:	443b      	add	r3, r7
 8013cb0:	60aa      	str	r2, [r5, #8]
 8013cb2:	612b      	str	r3, [r5, #16]
 8013cb4:	e7ed      	b.n	8013c92 <ucdr_deserialize_endian_array_char+0x42>
 8013cb6:	bf00      	nop

08013cb8 <ucdr_serialize_array_uint8_t>:
 8013cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cbc:	4688      	mov	r8, r1
 8013cbe:	4611      	mov	r1, r2
 8013cc0:	4617      	mov	r7, r2
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	f7fb fc66 	bl	800f594 <ucdr_check_buffer_available_for>
 8013cc8:	b9e0      	cbnz	r0, 8013d04 <ucdr_serialize_array_uint8_t+0x4c>
 8013cca:	463e      	mov	r6, r7
 8013ccc:	e00b      	b.n	8013ce6 <ucdr_serialize_array_uint8_t+0x2e>
 8013cce:	4441      	add	r1, r8
 8013cd0:	68a8      	ldr	r0, [r5, #8]
 8013cd2:	4622      	mov	r2, r4
 8013cd4:	1b36      	subs	r6, r6, r4
 8013cd6:	f003 fb56 	bl	8017386 <memcpy>
 8013cda:	68ab      	ldr	r3, [r5, #8]
 8013cdc:	6928      	ldr	r0, [r5, #16]
 8013cde:	4423      	add	r3, r4
 8013ce0:	4420      	add	r0, r4
 8013ce2:	60ab      	str	r3, [r5, #8]
 8013ce4:	6128      	str	r0, [r5, #16]
 8013ce6:	4631      	mov	r1, r6
 8013ce8:	2201      	movs	r2, #1
 8013cea:	4628      	mov	r0, r5
 8013cec:	f7fb fcdc 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013cf0:	1bb9      	subs	r1, r7, r6
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d1ea      	bne.n	8013cce <ucdr_serialize_array_uint8_t+0x16>
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	7da8      	ldrb	r0, [r5, #22]
 8013cfc:	756b      	strb	r3, [r5, #21]
 8013cfe:	4058      	eors	r0, r3
 8013d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d04:	463a      	mov	r2, r7
 8013d06:	4641      	mov	r1, r8
 8013d08:	68a8      	ldr	r0, [r5, #8]
 8013d0a:	f003 fb3c 	bl	8017386 <memcpy>
 8013d0e:	68aa      	ldr	r2, [r5, #8]
 8013d10:	692b      	ldr	r3, [r5, #16]
 8013d12:	443a      	add	r2, r7
 8013d14:	443b      	add	r3, r7
 8013d16:	60aa      	str	r2, [r5, #8]
 8013d18:	612b      	str	r3, [r5, #16]
 8013d1a:	e7ed      	b.n	8013cf8 <ucdr_serialize_array_uint8_t+0x40>

08013d1c <ucdr_serialize_endian_array_uint8_t>:
 8013d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d20:	4619      	mov	r1, r3
 8013d22:	461f      	mov	r7, r3
 8013d24:	4605      	mov	r5, r0
 8013d26:	4690      	mov	r8, r2
 8013d28:	f7fb fc34 	bl	800f594 <ucdr_check_buffer_available_for>
 8013d2c:	b9e0      	cbnz	r0, 8013d68 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013d2e:	463e      	mov	r6, r7
 8013d30:	e00b      	b.n	8013d4a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8013d32:	4441      	add	r1, r8
 8013d34:	68a8      	ldr	r0, [r5, #8]
 8013d36:	4622      	mov	r2, r4
 8013d38:	1b36      	subs	r6, r6, r4
 8013d3a:	f003 fb24 	bl	8017386 <memcpy>
 8013d3e:	68ab      	ldr	r3, [r5, #8]
 8013d40:	6928      	ldr	r0, [r5, #16]
 8013d42:	4423      	add	r3, r4
 8013d44:	4420      	add	r0, r4
 8013d46:	60ab      	str	r3, [r5, #8]
 8013d48:	6128      	str	r0, [r5, #16]
 8013d4a:	4631      	mov	r1, r6
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f7fb fcaa 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013d54:	1bb9      	subs	r1, r7, r6
 8013d56:	4604      	mov	r4, r0
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d1ea      	bne.n	8013d32 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	7da8      	ldrb	r0, [r5, #22]
 8013d60:	756b      	strb	r3, [r5, #21]
 8013d62:	4058      	eors	r0, r3
 8013d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d68:	463a      	mov	r2, r7
 8013d6a:	4641      	mov	r1, r8
 8013d6c:	68a8      	ldr	r0, [r5, #8]
 8013d6e:	f003 fb0a 	bl	8017386 <memcpy>
 8013d72:	68aa      	ldr	r2, [r5, #8]
 8013d74:	692b      	ldr	r3, [r5, #16]
 8013d76:	443a      	add	r2, r7
 8013d78:	443b      	add	r3, r7
 8013d7a:	60aa      	str	r2, [r5, #8]
 8013d7c:	612b      	str	r3, [r5, #16]
 8013d7e:	e7ed      	b.n	8013d5c <ucdr_serialize_endian_array_uint8_t+0x40>

08013d80 <ucdr_deserialize_array_uint8_t>:
 8013d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d84:	4688      	mov	r8, r1
 8013d86:	4611      	mov	r1, r2
 8013d88:	4617      	mov	r7, r2
 8013d8a:	4605      	mov	r5, r0
 8013d8c:	f7fb fc02 	bl	800f594 <ucdr_check_buffer_available_for>
 8013d90:	b9e8      	cbnz	r0, 8013dce <ucdr_deserialize_array_uint8_t+0x4e>
 8013d92:	463e      	mov	r6, r7
 8013d94:	e00c      	b.n	8013db0 <ucdr_deserialize_array_uint8_t+0x30>
 8013d96:	eb08 0003 	add.w	r0, r8, r3
 8013d9a:	68a9      	ldr	r1, [r5, #8]
 8013d9c:	4622      	mov	r2, r4
 8013d9e:	1b36      	subs	r6, r6, r4
 8013da0:	f003 faf1 	bl	8017386 <memcpy>
 8013da4:	68ab      	ldr	r3, [r5, #8]
 8013da6:	6928      	ldr	r0, [r5, #16]
 8013da8:	4423      	add	r3, r4
 8013daa:	4420      	add	r0, r4
 8013dac:	60ab      	str	r3, [r5, #8]
 8013dae:	6128      	str	r0, [r5, #16]
 8013db0:	4631      	mov	r1, r6
 8013db2:	2201      	movs	r2, #1
 8013db4:	4628      	mov	r0, r5
 8013db6:	f7fb fc77 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013dba:	1bbb      	subs	r3, r7, r6
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d1e9      	bne.n	8013d96 <ucdr_deserialize_array_uint8_t+0x16>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	7da8      	ldrb	r0, [r5, #22]
 8013dc6:	756b      	strb	r3, [r5, #21]
 8013dc8:	4058      	eors	r0, r3
 8013dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dce:	463a      	mov	r2, r7
 8013dd0:	68a9      	ldr	r1, [r5, #8]
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	f003 fad7 	bl	8017386 <memcpy>
 8013dd8:	68aa      	ldr	r2, [r5, #8]
 8013dda:	692b      	ldr	r3, [r5, #16]
 8013ddc:	443a      	add	r2, r7
 8013dde:	443b      	add	r3, r7
 8013de0:	60aa      	str	r2, [r5, #8]
 8013de2:	612b      	str	r3, [r5, #16]
 8013de4:	e7ed      	b.n	8013dc2 <ucdr_deserialize_array_uint8_t+0x42>
 8013de6:	bf00      	nop

08013de8 <ucdr_deserialize_endian_array_uint8_t>:
 8013de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dec:	4619      	mov	r1, r3
 8013dee:	461f      	mov	r7, r3
 8013df0:	4605      	mov	r5, r0
 8013df2:	4690      	mov	r8, r2
 8013df4:	f7fb fbce 	bl	800f594 <ucdr_check_buffer_available_for>
 8013df8:	b9e8      	cbnz	r0, 8013e36 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8013dfa:	463e      	mov	r6, r7
 8013dfc:	e00c      	b.n	8013e18 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8013dfe:	eb08 0003 	add.w	r0, r8, r3
 8013e02:	68a9      	ldr	r1, [r5, #8]
 8013e04:	4622      	mov	r2, r4
 8013e06:	1b36      	subs	r6, r6, r4
 8013e08:	f003 fabd 	bl	8017386 <memcpy>
 8013e0c:	68ab      	ldr	r3, [r5, #8]
 8013e0e:	6928      	ldr	r0, [r5, #16]
 8013e10:	4423      	add	r3, r4
 8013e12:	4420      	add	r0, r4
 8013e14:	60ab      	str	r3, [r5, #8]
 8013e16:	6128      	str	r0, [r5, #16]
 8013e18:	4631      	mov	r1, r6
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	f7fb fc43 	bl	800f6a8 <ucdr_check_final_buffer_behavior_array>
 8013e22:	1bbb      	subs	r3, r7, r6
 8013e24:	4604      	mov	r4, r0
 8013e26:	2800      	cmp	r0, #0
 8013e28:	d1e9      	bne.n	8013dfe <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	7da8      	ldrb	r0, [r5, #22]
 8013e2e:	756b      	strb	r3, [r5, #21]
 8013e30:	4058      	eors	r0, r3
 8013e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e36:	463a      	mov	r2, r7
 8013e38:	68a9      	ldr	r1, [r5, #8]
 8013e3a:	4640      	mov	r0, r8
 8013e3c:	f003 faa3 	bl	8017386 <memcpy>
 8013e40:	68aa      	ldr	r2, [r5, #8]
 8013e42:	692b      	ldr	r3, [r5, #16]
 8013e44:	443a      	add	r2, r7
 8013e46:	443b      	add	r3, r7
 8013e48:	60aa      	str	r2, [r5, #8]
 8013e4a:	612b      	str	r3, [r5, #16]
 8013e4c:	e7ed      	b.n	8013e2a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8013e4e:	bf00      	nop

08013e50 <ucdr_serialize_bool>:
 8013e50:	b538      	push	{r3, r4, r5, lr}
 8013e52:	460d      	mov	r5, r1
 8013e54:	2101      	movs	r1, #1
 8013e56:	4604      	mov	r4, r0
 8013e58:	f7fb fba8 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013e5c:	b148      	cbz	r0, 8013e72 <ucdr_serialize_bool+0x22>
 8013e5e:	68a3      	ldr	r3, [r4, #8]
 8013e60:	2101      	movs	r1, #1
 8013e62:	701d      	strb	r5, [r3, #0]
 8013e64:	68a2      	ldr	r2, [r4, #8]
 8013e66:	6923      	ldr	r3, [r4, #16]
 8013e68:	440a      	add	r2, r1
 8013e6a:	7561      	strb	r1, [r4, #21]
 8013e6c:	440b      	add	r3, r1
 8013e6e:	60a2      	str	r2, [r4, #8]
 8013e70:	6123      	str	r3, [r4, #16]
 8013e72:	7da0      	ldrb	r0, [r4, #22]
 8013e74:	f080 0001 	eor.w	r0, r0, #1
 8013e78:	bd38      	pop	{r3, r4, r5, pc}
 8013e7a:	bf00      	nop

08013e7c <ucdr_deserialize_bool>:
 8013e7c:	b538      	push	{r3, r4, r5, lr}
 8013e7e:	460d      	mov	r5, r1
 8013e80:	2101      	movs	r1, #1
 8013e82:	4604      	mov	r4, r0
 8013e84:	f7fb fb92 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013e88:	b160      	cbz	r0, 8013ea4 <ucdr_deserialize_bool+0x28>
 8013e8a:	68a2      	ldr	r2, [r4, #8]
 8013e8c:	2101      	movs	r1, #1
 8013e8e:	6923      	ldr	r3, [r4, #16]
 8013e90:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013e94:	440b      	add	r3, r1
 8013e96:	3800      	subs	r0, #0
 8013e98:	bf18      	it	ne
 8013e9a:	2001      	movne	r0, #1
 8013e9c:	7028      	strb	r0, [r5, #0]
 8013e9e:	60a2      	str	r2, [r4, #8]
 8013ea0:	6123      	str	r3, [r4, #16]
 8013ea2:	7561      	strb	r1, [r4, #21]
 8013ea4:	7da0      	ldrb	r0, [r4, #22]
 8013ea6:	f080 0001 	eor.w	r0, r0, #1
 8013eaa:	bd38      	pop	{r3, r4, r5, pc}

08013eac <ucdr_serialize_uint8_t>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	460d      	mov	r5, r1
 8013eb0:	2101      	movs	r1, #1
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	f7fb fb7a 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013eb8:	b148      	cbz	r0, 8013ece <ucdr_serialize_uint8_t+0x22>
 8013eba:	68a3      	ldr	r3, [r4, #8]
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	701d      	strb	r5, [r3, #0]
 8013ec0:	68a2      	ldr	r2, [r4, #8]
 8013ec2:	6923      	ldr	r3, [r4, #16]
 8013ec4:	440a      	add	r2, r1
 8013ec6:	7561      	strb	r1, [r4, #21]
 8013ec8:	440b      	add	r3, r1
 8013eca:	60a2      	str	r2, [r4, #8]
 8013ecc:	6123      	str	r3, [r4, #16]
 8013ece:	7da0      	ldrb	r0, [r4, #22]
 8013ed0:	f080 0001 	eor.w	r0, r0, #1
 8013ed4:	bd38      	pop	{r3, r4, r5, pc}
 8013ed6:	bf00      	nop

08013ed8 <ucdr_deserialize_uint8_t>:
 8013ed8:	b538      	push	{r3, r4, r5, lr}
 8013eda:	460d      	mov	r5, r1
 8013edc:	2101      	movs	r1, #1
 8013ede:	4604      	mov	r4, r0
 8013ee0:	f7fb fb64 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013ee4:	b150      	cbz	r0, 8013efc <ucdr_deserialize_uint8_t+0x24>
 8013ee6:	68a3      	ldr	r3, [r4, #8]
 8013ee8:	2101      	movs	r1, #1
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	702b      	strb	r3, [r5, #0]
 8013eee:	68a2      	ldr	r2, [r4, #8]
 8013ef0:	6923      	ldr	r3, [r4, #16]
 8013ef2:	440a      	add	r2, r1
 8013ef4:	7561      	strb	r1, [r4, #21]
 8013ef6:	440b      	add	r3, r1
 8013ef8:	60a2      	str	r2, [r4, #8]
 8013efa:	6123      	str	r3, [r4, #16]
 8013efc:	7da0      	ldrb	r0, [r4, #22]
 8013efe:	f080 0001 	eor.w	r0, r0, #1
 8013f02:	bd38      	pop	{r3, r4, r5, pc}

08013f04 <ucdr_serialize_uint16_t>:
 8013f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f08:	460b      	mov	r3, r1
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	2102      	movs	r1, #2
 8013f10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f14:	f7fb fb9e 	bl	800f654 <ucdr_buffer_alignment>
 8013f18:	4601      	mov	r1, r0
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	7d67      	ldrb	r7, [r4, #21]
 8013f1e:	f7fb fbe1 	bl	800f6e4 <ucdr_advance_buffer>
 8013f22:	2102      	movs	r1, #2
 8013f24:	4620      	mov	r0, r4
 8013f26:	f7fb fb35 	bl	800f594 <ucdr_check_buffer_available_for>
 8013f2a:	bb78      	cbnz	r0, 8013f8c <ucdr_serialize_uint16_t+0x88>
 8013f2c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013f30:	42ab      	cmp	r3, r5
 8013f32:	d926      	bls.n	8013f82 <ucdr_serialize_uint16_t+0x7e>
 8013f34:	1b5e      	subs	r6, r3, r5
 8013f36:	60a3      	str	r3, [r4, #8]
 8013f38:	6923      	ldr	r3, [r4, #16]
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f1c6 0802 	rsb	r8, r6, #2
 8013f40:	4433      	add	r3, r6
 8013f42:	4641      	mov	r1, r8
 8013f44:	6123      	str	r3, [r4, #16]
 8013f46:	f7fb fb31 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d03b      	beq.n	8013fc6 <ucdr_serialize_uint16_t+0xc2>
 8013f4e:	7d23      	ldrb	r3, [r4, #20]
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d04a      	beq.n	8013fea <ucdr_serialize_uint16_t+0xe6>
 8013f54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f58:	702b      	strb	r3, [r5, #0]
 8013f5a:	2e00      	cmp	r6, #0
 8013f5c:	d040      	beq.n	8013fe0 <ucdr_serialize_uint16_t+0xdc>
 8013f5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013f62:	706b      	strb	r3, [r5, #1]
 8013f64:	6923      	ldr	r3, [r4, #16]
 8013f66:	2102      	movs	r1, #2
 8013f68:	68a2      	ldr	r2, [r4, #8]
 8013f6a:	3302      	adds	r3, #2
 8013f6c:	7da0      	ldrb	r0, [r4, #22]
 8013f6e:	4442      	add	r2, r8
 8013f70:	7561      	strb	r1, [r4, #21]
 8013f72:	1b9e      	subs	r6, r3, r6
 8013f74:	f080 0001 	eor.w	r0, r0, #1
 8013f78:	60a2      	str	r2, [r4, #8]
 8013f7a:	6126      	str	r6, [r4, #16]
 8013f7c:	b002      	add	sp, #8
 8013f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f82:	2102      	movs	r1, #2
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7fb fb11 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8013f8a:	b190      	cbz	r0, 8013fb2 <ucdr_serialize_uint16_t+0xae>
 8013f8c:	7d23      	ldrb	r3, [r4, #20]
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	68a3      	ldr	r3, [r4, #8]
 8013f92:	d014      	beq.n	8013fbe <ucdr_serialize_uint16_t+0xba>
 8013f94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013f98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f9c:	7019      	strb	r1, [r3, #0]
 8013f9e:	68a3      	ldr	r3, [r4, #8]
 8013fa0:	705a      	strb	r2, [r3, #1]
 8013fa2:	2102      	movs	r1, #2
 8013fa4:	68a2      	ldr	r2, [r4, #8]
 8013fa6:	6923      	ldr	r3, [r4, #16]
 8013fa8:	440a      	add	r2, r1
 8013faa:	7561      	strb	r1, [r4, #21]
 8013fac:	440b      	add	r3, r1
 8013fae:	60a2      	str	r2, [r4, #8]
 8013fb0:	6123      	str	r3, [r4, #16]
 8013fb2:	7da0      	ldrb	r0, [r4, #22]
 8013fb4:	f080 0001 	eor.w	r0, r0, #1
 8013fb8:	b002      	add	sp, #8
 8013fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fbe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013fc2:	801a      	strh	r2, [r3, #0]
 8013fc4:	e7ed      	b.n	8013fa2 <ucdr_serialize_uint16_t+0x9e>
 8013fc6:	68a2      	ldr	r2, [r4, #8]
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	7da0      	ldrb	r0, [r4, #22]
 8013fcc:	1b92      	subs	r2, r2, r6
 8013fce:	1b9b      	subs	r3, r3, r6
 8013fd0:	7567      	strb	r7, [r4, #21]
 8013fd2:	f080 0001 	eor.w	r0, r0, #1
 8013fd6:	60a2      	str	r2, [r4, #8]
 8013fd8:	6123      	str	r3, [r4, #16]
 8013fda:	b002      	add	sp, #8
 8013fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe0:	68a3      	ldr	r3, [r4, #8]
 8013fe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013fe6:	701a      	strb	r2, [r3, #0]
 8013fe8:	e7bc      	b.n	8013f64 <ucdr_serialize_uint16_t+0x60>
 8013fea:	4628      	mov	r0, r5
 8013fec:	f10d 0506 	add.w	r5, sp, #6
 8013ff0:	4632      	mov	r2, r6
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	f003 f9c7 	bl	8017386 <memcpy>
 8013ff8:	4642      	mov	r2, r8
 8013ffa:	19a9      	adds	r1, r5, r6
 8013ffc:	68a0      	ldr	r0, [r4, #8]
 8013ffe:	f003 f9c2 	bl	8017386 <memcpy>
 8014002:	e7af      	b.n	8013f64 <ucdr_serialize_uint16_t+0x60>

08014004 <ucdr_serialize_endian_uint16_t>:
 8014004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014008:	4604      	mov	r4, r0
 801400a:	b083      	sub	sp, #12
 801400c:	460d      	mov	r5, r1
 801400e:	2102      	movs	r1, #2
 8014010:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014014:	f7fb fb1e 	bl	800f654 <ucdr_buffer_alignment>
 8014018:	4601      	mov	r1, r0
 801401a:	4620      	mov	r0, r4
 801401c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014020:	f7fb fb60 	bl	800f6e4 <ucdr_advance_buffer>
 8014024:	2102      	movs	r1, #2
 8014026:	4620      	mov	r0, r4
 8014028:	f7fb fab4 	bl	800f594 <ucdr_check_buffer_available_for>
 801402c:	bb70      	cbnz	r0, 801408c <ucdr_serialize_endian_uint16_t+0x88>
 801402e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014032:	42be      	cmp	r6, r7
 8014034:	d925      	bls.n	8014082 <ucdr_serialize_endian_uint16_t+0x7e>
 8014036:	6923      	ldr	r3, [r4, #16]
 8014038:	4620      	mov	r0, r4
 801403a:	60a6      	str	r6, [r4, #8]
 801403c:	1bf6      	subs	r6, r6, r7
 801403e:	4433      	add	r3, r6
 8014040:	f1c6 0902 	rsb	r9, r6, #2
 8014044:	6123      	str	r3, [r4, #16]
 8014046:	4649      	mov	r1, r9
 8014048:	f7fb fab0 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801404c:	2800      	cmp	r0, #0
 801404e:	d039      	beq.n	80140c4 <ucdr_serialize_endian_uint16_t+0xc0>
 8014050:	2d01      	cmp	r5, #1
 8014052:	d04a      	beq.n	80140ea <ucdr_serialize_endian_uint16_t+0xe6>
 8014054:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014058:	703b      	strb	r3, [r7, #0]
 801405a:	2e00      	cmp	r6, #0
 801405c:	d040      	beq.n	80140e0 <ucdr_serialize_endian_uint16_t+0xdc>
 801405e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014062:	707b      	strb	r3, [r7, #1]
 8014064:	6923      	ldr	r3, [r4, #16]
 8014066:	2102      	movs	r1, #2
 8014068:	68a2      	ldr	r2, [r4, #8]
 801406a:	7da0      	ldrb	r0, [r4, #22]
 801406c:	3302      	adds	r3, #2
 801406e:	444a      	add	r2, r9
 8014070:	7561      	strb	r1, [r4, #21]
 8014072:	1b9b      	subs	r3, r3, r6
 8014074:	f080 0001 	eor.w	r0, r0, #1
 8014078:	60a2      	str	r2, [r4, #8]
 801407a:	6123      	str	r3, [r4, #16]
 801407c:	b003      	add	sp, #12
 801407e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014082:	2102      	movs	r1, #2
 8014084:	4620      	mov	r0, r4
 8014086:	f7fb fa91 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801408a:	b188      	cbz	r0, 80140b0 <ucdr_serialize_endian_uint16_t+0xac>
 801408c:	2d01      	cmp	r5, #1
 801408e:	68a3      	ldr	r3, [r4, #8]
 8014090:	d014      	beq.n	80140bc <ucdr_serialize_endian_uint16_t+0xb8>
 8014092:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014096:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801409a:	7019      	strb	r1, [r3, #0]
 801409c:	68a3      	ldr	r3, [r4, #8]
 801409e:	705a      	strb	r2, [r3, #1]
 80140a0:	2102      	movs	r1, #2
 80140a2:	68a2      	ldr	r2, [r4, #8]
 80140a4:	6923      	ldr	r3, [r4, #16]
 80140a6:	440a      	add	r2, r1
 80140a8:	7561      	strb	r1, [r4, #21]
 80140aa:	440b      	add	r3, r1
 80140ac:	60a2      	str	r2, [r4, #8]
 80140ae:	6123      	str	r3, [r4, #16]
 80140b0:	7da0      	ldrb	r0, [r4, #22]
 80140b2:	f080 0001 	eor.w	r0, r0, #1
 80140b6:	b003      	add	sp, #12
 80140b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80140c0:	801a      	strh	r2, [r3, #0]
 80140c2:	e7ed      	b.n	80140a0 <ucdr_serialize_endian_uint16_t+0x9c>
 80140c4:	68a2      	ldr	r2, [r4, #8]
 80140c6:	6923      	ldr	r3, [r4, #16]
 80140c8:	7da0      	ldrb	r0, [r4, #22]
 80140ca:	1b92      	subs	r2, r2, r6
 80140cc:	1b9b      	subs	r3, r3, r6
 80140ce:	f884 8015 	strb.w	r8, [r4, #21]
 80140d2:	f080 0001 	eor.w	r0, r0, #1
 80140d6:	60a2      	str	r2, [r4, #8]
 80140d8:	6123      	str	r3, [r4, #16]
 80140da:	b003      	add	sp, #12
 80140dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140e0:	68a3      	ldr	r3, [r4, #8]
 80140e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80140e6:	701a      	strb	r2, [r3, #0]
 80140e8:	e7bc      	b.n	8014064 <ucdr_serialize_endian_uint16_t+0x60>
 80140ea:	f10d 0506 	add.w	r5, sp, #6
 80140ee:	4632      	mov	r2, r6
 80140f0:	4638      	mov	r0, r7
 80140f2:	4629      	mov	r1, r5
 80140f4:	f003 f947 	bl	8017386 <memcpy>
 80140f8:	464a      	mov	r2, r9
 80140fa:	19a9      	adds	r1, r5, r6
 80140fc:	68a0      	ldr	r0, [r4, #8]
 80140fe:	f003 f942 	bl	8017386 <memcpy>
 8014102:	e7af      	b.n	8014064 <ucdr_serialize_endian_uint16_t+0x60>

08014104 <ucdr_deserialize_uint16_t>:
 8014104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014108:	4604      	mov	r4, r0
 801410a:	460d      	mov	r5, r1
 801410c:	2102      	movs	r1, #2
 801410e:	f7fb faa1 	bl	800f654 <ucdr_buffer_alignment>
 8014112:	4601      	mov	r1, r0
 8014114:	4620      	mov	r0, r4
 8014116:	f894 8015 	ldrb.w	r8, [r4, #21]
 801411a:	f7fb fae3 	bl	800f6e4 <ucdr_advance_buffer>
 801411e:	2102      	movs	r1, #2
 8014120:	4620      	mov	r0, r4
 8014122:	f7fb fa37 	bl	800f594 <ucdr_check_buffer_available_for>
 8014126:	bb60      	cbnz	r0, 8014182 <ucdr_deserialize_uint16_t+0x7e>
 8014128:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801412c:	42be      	cmp	r6, r7
 801412e:	d923      	bls.n	8014178 <ucdr_deserialize_uint16_t+0x74>
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	4620      	mov	r0, r4
 8014134:	60a6      	str	r6, [r4, #8]
 8014136:	1bf6      	subs	r6, r6, r7
 8014138:	4433      	add	r3, r6
 801413a:	f1c6 0902 	rsb	r9, r6, #2
 801413e:	6123      	str	r3, [r4, #16]
 8014140:	4649      	mov	r1, r9
 8014142:	f7fb fa33 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014146:	2800      	cmp	r0, #0
 8014148:	d034      	beq.n	80141b4 <ucdr_deserialize_uint16_t+0xb0>
 801414a:	7d23      	ldrb	r3, [r4, #20]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d042      	beq.n	80141d6 <ucdr_deserialize_uint16_t+0xd2>
 8014150:	787b      	ldrb	r3, [r7, #1]
 8014152:	702b      	strb	r3, [r5, #0]
 8014154:	2e00      	cmp	r6, #0
 8014156:	d03a      	beq.n	80141ce <ucdr_deserialize_uint16_t+0xca>
 8014158:	783b      	ldrb	r3, [r7, #0]
 801415a:	706b      	strb	r3, [r5, #1]
 801415c:	6923      	ldr	r3, [r4, #16]
 801415e:	2102      	movs	r1, #2
 8014160:	68a2      	ldr	r2, [r4, #8]
 8014162:	3302      	adds	r3, #2
 8014164:	7da0      	ldrb	r0, [r4, #22]
 8014166:	444a      	add	r2, r9
 8014168:	7561      	strb	r1, [r4, #21]
 801416a:	1b9b      	subs	r3, r3, r6
 801416c:	f080 0001 	eor.w	r0, r0, #1
 8014170:	60a2      	str	r2, [r4, #8]
 8014172:	6123      	str	r3, [r4, #16]
 8014174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014178:	2102      	movs	r1, #2
 801417a:	4620      	mov	r0, r4
 801417c:	f7fb fa16 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014180:	b180      	cbz	r0, 80141a4 <ucdr_deserialize_uint16_t+0xa0>
 8014182:	7d23      	ldrb	r3, [r4, #20]
 8014184:	2b01      	cmp	r3, #1
 8014186:	68a3      	ldr	r3, [r4, #8]
 8014188:	d011      	beq.n	80141ae <ucdr_deserialize_uint16_t+0xaa>
 801418a:	785b      	ldrb	r3, [r3, #1]
 801418c:	702b      	strb	r3, [r5, #0]
 801418e:	68a3      	ldr	r3, [r4, #8]
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	706b      	strb	r3, [r5, #1]
 8014194:	2102      	movs	r1, #2
 8014196:	68a2      	ldr	r2, [r4, #8]
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	440a      	add	r2, r1
 801419c:	7561      	strb	r1, [r4, #21]
 801419e:	440b      	add	r3, r1
 80141a0:	60a2      	str	r2, [r4, #8]
 80141a2:	6123      	str	r3, [r4, #16]
 80141a4:	7da0      	ldrb	r0, [r4, #22]
 80141a6:	f080 0001 	eor.w	r0, r0, #1
 80141aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ae:	881b      	ldrh	r3, [r3, #0]
 80141b0:	802b      	strh	r3, [r5, #0]
 80141b2:	e7ef      	b.n	8014194 <ucdr_deserialize_uint16_t+0x90>
 80141b4:	68a2      	ldr	r2, [r4, #8]
 80141b6:	6923      	ldr	r3, [r4, #16]
 80141b8:	1b92      	subs	r2, r2, r6
 80141ba:	7da0      	ldrb	r0, [r4, #22]
 80141bc:	1b9b      	subs	r3, r3, r6
 80141be:	f884 8015 	strb.w	r8, [r4, #21]
 80141c2:	f080 0001 	eor.w	r0, r0, #1
 80141c6:	60a2      	str	r2, [r4, #8]
 80141c8:	6123      	str	r3, [r4, #16]
 80141ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ce:	68a3      	ldr	r3, [r4, #8]
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	706b      	strb	r3, [r5, #1]
 80141d4:	e7c2      	b.n	801415c <ucdr_deserialize_uint16_t+0x58>
 80141d6:	4639      	mov	r1, r7
 80141d8:	4632      	mov	r2, r6
 80141da:	4628      	mov	r0, r5
 80141dc:	f003 f8d3 	bl	8017386 <memcpy>
 80141e0:	464a      	mov	r2, r9
 80141e2:	19a8      	adds	r0, r5, r6
 80141e4:	68a1      	ldr	r1, [r4, #8]
 80141e6:	f003 f8ce 	bl	8017386 <memcpy>
 80141ea:	e7b7      	b.n	801415c <ucdr_deserialize_uint16_t+0x58>

080141ec <ucdr_deserialize_endian_uint16_t>:
 80141ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f0:	4604      	mov	r4, r0
 80141f2:	460e      	mov	r6, r1
 80141f4:	2102      	movs	r1, #2
 80141f6:	4615      	mov	r5, r2
 80141f8:	f7fb fa2c 	bl	800f654 <ucdr_buffer_alignment>
 80141fc:	4601      	mov	r1, r0
 80141fe:	4620      	mov	r0, r4
 8014200:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014204:	f7fb fa6e 	bl	800f6e4 <ucdr_advance_buffer>
 8014208:	2102      	movs	r1, #2
 801420a:	4620      	mov	r0, r4
 801420c:	f7fb f9c2 	bl	800f594 <ucdr_check_buffer_available_for>
 8014210:	bb70      	cbnz	r0, 8014270 <ucdr_deserialize_endian_uint16_t+0x84>
 8014212:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8014216:	454f      	cmp	r7, r9
 8014218:	d925      	bls.n	8014266 <ucdr_deserialize_endian_uint16_t+0x7a>
 801421a:	6923      	ldr	r3, [r4, #16]
 801421c:	4620      	mov	r0, r4
 801421e:	60a7      	str	r7, [r4, #8]
 8014220:	eba7 0709 	sub.w	r7, r7, r9
 8014224:	443b      	add	r3, r7
 8014226:	f1c7 0a02 	rsb	sl, r7, #2
 801422a:	6123      	str	r3, [r4, #16]
 801422c:	4651      	mov	r1, sl
 801422e:	f7fb f9bd 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014232:	2800      	cmp	r0, #0
 8014234:	d034      	beq.n	80142a0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8014236:	2e01      	cmp	r6, #1
 8014238:	d043      	beq.n	80142c2 <ucdr_deserialize_endian_uint16_t+0xd6>
 801423a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801423e:	702b      	strb	r3, [r5, #0]
 8014240:	2f00      	cmp	r7, #0
 8014242:	d03a      	beq.n	80142ba <ucdr_deserialize_endian_uint16_t+0xce>
 8014244:	f899 3000 	ldrb.w	r3, [r9]
 8014248:	706b      	strb	r3, [r5, #1]
 801424a:	6923      	ldr	r3, [r4, #16]
 801424c:	2102      	movs	r1, #2
 801424e:	68a2      	ldr	r2, [r4, #8]
 8014250:	3302      	adds	r3, #2
 8014252:	7da0      	ldrb	r0, [r4, #22]
 8014254:	4452      	add	r2, sl
 8014256:	7561      	strb	r1, [r4, #21]
 8014258:	1bdb      	subs	r3, r3, r7
 801425a:	f080 0001 	eor.w	r0, r0, #1
 801425e:	60a2      	str	r2, [r4, #8]
 8014260:	6123      	str	r3, [r4, #16]
 8014262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014266:	2102      	movs	r1, #2
 8014268:	4620      	mov	r0, r4
 801426a:	f7fb f99f 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801426e:	b178      	cbz	r0, 8014290 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014270:	2e01      	cmp	r6, #1
 8014272:	68a3      	ldr	r3, [r4, #8]
 8014274:	d011      	beq.n	801429a <ucdr_deserialize_endian_uint16_t+0xae>
 8014276:	785b      	ldrb	r3, [r3, #1]
 8014278:	702b      	strb	r3, [r5, #0]
 801427a:	68a3      	ldr	r3, [r4, #8]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	706b      	strb	r3, [r5, #1]
 8014280:	2102      	movs	r1, #2
 8014282:	68a2      	ldr	r2, [r4, #8]
 8014284:	6923      	ldr	r3, [r4, #16]
 8014286:	440a      	add	r2, r1
 8014288:	7561      	strb	r1, [r4, #21]
 801428a:	440b      	add	r3, r1
 801428c:	60a2      	str	r2, [r4, #8]
 801428e:	6123      	str	r3, [r4, #16]
 8014290:	7da0      	ldrb	r0, [r4, #22]
 8014292:	f080 0001 	eor.w	r0, r0, #1
 8014296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801429a:	881b      	ldrh	r3, [r3, #0]
 801429c:	802b      	strh	r3, [r5, #0]
 801429e:	e7ef      	b.n	8014280 <ucdr_deserialize_endian_uint16_t+0x94>
 80142a0:	68a2      	ldr	r2, [r4, #8]
 80142a2:	6923      	ldr	r3, [r4, #16]
 80142a4:	1bd2      	subs	r2, r2, r7
 80142a6:	7da0      	ldrb	r0, [r4, #22]
 80142a8:	1bdb      	subs	r3, r3, r7
 80142aa:	f884 8015 	strb.w	r8, [r4, #21]
 80142ae:	f080 0001 	eor.w	r0, r0, #1
 80142b2:	60a2      	str	r2, [r4, #8]
 80142b4:	6123      	str	r3, [r4, #16]
 80142b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ba:	68a3      	ldr	r3, [r4, #8]
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	706b      	strb	r3, [r5, #1]
 80142c0:	e7c3      	b.n	801424a <ucdr_deserialize_endian_uint16_t+0x5e>
 80142c2:	4649      	mov	r1, r9
 80142c4:	463a      	mov	r2, r7
 80142c6:	4628      	mov	r0, r5
 80142c8:	f003 f85d 	bl	8017386 <memcpy>
 80142cc:	4652      	mov	r2, sl
 80142ce:	19e8      	adds	r0, r5, r7
 80142d0:	68a1      	ldr	r1, [r4, #8]
 80142d2:	f003 f858 	bl	8017386 <memcpy>
 80142d6:	e7b8      	b.n	801424a <ucdr_deserialize_endian_uint16_t+0x5e>

080142d8 <ucdr_serialize_uint32_t>:
 80142d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142dc:	b082      	sub	sp, #8
 80142de:	4604      	mov	r4, r0
 80142e0:	9101      	str	r1, [sp, #4]
 80142e2:	2104      	movs	r1, #4
 80142e4:	f7fb f9b6 	bl	800f654 <ucdr_buffer_alignment>
 80142e8:	4601      	mov	r1, r0
 80142ea:	4620      	mov	r0, r4
 80142ec:	7d67      	ldrb	r7, [r4, #21]
 80142ee:	f7fb f9f9 	bl	800f6e4 <ucdr_advance_buffer>
 80142f2:	2104      	movs	r1, #4
 80142f4:	4620      	mov	r0, r4
 80142f6:	f7fb f94d 	bl	800f594 <ucdr_check_buffer_available_for>
 80142fa:	2800      	cmp	r0, #0
 80142fc:	d139      	bne.n	8014372 <ucdr_serialize_uint32_t+0x9a>
 80142fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014302:	42ab      	cmp	r3, r5
 8014304:	d930      	bls.n	8014368 <ucdr_serialize_uint32_t+0x90>
 8014306:	1b5e      	subs	r6, r3, r5
 8014308:	60a3      	str	r3, [r4, #8]
 801430a:	6923      	ldr	r3, [r4, #16]
 801430c:	4620      	mov	r0, r4
 801430e:	f1c6 0804 	rsb	r8, r6, #4
 8014312:	4433      	add	r3, r6
 8014314:	4641      	mov	r1, r8
 8014316:	6123      	str	r3, [r4, #16]
 8014318:	f7fb f948 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801431c:	2800      	cmp	r0, #0
 801431e:	d04c      	beq.n	80143ba <ucdr_serialize_uint32_t+0xe2>
 8014320:	7d23      	ldrb	r3, [r4, #20]
 8014322:	2b01      	cmp	r3, #1
 8014324:	d063      	beq.n	80143ee <ucdr_serialize_uint32_t+0x116>
 8014326:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801432a:	702b      	strb	r3, [r5, #0]
 801432c:	2e00      	cmp	r6, #0
 801432e:	d051      	beq.n	80143d4 <ucdr_serialize_uint32_t+0xfc>
 8014330:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014334:	2e01      	cmp	r6, #1
 8014336:	706b      	strb	r3, [r5, #1]
 8014338:	d050      	beq.n	80143dc <ucdr_serialize_uint32_t+0x104>
 801433a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801433e:	2e02      	cmp	r6, #2
 8014340:	70ab      	strb	r3, [r5, #2]
 8014342:	d04f      	beq.n	80143e4 <ucdr_serialize_uint32_t+0x10c>
 8014344:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014348:	70eb      	strb	r3, [r5, #3]
 801434a:	6923      	ldr	r3, [r4, #16]
 801434c:	2104      	movs	r1, #4
 801434e:	68a2      	ldr	r2, [r4, #8]
 8014350:	3304      	adds	r3, #4
 8014352:	7da0      	ldrb	r0, [r4, #22]
 8014354:	4442      	add	r2, r8
 8014356:	7561      	strb	r1, [r4, #21]
 8014358:	1b9e      	subs	r6, r3, r6
 801435a:	f080 0001 	eor.w	r0, r0, #1
 801435e:	60a2      	str	r2, [r4, #8]
 8014360:	6126      	str	r6, [r4, #16]
 8014362:	b002      	add	sp, #8
 8014364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014368:	2104      	movs	r1, #4
 801436a:	4620      	mov	r0, r4
 801436c:	f7fb f91e 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014370:	b1d0      	cbz	r0, 80143a8 <ucdr_serialize_uint32_t+0xd0>
 8014372:	7d23      	ldrb	r3, [r4, #20]
 8014374:	2b01      	cmp	r3, #1
 8014376:	68a3      	ldr	r3, [r4, #8]
 8014378:	d01c      	beq.n	80143b4 <ucdr_serialize_uint32_t+0xdc>
 801437a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801437e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014382:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8014386:	7018      	strb	r0, [r3, #0]
 8014388:	68a3      	ldr	r3, [r4, #8]
 801438a:	705a      	strb	r2, [r3, #1]
 801438c:	68a3      	ldr	r3, [r4, #8]
 801438e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014392:	7099      	strb	r1, [r3, #2]
 8014394:	68a3      	ldr	r3, [r4, #8]
 8014396:	70da      	strb	r2, [r3, #3]
 8014398:	2104      	movs	r1, #4
 801439a:	68a2      	ldr	r2, [r4, #8]
 801439c:	6923      	ldr	r3, [r4, #16]
 801439e:	440a      	add	r2, r1
 80143a0:	7561      	strb	r1, [r4, #21]
 80143a2:	440b      	add	r3, r1
 80143a4:	60a2      	str	r2, [r4, #8]
 80143a6:	6123      	str	r3, [r4, #16]
 80143a8:	7da0      	ldrb	r0, [r4, #22]
 80143aa:	f080 0001 	eor.w	r0, r0, #1
 80143ae:	b002      	add	sp, #8
 80143b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b4:	9a01      	ldr	r2, [sp, #4]
 80143b6:	601a      	str	r2, [r3, #0]
 80143b8:	e7ee      	b.n	8014398 <ucdr_serialize_uint32_t+0xc0>
 80143ba:	68a2      	ldr	r2, [r4, #8]
 80143bc:	6923      	ldr	r3, [r4, #16]
 80143be:	7da0      	ldrb	r0, [r4, #22]
 80143c0:	1b92      	subs	r2, r2, r6
 80143c2:	1b9b      	subs	r3, r3, r6
 80143c4:	7567      	strb	r7, [r4, #21]
 80143c6:	f080 0001 	eor.w	r0, r0, #1
 80143ca:	60a2      	str	r2, [r4, #8]
 80143cc:	6123      	str	r3, [r4, #16]
 80143ce:	b002      	add	sp, #8
 80143d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d4:	68a3      	ldr	r3, [r4, #8]
 80143d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80143da:	701a      	strb	r2, [r3, #0]
 80143dc:	68a3      	ldr	r3, [r4, #8]
 80143de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80143e2:	701a      	strb	r2, [r3, #0]
 80143e4:	68a3      	ldr	r3, [r4, #8]
 80143e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80143ea:	701a      	strb	r2, [r3, #0]
 80143ec:	e7ad      	b.n	801434a <ucdr_serialize_uint32_t+0x72>
 80143ee:	4628      	mov	r0, r5
 80143f0:	ad01      	add	r5, sp, #4
 80143f2:	4632      	mov	r2, r6
 80143f4:	4629      	mov	r1, r5
 80143f6:	f002 ffc6 	bl	8017386 <memcpy>
 80143fa:	4642      	mov	r2, r8
 80143fc:	19a9      	adds	r1, r5, r6
 80143fe:	68a0      	ldr	r0, [r4, #8]
 8014400:	f002 ffc1 	bl	8017386 <memcpy>
 8014404:	e7a1      	b.n	801434a <ucdr_serialize_uint32_t+0x72>
 8014406:	bf00      	nop

08014408 <ucdr_serialize_endian_uint32_t>:
 8014408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801440c:	4604      	mov	r4, r0
 801440e:	b083      	sub	sp, #12
 8014410:	460d      	mov	r5, r1
 8014412:	2104      	movs	r1, #4
 8014414:	9201      	str	r2, [sp, #4]
 8014416:	f7fb f91d 	bl	800f654 <ucdr_buffer_alignment>
 801441a:	4601      	mov	r1, r0
 801441c:	4620      	mov	r0, r4
 801441e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014422:	f7fb f95f 	bl	800f6e4 <ucdr_advance_buffer>
 8014426:	2104      	movs	r1, #4
 8014428:	4620      	mov	r0, r4
 801442a:	f7fb f8b3 	bl	800f594 <ucdr_check_buffer_available_for>
 801442e:	2800      	cmp	r0, #0
 8014430:	d138      	bne.n	80144a4 <ucdr_serialize_endian_uint32_t+0x9c>
 8014432:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014436:	42b7      	cmp	r7, r6
 8014438:	d92f      	bls.n	801449a <ucdr_serialize_endian_uint32_t+0x92>
 801443a:	6923      	ldr	r3, [r4, #16]
 801443c:	4620      	mov	r0, r4
 801443e:	60a7      	str	r7, [r4, #8]
 8014440:	1bbf      	subs	r7, r7, r6
 8014442:	443b      	add	r3, r7
 8014444:	f1c7 0904 	rsb	r9, r7, #4
 8014448:	6123      	str	r3, [r4, #16]
 801444a:	4649      	mov	r1, r9
 801444c:	f7fb f8ae 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014450:	2800      	cmp	r0, #0
 8014452:	d04a      	beq.n	80144ea <ucdr_serialize_endian_uint32_t+0xe2>
 8014454:	2d01      	cmp	r5, #1
 8014456:	d063      	beq.n	8014520 <ucdr_serialize_endian_uint32_t+0x118>
 8014458:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801445c:	7033      	strb	r3, [r6, #0]
 801445e:	2f00      	cmp	r7, #0
 8014460:	d051      	beq.n	8014506 <ucdr_serialize_endian_uint32_t+0xfe>
 8014462:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014466:	2f01      	cmp	r7, #1
 8014468:	7073      	strb	r3, [r6, #1]
 801446a:	d050      	beq.n	801450e <ucdr_serialize_endian_uint32_t+0x106>
 801446c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014470:	2f02      	cmp	r7, #2
 8014472:	70b3      	strb	r3, [r6, #2]
 8014474:	d04f      	beq.n	8014516 <ucdr_serialize_endian_uint32_t+0x10e>
 8014476:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801447a:	70f3      	strb	r3, [r6, #3]
 801447c:	6923      	ldr	r3, [r4, #16]
 801447e:	2104      	movs	r1, #4
 8014480:	68a2      	ldr	r2, [r4, #8]
 8014482:	7da0      	ldrb	r0, [r4, #22]
 8014484:	3304      	adds	r3, #4
 8014486:	444a      	add	r2, r9
 8014488:	7561      	strb	r1, [r4, #21]
 801448a:	1bdb      	subs	r3, r3, r7
 801448c:	f080 0001 	eor.w	r0, r0, #1
 8014490:	60a2      	str	r2, [r4, #8]
 8014492:	6123      	str	r3, [r4, #16]
 8014494:	b003      	add	sp, #12
 8014496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801449a:	2104      	movs	r1, #4
 801449c:	4620      	mov	r0, r4
 801449e:	f7fb f885 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80144a2:	b1c8      	cbz	r0, 80144d8 <ucdr_serialize_endian_uint32_t+0xd0>
 80144a4:	2d01      	cmp	r5, #1
 80144a6:	68a3      	ldr	r3, [r4, #8]
 80144a8:	d01c      	beq.n	80144e4 <ucdr_serialize_endian_uint32_t+0xdc>
 80144aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80144ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80144b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80144b6:	7018      	strb	r0, [r3, #0]
 80144b8:	68a3      	ldr	r3, [r4, #8]
 80144ba:	705a      	strb	r2, [r3, #1]
 80144bc:	68a3      	ldr	r3, [r4, #8]
 80144be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144c2:	7099      	strb	r1, [r3, #2]
 80144c4:	68a3      	ldr	r3, [r4, #8]
 80144c6:	70da      	strb	r2, [r3, #3]
 80144c8:	2104      	movs	r1, #4
 80144ca:	68a2      	ldr	r2, [r4, #8]
 80144cc:	6923      	ldr	r3, [r4, #16]
 80144ce:	440a      	add	r2, r1
 80144d0:	7561      	strb	r1, [r4, #21]
 80144d2:	440b      	add	r3, r1
 80144d4:	60a2      	str	r2, [r4, #8]
 80144d6:	6123      	str	r3, [r4, #16]
 80144d8:	7da0      	ldrb	r0, [r4, #22]
 80144da:	f080 0001 	eor.w	r0, r0, #1
 80144de:	b003      	add	sp, #12
 80144e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144e4:	9a01      	ldr	r2, [sp, #4]
 80144e6:	601a      	str	r2, [r3, #0]
 80144e8:	e7ee      	b.n	80144c8 <ucdr_serialize_endian_uint32_t+0xc0>
 80144ea:	68a2      	ldr	r2, [r4, #8]
 80144ec:	6923      	ldr	r3, [r4, #16]
 80144ee:	7da0      	ldrb	r0, [r4, #22]
 80144f0:	1bd2      	subs	r2, r2, r7
 80144f2:	1bdb      	subs	r3, r3, r7
 80144f4:	f884 8015 	strb.w	r8, [r4, #21]
 80144f8:	f080 0001 	eor.w	r0, r0, #1
 80144fc:	60a2      	str	r2, [r4, #8]
 80144fe:	6123      	str	r3, [r4, #16]
 8014500:	b003      	add	sp, #12
 8014502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014506:	68a3      	ldr	r3, [r4, #8]
 8014508:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801450c:	701a      	strb	r2, [r3, #0]
 801450e:	68a3      	ldr	r3, [r4, #8]
 8014510:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014514:	701a      	strb	r2, [r3, #0]
 8014516:	68a3      	ldr	r3, [r4, #8]
 8014518:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801451c:	701a      	strb	r2, [r3, #0]
 801451e:	e7ad      	b.n	801447c <ucdr_serialize_endian_uint32_t+0x74>
 8014520:	ad01      	add	r5, sp, #4
 8014522:	463a      	mov	r2, r7
 8014524:	4630      	mov	r0, r6
 8014526:	4629      	mov	r1, r5
 8014528:	f002 ff2d 	bl	8017386 <memcpy>
 801452c:	464a      	mov	r2, r9
 801452e:	19e9      	adds	r1, r5, r7
 8014530:	68a0      	ldr	r0, [r4, #8]
 8014532:	f002 ff28 	bl	8017386 <memcpy>
 8014536:	e7a1      	b.n	801447c <ucdr_serialize_endian_uint32_t+0x74>

08014538 <ucdr_deserialize_uint32_t>:
 8014538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801453c:	4604      	mov	r4, r0
 801453e:	460d      	mov	r5, r1
 8014540:	2104      	movs	r1, #4
 8014542:	f7fb f887 	bl	800f654 <ucdr_buffer_alignment>
 8014546:	4601      	mov	r1, r0
 8014548:	4620      	mov	r0, r4
 801454a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801454e:	f7fb f8c9 	bl	800f6e4 <ucdr_advance_buffer>
 8014552:	2104      	movs	r1, #4
 8014554:	4620      	mov	r0, r4
 8014556:	f7fb f81d 	bl	800f594 <ucdr_check_buffer_available_for>
 801455a:	2800      	cmp	r0, #0
 801455c:	d138      	bne.n	80145d0 <ucdr_deserialize_uint32_t+0x98>
 801455e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014562:	42b7      	cmp	r7, r6
 8014564:	d92f      	bls.n	80145c6 <ucdr_deserialize_uint32_t+0x8e>
 8014566:	6923      	ldr	r3, [r4, #16]
 8014568:	4620      	mov	r0, r4
 801456a:	60a7      	str	r7, [r4, #8]
 801456c:	1bbf      	subs	r7, r7, r6
 801456e:	443b      	add	r3, r7
 8014570:	f1c7 0904 	rsb	r9, r7, #4
 8014574:	6123      	str	r3, [r4, #16]
 8014576:	4649      	mov	r1, r9
 8014578:	f7fb f818 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801457c:	2800      	cmp	r0, #0
 801457e:	d046      	beq.n	801460e <ucdr_deserialize_uint32_t+0xd6>
 8014580:	7d23      	ldrb	r3, [r4, #20]
 8014582:	2b01      	cmp	r3, #1
 8014584:	d05c      	beq.n	8014640 <ucdr_deserialize_uint32_t+0x108>
 8014586:	78f3      	ldrb	r3, [r6, #3]
 8014588:	702b      	strb	r3, [r5, #0]
 801458a:	2f00      	cmp	r7, #0
 801458c:	d04c      	beq.n	8014628 <ucdr_deserialize_uint32_t+0xf0>
 801458e:	78b3      	ldrb	r3, [r6, #2]
 8014590:	2f01      	cmp	r7, #1
 8014592:	706b      	strb	r3, [r5, #1]
 8014594:	f105 0302 	add.w	r3, r5, #2
 8014598:	d04a      	beq.n	8014630 <ucdr_deserialize_uint32_t+0xf8>
 801459a:	7873      	ldrb	r3, [r6, #1]
 801459c:	2f02      	cmp	r7, #2
 801459e:	70ab      	strb	r3, [r5, #2]
 80145a0:	f105 0303 	add.w	r3, r5, #3
 80145a4:	d048      	beq.n	8014638 <ucdr_deserialize_uint32_t+0x100>
 80145a6:	7833      	ldrb	r3, [r6, #0]
 80145a8:	70eb      	strb	r3, [r5, #3]
 80145aa:	6923      	ldr	r3, [r4, #16]
 80145ac:	2104      	movs	r1, #4
 80145ae:	68a2      	ldr	r2, [r4, #8]
 80145b0:	3304      	adds	r3, #4
 80145b2:	7da0      	ldrb	r0, [r4, #22]
 80145b4:	444a      	add	r2, r9
 80145b6:	7561      	strb	r1, [r4, #21]
 80145b8:	1bdb      	subs	r3, r3, r7
 80145ba:	f080 0001 	eor.w	r0, r0, #1
 80145be:	60a2      	str	r2, [r4, #8]
 80145c0:	6123      	str	r3, [r4, #16]
 80145c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145c6:	2104      	movs	r1, #4
 80145c8:	4620      	mov	r0, r4
 80145ca:	f7fa ffef 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80145ce:	b1b0      	cbz	r0, 80145fe <ucdr_deserialize_uint32_t+0xc6>
 80145d0:	7d23      	ldrb	r3, [r4, #20]
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	68a3      	ldr	r3, [r4, #8]
 80145d6:	d017      	beq.n	8014608 <ucdr_deserialize_uint32_t+0xd0>
 80145d8:	78db      	ldrb	r3, [r3, #3]
 80145da:	702b      	strb	r3, [r5, #0]
 80145dc:	68a3      	ldr	r3, [r4, #8]
 80145de:	789b      	ldrb	r3, [r3, #2]
 80145e0:	706b      	strb	r3, [r5, #1]
 80145e2:	68a3      	ldr	r3, [r4, #8]
 80145e4:	785b      	ldrb	r3, [r3, #1]
 80145e6:	70ab      	strb	r3, [r5, #2]
 80145e8:	68a3      	ldr	r3, [r4, #8]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	70eb      	strb	r3, [r5, #3]
 80145ee:	2104      	movs	r1, #4
 80145f0:	68a2      	ldr	r2, [r4, #8]
 80145f2:	6923      	ldr	r3, [r4, #16]
 80145f4:	440a      	add	r2, r1
 80145f6:	7561      	strb	r1, [r4, #21]
 80145f8:	440b      	add	r3, r1
 80145fa:	60a2      	str	r2, [r4, #8]
 80145fc:	6123      	str	r3, [r4, #16]
 80145fe:	7da0      	ldrb	r0, [r4, #22]
 8014600:	f080 0001 	eor.w	r0, r0, #1
 8014604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	602b      	str	r3, [r5, #0]
 801460c:	e7ef      	b.n	80145ee <ucdr_deserialize_uint32_t+0xb6>
 801460e:	68a2      	ldr	r2, [r4, #8]
 8014610:	6923      	ldr	r3, [r4, #16]
 8014612:	1bd2      	subs	r2, r2, r7
 8014614:	7da0      	ldrb	r0, [r4, #22]
 8014616:	1bdb      	subs	r3, r3, r7
 8014618:	f884 8015 	strb.w	r8, [r4, #21]
 801461c:	f080 0001 	eor.w	r0, r0, #1
 8014620:	60a2      	str	r2, [r4, #8]
 8014622:	6123      	str	r3, [r4, #16]
 8014624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014628:	68a3      	ldr	r3, [r4, #8]
 801462a:	789b      	ldrb	r3, [r3, #2]
 801462c:	706b      	strb	r3, [r5, #1]
 801462e:	1cab      	adds	r3, r5, #2
 8014630:	68a2      	ldr	r2, [r4, #8]
 8014632:	7852      	ldrb	r2, [r2, #1]
 8014634:	f803 2b01 	strb.w	r2, [r3], #1
 8014638:	68a2      	ldr	r2, [r4, #8]
 801463a:	7812      	ldrb	r2, [r2, #0]
 801463c:	701a      	strb	r2, [r3, #0]
 801463e:	e7b4      	b.n	80145aa <ucdr_deserialize_uint32_t+0x72>
 8014640:	4631      	mov	r1, r6
 8014642:	463a      	mov	r2, r7
 8014644:	4628      	mov	r0, r5
 8014646:	f002 fe9e 	bl	8017386 <memcpy>
 801464a:	464a      	mov	r2, r9
 801464c:	19e8      	adds	r0, r5, r7
 801464e:	68a1      	ldr	r1, [r4, #8]
 8014650:	f002 fe99 	bl	8017386 <memcpy>
 8014654:	e7a9      	b.n	80145aa <ucdr_deserialize_uint32_t+0x72>
 8014656:	bf00      	nop

08014658 <ucdr_deserialize_endian_uint32_t>:
 8014658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801465c:	4604      	mov	r4, r0
 801465e:	460e      	mov	r6, r1
 8014660:	2104      	movs	r1, #4
 8014662:	4615      	mov	r5, r2
 8014664:	f7fa fff6 	bl	800f654 <ucdr_buffer_alignment>
 8014668:	4601      	mov	r1, r0
 801466a:	4620      	mov	r0, r4
 801466c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014670:	f7fb f838 	bl	800f6e4 <ucdr_advance_buffer>
 8014674:	2104      	movs	r1, #4
 8014676:	4620      	mov	r0, r4
 8014678:	f7fa ff8c 	bl	800f594 <ucdr_check_buffer_available_for>
 801467c:	2800      	cmp	r0, #0
 801467e:	d13c      	bne.n	80146fa <ucdr_deserialize_endian_uint32_t+0xa2>
 8014680:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014684:	42bb      	cmp	r3, r7
 8014686:	d933      	bls.n	80146f0 <ucdr_deserialize_endian_uint32_t+0x98>
 8014688:	eba3 0907 	sub.w	r9, r3, r7
 801468c:	60a3      	str	r3, [r4, #8]
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	4620      	mov	r0, r4
 8014692:	f1c9 0a04 	rsb	sl, r9, #4
 8014696:	444b      	add	r3, r9
 8014698:	4651      	mov	r1, sl
 801469a:	6123      	str	r3, [r4, #16]
 801469c:	f7fa ff86 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d048      	beq.n	8014736 <ucdr_deserialize_endian_uint32_t+0xde>
 80146a4:	2e01      	cmp	r6, #1
 80146a6:	d061      	beq.n	801476c <ucdr_deserialize_endian_uint32_t+0x114>
 80146a8:	78fb      	ldrb	r3, [r7, #3]
 80146aa:	702b      	strb	r3, [r5, #0]
 80146ac:	f1b9 0f00 	cmp.w	r9, #0
 80146b0:	d050      	beq.n	8014754 <ucdr_deserialize_endian_uint32_t+0xfc>
 80146b2:	78bb      	ldrb	r3, [r7, #2]
 80146b4:	f1b9 0f01 	cmp.w	r9, #1
 80146b8:	706b      	strb	r3, [r5, #1]
 80146ba:	f105 0302 	add.w	r3, r5, #2
 80146be:	d04d      	beq.n	801475c <ucdr_deserialize_endian_uint32_t+0x104>
 80146c0:	787b      	ldrb	r3, [r7, #1]
 80146c2:	f1b9 0f02 	cmp.w	r9, #2
 80146c6:	70ab      	strb	r3, [r5, #2]
 80146c8:	f105 0303 	add.w	r3, r5, #3
 80146cc:	d04a      	beq.n	8014764 <ucdr_deserialize_endian_uint32_t+0x10c>
 80146ce:	783b      	ldrb	r3, [r7, #0]
 80146d0:	70eb      	strb	r3, [r5, #3]
 80146d2:	6923      	ldr	r3, [r4, #16]
 80146d4:	2104      	movs	r1, #4
 80146d6:	68a2      	ldr	r2, [r4, #8]
 80146d8:	3304      	adds	r3, #4
 80146da:	7da0      	ldrb	r0, [r4, #22]
 80146dc:	4452      	add	r2, sl
 80146de:	7561      	strb	r1, [r4, #21]
 80146e0:	eba3 0309 	sub.w	r3, r3, r9
 80146e4:	f080 0001 	eor.w	r0, r0, #1
 80146e8:	60a2      	str	r2, [r4, #8]
 80146ea:	6123      	str	r3, [r4, #16]
 80146ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146f0:	2104      	movs	r1, #4
 80146f2:	4620      	mov	r0, r4
 80146f4:	f7fa ff5a 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80146f8:	b1a8      	cbz	r0, 8014726 <ucdr_deserialize_endian_uint32_t+0xce>
 80146fa:	2e01      	cmp	r6, #1
 80146fc:	68a3      	ldr	r3, [r4, #8]
 80146fe:	d017      	beq.n	8014730 <ucdr_deserialize_endian_uint32_t+0xd8>
 8014700:	78db      	ldrb	r3, [r3, #3]
 8014702:	702b      	strb	r3, [r5, #0]
 8014704:	68a3      	ldr	r3, [r4, #8]
 8014706:	789b      	ldrb	r3, [r3, #2]
 8014708:	706b      	strb	r3, [r5, #1]
 801470a:	68a3      	ldr	r3, [r4, #8]
 801470c:	785b      	ldrb	r3, [r3, #1]
 801470e:	70ab      	strb	r3, [r5, #2]
 8014710:	68a3      	ldr	r3, [r4, #8]
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	70eb      	strb	r3, [r5, #3]
 8014716:	2104      	movs	r1, #4
 8014718:	68a2      	ldr	r2, [r4, #8]
 801471a:	6923      	ldr	r3, [r4, #16]
 801471c:	440a      	add	r2, r1
 801471e:	7561      	strb	r1, [r4, #21]
 8014720:	440b      	add	r3, r1
 8014722:	60a2      	str	r2, [r4, #8]
 8014724:	6123      	str	r3, [r4, #16]
 8014726:	7da0      	ldrb	r0, [r4, #22]
 8014728:	f080 0001 	eor.w	r0, r0, #1
 801472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	602b      	str	r3, [r5, #0]
 8014734:	e7ef      	b.n	8014716 <ucdr_deserialize_endian_uint32_t+0xbe>
 8014736:	68a2      	ldr	r2, [r4, #8]
 8014738:	6923      	ldr	r3, [r4, #16]
 801473a:	eba2 0209 	sub.w	r2, r2, r9
 801473e:	7da0      	ldrb	r0, [r4, #22]
 8014740:	eba3 0309 	sub.w	r3, r3, r9
 8014744:	f884 8015 	strb.w	r8, [r4, #21]
 8014748:	f080 0001 	eor.w	r0, r0, #1
 801474c:	60a2      	str	r2, [r4, #8]
 801474e:	6123      	str	r3, [r4, #16]
 8014750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014754:	68a3      	ldr	r3, [r4, #8]
 8014756:	789b      	ldrb	r3, [r3, #2]
 8014758:	706b      	strb	r3, [r5, #1]
 801475a:	1cab      	adds	r3, r5, #2
 801475c:	68a2      	ldr	r2, [r4, #8]
 801475e:	7852      	ldrb	r2, [r2, #1]
 8014760:	f803 2b01 	strb.w	r2, [r3], #1
 8014764:	68a2      	ldr	r2, [r4, #8]
 8014766:	7812      	ldrb	r2, [r2, #0]
 8014768:	701a      	strb	r2, [r3, #0]
 801476a:	e7b2      	b.n	80146d2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801476c:	4639      	mov	r1, r7
 801476e:	464a      	mov	r2, r9
 8014770:	4628      	mov	r0, r5
 8014772:	f002 fe08 	bl	8017386 <memcpy>
 8014776:	4652      	mov	r2, sl
 8014778:	eb05 0009 	add.w	r0, r5, r9
 801477c:	68a1      	ldr	r1, [r4, #8]
 801477e:	f002 fe02 	bl	8017386 <memcpy>
 8014782:	e7a6      	b.n	80146d2 <ucdr_deserialize_endian_uint32_t+0x7a>

08014784 <ucdr_serialize_uint64_t>:
 8014784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014788:	4604      	mov	r4, r0
 801478a:	b082      	sub	sp, #8
 801478c:	2108      	movs	r1, #8
 801478e:	e9cd 2300 	strd	r2, r3, [sp]
 8014792:	f7fa ff5f 	bl	800f654 <ucdr_buffer_alignment>
 8014796:	4601      	mov	r1, r0
 8014798:	4620      	mov	r0, r4
 801479a:	7d67      	ldrb	r7, [r4, #21]
 801479c:	f7fa ffa2 	bl	800f6e4 <ucdr_advance_buffer>
 80147a0:	2108      	movs	r1, #8
 80147a2:	4620      	mov	r0, r4
 80147a4:	f7fa fef6 	bl	800f594 <ucdr_check_buffer_available_for>
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d14e      	bne.n	801484a <ucdr_serialize_uint64_t+0xc6>
 80147ac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80147b0:	42ab      	cmp	r3, r5
 80147b2:	d945      	bls.n	8014840 <ucdr_serialize_uint64_t+0xbc>
 80147b4:	1b5e      	subs	r6, r3, r5
 80147b6:	60a3      	str	r3, [r4, #8]
 80147b8:	6923      	ldr	r3, [r4, #16]
 80147ba:	4620      	mov	r0, r4
 80147bc:	f1c6 0808 	rsb	r8, r6, #8
 80147c0:	4433      	add	r3, r6
 80147c2:	4641      	mov	r1, r8
 80147c4:	6123      	str	r3, [r4, #16]
 80147c6:	f7fa fef1 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d074      	beq.n	80148b8 <ucdr_serialize_uint64_t+0x134>
 80147ce:	7d23      	ldrb	r3, [r4, #20]
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	f000 809b 	beq.w	801490c <ucdr_serialize_uint64_t+0x188>
 80147d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80147da:	702b      	strb	r3, [r5, #0]
 80147dc:	2e00      	cmp	r6, #0
 80147de:	d078      	beq.n	80148d2 <ucdr_serialize_uint64_t+0x14e>
 80147e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80147e4:	2e01      	cmp	r6, #1
 80147e6:	706b      	strb	r3, [r5, #1]
 80147e8:	d077      	beq.n	80148da <ucdr_serialize_uint64_t+0x156>
 80147ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80147ee:	2e02      	cmp	r6, #2
 80147f0:	70ab      	strb	r3, [r5, #2]
 80147f2:	d076      	beq.n	80148e2 <ucdr_serialize_uint64_t+0x15e>
 80147f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80147f8:	2e03      	cmp	r6, #3
 80147fa:	70eb      	strb	r3, [r5, #3]
 80147fc:	d075      	beq.n	80148ea <ucdr_serialize_uint64_t+0x166>
 80147fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014802:	2e04      	cmp	r6, #4
 8014804:	712b      	strb	r3, [r5, #4]
 8014806:	d074      	beq.n	80148f2 <ucdr_serialize_uint64_t+0x16e>
 8014808:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801480c:	2e05      	cmp	r6, #5
 801480e:	716b      	strb	r3, [r5, #5]
 8014810:	d073      	beq.n	80148fa <ucdr_serialize_uint64_t+0x176>
 8014812:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014816:	2e06      	cmp	r6, #6
 8014818:	71ab      	strb	r3, [r5, #6]
 801481a:	d072      	beq.n	8014902 <ucdr_serialize_uint64_t+0x17e>
 801481c:	f89d 3000 	ldrb.w	r3, [sp]
 8014820:	71eb      	strb	r3, [r5, #7]
 8014822:	6923      	ldr	r3, [r4, #16]
 8014824:	2108      	movs	r1, #8
 8014826:	68a2      	ldr	r2, [r4, #8]
 8014828:	3308      	adds	r3, #8
 801482a:	7da0      	ldrb	r0, [r4, #22]
 801482c:	4442      	add	r2, r8
 801482e:	7561      	strb	r1, [r4, #21]
 8014830:	1b9e      	subs	r6, r3, r6
 8014832:	f080 0001 	eor.w	r0, r0, #1
 8014836:	60a2      	str	r2, [r4, #8]
 8014838:	6126      	str	r6, [r4, #16]
 801483a:	b002      	add	sp, #8
 801483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014840:	2108      	movs	r1, #8
 8014842:	4620      	mov	r0, r4
 8014844:	f7fa feb2 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014848:	b350      	cbz	r0, 80148a0 <ucdr_serialize_uint64_t+0x11c>
 801484a:	7d23      	ldrb	r3, [r4, #20]
 801484c:	2b01      	cmp	r3, #1
 801484e:	d02d      	beq.n	80148ac <ucdr_serialize_uint64_t+0x128>
 8014850:	68a3      	ldr	r3, [r4, #8]
 8014852:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014856:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801485a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801485e:	7018      	strb	r0, [r3, #0]
 8014860:	68a3      	ldr	r3, [r4, #8]
 8014862:	705a      	strb	r2, [r3, #1]
 8014864:	68a3      	ldr	r3, [r4, #8]
 8014866:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801486a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801486e:	7099      	strb	r1, [r3, #2]
 8014870:	68a3      	ldr	r3, [r4, #8]
 8014872:	70da      	strb	r2, [r3, #3]
 8014874:	68a3      	ldr	r3, [r4, #8]
 8014876:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801487a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801487e:	7118      	strb	r0, [r3, #4]
 8014880:	68a3      	ldr	r3, [r4, #8]
 8014882:	715a      	strb	r2, [r3, #5]
 8014884:	68a3      	ldr	r3, [r4, #8]
 8014886:	f89d 2000 	ldrb.w	r2, [sp]
 801488a:	7199      	strb	r1, [r3, #6]
 801488c:	68a3      	ldr	r3, [r4, #8]
 801488e:	71da      	strb	r2, [r3, #7]
 8014890:	2108      	movs	r1, #8
 8014892:	68a2      	ldr	r2, [r4, #8]
 8014894:	6923      	ldr	r3, [r4, #16]
 8014896:	440a      	add	r2, r1
 8014898:	7561      	strb	r1, [r4, #21]
 801489a:	440b      	add	r3, r1
 801489c:	60a2      	str	r2, [r4, #8]
 801489e:	6123      	str	r3, [r4, #16]
 80148a0:	7da0      	ldrb	r0, [r4, #22]
 80148a2:	f080 0001 	eor.w	r0, r0, #1
 80148a6:	b002      	add	sp, #8
 80148a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148ac:	466b      	mov	r3, sp
 80148ae:	68a2      	ldr	r2, [r4, #8]
 80148b0:	cb03      	ldmia	r3!, {r0, r1}
 80148b2:	6010      	str	r0, [r2, #0]
 80148b4:	6051      	str	r1, [r2, #4]
 80148b6:	e7eb      	b.n	8014890 <ucdr_serialize_uint64_t+0x10c>
 80148b8:	68a2      	ldr	r2, [r4, #8]
 80148ba:	6923      	ldr	r3, [r4, #16]
 80148bc:	7da0      	ldrb	r0, [r4, #22]
 80148be:	1b92      	subs	r2, r2, r6
 80148c0:	1b9b      	subs	r3, r3, r6
 80148c2:	7567      	strb	r7, [r4, #21]
 80148c4:	f080 0001 	eor.w	r0, r0, #1
 80148c8:	60a2      	str	r2, [r4, #8]
 80148ca:	6123      	str	r3, [r4, #16]
 80148cc:	b002      	add	sp, #8
 80148ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d2:	68a3      	ldr	r3, [r4, #8]
 80148d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80148d8:	701a      	strb	r2, [r3, #0]
 80148da:	68a3      	ldr	r3, [r4, #8]
 80148dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80148e0:	701a      	strb	r2, [r3, #0]
 80148e2:	68a3      	ldr	r3, [r4, #8]
 80148e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80148e8:	701a      	strb	r2, [r3, #0]
 80148ea:	68a3      	ldr	r3, [r4, #8]
 80148ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80148f0:	701a      	strb	r2, [r3, #0]
 80148f2:	68a3      	ldr	r3, [r4, #8]
 80148f4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80148f8:	701a      	strb	r2, [r3, #0]
 80148fa:	68a3      	ldr	r3, [r4, #8]
 80148fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014900:	701a      	strb	r2, [r3, #0]
 8014902:	68a3      	ldr	r3, [r4, #8]
 8014904:	f89d 2000 	ldrb.w	r2, [sp]
 8014908:	701a      	strb	r2, [r3, #0]
 801490a:	e78a      	b.n	8014822 <ucdr_serialize_uint64_t+0x9e>
 801490c:	4628      	mov	r0, r5
 801490e:	466d      	mov	r5, sp
 8014910:	4632      	mov	r2, r6
 8014912:	4629      	mov	r1, r5
 8014914:	f002 fd37 	bl	8017386 <memcpy>
 8014918:	4642      	mov	r2, r8
 801491a:	19a9      	adds	r1, r5, r6
 801491c:	68a0      	ldr	r0, [r4, #8]
 801491e:	f002 fd32 	bl	8017386 <memcpy>
 8014922:	e77e      	b.n	8014822 <ucdr_serialize_uint64_t+0x9e>

08014924 <ucdr_serialize_int16_t>:
 8014924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014928:	460b      	mov	r3, r1
 801492a:	b082      	sub	sp, #8
 801492c:	4604      	mov	r4, r0
 801492e:	2102      	movs	r1, #2
 8014930:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014934:	f7fa fe8e 	bl	800f654 <ucdr_buffer_alignment>
 8014938:	4601      	mov	r1, r0
 801493a:	4620      	mov	r0, r4
 801493c:	7d67      	ldrb	r7, [r4, #21]
 801493e:	f7fa fed1 	bl	800f6e4 <ucdr_advance_buffer>
 8014942:	2102      	movs	r1, #2
 8014944:	4620      	mov	r0, r4
 8014946:	f7fa fe25 	bl	800f594 <ucdr_check_buffer_available_for>
 801494a:	bb78      	cbnz	r0, 80149ac <ucdr_serialize_int16_t+0x88>
 801494c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014950:	42ab      	cmp	r3, r5
 8014952:	d926      	bls.n	80149a2 <ucdr_serialize_int16_t+0x7e>
 8014954:	1b5e      	subs	r6, r3, r5
 8014956:	60a3      	str	r3, [r4, #8]
 8014958:	6923      	ldr	r3, [r4, #16]
 801495a:	4620      	mov	r0, r4
 801495c:	f1c6 0802 	rsb	r8, r6, #2
 8014960:	4433      	add	r3, r6
 8014962:	4641      	mov	r1, r8
 8014964:	6123      	str	r3, [r4, #16]
 8014966:	f7fa fe21 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 801496a:	2800      	cmp	r0, #0
 801496c:	d03b      	beq.n	80149e6 <ucdr_serialize_int16_t+0xc2>
 801496e:	7d23      	ldrb	r3, [r4, #20]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d04a      	beq.n	8014a0a <ucdr_serialize_int16_t+0xe6>
 8014974:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014978:	702b      	strb	r3, [r5, #0]
 801497a:	2e00      	cmp	r6, #0
 801497c:	d040      	beq.n	8014a00 <ucdr_serialize_int16_t+0xdc>
 801497e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014982:	706b      	strb	r3, [r5, #1]
 8014984:	6923      	ldr	r3, [r4, #16]
 8014986:	2102      	movs	r1, #2
 8014988:	68a2      	ldr	r2, [r4, #8]
 801498a:	3302      	adds	r3, #2
 801498c:	7da0      	ldrb	r0, [r4, #22]
 801498e:	4442      	add	r2, r8
 8014990:	7561      	strb	r1, [r4, #21]
 8014992:	1b9e      	subs	r6, r3, r6
 8014994:	f080 0001 	eor.w	r0, r0, #1
 8014998:	60a2      	str	r2, [r4, #8]
 801499a:	6126      	str	r6, [r4, #16]
 801499c:	b002      	add	sp, #8
 801499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a2:	2102      	movs	r1, #2
 80149a4:	4620      	mov	r0, r4
 80149a6:	f7fa fe01 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 80149aa:	b190      	cbz	r0, 80149d2 <ucdr_serialize_int16_t+0xae>
 80149ac:	7d23      	ldrb	r3, [r4, #20]
 80149ae:	2b01      	cmp	r3, #1
 80149b0:	68a3      	ldr	r3, [r4, #8]
 80149b2:	d014      	beq.n	80149de <ucdr_serialize_int16_t+0xba>
 80149b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80149b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80149bc:	7019      	strb	r1, [r3, #0]
 80149be:	68a3      	ldr	r3, [r4, #8]
 80149c0:	705a      	strb	r2, [r3, #1]
 80149c2:	2102      	movs	r1, #2
 80149c4:	68a2      	ldr	r2, [r4, #8]
 80149c6:	6923      	ldr	r3, [r4, #16]
 80149c8:	440a      	add	r2, r1
 80149ca:	7561      	strb	r1, [r4, #21]
 80149cc:	440b      	add	r3, r1
 80149ce:	60a2      	str	r2, [r4, #8]
 80149d0:	6123      	str	r3, [r4, #16]
 80149d2:	7da0      	ldrb	r0, [r4, #22]
 80149d4:	f080 0001 	eor.w	r0, r0, #1
 80149d8:	b002      	add	sp, #8
 80149da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80149e2:	801a      	strh	r2, [r3, #0]
 80149e4:	e7ed      	b.n	80149c2 <ucdr_serialize_int16_t+0x9e>
 80149e6:	68a2      	ldr	r2, [r4, #8]
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	7da0      	ldrb	r0, [r4, #22]
 80149ec:	1b92      	subs	r2, r2, r6
 80149ee:	1b9b      	subs	r3, r3, r6
 80149f0:	7567      	strb	r7, [r4, #21]
 80149f2:	f080 0001 	eor.w	r0, r0, #1
 80149f6:	60a2      	str	r2, [r4, #8]
 80149f8:	6123      	str	r3, [r4, #16]
 80149fa:	b002      	add	sp, #8
 80149fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a00:	68a3      	ldr	r3, [r4, #8]
 8014a02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014a06:	701a      	strb	r2, [r3, #0]
 8014a08:	e7bc      	b.n	8014984 <ucdr_serialize_int16_t+0x60>
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	f10d 0506 	add.w	r5, sp, #6
 8014a10:	4632      	mov	r2, r6
 8014a12:	4629      	mov	r1, r5
 8014a14:	f002 fcb7 	bl	8017386 <memcpy>
 8014a18:	4642      	mov	r2, r8
 8014a1a:	19a9      	adds	r1, r5, r6
 8014a1c:	68a0      	ldr	r0, [r4, #8]
 8014a1e:	f002 fcb2 	bl	8017386 <memcpy>
 8014a22:	e7af      	b.n	8014984 <ucdr_serialize_int16_t+0x60>

08014a24 <ucdr_deserialize_int16_t>:
 8014a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a28:	4604      	mov	r4, r0
 8014a2a:	460d      	mov	r5, r1
 8014a2c:	2102      	movs	r1, #2
 8014a2e:	f7fa fe11 	bl	800f654 <ucdr_buffer_alignment>
 8014a32:	4601      	mov	r1, r0
 8014a34:	4620      	mov	r0, r4
 8014a36:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014a3a:	f7fa fe53 	bl	800f6e4 <ucdr_advance_buffer>
 8014a3e:	2102      	movs	r1, #2
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7fa fda7 	bl	800f594 <ucdr_check_buffer_available_for>
 8014a46:	bb60      	cbnz	r0, 8014aa2 <ucdr_deserialize_int16_t+0x7e>
 8014a48:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8014a4c:	42be      	cmp	r6, r7
 8014a4e:	d923      	bls.n	8014a98 <ucdr_deserialize_int16_t+0x74>
 8014a50:	6923      	ldr	r3, [r4, #16]
 8014a52:	4620      	mov	r0, r4
 8014a54:	60a6      	str	r6, [r4, #8]
 8014a56:	1bf6      	subs	r6, r6, r7
 8014a58:	4433      	add	r3, r6
 8014a5a:	f1c6 0902 	rsb	r9, r6, #2
 8014a5e:	6123      	str	r3, [r4, #16]
 8014a60:	4649      	mov	r1, r9
 8014a62:	f7fa fda3 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d034      	beq.n	8014ad4 <ucdr_deserialize_int16_t+0xb0>
 8014a6a:	7d23      	ldrb	r3, [r4, #20]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d042      	beq.n	8014af6 <ucdr_deserialize_int16_t+0xd2>
 8014a70:	787b      	ldrb	r3, [r7, #1]
 8014a72:	702b      	strb	r3, [r5, #0]
 8014a74:	2e00      	cmp	r6, #0
 8014a76:	d03a      	beq.n	8014aee <ucdr_deserialize_int16_t+0xca>
 8014a78:	783b      	ldrb	r3, [r7, #0]
 8014a7a:	706b      	strb	r3, [r5, #1]
 8014a7c:	6923      	ldr	r3, [r4, #16]
 8014a7e:	2102      	movs	r1, #2
 8014a80:	68a2      	ldr	r2, [r4, #8]
 8014a82:	3302      	adds	r3, #2
 8014a84:	7da0      	ldrb	r0, [r4, #22]
 8014a86:	444a      	add	r2, r9
 8014a88:	7561      	strb	r1, [r4, #21]
 8014a8a:	1b9b      	subs	r3, r3, r6
 8014a8c:	f080 0001 	eor.w	r0, r0, #1
 8014a90:	60a2      	str	r2, [r4, #8]
 8014a92:	6123      	str	r3, [r4, #16]
 8014a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a98:	2102      	movs	r1, #2
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f7fa fd86 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014aa0:	b180      	cbz	r0, 8014ac4 <ucdr_deserialize_int16_t+0xa0>
 8014aa2:	7d23      	ldrb	r3, [r4, #20]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	68a3      	ldr	r3, [r4, #8]
 8014aa8:	d011      	beq.n	8014ace <ucdr_deserialize_int16_t+0xaa>
 8014aaa:	785b      	ldrb	r3, [r3, #1]
 8014aac:	702b      	strb	r3, [r5, #0]
 8014aae:	68a3      	ldr	r3, [r4, #8]
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	706b      	strb	r3, [r5, #1]
 8014ab4:	2102      	movs	r1, #2
 8014ab6:	68a2      	ldr	r2, [r4, #8]
 8014ab8:	6923      	ldr	r3, [r4, #16]
 8014aba:	440a      	add	r2, r1
 8014abc:	7561      	strb	r1, [r4, #21]
 8014abe:	440b      	add	r3, r1
 8014ac0:	60a2      	str	r2, [r4, #8]
 8014ac2:	6123      	str	r3, [r4, #16]
 8014ac4:	7da0      	ldrb	r0, [r4, #22]
 8014ac6:	f080 0001 	eor.w	r0, r0, #1
 8014aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ace:	881b      	ldrh	r3, [r3, #0]
 8014ad0:	802b      	strh	r3, [r5, #0]
 8014ad2:	e7ef      	b.n	8014ab4 <ucdr_deserialize_int16_t+0x90>
 8014ad4:	68a2      	ldr	r2, [r4, #8]
 8014ad6:	6923      	ldr	r3, [r4, #16]
 8014ad8:	1b92      	subs	r2, r2, r6
 8014ada:	7da0      	ldrb	r0, [r4, #22]
 8014adc:	1b9b      	subs	r3, r3, r6
 8014ade:	f884 8015 	strb.w	r8, [r4, #21]
 8014ae2:	f080 0001 	eor.w	r0, r0, #1
 8014ae6:	60a2      	str	r2, [r4, #8]
 8014ae8:	6123      	str	r3, [r4, #16]
 8014aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aee:	68a3      	ldr	r3, [r4, #8]
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	706b      	strb	r3, [r5, #1]
 8014af4:	e7c2      	b.n	8014a7c <ucdr_deserialize_int16_t+0x58>
 8014af6:	4639      	mov	r1, r7
 8014af8:	4632      	mov	r2, r6
 8014afa:	4628      	mov	r0, r5
 8014afc:	f002 fc43 	bl	8017386 <memcpy>
 8014b00:	464a      	mov	r2, r9
 8014b02:	19a8      	adds	r0, r5, r6
 8014b04:	68a1      	ldr	r1, [r4, #8]
 8014b06:	f002 fc3e 	bl	8017386 <memcpy>
 8014b0a:	e7b7      	b.n	8014a7c <ucdr_deserialize_int16_t+0x58>

08014b0c <ucdr_deserialize_int32_t>:
 8014b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b10:	4604      	mov	r4, r0
 8014b12:	460d      	mov	r5, r1
 8014b14:	2104      	movs	r1, #4
 8014b16:	f7fa fd9d 	bl	800f654 <ucdr_buffer_alignment>
 8014b1a:	4601      	mov	r1, r0
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014b22:	f7fa fddf 	bl	800f6e4 <ucdr_advance_buffer>
 8014b26:	2104      	movs	r1, #4
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7fa fd33 	bl	800f594 <ucdr_check_buffer_available_for>
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	d138      	bne.n	8014ba4 <ucdr_deserialize_int32_t+0x98>
 8014b32:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014b36:	42b7      	cmp	r7, r6
 8014b38:	d92f      	bls.n	8014b9a <ucdr_deserialize_int32_t+0x8e>
 8014b3a:	6923      	ldr	r3, [r4, #16]
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	60a7      	str	r7, [r4, #8]
 8014b40:	1bbf      	subs	r7, r7, r6
 8014b42:	443b      	add	r3, r7
 8014b44:	f1c7 0904 	rsb	r9, r7, #4
 8014b48:	6123      	str	r3, [r4, #16]
 8014b4a:	4649      	mov	r1, r9
 8014b4c:	f7fa fd2e 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d046      	beq.n	8014be2 <ucdr_deserialize_int32_t+0xd6>
 8014b54:	7d23      	ldrb	r3, [r4, #20]
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d05c      	beq.n	8014c14 <ucdr_deserialize_int32_t+0x108>
 8014b5a:	78f3      	ldrb	r3, [r6, #3]
 8014b5c:	702b      	strb	r3, [r5, #0]
 8014b5e:	2f00      	cmp	r7, #0
 8014b60:	d04c      	beq.n	8014bfc <ucdr_deserialize_int32_t+0xf0>
 8014b62:	78b3      	ldrb	r3, [r6, #2]
 8014b64:	2f01      	cmp	r7, #1
 8014b66:	706b      	strb	r3, [r5, #1]
 8014b68:	f105 0302 	add.w	r3, r5, #2
 8014b6c:	d04a      	beq.n	8014c04 <ucdr_deserialize_int32_t+0xf8>
 8014b6e:	7873      	ldrb	r3, [r6, #1]
 8014b70:	2f02      	cmp	r7, #2
 8014b72:	70ab      	strb	r3, [r5, #2]
 8014b74:	f105 0303 	add.w	r3, r5, #3
 8014b78:	d048      	beq.n	8014c0c <ucdr_deserialize_int32_t+0x100>
 8014b7a:	7833      	ldrb	r3, [r6, #0]
 8014b7c:	70eb      	strb	r3, [r5, #3]
 8014b7e:	6923      	ldr	r3, [r4, #16]
 8014b80:	2104      	movs	r1, #4
 8014b82:	68a2      	ldr	r2, [r4, #8]
 8014b84:	3304      	adds	r3, #4
 8014b86:	7da0      	ldrb	r0, [r4, #22]
 8014b88:	444a      	add	r2, r9
 8014b8a:	7561      	strb	r1, [r4, #21]
 8014b8c:	1bdb      	subs	r3, r3, r7
 8014b8e:	f080 0001 	eor.w	r0, r0, #1
 8014b92:	60a2      	str	r2, [r4, #8]
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b9a:	2104      	movs	r1, #4
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	f7fa fd05 	bl	800f5ac <ucdr_check_final_buffer_behavior>
 8014ba2:	b1b0      	cbz	r0, 8014bd2 <ucdr_deserialize_int32_t+0xc6>
 8014ba4:	7d23      	ldrb	r3, [r4, #20]
 8014ba6:	2b01      	cmp	r3, #1
 8014ba8:	68a3      	ldr	r3, [r4, #8]
 8014baa:	d017      	beq.n	8014bdc <ucdr_deserialize_int32_t+0xd0>
 8014bac:	78db      	ldrb	r3, [r3, #3]
 8014bae:	702b      	strb	r3, [r5, #0]
 8014bb0:	68a3      	ldr	r3, [r4, #8]
 8014bb2:	789b      	ldrb	r3, [r3, #2]
 8014bb4:	706b      	strb	r3, [r5, #1]
 8014bb6:	68a3      	ldr	r3, [r4, #8]
 8014bb8:	785b      	ldrb	r3, [r3, #1]
 8014bba:	70ab      	strb	r3, [r5, #2]
 8014bbc:	68a3      	ldr	r3, [r4, #8]
 8014bbe:	781b      	ldrb	r3, [r3, #0]
 8014bc0:	70eb      	strb	r3, [r5, #3]
 8014bc2:	2104      	movs	r1, #4
 8014bc4:	68a2      	ldr	r2, [r4, #8]
 8014bc6:	6923      	ldr	r3, [r4, #16]
 8014bc8:	440a      	add	r2, r1
 8014bca:	7561      	strb	r1, [r4, #21]
 8014bcc:	440b      	add	r3, r1
 8014bce:	60a2      	str	r2, [r4, #8]
 8014bd0:	6123      	str	r3, [r4, #16]
 8014bd2:	7da0      	ldrb	r0, [r4, #22]
 8014bd4:	f080 0001 	eor.w	r0, r0, #1
 8014bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	602b      	str	r3, [r5, #0]
 8014be0:	e7ef      	b.n	8014bc2 <ucdr_deserialize_int32_t+0xb6>
 8014be2:	68a2      	ldr	r2, [r4, #8]
 8014be4:	6923      	ldr	r3, [r4, #16]
 8014be6:	1bd2      	subs	r2, r2, r7
 8014be8:	7da0      	ldrb	r0, [r4, #22]
 8014bea:	1bdb      	subs	r3, r3, r7
 8014bec:	f884 8015 	strb.w	r8, [r4, #21]
 8014bf0:	f080 0001 	eor.w	r0, r0, #1
 8014bf4:	60a2      	str	r2, [r4, #8]
 8014bf6:	6123      	str	r3, [r4, #16]
 8014bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bfc:	68a3      	ldr	r3, [r4, #8]
 8014bfe:	789b      	ldrb	r3, [r3, #2]
 8014c00:	706b      	strb	r3, [r5, #1]
 8014c02:	1cab      	adds	r3, r5, #2
 8014c04:	68a2      	ldr	r2, [r4, #8]
 8014c06:	7852      	ldrb	r2, [r2, #1]
 8014c08:	f803 2b01 	strb.w	r2, [r3], #1
 8014c0c:	68a2      	ldr	r2, [r4, #8]
 8014c0e:	7812      	ldrb	r2, [r2, #0]
 8014c10:	701a      	strb	r2, [r3, #0]
 8014c12:	e7b4      	b.n	8014b7e <ucdr_deserialize_int32_t+0x72>
 8014c14:	4631      	mov	r1, r6
 8014c16:	463a      	mov	r2, r7
 8014c18:	4628      	mov	r0, r5
 8014c1a:	f002 fbb4 	bl	8017386 <memcpy>
 8014c1e:	464a      	mov	r2, r9
 8014c20:	19e8      	adds	r0, r5, r7
 8014c22:	68a1      	ldr	r1, [r4, #8]
 8014c24:	f002 fbaf 	bl	8017386 <memcpy>
 8014c28:	e7a9      	b.n	8014b7e <ucdr_deserialize_int32_t+0x72>
 8014c2a:	bf00      	nop

08014c2c <ucdr_serialize_string>:
 8014c2c:	b510      	push	{r4, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	4604      	mov	r4, r0
 8014c32:	4608      	mov	r0, r1
 8014c34:	9101      	str	r1, [sp, #4]
 8014c36:	f7eb fb0d 	bl	8000254 <strlen>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	9901      	ldr	r1, [sp, #4]
 8014c3e:	4620      	mov	r0, r4
 8014c40:	3201      	adds	r2, #1
 8014c42:	b002      	add	sp, #8
 8014c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c48:	f7fa bd6c 	b.w	800f724 <ucdr_serialize_sequence_char>

08014c4c <ucdr_deserialize_string>:
 8014c4c:	b500      	push	{lr}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	ab01      	add	r3, sp, #4
 8014c52:	f7fa fd79 	bl	800f748 <ucdr_deserialize_sequence_char>
 8014c56:	b003      	add	sp, #12
 8014c58:	f85d fb04 	ldr.w	pc, [sp], #4

08014c5c <get_custom_error>:
 8014c5c:	4b01      	ldr	r3, [pc, #4]	@ (8014c64 <get_custom_error+0x8>)
 8014c5e:	7818      	ldrb	r0, [r3, #0]
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	200125a8 	.word	0x200125a8

08014c68 <recv_custom_msg>:
 8014c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c6c:	4693      	mov	fp, r2
 8014c6e:	b089      	sub	sp, #36	@ 0x24
 8014c70:	2200      	movs	r2, #0
 8014c72:	4604      	mov	r4, r0
 8014c74:	468a      	mov	sl, r1
 8014c76:	9305      	str	r3, [sp, #20]
 8014c78:	f88d 201e 	strb.w	r2, [sp, #30]
 8014c7c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014c80:	b322      	cbz	r2, 8014ccc <recv_custom_msg+0x64>
 8014c82:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8014c86:	f10d 081f 	add.w	r8, sp, #31
 8014c8a:	af05      	add	r7, sp, #20
 8014c8c:	f10d 061e 	add.w	r6, sp, #30
 8014c90:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8014c94:	e002      	b.n	8014c9c <recv_custom_msg+0x34>
 8014c96:	9b05      	ldr	r3, [sp, #20]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	dd0f      	ble.n	8014cbc <recv_custom_msg+0x54>
 8014c9c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8014ca0:	4623      	mov	r3, r4
 8014ca2:	4622      	mov	r2, r4
 8014ca4:	4648      	mov	r0, r9
 8014ca6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014caa:	e9cd 5600 	strd	r5, r6, [sp]
 8014cae:	f000 ffe3 	bl	8015c78 <uxr_read_framed_msg>
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	d0ef      	beq.n	8014c96 <recv_custom_msg+0x2e>
 8014cb6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014cba:	b1b3      	cbz	r3, 8014cea <recv_custom_msg+0x82>
 8014cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8014cfc <recv_custom_msg+0x94>)
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014cc4:	701a      	strb	r2, [r3, #0]
 8014cc6:	b009      	add	sp, #36	@ 0x24
 8014cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ccc:	f10d 021f 	add.w	r2, sp, #31
 8014cd0:	4601      	mov	r1, r0
 8014cd2:	9200      	str	r2, [sp, #0]
 8014cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014cd8:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014cdc:	47a8      	blx	r5
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	d0ec      	beq.n	8014cbc <recv_custom_msg+0x54>
 8014ce2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d1e8      	bne.n	8014cbc <recv_custom_msg+0x54>
 8014cea:	f8cb 0000 	str.w	r0, [fp]
 8014cee:	2001      	movs	r0, #1
 8014cf0:	f8ca 4000 	str.w	r4, [sl]
 8014cf4:	b009      	add	sp, #36	@ 0x24
 8014cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfa:	bf00      	nop
 8014cfc:	200125a8 	.word	0x200125a8

08014d00 <send_custom_msg>:
 8014d00:	b530      	push	{r4, r5, lr}
 8014d02:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014d06:	b087      	sub	sp, #28
 8014d08:	4614      	mov	r4, r2
 8014d0a:	b995      	cbnz	r5, 8014d32 <send_custom_msg+0x32>
 8014d0c:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8014d10:	f10d 0317 	add.w	r3, sp, #23
 8014d14:	47a8      	blx	r5
 8014d16:	1e03      	subs	r3, r0, #0
 8014d18:	bf18      	it	ne
 8014d1a:	2301      	movne	r3, #1
 8014d1c:	42a0      	cmp	r0, r4
 8014d1e:	bf18      	it	ne
 8014d20:	2300      	movne	r3, #0
 8014d22:	b91b      	cbnz	r3, 8014d2c <send_custom_msg+0x2c>
 8014d24:	4a0a      	ldr	r2, [pc, #40]	@ (8014d50 <send_custom_msg+0x50>)
 8014d26:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014d2a:	7011      	strb	r1, [r2, #0]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	b007      	add	sp, #28
 8014d30:	bd30      	pop	{r4, r5, pc}
 8014d32:	460b      	mov	r3, r1
 8014d34:	2200      	movs	r2, #0
 8014d36:	f10d 0117 	add.w	r1, sp, #23
 8014d3a:	9400      	str	r4, [sp, #0]
 8014d3c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014d40:	4602      	mov	r2, r0
 8014d42:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8014d46:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014d4a:	f000 fdb7 	bl	80158bc <uxr_write_framed_msg>
 8014d4e:	e7e2      	b.n	8014d16 <send_custom_msg+0x16>
 8014d50:	200125a8 	.word	0x200125a8

08014d54 <uxr_set_custom_transport_callbacks>:
 8014d54:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014d58:	9901      	ldr	r1, [sp, #4]
 8014d5a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014d5e:	9b00      	ldr	r3, [sp, #0]
 8014d60:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop

08014d68 <uxr_init_custom_transport>:
 8014d68:	b538      	push	{r3, r4, r5, lr}
 8014d6a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014d6e:	b303      	cbz	r3, 8014db2 <uxr_init_custom_transport+0x4a>
 8014d70:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014d74:	4604      	mov	r4, r0
 8014d76:	b1e2      	cbz	r2, 8014db2 <uxr_init_custom_transport+0x4a>
 8014d78:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014d7c:	b1ca      	cbz	r2, 8014db2 <uxr_init_custom_transport+0x4a>
 8014d7e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014d82:	b1b2      	cbz	r2, 8014db2 <uxr_init_custom_transport+0x4a>
 8014d84:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014d88:	4798      	blx	r3
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	b188      	cbz	r0, 8014db2 <uxr_init_custom_transport+0x4a>
 8014d8e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014d92:	b98b      	cbnz	r3, 8014db8 <uxr_init_custom_transport+0x50>
 8014d94:	4b0b      	ldr	r3, [pc, #44]	@ (8014dc4 <uxr_init_custom_transport+0x5c>)
 8014d96:	4628      	mov	r0, r5
 8014d98:	490b      	ldr	r1, [pc, #44]	@ (8014dc8 <uxr_init_custom_transport+0x60>)
 8014d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8014dcc <uxr_init_custom_transport+0x64>)
 8014d9c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014da4:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014da8:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014dac:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014db0:	bd38      	pop	{r3, r4, r5, pc}
 8014db2:	2500      	movs	r5, #0
 8014db4:	4628      	mov	r0, r5
 8014db6:	bd38      	pop	{r3, r4, r5, pc}
 8014db8:	2100      	movs	r1, #0
 8014dba:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014dbe:	f000 fd77 	bl	80158b0 <uxr_init_framing_io>
 8014dc2:	e7e7      	b.n	8014d94 <uxr_init_custom_transport+0x2c>
 8014dc4:	08014c69 	.word	0x08014c69
 8014dc8:	08014d01 	.word	0x08014d01
 8014dcc:	08014c5d 	.word	0x08014c5d

08014dd0 <uxr_close_custom_transport>:
 8014dd0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014dd4:	4718      	bx	r3
 8014dd6:	bf00      	nop

08014dd8 <uxr_init_input_best_effort_stream>:
 8014dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014ddc:	8003      	strh	r3, [r0, #0]
 8014dde:	4770      	bx	lr

08014de0 <uxr_reset_input_best_effort_stream>:
 8014de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014de4:	8003      	strh	r3, [r0, #0]
 8014de6:	4770      	bx	lr

08014de8 <uxr_receive_best_effort_message>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4604      	mov	r4, r0
 8014dec:	8800      	ldrh	r0, [r0, #0]
 8014dee:	460d      	mov	r5, r1
 8014df0:	f000 fd46 	bl	8015880 <uxr_seq_num_cmp>
 8014df4:	4603      	mov	r3, r0
 8014df6:	0fc0      	lsrs	r0, r0, #31
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	bfb8      	it	lt
 8014dfc:	8025      	strhlt	r5, [r4, #0]
 8014dfe:	bd38      	pop	{r3, r4, r5, pc}

08014e00 <on_full_input_buffer>:
 8014e00:	b570      	push	{r4, r5, r6, lr}
 8014e02:	460c      	mov	r4, r1
 8014e04:	4605      	mov	r5, r0
 8014e06:	8908      	ldrh	r0, [r1, #8]
 8014e08:	682b      	ldr	r3, [r5, #0]
 8014e0a:	7d26      	ldrb	r6, [r4, #20]
 8014e0c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8014e10:	fbb2 f2f0 	udiv	r2, r2, r0
 8014e14:	eba3 0c01 	sub.w	ip, r3, r1
 8014e18:	fbbc fcf2 	udiv	ip, ip, r2
 8014e1c:	f10c 0c01 	add.w	ip, ip, #1
 8014e20:	fa1f f38c 	uxth.w	r3, ip
 8014e24:	fbb3 fcf0 	udiv	ip, r3, r0
 8014e28:	fb00 331c 	mls	r3, r0, ip, r3
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	fb02 f303 	mul.w	r3, r2, r3
 8014e32:	1d18      	adds	r0, r3, #4
 8014e34:	4408      	add	r0, r1
 8014e36:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014e3a:	b116      	cbz	r6, 8014e42 <on_full_input_buffer+0x42>
 8014e3c:	2600      	movs	r6, #0
 8014e3e:	f840 6c04 	str.w	r6, [r0, #-4]
 8014e42:	2a03      	cmp	r2, #3
 8014e44:	d801      	bhi.n	8014e4a <on_full_input_buffer+0x4a>
 8014e46:	2001      	movs	r0, #1
 8014e48:	bd70      	pop	{r4, r5, r6, pc}
 8014e4a:	3308      	adds	r3, #8
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	3a04      	subs	r2, #4
 8014e50:	4419      	add	r1, r3
 8014e52:	692b      	ldr	r3, [r5, #16]
 8014e54:	f7fa fbea 	bl	800f62c <ucdr_init_buffer_origin>
 8014e58:	4628      	mov	r0, r5
 8014e5a:	4622      	mov	r2, r4
 8014e5c:	4902      	ldr	r1, [pc, #8]	@ (8014e68 <on_full_input_buffer+0x68>)
 8014e5e:	f7fa fbc1 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 8014e62:	2000      	movs	r0, #0
 8014e64:	bd70      	pop	{r4, r5, r6, pc}
 8014e66:	bf00      	nop
 8014e68:	08014e01 	.word	0x08014e01

08014e6c <uxr_init_input_reliable_stream>:
 8014e6c:	b510      	push	{r4, lr}
 8014e6e:	e9c0 1200 	strd	r1, r2, [r0]
 8014e72:	2400      	movs	r4, #0
 8014e74:	9a02      	ldr	r2, [sp, #8]
 8014e76:	8103      	strh	r3, [r0, #8]
 8014e78:	6102      	str	r2, [r0, #16]
 8014e7a:	7504      	strb	r4, [r0, #20]
 8014e7c:	b1c3      	cbz	r3, 8014eb0 <uxr_init_input_reliable_stream+0x44>
 8014e7e:	600c      	str	r4, [r1, #0]
 8014e80:	8901      	ldrh	r1, [r0, #8]
 8014e82:	2901      	cmp	r1, #1
 8014e84:	d914      	bls.n	8014eb0 <uxr_init_input_reliable_stream+0x44>
 8014e86:	f04f 0c01 	mov.w	ip, #1
 8014e8a:	6843      	ldr	r3, [r0, #4]
 8014e8c:	f10c 0e01 	add.w	lr, ip, #1
 8014e90:	fbbc f2f1 	udiv	r2, ip, r1
 8014e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e98:	fb01 c212 	mls	r2, r1, r2, ip
 8014e9c:	fa1f fc8e 	uxth.w	ip, lr
 8014ea0:	b292      	uxth	r2, r2
 8014ea2:	fb02 f303 	mul.w	r3, r2, r3
 8014ea6:	6802      	ldr	r2, [r0, #0]
 8014ea8:	50d4      	str	r4, [r2, r3]
 8014eaa:	8901      	ldrh	r1, [r0, #8]
 8014eac:	4561      	cmp	r1, ip
 8014eae:	d8ec      	bhi.n	8014e8a <uxr_init_input_reliable_stream+0x1e>
 8014eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014eb4:	60c3      	str	r3, [r0, #12]
 8014eb6:	bd10      	pop	{r4, pc}

08014eb8 <uxr_reset_input_reliable_stream>:
 8014eb8:	8901      	ldrh	r1, [r0, #8]
 8014eba:	b1d9      	cbz	r1, 8014ef4 <uxr_reset_input_reliable_stream+0x3c>
 8014ebc:	b510      	push	{r4, lr}
 8014ebe:	f04f 0e00 	mov.w	lr, #0
 8014ec2:	46f4      	mov	ip, lr
 8014ec4:	4674      	mov	r4, lr
 8014ec6:	6843      	ldr	r3, [r0, #4]
 8014ec8:	f10e 0e01 	add.w	lr, lr, #1
 8014ecc:	fbbc f2f1 	udiv	r2, ip, r1
 8014ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ed4:	fb01 c212 	mls	r2, r1, r2, ip
 8014ed8:	fa1f fc8e 	uxth.w	ip, lr
 8014edc:	b292      	uxth	r2, r2
 8014ede:	fb02 f303 	mul.w	r3, r2, r3
 8014ee2:	6802      	ldr	r2, [r0, #0]
 8014ee4:	50d4      	str	r4, [r2, r3]
 8014ee6:	8901      	ldrh	r1, [r0, #8]
 8014ee8:	4561      	cmp	r1, ip
 8014eea:	d8ec      	bhi.n	8014ec6 <uxr_reset_input_reliable_stream+0xe>
 8014eec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014ef0:	60c3      	str	r3, [r0, #12]
 8014ef2:	bd10      	pop	{r4, pc}
 8014ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014ef8:	60c3      	str	r3, [r0, #12]
 8014efa:	4770      	bx	lr

08014efc <uxr_receive_reliable_message>:
 8014efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f00:	4604      	mov	r4, r0
 8014f02:	460d      	mov	r5, r1
 8014f04:	8901      	ldrh	r1, [r0, #8]
 8014f06:	4617      	mov	r7, r2
 8014f08:	8980      	ldrh	r0, [r0, #12]
 8014f0a:	4698      	mov	r8, r3
 8014f0c:	f000 fcb0 	bl	8015870 <uxr_seq_num_add>
 8014f10:	4629      	mov	r1, r5
 8014f12:	4606      	mov	r6, r0
 8014f14:	89a0      	ldrh	r0, [r4, #12]
 8014f16:	f000 fcb3 	bl	8015880 <uxr_seq_num_cmp>
 8014f1a:	2800      	cmp	r0, #0
 8014f1c:	db0a      	blt.n	8014f34 <uxr_receive_reliable_message+0x38>
 8014f1e:	2600      	movs	r6, #0
 8014f20:	4629      	mov	r1, r5
 8014f22:	89e0      	ldrh	r0, [r4, #14]
 8014f24:	f000 fcac 	bl	8015880 <uxr_seq_num_cmp>
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	da00      	bge.n	8014f2e <uxr_receive_reliable_message+0x32>
 8014f2c:	81e5      	strh	r5, [r4, #14]
 8014f2e:	4630      	mov	r0, r6
 8014f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f34:	4630      	mov	r0, r6
 8014f36:	4629      	mov	r1, r5
 8014f38:	f000 fca2 	bl	8015880 <uxr_seq_num_cmp>
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	dbee      	blt.n	8014f1e <uxr_receive_reliable_message+0x22>
 8014f40:	6923      	ldr	r3, [r4, #16]
 8014f42:	4638      	mov	r0, r7
 8014f44:	4798      	blx	r3
 8014f46:	4681      	mov	r9, r0
 8014f48:	2101      	movs	r1, #1
 8014f4a:	89a0      	ldrh	r0, [r4, #12]
 8014f4c:	f000 fc90 	bl	8015870 <uxr_seq_num_add>
 8014f50:	f1b9 0f00 	cmp.w	r9, #0
 8014f54:	bf08      	it	eq
 8014f56:	4285      	cmpeq	r5, r0
 8014f58:	bf0c      	ite	eq
 8014f5a:	2601      	moveq	r6, #1
 8014f5c:	2600      	movne	r6, #0
 8014f5e:	d104      	bne.n	8014f6a <uxr_receive_reliable_message+0x6e>
 8014f60:	2300      	movs	r3, #0
 8014f62:	9a08      	ldr	r2, [sp, #32]
 8014f64:	81a0      	strh	r0, [r4, #12]
 8014f66:	7013      	strb	r3, [r2, #0]
 8014f68:	e7da      	b.n	8014f20 <uxr_receive_reliable_message+0x24>
 8014f6a:	8922      	ldrh	r2, [r4, #8]
 8014f6c:	6863      	ldr	r3, [r4, #4]
 8014f6e:	fbb5 f0f2 	udiv	r0, r5, r2
 8014f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f76:	fb02 5010 	mls	r0, r2, r0, r5
 8014f7a:	b280      	uxth	r0, r0
 8014f7c:	fb03 f000 	mul.w	r0, r3, r0
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	3004      	adds	r0, #4
 8014f84:	4418      	add	r0, r3
 8014f86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1c7      	bne.n	8014f1e <uxr_receive_reliable_message+0x22>
 8014f8e:	4639      	mov	r1, r7
 8014f90:	4642      	mov	r2, r8
 8014f92:	f002 f9f8 	bl	8017386 <memcpy>
 8014f96:	8921      	ldrh	r1, [r4, #8]
 8014f98:	6863      	ldr	r3, [r4, #4]
 8014f9a:	fbb5 f2f1 	udiv	r2, r5, r1
 8014f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fa2:	fb01 5212 	mls	r2, r1, r2, r5
 8014fa6:	b292      	uxth	r2, r2
 8014fa8:	fb02 f303 	mul.w	r3, r2, r3
 8014fac:	6822      	ldr	r2, [r4, #0]
 8014fae:	f842 8003 	str.w	r8, [r2, r3]
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	9a08      	ldr	r2, [sp, #32]
 8014fb6:	7013      	strb	r3, [r2, #0]
 8014fb8:	f1b9 0f00 	cmp.w	r9, #0
 8014fbc:	d0af      	beq.n	8014f1e <uxr_receive_reliable_message+0x22>
 8014fbe:	89a6      	ldrh	r6, [r4, #12]
 8014fc0:	2101      	movs	r1, #1
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f000 fc54 	bl	8015870 <uxr_seq_num_add>
 8014fc8:	8921      	ldrh	r1, [r4, #8]
 8014fca:	6863      	ldr	r3, [r4, #4]
 8014fcc:	4606      	mov	r6, r0
 8014fce:	fbb0 f2f1 	udiv	r2, r0, r1
 8014fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fd6:	fb01 0212 	mls	r2, r1, r2, r0
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	b292      	uxth	r2, r2
 8014fde:	fb02 f303 	mul.w	r3, r2, r3
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	4418      	add	r0, r3
 8014fe6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d097      	beq.n	8014f1e <uxr_receive_reliable_message+0x22>
 8014fee:	6923      	ldr	r3, [r4, #16]
 8014ff0:	4798      	blx	r3
 8014ff2:	2802      	cmp	r0, #2
 8014ff4:	d002      	beq.n	8014ffc <uxr_receive_reliable_message+0x100>
 8014ff6:	2801      	cmp	r0, #1
 8014ff8:	d0e2      	beq.n	8014fc0 <uxr_receive_reliable_message+0xc4>
 8014ffa:	e790      	b.n	8014f1e <uxr_receive_reliable_message+0x22>
 8014ffc:	2601      	movs	r6, #1
 8014ffe:	e78f      	b.n	8014f20 <uxr_receive_reliable_message+0x24>

08015000 <uxr_next_input_reliable_buffer_available>:
 8015000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015004:	4604      	mov	r4, r0
 8015006:	460f      	mov	r7, r1
 8015008:	8980      	ldrh	r0, [r0, #12]
 801500a:	2101      	movs	r1, #1
 801500c:	4690      	mov	r8, r2
 801500e:	f000 fc2f 	bl	8015870 <uxr_seq_num_add>
 8015012:	8922      	ldrh	r2, [r4, #8]
 8015014:	6866      	ldr	r6, [r4, #4]
 8015016:	fbb0 f3f2 	udiv	r3, r0, r2
 801501a:	fbb6 f6f2 	udiv	r6, r6, r2
 801501e:	fb02 0313 	mls	r3, r2, r3, r0
 8015022:	b29b      	uxth	r3, r3
 8015024:	fb03 f606 	mul.w	r6, r3, r6
 8015028:	6823      	ldr	r3, [r4, #0]
 801502a:	3604      	adds	r6, #4
 801502c:	441e      	add	r6, r3
 801502e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015032:	f1b9 0f00 	cmp.w	r9, #0
 8015036:	d023      	beq.n	8015080 <uxr_next_input_reliable_buffer_available+0x80>
 8015038:	4605      	mov	r5, r0
 801503a:	6923      	ldr	r3, [r4, #16]
 801503c:	4630      	mov	r0, r6
 801503e:	4798      	blx	r3
 8015040:	4682      	mov	sl, r0
 8015042:	b300      	cbz	r0, 8015086 <uxr_next_input_reliable_buffer_available+0x86>
 8015044:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015048:	2101      	movs	r1, #1
 801504a:	4650      	mov	r0, sl
 801504c:	f000 fc10 	bl	8015870 <uxr_seq_num_add>
 8015050:	8921      	ldrh	r1, [r4, #8]
 8015052:	4682      	mov	sl, r0
 8015054:	6863      	ldr	r3, [r4, #4]
 8015056:	6820      	ldr	r0, [r4, #0]
 8015058:	fbba f2f1 	udiv	r2, sl, r1
 801505c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015060:	fb01 a212 	mls	r2, r1, r2, sl
 8015064:	b292      	uxth	r2, r2
 8015066:	fb02 f303 	mul.w	r3, r2, r3
 801506a:	3304      	adds	r3, #4
 801506c:	4418      	add	r0, r3
 801506e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015072:	b12b      	cbz	r3, 8015080 <uxr_next_input_reliable_buffer_available+0x80>
 8015074:	6923      	ldr	r3, [r4, #16]
 8015076:	4798      	blx	r3
 8015078:	2802      	cmp	r0, #2
 801507a:	d01b      	beq.n	80150b4 <uxr_next_input_reliable_buffer_available+0xb4>
 801507c:	2801      	cmp	r0, #1
 801507e:	d0e3      	beq.n	8015048 <uxr_next_input_reliable_buffer_available+0x48>
 8015080:	2000      	movs	r0, #0
 8015082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015086:	464a      	mov	r2, r9
 8015088:	4631      	mov	r1, r6
 801508a:	4638      	mov	r0, r7
 801508c:	f7fa fad6 	bl	800f63c <ucdr_init_buffer>
 8015090:	8921      	ldrh	r1, [r4, #8]
 8015092:	6863      	ldr	r3, [r4, #4]
 8015094:	2001      	movs	r0, #1
 8015096:	fbb5 f2f1 	udiv	r2, r5, r1
 801509a:	fbb3 f3f1 	udiv	r3, r3, r1
 801509e:	fb01 5212 	mls	r2, r1, r2, r5
 80150a2:	b292      	uxth	r2, r2
 80150a4:	fb02 f303 	mul.w	r3, r2, r3
 80150a8:	6822      	ldr	r2, [r4, #0]
 80150aa:	f842 a003 	str.w	sl, [r2, r3]
 80150ae:	81a5      	strh	r5, [r4, #12]
 80150b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150b4:	8920      	ldrh	r0, [r4, #8]
 80150b6:	eb06 0108 	add.w	r1, r6, r8
 80150ba:	6863      	ldr	r3, [r4, #4]
 80150bc:	eba9 0208 	sub.w	r2, r9, r8
 80150c0:	fbb5 f6f0 	udiv	r6, r5, r0
 80150c4:	fbb3 f3f0 	udiv	r3, r3, r0
 80150c8:	fb00 5516 	mls	r5, r0, r6, r5
 80150cc:	2000      	movs	r0, #0
 80150ce:	b2ad      	uxth	r5, r5
 80150d0:	fb03 f505 	mul.w	r5, r3, r5
 80150d4:	6823      	ldr	r3, [r4, #0]
 80150d6:	5158      	str	r0, [r3, r5]
 80150d8:	4638      	mov	r0, r7
 80150da:	f7fa faaf 	bl	800f63c <ucdr_init_buffer>
 80150de:	4638      	mov	r0, r7
 80150e0:	4622      	mov	r2, r4
 80150e2:	4903      	ldr	r1, [pc, #12]	@ (80150f0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80150e4:	f7fa fa7e 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 80150e8:	2001      	movs	r0, #1
 80150ea:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80150ee:	e7c8      	b.n	8015082 <uxr_next_input_reliable_buffer_available+0x82>
 80150f0:	08014e01 	.word	0x08014e01

080150f4 <uxr_process_heartbeat>:
 80150f4:	b538      	push	{r3, r4, r5, lr}
 80150f6:	4611      	mov	r1, r2
 80150f8:	4604      	mov	r4, r0
 80150fa:	89c0      	ldrh	r0, [r0, #14]
 80150fc:	4615      	mov	r5, r2
 80150fe:	f000 fbbf 	bl	8015880 <uxr_seq_num_cmp>
 8015102:	2800      	cmp	r0, #0
 8015104:	bfb8      	it	lt
 8015106:	81e5      	strhlt	r5, [r4, #14]
 8015108:	bd38      	pop	{r3, r4, r5, pc}
 801510a:	bf00      	nop

0801510c <uxr_compute_acknack>:
 801510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015110:	8903      	ldrh	r3, [r0, #8]
 8015112:	4604      	mov	r4, r0
 8015114:	460f      	mov	r7, r1
 8015116:	8985      	ldrh	r5, [r0, #12]
 8015118:	b1db      	cbz	r3, 8015152 <uxr_compute_acknack+0x46>
 801511a:	4628      	mov	r0, r5
 801511c:	2601      	movs	r6, #1
 801511e:	e004      	b.n	801512a <uxr_compute_acknack+0x1e>
 8015120:	4566      	cmp	r6, ip
 8015122:	f106 0601 	add.w	r6, r6, #1
 8015126:	d214      	bcs.n	8015152 <uxr_compute_acknack+0x46>
 8015128:	89a0      	ldrh	r0, [r4, #12]
 801512a:	b2b1      	uxth	r1, r6
 801512c:	f000 fba0 	bl	8015870 <uxr_seq_num_add>
 8015130:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015134:	fbb0 f2fc 	udiv	r2, r0, ip
 8015138:	e9d4 1300 	ldrd	r1, r3, [r4]
 801513c:	fb0c 0212 	mls	r2, ip, r2, r0
 8015140:	fbb3 f3fc 	udiv	r3, r3, ip
 8015144:	b292      	uxth	r2, r2
 8015146:	fb02 f303 	mul.w	r3, r2, r3
 801514a:	58cb      	ldr	r3, [r1, r3]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d1e7      	bne.n	8015120 <uxr_compute_acknack+0x14>
 8015150:	4605      	mov	r5, r0
 8015152:	803d      	strh	r5, [r7, #0]
 8015154:	2101      	movs	r1, #1
 8015156:	89e6      	ldrh	r6, [r4, #14]
 8015158:	4628      	mov	r0, r5
 801515a:	f000 fb8d 	bl	8015878 <uxr_seq_num_sub>
 801515e:	4601      	mov	r1, r0
 8015160:	4630      	mov	r0, r6
 8015162:	f000 fb89 	bl	8015878 <uxr_seq_num_sub>
 8015166:	4606      	mov	r6, r0
 8015168:	b328      	cbz	r0, 80151b6 <uxr_compute_acknack+0xaa>
 801516a:	f04f 0900 	mov.w	r9, #0
 801516e:	f04f 0801 	mov.w	r8, #1
 8015172:	464d      	mov	r5, r9
 8015174:	fa1f f189 	uxth.w	r1, r9
 8015178:	8838      	ldrh	r0, [r7, #0]
 801517a:	f000 fb79 	bl	8015870 <uxr_seq_num_add>
 801517e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015182:	6861      	ldr	r1, [r4, #4]
 8015184:	fa08 fe09 	lsl.w	lr, r8, r9
 8015188:	6822      	ldr	r2, [r4, #0]
 801518a:	f109 0901 	add.w	r9, r9, #1
 801518e:	ea4e 0e05 	orr.w	lr, lr, r5
 8015192:	fbb0 f3fc 	udiv	r3, r0, ip
 8015196:	fbb1 f1fc 	udiv	r1, r1, ip
 801519a:	fb03 001c 	mls	r0, r3, ip, r0
 801519e:	b283      	uxth	r3, r0
 80151a0:	fb01 f303 	mul.w	r3, r1, r3
 80151a4:	58d3      	ldr	r3, [r2, r3]
 80151a6:	b90b      	cbnz	r3, 80151ac <uxr_compute_acknack+0xa0>
 80151a8:	fa1f f58e 	uxth.w	r5, lr
 80151ac:	454e      	cmp	r6, r9
 80151ae:	d1e1      	bne.n	8015174 <uxr_compute_acknack+0x68>
 80151b0:	4628      	mov	r0, r5
 80151b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151b6:	4605      	mov	r5, r0
 80151b8:	4628      	mov	r0, r5
 80151ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151be:	bf00      	nop

080151c0 <uxr_init_output_best_effort_stream>:
 80151c0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80151c4:	6001      	str	r1, [r0, #0]
 80151c6:	7303      	strb	r3, [r0, #12]
 80151c8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80151cc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop

080151d4 <uxr_reset_output_best_effort_stream>:
 80151d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80151d8:	7b03      	ldrb	r3, [r0, #12]
 80151da:	81c2      	strh	r2, [r0, #14]
 80151dc:	6043      	str	r3, [r0, #4]
 80151de:	4770      	bx	lr

080151e0 <uxr_prepare_best_effort_buffer_to_write>:
 80151e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151e2:	4604      	mov	r4, r0
 80151e4:	b083      	sub	sp, #12
 80151e6:	6840      	ldr	r0, [r0, #4]
 80151e8:	460d      	mov	r5, r1
 80151ea:	4616      	mov	r6, r2
 80151ec:	f7fb ff4e 	bl	801108c <uxr_submessage_padding>
 80151f0:	6863      	ldr	r3, [r4, #4]
 80151f2:	4418      	add	r0, r3
 80151f4:	68a3      	ldr	r3, [r4, #8]
 80151f6:	1942      	adds	r2, r0, r5
 80151f8:	4293      	cmp	r3, r2
 80151fa:	bf2c      	ite	cs
 80151fc:	2701      	movcs	r7, #1
 80151fe:	2700      	movcc	r7, #0
 8015200:	d202      	bcs.n	8015208 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8015202:	4638      	mov	r0, r7
 8015204:	b003      	add	sp, #12
 8015206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015208:	9000      	str	r0, [sp, #0]
 801520a:	2300      	movs	r3, #0
 801520c:	4630      	mov	r0, r6
 801520e:	6821      	ldr	r1, [r4, #0]
 8015210:	f7fa fa02 	bl	800f618 <ucdr_init_buffer_origin_offset>
 8015214:	6861      	ldr	r1, [r4, #4]
 8015216:	4638      	mov	r0, r7
 8015218:	4429      	add	r1, r5
 801521a:	6061      	str	r1, [r4, #4]
 801521c:	b003      	add	sp, #12
 801521e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015220 <uxr_prepare_best_effort_buffer_to_send>:
 8015220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015224:	4604      	mov	r4, r0
 8015226:	461d      	mov	r5, r3
 8015228:	6840      	ldr	r0, [r0, #4]
 801522a:	7b23      	ldrb	r3, [r4, #12]
 801522c:	4298      	cmp	r0, r3
 801522e:	bf8c      	ite	hi
 8015230:	2601      	movhi	r6, #1
 8015232:	2600      	movls	r6, #0
 8015234:	d802      	bhi.n	801523c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8015236:	4630      	mov	r0, r6
 8015238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801523c:	4688      	mov	r8, r1
 801523e:	89e0      	ldrh	r0, [r4, #14]
 8015240:	2101      	movs	r1, #1
 8015242:	4617      	mov	r7, r2
 8015244:	f000 fb14 	bl	8015870 <uxr_seq_num_add>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	81e0      	strh	r0, [r4, #14]
 801524c:	8028      	strh	r0, [r5, #0]
 801524e:	4630      	mov	r0, r6
 8015250:	f8c8 3000 	str.w	r3, [r8]
 8015254:	6863      	ldr	r3, [r4, #4]
 8015256:	603b      	str	r3, [r7, #0]
 8015258:	7b23      	ldrb	r3, [r4, #12]
 801525a:	6063      	str	r3, [r4, #4]
 801525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015260 <on_full_output_buffer>:
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015262:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8015266:	460c      	mov	r4, r1
 8015268:	6803      	ldr	r3, [r0, #0]
 801526a:	4605      	mov	r5, r0
 801526c:	7b26      	ldrb	r6, [r4, #12]
 801526e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8015272:	fbb2 f2fc 	udiv	r2, r2, ip
 8015276:	eba3 0e01 	sub.w	lr, r3, r1
 801527a:	6903      	ldr	r3, [r0, #16]
 801527c:	fbbe fef2 	udiv	lr, lr, r2
 8015280:	f10e 0e01 	add.w	lr, lr, #1
 8015284:	fa1f fe8e 	uxth.w	lr, lr
 8015288:	fbbe f7fc 	udiv	r7, lr, ip
 801528c:	fb0c ec17 	mls	ip, ip, r7, lr
 8015290:	fa1f fc8c 	uxth.w	ip, ip
 8015294:	fb02 fc0c 	mul.w	ip, r2, ip
 8015298:	f851 200c 	ldr.w	r2, [r1, ip]
 801529c:	44b4      	add	ip, r6
 801529e:	1b92      	subs	r2, r2, r6
 80152a0:	f10c 0c08 	add.w	ip, ip, #8
 80152a4:	3a04      	subs	r2, #4
 80152a6:	4461      	add	r1, ip
 80152a8:	f7fa f9c0 	bl	800f62c <ucdr_init_buffer_origin>
 80152ac:	4628      	mov	r0, r5
 80152ae:	4622      	mov	r2, r4
 80152b0:	4902      	ldr	r1, [pc, #8]	@ (80152bc <on_full_output_buffer+0x5c>)
 80152b2:	f7fa f997 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 80152b6:	2000      	movs	r0, #0
 80152b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ba:	bf00      	nop
 80152bc:	08015261 	.word	0x08015261

080152c0 <uxr_init_output_reliable_stream>:
 80152c0:	b530      	push	{r4, r5, lr}
 80152c2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80152c6:	8103      	strh	r3, [r0, #8]
 80152c8:	7304      	strb	r4, [r0, #12]
 80152ca:	e9c0 1200 	strd	r1, r2, [r0]
 80152ce:	b1e3      	cbz	r3, 801530a <uxr_init_output_reliable_stream+0x4a>
 80152d0:	600c      	str	r4, [r1, #0]
 80152d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80152d6:	f1bc 0f01 	cmp.w	ip, #1
 80152da:	d916      	bls.n	801530a <uxr_init_output_reliable_stream+0x4a>
 80152dc:	f04f 0e01 	mov.w	lr, #1
 80152e0:	6843      	ldr	r3, [r0, #4]
 80152e2:	f10e 0501 	add.w	r5, lr, #1
 80152e6:	7b04      	ldrb	r4, [r0, #12]
 80152e8:	6801      	ldr	r1, [r0, #0]
 80152ea:	fbbe f2fc 	udiv	r2, lr, ip
 80152ee:	fbb3 f3fc 	udiv	r3, r3, ip
 80152f2:	fb0c e212 	mls	r2, ip, r2, lr
 80152f6:	fa1f fe85 	uxth.w	lr, r5
 80152fa:	b292      	uxth	r2, r2
 80152fc:	fb02 f303 	mul.w	r3, r2, r3
 8015300:	50cc      	str	r4, [r1, r3]
 8015302:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015306:	45f4      	cmp	ip, lr
 8015308:	d8ea      	bhi.n	80152e0 <uxr_init_output_reliable_stream+0x20>
 801530a:	4b07      	ldr	r3, [pc, #28]	@ (8015328 <uxr_init_output_reliable_stream+0x68>)
 801530c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015310:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015314:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015318:	f8c0 300e 	str.w	r3, [r0, #14]
 801531c:	2300      	movs	r3, #0
 801531e:	8242      	strh	r2, [r0, #18]
 8015320:	8403      	strh	r3, [r0, #32]
 8015322:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8015326:	bd30      	pop	{r4, r5, pc}
 8015328:	ffff0000 	.word	0xffff0000
 801532c:	00000000 	.word	0x00000000

08015330 <uxr_reset_output_reliable_stream>:
 8015330:	8901      	ldrh	r1, [r0, #8]
 8015332:	b510      	push	{r4, lr}
 8015334:	b1b1      	cbz	r1, 8015364 <uxr_reset_output_reliable_stream+0x34>
 8015336:	f04f 0e00 	mov.w	lr, #0
 801533a:	46f4      	mov	ip, lr
 801533c:	6843      	ldr	r3, [r0, #4]
 801533e:	f10e 0e01 	add.w	lr, lr, #1
 8015342:	7b04      	ldrb	r4, [r0, #12]
 8015344:	fbbc f2f1 	udiv	r2, ip, r1
 8015348:	fbb3 f3f1 	udiv	r3, r3, r1
 801534c:	fb01 c212 	mls	r2, r1, r2, ip
 8015350:	fa1f fc8e 	uxth.w	ip, lr
 8015354:	b292      	uxth	r2, r2
 8015356:	fb02 f303 	mul.w	r3, r2, r3
 801535a:	6802      	ldr	r2, [r0, #0]
 801535c:	50d4      	str	r4, [r2, r3]
 801535e:	8901      	ldrh	r1, [r0, #8]
 8015360:	4561      	cmp	r1, ip
 8015362:	d8eb      	bhi.n	801533c <uxr_reset_output_reliable_stream+0xc>
 8015364:	4b08      	ldr	r3, [pc, #32]	@ (8015388 <uxr_reset_output_reliable_stream+0x58>)
 8015366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801536a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8015380 <uxr_reset_output_reliable_stream+0x50>
 801536e:	f8c0 300e 	str.w	r3, [r0, #14]
 8015372:	2300      	movs	r3, #0
 8015374:	8242      	strh	r2, [r0, #18]
 8015376:	8403      	strh	r3, [r0, #32]
 8015378:	ed80 7b06 	vstr	d7, [r0, #24]
 801537c:	bd10      	pop	{r4, pc}
 801537e:	bf00      	nop
 8015380:	ffffffff 	.word	0xffffffff
 8015384:	7fffffff 	.word	0x7fffffff
 8015388:	ffff0000 	.word	0xffff0000

0801538c <uxr_prepare_reliable_buffer_to_write>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	4604      	mov	r4, r0
 8015392:	b091      	sub	sp, #68	@ 0x44
 8015394:	8900      	ldrh	r0, [r0, #8]
 8015396:	468b      	mov	fp, r1
 8015398:	89e6      	ldrh	r6, [r4, #14]
 801539a:	9204      	str	r2, [sp, #16]
 801539c:	6865      	ldr	r5, [r4, #4]
 801539e:	6823      	ldr	r3, [r4, #0]
 80153a0:	f894 900c 	ldrb.w	r9, [r4, #12]
 80153a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80153a8:	fbb5 f5f0 	udiv	r5, r5, r0
 80153ac:	fb00 6212 	mls	r2, r0, r2, r6
 80153b0:	1f2f      	subs	r7, r5, #4
 80153b2:	b292      	uxth	r2, r2
 80153b4:	fb05 3202 	mla	r2, r5, r2, r3
 80153b8:	1d11      	adds	r1, r2, #4
 80153ba:	f8d2 8000 	ldr.w	r8, [r2]
 80153be:	9103      	str	r1, [sp, #12]
 80153c0:	2800      	cmp	r0, #0
 80153c2:	f000 814a 	beq.w	801565a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 80153c6:	f04f 0c00 	mov.w	ip, #0
 80153ca:	46e2      	mov	sl, ip
 80153cc:	4661      	mov	r1, ip
 80153ce:	f10c 0c01 	add.w	ip, ip, #1
 80153d2:	fbb1 f2f0 	udiv	r2, r1, r0
 80153d6:	fb00 1212 	mls	r2, r0, r2, r1
 80153da:	fa1f f18c 	uxth.w	r1, ip
 80153de:	b292      	uxth	r2, r2
 80153e0:	fb05 f202 	mul.w	r2, r5, r2
 80153e4:	589a      	ldr	r2, [r3, r2]
 80153e6:	454a      	cmp	r2, r9
 80153e8:	d103      	bne.n	80153f2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80153ea:	f10a 0a01 	add.w	sl, sl, #1
 80153ee:	fa1f fa8a 	uxth.w	sl, sl
 80153f2:	4281      	cmp	r1, r0
 80153f4:	d3eb      	bcc.n	80153ce <uxr_prepare_reliable_buffer_to_write+0x42>
 80153f6:	4640      	mov	r0, r8
 80153f8:	2104      	movs	r1, #4
 80153fa:	f8cd a014 	str.w	sl, [sp, #20]
 80153fe:	f7fa f921 	bl	800f644 <ucdr_alignment>
 8015402:	4480      	add	r8, r0
 8015404:	eb08 020b 	add.w	r2, r8, fp
 8015408:	42ba      	cmp	r2, r7
 801540a:	f240 80ca 	bls.w	80155a2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801540e:	7b22      	ldrb	r2, [r4, #12]
 8015410:	445a      	add	r2, fp
 8015412:	42ba      	cmp	r2, r7
 8015414:	f240 80b2 	bls.w	801557c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8015418:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801541c:	b2bb      	uxth	r3, r7
 801541e:	eba2 0209 	sub.w	r2, r2, r9
 8015422:	441a      	add	r2, r3
 8015424:	b292      	uxth	r2, r2
 8015426:	fb0a f902 	mul.w	r9, sl, r2
 801542a:	9205      	str	r2, [sp, #20]
 801542c:	45d9      	cmp	r9, fp
 801542e:	9206      	str	r2, [sp, #24]
 8015430:	f0c0 80b3 	bcc.w	801559a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015434:	f108 0204 	add.w	r2, r8, #4
 8015438:	42ba      	cmp	r2, r7
 801543a:	f080 80da 	bcs.w	80155f2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801543e:	f1a3 0904 	sub.w	r9, r3, #4
 8015442:	9b05      	ldr	r3, [sp, #20]
 8015444:	eba9 0908 	sub.w	r9, r9, r8
 8015448:	fa1f f989 	uxth.w	r9, r9
 801544c:	ebab 0b09 	sub.w	fp, fp, r9
 8015450:	fbbb f2f3 	udiv	r2, fp, r3
 8015454:	fb03 b312 	mls	r3, r3, r2, fp
 8015458:	2b00      	cmp	r3, #0
 801545a:	f040 80c4 	bne.w	80155e6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801545e:	b293      	uxth	r3, r2
 8015460:	4553      	cmp	r3, sl
 8015462:	f200 809a 	bhi.w	801559a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8015466:	2b00      	cmp	r3, #0
 8015468:	f000 80f9 	beq.w	801565e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801546c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015470:	f04f 0a00 	mov.w	sl, #0
 8015474:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015478:	f10d 0b20 	add.w	fp, sp, #32
 801547c:	9505      	str	r5, [sp, #20]
 801547e:	461d      	mov	r5, r3
 8015480:	e000      	b.n	8015484 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8015482:	46c1      	mov	r9, r8
 8015484:	8922      	ldrh	r2, [r4, #8]
 8015486:	4658      	mov	r0, fp
 8015488:	6863      	ldr	r3, [r4, #4]
 801548a:	f10a 0a01 	add.w	sl, sl, #1
 801548e:	fbb6 f1f2 	udiv	r1, r6, r2
 8015492:	fbb3 f3f2 	udiv	r3, r3, r2
 8015496:	fb02 6111 	mls	r1, r2, r1, r6
 801549a:	463a      	mov	r2, r7
 801549c:	b289      	uxth	r1, r1
 801549e:	fb03 f101 	mul.w	r1, r3, r1
 80154a2:	6823      	ldr	r3, [r4, #0]
 80154a4:	3104      	adds	r1, #4
 80154a6:	4419      	add	r1, r3
 80154a8:	2300      	movs	r3, #0
 80154aa:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80154ae:	f8cd c000 	str.w	ip, [sp]
 80154b2:	f7fa f8b1 	bl	800f618 <ucdr_init_buffer_origin_offset>
 80154b6:	464a      	mov	r2, r9
 80154b8:	2300      	movs	r3, #0
 80154ba:	210d      	movs	r1, #13
 80154bc:	4658      	mov	r0, fp
 80154be:	f7fb fda5 	bl	801100c <uxr_buffer_submessage_header>
 80154c2:	8921      	ldrh	r1, [r4, #8]
 80154c4:	6863      	ldr	r3, [r4, #4]
 80154c6:	4630      	mov	r0, r6
 80154c8:	fbb6 f2f1 	udiv	r2, r6, r1
 80154cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80154d0:	fb01 6212 	mls	r2, r1, r2, r6
 80154d4:	2101      	movs	r1, #1
 80154d6:	b292      	uxth	r2, r2
 80154d8:	fb02 f303 	mul.w	r3, r2, r3
 80154dc:	6822      	ldr	r2, [r4, #0]
 80154de:	50d7      	str	r7, [r2, r3]
 80154e0:	f000 f9c6 	bl	8015870 <uxr_seq_num_add>
 80154e4:	4606      	mov	r6, r0
 80154e6:	fa1f f38a 	uxth.w	r3, sl
 80154ea:	429d      	cmp	r5, r3
 80154ec:	d8c9      	bhi.n	8015482 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80154ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80154f2:	9d05      	ldr	r5, [sp, #20]
 80154f4:	8920      	ldrh	r0, [r4, #8]
 80154f6:	463a      	mov	r2, r7
 80154f8:	6863      	ldr	r3, [r4, #4]
 80154fa:	fbb6 f1f0 	udiv	r1, r6, r0
 80154fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8015502:	fb00 6111 	mls	r1, r0, r1, r6
 8015506:	4658      	mov	r0, fp
 8015508:	b289      	uxth	r1, r1
 801550a:	fb01 f303 	mul.w	r3, r1, r3
 801550e:	6821      	ldr	r1, [r4, #0]
 8015510:	3304      	adds	r3, #4
 8015512:	4419      	add	r1, r3
 8015514:	2300      	movs	r3, #0
 8015516:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801551a:	9700      	str	r7, [sp, #0]
 801551c:	f7fa f87c 	bl	800f618 <ucdr_init_buffer_origin_offset>
 8015520:	9f06      	ldr	r7, [sp, #24]
 8015522:	4658      	mov	r0, fp
 8015524:	2302      	movs	r3, #2
 8015526:	b2ba      	uxth	r2, r7
 8015528:	210d      	movs	r1, #13
 801552a:	f7fb fd6f 	bl	801100c <uxr_buffer_submessage_header>
 801552e:	f108 0104 	add.w	r1, r8, #4
 8015532:	9b03      	ldr	r3, [sp, #12]
 8015534:	f1a5 0208 	sub.w	r2, r5, #8
 8015538:	8925      	ldrh	r5, [r4, #8]
 801553a:	440b      	add	r3, r1
 801553c:	eba2 0208 	sub.w	r2, r2, r8
 8015540:	fbb6 f0f5 	udiv	r0, r6, r5
 8015544:	4619      	mov	r1, r3
 8015546:	6863      	ldr	r3, [r4, #4]
 8015548:	fb05 6010 	mls	r0, r5, r0, r6
 801554c:	fbb3 f3f5 	udiv	r3, r3, r5
 8015550:	b280      	uxth	r0, r0
 8015552:	6825      	ldr	r5, [r4, #0]
 8015554:	fb00 f303 	mul.w	r3, r0, r3
 8015558:	7b20      	ldrb	r0, [r4, #12]
 801555a:	3004      	adds	r0, #4
 801555c:	4438      	add	r0, r7
 801555e:	50e8      	str	r0, [r5, r3]
 8015560:	9d04      	ldr	r5, [sp, #16]
 8015562:	4628      	mov	r0, r5
 8015564:	f7fa f86a 	bl	800f63c <ucdr_init_buffer>
 8015568:	4628      	mov	r0, r5
 801556a:	4622      	mov	r2, r4
 801556c:	493d      	ldr	r1, [pc, #244]	@ (8015664 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801556e:	f7fa f839 	bl	800f5e4 <ucdr_set_on_full_buffer_callback>
 8015572:	2001      	movs	r0, #1
 8015574:	81e6      	strh	r6, [r4, #14]
 8015576:	b011      	add	sp, #68	@ 0x44
 8015578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557c:	2101      	movs	r1, #1
 801557e:	89e0      	ldrh	r0, [r4, #14]
 8015580:	f000 f976 	bl	8015870 <uxr_seq_num_add>
 8015584:	4605      	mov	r5, r0
 8015586:	8921      	ldrh	r1, [r4, #8]
 8015588:	8a60      	ldrh	r0, [r4, #18]
 801558a:	f000 f971 	bl	8015870 <uxr_seq_num_add>
 801558e:	4601      	mov	r1, r0
 8015590:	4628      	mov	r0, r5
 8015592:	f000 f975 	bl	8015880 <uxr_seq_num_cmp>
 8015596:	2800      	cmp	r0, #0
 8015598:	dd44      	ble.n	8015624 <uxr_prepare_reliable_buffer_to_write+0x298>
 801559a:	2000      	movs	r0, #0
 801559c:	b011      	add	sp, #68	@ 0x44
 801559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a2:	8921      	ldrh	r1, [r4, #8]
 80155a4:	8a60      	ldrh	r0, [r4, #18]
 80155a6:	9205      	str	r2, [sp, #20]
 80155a8:	f000 f962 	bl	8015870 <uxr_seq_num_add>
 80155ac:	4601      	mov	r1, r0
 80155ae:	4630      	mov	r0, r6
 80155b0:	f000 f966 	bl	8015880 <uxr_seq_num_cmp>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	9a05      	ldr	r2, [sp, #20]
 80155b8:	dcef      	bgt.n	801559a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80155ba:	8925      	ldrh	r5, [r4, #8]
 80155bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80155c0:	fbb6 f4f5 	udiv	r4, r6, r5
 80155c4:	fbb3 f3f5 	udiv	r3, r3, r5
 80155c8:	fb05 6414 	mls	r4, r5, r4, r6
 80155cc:	b2a4      	uxth	r4, r4
 80155ce:	fb04 f303 	mul.w	r3, r4, r3
 80155d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80155d6:	50fa      	str	r2, [r7, r3]
 80155d8:	2300      	movs	r3, #0
 80155da:	f8cd 8000 	str.w	r8, [sp]
 80155de:	f7fa f81b 	bl	800f618 <ucdr_init_buffer_origin_offset>
 80155e2:	2001      	movs	r0, #1
 80155e4:	e7da      	b.n	801559c <uxr_prepare_reliable_buffer_to_write+0x210>
 80155e6:	3201      	adds	r2, #1
 80155e8:	9306      	str	r3, [sp, #24]
 80155ea:	b293      	uxth	r3, r2
 80155ec:	4553      	cmp	r3, sl
 80155ee:	d8d4      	bhi.n	801559a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80155f0:	e739      	b.n	8015466 <uxr_prepare_reliable_buffer_to_write+0xda>
 80155f2:	4630      	mov	r0, r6
 80155f4:	2101      	movs	r1, #1
 80155f6:	9307      	str	r3, [sp, #28]
 80155f8:	f000 f93a 	bl	8015870 <uxr_seq_num_add>
 80155fc:	4606      	mov	r6, r0
 80155fe:	8920      	ldrh	r0, [r4, #8]
 8015600:	6862      	ldr	r2, [r4, #4]
 8015602:	fbb6 f1f0 	udiv	r1, r6, r0
 8015606:	fbb2 f2f0 	udiv	r2, r2, r0
 801560a:	fb00 6111 	mls	r1, r0, r1, r6
 801560e:	b289      	uxth	r1, r1
 8015610:	fb01 f202 	mul.w	r2, r1, r2
 8015614:	6821      	ldr	r1, [r4, #0]
 8015616:	3204      	adds	r2, #4
 8015618:	188b      	adds	r3, r1, r2
 801561a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801561e:	9303      	str	r3, [sp, #12]
 8015620:	9b07      	ldr	r3, [sp, #28]
 8015622:	e70c      	b.n	801543e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015624:	8921      	ldrh	r1, [r4, #8]
 8015626:	6863      	ldr	r3, [r4, #4]
 8015628:	9804      	ldr	r0, [sp, #16]
 801562a:	fbb5 f2f1 	udiv	r2, r5, r1
 801562e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015632:	fb01 5212 	mls	r2, r1, r2, r5
 8015636:	6821      	ldr	r1, [r4, #0]
 8015638:	b292      	uxth	r2, r2
 801563a:	fb02 f303 	mul.w	r3, r2, r3
 801563e:	7b22      	ldrb	r2, [r4, #12]
 8015640:	3304      	adds	r3, #4
 8015642:	445a      	add	r2, fp
 8015644:	4419      	add	r1, r3
 8015646:	f841 2c04 	str.w	r2, [r1, #-4]
 801564a:	7b23      	ldrb	r3, [r4, #12]
 801564c:	9300      	str	r3, [sp, #0]
 801564e:	2300      	movs	r3, #0
 8015650:	f7f9 ffe2 	bl	800f618 <ucdr_init_buffer_origin_offset>
 8015654:	2001      	movs	r0, #1
 8015656:	81e5      	strh	r5, [r4, #14]
 8015658:	e7a0      	b.n	801559c <uxr_prepare_reliable_buffer_to_write+0x210>
 801565a:	4682      	mov	sl, r0
 801565c:	e6cb      	b.n	80153f6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801565e:	f10d 0b20 	add.w	fp, sp, #32
 8015662:	e747      	b.n	80154f4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8015664:	08015261 	.word	0x08015261

08015668 <uxr_prepare_next_reliable_buffer_to_send>:
 8015668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566a:	4604      	mov	r4, r0
 801566c:	461d      	mov	r5, r3
 801566e:	460f      	mov	r7, r1
 8015670:	8a00      	ldrh	r0, [r0, #16]
 8015672:	2101      	movs	r1, #1
 8015674:	4616      	mov	r6, r2
 8015676:	f000 f8fb 	bl	8015870 <uxr_seq_num_add>
 801567a:	8028      	strh	r0, [r5, #0]
 801567c:	8922      	ldrh	r2, [r4, #8]
 801567e:	6863      	ldr	r3, [r4, #4]
 8015680:	fbb0 f1f2 	udiv	r1, r0, r2
 8015684:	fbb3 f3f2 	udiv	r3, r3, r2
 8015688:	fb02 0c11 	mls	ip, r2, r1, r0
 801568c:	89e1      	ldrh	r1, [r4, #14]
 801568e:	fa1f fc8c 	uxth.w	ip, ip
 8015692:	fb0c fc03 	mul.w	ip, ip, r3
 8015696:	6823      	ldr	r3, [r4, #0]
 8015698:	f10c 0c04 	add.w	ip, ip, #4
 801569c:	4463      	add	r3, ip
 801569e:	603b      	str	r3, [r7, #0]
 80156a0:	6823      	ldr	r3, [r4, #0]
 80156a2:	449c      	add	ip, r3
 80156a4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80156a8:	6033      	str	r3, [r6, #0]
 80156aa:	f000 f8e9 	bl	8015880 <uxr_seq_num_cmp>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	dd01      	ble.n	80156b6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80156b2:	2000      	movs	r0, #0
 80156b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156b6:	7b23      	ldrb	r3, [r4, #12]
 80156b8:	6832      	ldr	r2, [r6, #0]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d9f9      	bls.n	80156b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80156be:	8a61      	ldrh	r1, [r4, #18]
 80156c0:	8a20      	ldrh	r0, [r4, #16]
 80156c2:	f000 f8d9 	bl	8015878 <uxr_seq_num_sub>
 80156c6:	8923      	ldrh	r3, [r4, #8]
 80156c8:	4283      	cmp	r3, r0
 80156ca:	d0f2      	beq.n	80156b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80156cc:	8828      	ldrh	r0, [r5, #0]
 80156ce:	89e3      	ldrh	r3, [r4, #14]
 80156d0:	8220      	strh	r0, [r4, #16]
 80156d2:	4298      	cmp	r0, r3
 80156d4:	d001      	beq.n	80156da <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80156d6:	2001      	movs	r0, #1
 80156d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156da:	2101      	movs	r1, #1
 80156dc:	f000 f8c8 	bl	8015870 <uxr_seq_num_add>
 80156e0:	4603      	mov	r3, r0
 80156e2:	2001      	movs	r0, #1
 80156e4:	81e3      	strh	r3, [r4, #14]
 80156e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156e8 <uxr_update_output_stream_heartbeat_timestamp>:
 80156e8:	b570      	push	{r4, r5, r6, lr}
 80156ea:	8a01      	ldrh	r1, [r0, #16]
 80156ec:	4604      	mov	r4, r0
 80156ee:	8a40      	ldrh	r0, [r0, #18]
 80156f0:	4615      	mov	r5, r2
 80156f2:	461e      	mov	r6, r3
 80156f4:	f000 f8c4 	bl	8015880 <uxr_seq_num_cmp>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	db07      	blt.n	801570c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80156fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015700:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015704:	2000      	movs	r0, #0
 8015706:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015710:	b940      	cbnz	r0, 8015724 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015712:	2301      	movs	r3, #1
 8015714:	f884 3020 	strb.w	r3, [r4, #32]
 8015718:	3564      	adds	r5, #100	@ 0x64
 801571a:	f146 0600 	adc.w	r6, r6, #0
 801571e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015722:	bd70      	pop	{r4, r5, r6, pc}
 8015724:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015728:	4295      	cmp	r5, r2
 801572a:	eb76 0303 	sbcs.w	r3, r6, r3
 801572e:	db04      	blt.n	801573a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8015730:	1c43      	adds	r3, r0, #1
 8015732:	2001      	movs	r0, #1
 8015734:	f884 3020 	strb.w	r3, [r4, #32]
 8015738:	e7ee      	b.n	8015718 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801573a:	2000      	movs	r0, #0
 801573c:	e7ec      	b.n	8015718 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801573e:	bf00      	nop

08015740 <uxr_begin_output_nack_buffer_it>:
 8015740:	8a40      	ldrh	r0, [r0, #18]
 8015742:	4770      	bx	lr

08015744 <uxr_next_reliable_nack_buffer_to_send>:
 8015744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015748:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801574c:	b197      	cbz	r7, 8015774 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801574e:	4680      	mov	r8, r0
 8015750:	460d      	mov	r5, r1
 8015752:	4616      	mov	r6, r2
 8015754:	461c      	mov	r4, r3
 8015756:	8818      	ldrh	r0, [r3, #0]
 8015758:	2101      	movs	r1, #1
 801575a:	f000 f889 	bl	8015870 <uxr_seq_num_add>
 801575e:	8020      	strh	r0, [r4, #0]
 8015760:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8015764:	f000 f88c 	bl	8015880 <uxr_seq_num_cmp>
 8015768:	2800      	cmp	r0, #0
 801576a:	dd06      	ble.n	801577a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801576c:	2300      	movs	r3, #0
 801576e:	461f      	mov	r7, r3
 8015770:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8015774:	4638      	mov	r0, r7
 8015776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801577a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801577e:	8820      	ldrh	r0, [r4, #0]
 8015780:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015784:	fbb0 f3f2 	udiv	r3, r0, r2
 8015788:	fbb1 fcf2 	udiv	ip, r1, r2
 801578c:	fb02 0313 	mls	r3, r2, r3, r0
 8015790:	b29b      	uxth	r3, r3
 8015792:	fb03 fc0c 	mul.w	ip, r3, ip
 8015796:	f8d8 3000 	ldr.w	r3, [r8]
 801579a:	f10c 0c04 	add.w	ip, ip, #4
 801579e:	4463      	add	r3, ip
 80157a0:	602b      	str	r3, [r5, #0]
 80157a2:	f8d8 3000 	ldr.w	r3, [r8]
 80157a6:	4463      	add	r3, ip
 80157a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80157ac:	6033      	str	r3, [r6, #0]
 80157ae:	f898 200c 	ldrb.w	r2, [r8, #12]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d0d0      	beq.n	8015758 <uxr_next_reliable_nack_buffer_to_send+0x14>
 80157b6:	e7dd      	b.n	8015774 <uxr_next_reliable_nack_buffer_to_send+0x30>

080157b8 <uxr_process_acknack>:
 80157b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ba:	4604      	mov	r4, r0
 80157bc:	460e      	mov	r6, r1
 80157be:	4610      	mov	r0, r2
 80157c0:	2101      	movs	r1, #1
 80157c2:	f000 f859 	bl	8015878 <uxr_seq_num_sub>
 80157c6:	8a61      	ldrh	r1, [r4, #18]
 80157c8:	f000 f856 	bl	8015878 <uxr_seq_num_sub>
 80157cc:	b1c8      	cbz	r0, 8015802 <uxr_process_acknack+0x4a>
 80157ce:	4605      	mov	r5, r0
 80157d0:	2700      	movs	r7, #0
 80157d2:	2101      	movs	r1, #1
 80157d4:	8a60      	ldrh	r0, [r4, #18]
 80157d6:	f000 f84b 	bl	8015870 <uxr_seq_num_add>
 80157da:	8923      	ldrh	r3, [r4, #8]
 80157dc:	6862      	ldr	r2, [r4, #4]
 80157de:	3701      	adds	r7, #1
 80157e0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80157e4:	6821      	ldr	r1, [r4, #0]
 80157e6:	42bd      	cmp	r5, r7
 80157e8:	8260      	strh	r0, [r4, #18]
 80157ea:	fbb0 fef3 	udiv	lr, r0, r3
 80157ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80157f2:	fb03 031e 	mls	r3, r3, lr, r0
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	fb02 f303 	mul.w	r3, r2, r3
 80157fc:	f841 c003 	str.w	ip, [r1, r3]
 8015800:	d1e7      	bne.n	80157d2 <uxr_process_acknack+0x1a>
 8015802:	3e00      	subs	r6, #0
 8015804:	f04f 0300 	mov.w	r3, #0
 8015808:	bf18      	it	ne
 801580a:	2601      	movne	r6, #1
 801580c:	f884 3020 	strb.w	r3, [r4, #32]
 8015810:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015816:	bf00      	nop

08015818 <uxr_is_output_up_to_date>:
 8015818:	8a01      	ldrh	r1, [r0, #16]
 801581a:	8a40      	ldrh	r0, [r0, #18]
 801581c:	b508      	push	{r3, lr}
 801581e:	f000 f82f 	bl	8015880 <uxr_seq_num_cmp>
 8015822:	fab0 f080 	clz	r0, r0
 8015826:	0940      	lsrs	r0, r0, #5
 8015828:	bd08      	pop	{r3, pc}
 801582a:	bf00      	nop

0801582c <get_available_free_slots>:
 801582c:	8901      	ldrh	r1, [r0, #8]
 801582e:	b1e1      	cbz	r1, 801586a <get_available_free_slots+0x3e>
 8015830:	6843      	ldr	r3, [r0, #4]
 8015832:	f04f 0c00 	mov.w	ip, #0
 8015836:	b530      	push	{r4, r5, lr}
 8015838:	fbb3 fef1 	udiv	lr, r3, r1
 801583c:	6805      	ldr	r5, [r0, #0]
 801583e:	4662      	mov	r2, ip
 8015840:	7b04      	ldrb	r4, [r0, #12]
 8015842:	4660      	mov	r0, ip
 8015844:	f10c 0c01 	add.w	ip, ip, #1
 8015848:	fbb2 f3f1 	udiv	r3, r2, r1
 801584c:	fb01 2313 	mls	r3, r1, r3, r2
 8015850:	fa1f f28c 	uxth.w	r2, ip
 8015854:	b29b      	uxth	r3, r3
 8015856:	fb0e f303 	mul.w	r3, lr, r3
 801585a:	58eb      	ldr	r3, [r5, r3]
 801585c:	429c      	cmp	r4, r3
 801585e:	d101      	bne.n	8015864 <get_available_free_slots+0x38>
 8015860:	3001      	adds	r0, #1
 8015862:	b280      	uxth	r0, r0
 8015864:	428a      	cmp	r2, r1
 8015866:	d3ed      	bcc.n	8015844 <get_available_free_slots+0x18>
 8015868:	bd30      	pop	{r4, r5, pc}
 801586a:	4608      	mov	r0, r1
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop

08015870 <uxr_seq_num_add>:
 8015870:	4408      	add	r0, r1
 8015872:	b280      	uxth	r0, r0
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop

08015878 <uxr_seq_num_sub>:
 8015878:	1a40      	subs	r0, r0, r1
 801587a:	b280      	uxth	r0, r0
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop

08015880 <uxr_seq_num_cmp>:
 8015880:	4288      	cmp	r0, r1
 8015882:	d011      	beq.n	80158a8 <uxr_seq_num_cmp+0x28>
 8015884:	d309      	bcc.n	801589a <uxr_seq_num_cmp+0x1a>
 8015886:	4288      	cmp	r0, r1
 8015888:	d910      	bls.n	80158ac <uxr_seq_num_cmp+0x2c>
 801588a:	1a40      	subs	r0, r0, r1
 801588c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015890:	bfd4      	ite	le
 8015892:	2001      	movle	r0, #1
 8015894:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015898:	4770      	bx	lr
 801589a:	1a0b      	subs	r3, r1, r0
 801589c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80158a0:	daf1      	bge.n	8015886 <uxr_seq_num_cmp+0x6>
 80158a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80158a6:	4770      	bx	lr
 80158a8:	2000      	movs	r0, #0
 80158aa:	4770      	bx	lr
 80158ac:	2001      	movs	r0, #1
 80158ae:	4770      	bx	lr

080158b0 <uxr_init_framing_io>:
 80158b0:	2300      	movs	r3, #0
 80158b2:	7041      	strb	r1, [r0, #1]
 80158b4:	7003      	strb	r3, [r0, #0]
 80158b6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop

080158bc <uxr_write_framed_msg>:
 80158bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c0:	4617      	mov	r7, r2
 80158c2:	7842      	ldrb	r2, [r0, #1]
 80158c4:	460e      	mov	r6, r1
 80158c6:	b083      	sub	sp, #12
 80158c8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80158cc:	469b      	mov	fp, r3
 80158ce:	237e      	movs	r3, #126	@ 0x7e
 80158d0:	4604      	mov	r4, r0
 80158d2:	2901      	cmp	r1, #1
 80158d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80158d8:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80158dc:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80158e0:	f240 8115 	bls.w	8015b0e <uxr_write_framed_msg+0x252>
 80158e4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80158e8:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80158ec:	2202      	movs	r2, #2
 80158ee:	2901      	cmp	r1, #1
 80158f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80158f4:	d952      	bls.n	801599c <uxr_write_framed_msg+0xe0>
 80158f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158f8:	2103      	movs	r1, #3
 80158fa:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80158fe:	b2dd      	uxtb	r5, r3
 8015900:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015904:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015908:	2a01      	cmp	r2, #1
 801590a:	d95c      	bls.n	80159c6 <uxr_write_framed_msg+0x10a>
 801590c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801590e:	1862      	adds	r2, r4, r1
 8015910:	3101      	adds	r1, #1
 8015912:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8015916:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 801591a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801591e:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8015922:	2a01      	cmp	r2, #1
 8015924:	d961      	bls.n	80159ea <uxr_write_framed_msg+0x12e>
 8015926:	1c4a      	adds	r2, r1, #1
 8015928:	4421      	add	r1, r4
 801592a:	b2d2      	uxtb	r2, r2
 801592c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015930:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015934:	2b00      	cmp	r3, #0
 8015936:	d06a      	beq.n	8015a0e <uxr_write_framed_msg+0x152>
 8015938:	f04f 0800 	mov.w	r8, #0
 801593c:	46c1      	mov	r9, r8
 801593e:	e016      	b.n	801596e <uxr_write_framed_msg+0xb2>
 8015940:	2a29      	cmp	r2, #41	@ 0x29
 8015942:	d868      	bhi.n	8015a16 <uxr_write_framed_msg+0x15a>
 8015944:	18a0      	adds	r0, r4, r2
 8015946:	3201      	adds	r2, #1
 8015948:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801594c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015950:	ea88 0101 	eor.w	r1, r8, r1
 8015954:	4b7d      	ldr	r3, [pc, #500]	@ (8015b4c <uxr_write_framed_msg+0x290>)
 8015956:	f109 0901 	add.w	r9, r9, #1
 801595a:	b2c9      	uxtb	r1, r1
 801595c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015960:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015966:	454b      	cmp	r3, r9
 8015968:	d969      	bls.n	8015a3e <uxr_write_framed_msg+0x182>
 801596a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801596e:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015972:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8015976:	2801      	cmp	r0, #1
 8015978:	d8e2      	bhi.n	8015940 <uxr_write_framed_msg+0x84>
 801597a:	1c50      	adds	r0, r2, #1
 801597c:	b2c0      	uxtb	r0, r0
 801597e:	2829      	cmp	r0, #41	@ 0x29
 8015980:	d849      	bhi.n	8015a16 <uxr_write_framed_msg+0x15a>
 8015982:	18a0      	adds	r0, r4, r2
 8015984:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015988:	3202      	adds	r2, #2
 801598a:	f081 0520 	eor.w	r5, r1, #32
 801598e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8015992:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8015996:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801599a:	e7d9      	b.n	8015950 <uxr_write_framed_msg+0x94>
 801599c:	2104      	movs	r1, #4
 801599e:	f04f 0c03 	mov.w	ip, #3
 80159a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159a4:	4422      	add	r2, r4
 80159a6:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80159aa:	44a4      	add	ip, r4
 80159ac:	b2dd      	uxtb	r5, r3
 80159ae:	f080 0020 	eor.w	r0, r0, #32
 80159b2:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80159b6:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80159ba:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80159be:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80159c2:	2a01      	cmp	r2, #1
 80159c4:	d8a2      	bhi.n	801590c <uxr_write_framed_msg+0x50>
 80159c6:	1862      	adds	r2, r4, r1
 80159c8:	207d      	movs	r0, #125	@ 0x7d
 80159ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159cc:	f085 0520 	eor.w	r5, r5, #32
 80159d0:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80159d4:	3102      	adds	r1, #2
 80159d6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80159da:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80159de:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80159e2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80159e6:	2a01      	cmp	r2, #1
 80159e8:	d89d      	bhi.n	8015926 <uxr_write_framed_msg+0x6a>
 80159ea:	1c4d      	adds	r5, r1, #1
 80159ec:	1c8a      	adds	r2, r1, #2
 80159ee:	f080 0020 	eor.w	r0, r0, #32
 80159f2:	4421      	add	r1, r4
 80159f4:	fa54 f585 	uxtab	r5, r4, r5
 80159f8:	b2d2      	uxtb	r2, r2
 80159fa:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80159fe:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8015a02:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8015a06:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d194      	bne.n	8015938 <uxr_write_framed_msg+0x7c>
 8015a0e:	4619      	mov	r1, r3
 8015a10:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015a14:	e019      	b.n	8015a4a <uxr_write_framed_msg+0x18e>
 8015a16:	2500      	movs	r5, #0
 8015a18:	e000      	b.n	8015a1c <uxr_write_framed_msg+0x160>
 8015a1a:	b160      	cbz	r0, 8015a36 <uxr_write_framed_msg+0x17a>
 8015a1c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015a20:	1b52      	subs	r2, r2, r5
 8015a22:	4653      	mov	r3, sl
 8015a24:	4638      	mov	r0, r7
 8015a26:	4421      	add	r1, r4
 8015a28:	47b0      	blx	r6
 8015a2a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a2e:	4405      	add	r5, r0
 8015a30:	4295      	cmp	r5, r2
 8015a32:	d3f2      	bcc.n	8015a1a <uxr_write_framed_msg+0x15e>
 8015a34:	d066      	beq.n	8015b04 <uxr_write_framed_msg+0x248>
 8015a36:	2000      	movs	r0, #0
 8015a38:	b003      	add	sp, #12
 8015a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a3e:	fa5f f188 	uxtb.w	r1, r8
 8015a42:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a46:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015a4a:	f04f 0900 	mov.w	r9, #0
 8015a4e:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8015a52:	46c8      	mov	r8, r9
 8015a54:	e013      	b.n	8015a7e <uxr_write_framed_msg+0x1c2>
 8015a56:	2a29      	cmp	r2, #41	@ 0x29
 8015a58:	d824      	bhi.n	8015aa4 <uxr_write_framed_msg+0x1e8>
 8015a5a:	18a3      	adds	r3, r4, r2
 8015a5c:	3201      	adds	r2, #1
 8015a5e:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8015a62:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015a66:	f109 0901 	add.w	r9, r9, #1
 8015a6a:	f1b9 0f02 	cmp.w	r9, #2
 8015a6e:	d02d      	beq.n	8015acc <uxr_write_framed_msg+0x210>
 8015a70:	f109 0308 	add.w	r3, r9, #8
 8015a74:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015a78:	446b      	add	r3, sp
 8015a7a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015a7e:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d8e7      	bhi.n	8015a56 <uxr_write_framed_msg+0x19a>
 8015a86:	1c53      	adds	r3, r2, #1
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b29      	cmp	r3, #41	@ 0x29
 8015a8c:	d80a      	bhi.n	8015aa4 <uxr_write_framed_msg+0x1e8>
 8015a8e:	18a3      	adds	r3, r4, r2
 8015a90:	f081 0120 	eor.w	r1, r1, #32
 8015a94:	3202      	adds	r2, #2
 8015a96:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015a9a:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8015a9e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015aa2:	e7e0      	b.n	8015a66 <uxr_write_framed_msg+0x1aa>
 8015aa4:	2500      	movs	r5, #0
 8015aa6:	e001      	b.n	8015aac <uxr_write_framed_msg+0x1f0>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d0c4      	beq.n	8015a36 <uxr_write_framed_msg+0x17a>
 8015aac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015ab0:	1b52      	subs	r2, r2, r5
 8015ab2:	4653      	mov	r3, sl
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	4421      	add	r1, r4
 8015ab8:	47b0      	blx	r6
 8015aba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015abe:	4405      	add	r5, r0
 8015ac0:	4295      	cmp	r5, r2
 8015ac2:	d3f1      	bcc.n	8015aa8 <uxr_write_framed_msg+0x1ec>
 8015ac4:	d1b7      	bne.n	8015a36 <uxr_write_framed_msg+0x17a>
 8015ac6:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8015aca:	e7d1      	b.n	8015a70 <uxr_write_framed_msg+0x1b4>
 8015acc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015ad0:	b19a      	cbz	r2, 8015afa <uxr_write_framed_msg+0x23e>
 8015ad2:	2500      	movs	r5, #0
 8015ad4:	e001      	b.n	8015ada <uxr_write_framed_msg+0x21e>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d0ad      	beq.n	8015a36 <uxr_write_framed_msg+0x17a>
 8015ada:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015ade:	1b52      	subs	r2, r2, r5
 8015ae0:	4653      	mov	r3, sl
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	4421      	add	r1, r4
 8015ae6:	47b0      	blx	r6
 8015ae8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015aec:	4405      	add	r5, r0
 8015aee:	4295      	cmp	r5, r2
 8015af0:	d3f1      	bcc.n	8015ad6 <uxr_write_framed_msg+0x21a>
 8015af2:	d1a0      	bne.n	8015a36 <uxr_write_framed_msg+0x17a>
 8015af4:	2300      	movs	r3, #0
 8015af6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015afa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015afc:	b298      	uxth	r0, r3
 8015afe:	b003      	add	sp, #12
 8015b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b04:	f04f 0300 	mov.w	r3, #0
 8015b08:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015b0c:	e72a      	b.n	8015964 <uxr_write_framed_msg+0xa8>
 8015b0e:	217d      	movs	r1, #125	@ 0x7d
 8015b10:	f082 0220 	eor.w	r2, r2, #32
 8015b14:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015b18:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015b1c:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015b20:	2203      	movs	r2, #3
 8015b22:	2901      	cmp	r1, #1
 8015b24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015b28:	d803      	bhi.n	8015b32 <uxr_write_framed_msg+0x276>
 8015b2a:	2105      	movs	r1, #5
 8015b2c:	f04f 0c04 	mov.w	ip, #4
 8015b30:	e737      	b.n	80159a2 <uxr_write_framed_msg+0xe6>
 8015b32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b34:	2104      	movs	r1, #4
 8015b36:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015b3a:	b2dd      	uxtb	r5, r3
 8015b3c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015b40:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015b44:	2a01      	cmp	r2, #1
 8015b46:	f63f aee1 	bhi.w	801590c <uxr_write_framed_msg+0x50>
 8015b4a:	e73c      	b.n	80159c6 <uxr_write_framed_msg+0x10a>
 8015b4c:	080189b8 	.word	0x080189b8

08015b50 <uxr_framing_read_transport>:
 8015b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	4604      	mov	r4, r0
 8015b56:	b085      	sub	sp, #20
 8015b58:	4692      	mov	sl, r2
 8015b5a:	4689      	mov	r9, r1
 8015b5c:	461d      	mov	r5, r3
 8015b5e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015b60:	f7fb fa9a 	bl	8011098 <uxr_millis>
 8015b64:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015b68:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015b6c:	4680      	mov	r8, r0
 8015b6e:	42ba      	cmp	r2, r7
 8015b70:	d05f      	beq.n	8015c32 <uxr_framing_read_transport+0xe2>
 8015b72:	d817      	bhi.n	8015ba4 <uxr_framing_read_transport+0x54>
 8015b74:	3f01      	subs	r7, #1
 8015b76:	1aba      	subs	r2, r7, r2
 8015b78:	2700      	movs	r7, #0
 8015b7a:	b2d2      	uxtb	r2, r2
 8015b7c:	42b2      	cmp	r2, r6
 8015b7e:	d81a      	bhi.n	8015bb6 <uxr_framing_read_transport+0x66>
 8015b80:	19d3      	adds	r3, r2, r7
 8015b82:	42b3      	cmp	r3, r6
 8015b84:	d852      	bhi.n	8015c2c <uxr_framing_read_transport+0xdc>
 8015b86:	b9d2      	cbnz	r2, 8015bbe <uxr_framing_read_transport+0x6e>
 8015b88:	2600      	movs	r6, #0
 8015b8a:	f7fb fa85 	bl	8011098 <uxr_millis>
 8015b8e:	682b      	ldr	r3, [r5, #0]
 8015b90:	eba0 0008 	sub.w	r0, r0, r8
 8015b94:	1a1b      	subs	r3, r3, r0
 8015b96:	4630      	mov	r0, r6
 8015b98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b9c:	602b      	str	r3, [r5, #0]
 8015b9e:	b005      	add	sp, #20
 8015ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba4:	2f00      	cmp	r7, #0
 8015ba6:	d060      	beq.n	8015c6a <uxr_framing_read_transport+0x11a>
 8015ba8:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8015bac:	3f01      	subs	r7, #1
 8015bae:	b2d2      	uxtb	r2, r2
 8015bb0:	b2ff      	uxtb	r7, r7
 8015bb2:	42b2      	cmp	r2, r6
 8015bb4:	d9e4      	bls.n	8015b80 <uxr_framing_read_transport+0x30>
 8015bb6:	b2f2      	uxtb	r2, r6
 8015bb8:	2700      	movs	r7, #0
 8015bba:	2a00      	cmp	r2, #0
 8015bbc:	d0e4      	beq.n	8015b88 <uxr_framing_read_transport+0x38>
 8015bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bc0:	4650      	mov	r0, sl
 8015bc2:	9203      	str	r2, [sp, #12]
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015bca:	682b      	ldr	r3, [r5, #0]
 8015bcc:	3102      	adds	r1, #2
 8015bce:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8015c74 <uxr_framing_read_transport+0x124>
 8015bd2:	4421      	add	r1, r4
 8015bd4:	47c8      	blx	r9
 8015bd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015bda:	4606      	mov	r6, r0
 8015bdc:	4403      	add	r3, r0
 8015bde:	0859      	lsrs	r1, r3, #1
 8015be0:	fbab 2101 	umull	r2, r1, fp, r1
 8015be4:	222a      	movs	r2, #42	@ 0x2a
 8015be6:	0889      	lsrs	r1, r1, #2
 8015be8:	fb02 3111 	mls	r1, r2, r1, r3
 8015bec:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	d0c9      	beq.n	8015b88 <uxr_framing_read_transport+0x38>
 8015bf4:	9a03      	ldr	r2, [sp, #12]
 8015bf6:	4290      	cmp	r0, r2
 8015bf8:	d1c7      	bne.n	8015b8a <uxr_framing_read_transport+0x3a>
 8015bfa:	2f00      	cmp	r7, #0
 8015bfc:	d0c5      	beq.n	8015b8a <uxr_framing_read_transport+0x3a>
 8015bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c00:	3102      	adds	r1, #2
 8015c02:	463a      	mov	r2, r7
 8015c04:	4650      	mov	r0, sl
 8015c06:	4421      	add	r1, r4
 8015c08:	9300      	str	r3, [sp, #0]
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	47c8      	blx	r9
 8015c0e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015c12:	4406      	add	r6, r0
 8015c14:	1813      	adds	r3, r2, r0
 8015c16:	085a      	lsrs	r2, r3, #1
 8015c18:	fbab 1b02 	umull	r1, fp, fp, r2
 8015c1c:	222a      	movs	r2, #42	@ 0x2a
 8015c1e:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015c22:	fb02 331b 	mls	r3, r2, fp, r3
 8015c26:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015c2a:	e7ae      	b.n	8015b8a <uxr_framing_read_transport+0x3a>
 8015c2c:	1ab6      	subs	r6, r6, r2
 8015c2e:	b2f7      	uxtb	r7, r6
 8015c30:	e7a9      	b.n	8015b86 <uxr_framing_read_transport+0x36>
 8015c32:	2300      	movs	r3, #0
 8015c34:	2e28      	cmp	r6, #40	@ 0x28
 8015c36:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015c38:	d9bd      	bls.n	8015bb6 <uxr_framing_read_transport+0x66>
 8015c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c3c:	2229      	movs	r2, #41	@ 0x29
 8015c3e:	1ca1      	adds	r1, r4, #2
 8015c40:	4650      	mov	r0, sl
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	682b      	ldr	r3, [r5, #0]
 8015c46:	47c8      	blx	r9
 8015c48:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015c4c:	4606      	mov	r6, r0
 8015c4e:	212a      	movs	r1, #42	@ 0x2a
 8015c50:	4403      	add	r3, r0
 8015c52:	4808      	ldr	r0, [pc, #32]	@ (8015c74 <uxr_framing_read_transport+0x124>)
 8015c54:	085a      	lsrs	r2, r3, #1
 8015c56:	fba0 0202 	umull	r0, r2, r0, r2
 8015c5a:	0892      	lsrs	r2, r2, #2
 8015c5c:	fb01 3312 	mls	r3, r1, r2, r3
 8015c60:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015c64:	2e00      	cmp	r6, #0
 8015c66:	d08f      	beq.n	8015b88 <uxr_framing_read_transport+0x38>
 8015c68:	e78f      	b.n	8015b8a <uxr_framing_read_transport+0x3a>
 8015c6a:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8015c6e:	b2d2      	uxtb	r2, r2
 8015c70:	e784      	b.n	8015b7c <uxr_framing_read_transport+0x2c>
 8015c72:	bf00      	nop
 8015c74:	30c30c31 	.word	0x30c30c31

08015c78 <uxr_read_framed_msg>:
 8015c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	461e      	mov	r6, r3
 8015c7e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015c82:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8015c86:	b083      	sub	sp, #12
 8015c88:	4604      	mov	r4, r0
 8015c8a:	4688      	mov	r8, r1
 8015c8c:	429d      	cmp	r5, r3
 8015c8e:	4691      	mov	r9, r2
 8015c90:	f000 818c 	beq.w	8015fac <uxr_read_framed_msg+0x334>
 8015c94:	7823      	ldrb	r3, [r4, #0]
 8015c96:	4dc3      	ldr	r5, [pc, #780]	@ (8015fa4 <uxr_read_framed_msg+0x32c>)
 8015c98:	4fc3      	ldr	r7, [pc, #780]	@ (8015fa8 <uxr_read_framed_msg+0x330>)
 8015c9a:	2b07      	cmp	r3, #7
 8015c9c:	d8fd      	bhi.n	8015c9a <uxr_read_framed_msg+0x22>
 8015c9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015ca2:	011c      	.short	0x011c
 8015ca4:	00d900fb 	.word	0x00d900fb
 8015ca8:	008f00ba 	.word	0x008f00ba
 8015cac:	00320051 	.word	0x00320051
 8015cb0:	0008      	.short	0x0008
 8015cb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015cb6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015cba:	4299      	cmp	r1, r3
 8015cbc:	f000 814d 	beq.w	8015f5a <uxr_read_framed_msg+0x2e2>
 8015cc0:	18e2      	adds	r2, r4, r3
 8015cc2:	7892      	ldrb	r2, [r2, #2]
 8015cc4:	2a7d      	cmp	r2, #125	@ 0x7d
 8015cc6:	f000 81b8 	beq.w	801603a <uxr_read_framed_msg+0x3c2>
 8015cca:	3301      	adds	r3, #1
 8015ccc:	212a      	movs	r1, #42	@ 0x2a
 8015cce:	2a7e      	cmp	r2, #126	@ 0x7e
 8015cd0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015cd4:	fba5 c000 	umull	ip, r0, r5, r0
 8015cd8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015cdc:	fb01 3310 	mls	r3, r1, r0, r3
 8015ce0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ce4:	f000 8257 	beq.w	8016196 <uxr_read_framed_msg+0x51e>
 8015ce8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015cea:	2000      	movs	r0, #0
 8015cec:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015cee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015cf2:	7020      	strb	r0, [r4, #0]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	4299      	cmp	r1, r3
 8015cf8:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015cfa:	f000 8178 	beq.w	8015fee <uxr_read_framed_msg+0x376>
 8015cfe:	2000      	movs	r0, #0
 8015d00:	b003      	add	sp, #12
 8015d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d06:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015d0a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015d0e:	4298      	cmp	r0, r3
 8015d10:	f000 8132 	beq.w	8015f78 <uxr_read_framed_msg+0x300>
 8015d14:	18e2      	adds	r2, r4, r3
 8015d16:	7891      	ldrb	r1, [r2, #2]
 8015d18:	297d      	cmp	r1, #125	@ 0x7d
 8015d1a:	f000 8170 	beq.w	8015ffe <uxr_read_framed_msg+0x386>
 8015d1e:	3301      	adds	r3, #1
 8015d20:	202a      	movs	r0, #42	@ 0x2a
 8015d22:	297e      	cmp	r1, #126	@ 0x7e
 8015d24:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015d28:	fba5 c202 	umull	ip, r2, r5, r2
 8015d2c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d30:	fb00 3312 	mls	r3, r0, r2, r3
 8015d34:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015d38:	f000 821d 	beq.w	8016176 <uxr_read_framed_msg+0x4fe>
 8015d3c:	2307      	movs	r3, #7
 8015d3e:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8015d40:	7023      	strb	r3, [r4, #0]
 8015d42:	e7aa      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015d44:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015d46:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015d4a:	459e      	cmp	lr, r3
 8015d4c:	d827      	bhi.n	8015d9e <uxr_read_framed_msg+0x126>
 8015d4e:	e032      	b.n	8015db6 <uxr_read_framed_msg+0x13e>
 8015d50:	fba5 b101 	umull	fp, r1, r5, r1
 8015d54:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015d58:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015d5c:	0889      	lsrs	r1, r1, #2
 8015d5e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8015d62:	fb0b 0111 	mls	r1, fp, r1, r0
 8015d66:	f000 80d4 	beq.w	8015f12 <uxr_read_framed_msg+0x29a>
 8015d6a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015d6e:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8015d72:	f000 80cb 	beq.w	8015f0c <uxr_read_framed_msg+0x294>
 8015d76:	f806 c003 	strb.w	ip, [r6, r3]
 8015d7a:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015d7c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015d7e:	ea80 010c 	eor.w	r1, r0, ip
 8015d82:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015d86:	3301      	adds	r3, #1
 8015d88:	b2c9      	uxtb	r1, r1
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015d90:	4573      	cmp	r3, lr
 8015d92:	8663      	strh	r3, [r4, #50]	@ 0x32
 8015d94:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015d98:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015d9a:	f080 811d 	bcs.w	8015fd8 <uxr_read_framed_msg+0x360>
 8015d9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015da2:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015da6:	1c50      	adds	r0, r2, #1
 8015da8:	eb04 0c02 	add.w	ip, r4, r2
 8015dac:	4592      	cmp	sl, r2
 8015dae:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015db2:	d1cd      	bne.n	8015d50 <uxr_read_framed_msg+0xd8>
 8015db4:	459e      	cmp	lr, r3
 8015db6:	f040 8114 	bne.w	8015fe2 <uxr_read_framed_msg+0x36a>
 8015dba:	2306      	movs	r3, #6
 8015dbc:	7023      	strb	r3, [r4, #0]
 8015dbe:	e76c      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015dc0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015dc4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015dc8:	4298      	cmp	r0, r3
 8015dca:	f000 80c6 	beq.w	8015f5a <uxr_read_framed_msg+0x2e2>
 8015dce:	18e2      	adds	r2, r4, r3
 8015dd0:	7891      	ldrb	r1, [r2, #2]
 8015dd2:	297d      	cmp	r1, #125	@ 0x7d
 8015dd4:	f000 8193 	beq.w	80160fe <uxr_read_framed_msg+0x486>
 8015dd8:	3301      	adds	r3, #1
 8015dda:	202a      	movs	r0, #42	@ 0x2a
 8015ddc:	297e      	cmp	r1, #126	@ 0x7e
 8015dde:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015de2:	fba5 c202 	umull	ip, r2, r5, r2
 8015de6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015dea:	fb00 3312 	mls	r3, r0, r2, r3
 8015dee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015df2:	f000 81d0 	beq.w	8016196 <uxr_read_framed_msg+0x51e>
 8015df6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015df8:	2000      	movs	r0, #0
 8015dfa:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015dfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e00:	8660      	strh	r0, [r4, #50]	@ 0x32
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015e06:	428b      	cmp	r3, r1
 8015e08:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015e0a:	f240 80e2 	bls.w	8015fd2 <uxr_read_framed_msg+0x35a>
 8015e0e:	7020      	strb	r0, [r4, #0]
 8015e10:	b003      	add	sp, #12
 8015e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e16:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015e1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015e1e:	4298      	cmp	r0, r3
 8015e20:	f000 80aa 	beq.w	8015f78 <uxr_read_framed_msg+0x300>
 8015e24:	18e2      	adds	r2, r4, r3
 8015e26:	7891      	ldrb	r1, [r2, #2]
 8015e28:	297d      	cmp	r1, #125	@ 0x7d
 8015e2a:	f000 8186 	beq.w	801613a <uxr_read_framed_msg+0x4c2>
 8015e2e:	3301      	adds	r3, #1
 8015e30:	202a      	movs	r0, #42	@ 0x2a
 8015e32:	297e      	cmp	r1, #126	@ 0x7e
 8015e34:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015e38:	fba5 c202 	umull	ip, r2, r5, r2
 8015e3c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015e40:	fb00 3312 	mls	r3, r0, r2, r3
 8015e44:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015e48:	f000 8195 	beq.w	8016176 <uxr_read_framed_msg+0x4fe>
 8015e4c:	2304      	movs	r3, #4
 8015e4e:	8621      	strh	r1, [r4, #48]	@ 0x30
 8015e50:	7023      	strb	r3, [r4, #0]
 8015e52:	e722      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015e54:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015e58:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015e5c:	4290      	cmp	r0, r2
 8015e5e:	f000 80b4 	beq.w	8015fca <uxr_read_framed_msg+0x352>
 8015e62:	18a3      	adds	r3, r4, r2
 8015e64:	7899      	ldrb	r1, [r3, #2]
 8015e66:	297d      	cmp	r1, #125	@ 0x7d
 8015e68:	f000 8107 	beq.w	801607a <uxr_read_framed_msg+0x402>
 8015e6c:	3201      	adds	r2, #1
 8015e6e:	232a      	movs	r3, #42	@ 0x2a
 8015e70:	297e      	cmp	r1, #126	@ 0x7e
 8015e72:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015e76:	fba5 c000 	umull	ip, r0, r5, r0
 8015e7a:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015e7e:	fb03 2210 	mls	r2, r3, r0, r2
 8015e82:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015e86:	f000 818a 	beq.w	801619e <uxr_read_framed_msg+0x526>
 8015e8a:	7863      	ldrb	r3, [r4, #1]
 8015e8c:	428b      	cmp	r3, r1
 8015e8e:	bf0c      	ite	eq
 8015e90:	2303      	moveq	r3, #3
 8015e92:	2300      	movne	r3, #0
 8015e94:	7023      	strb	r3, [r4, #0]
 8015e96:	e700      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015e9e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8015ea2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015ea6:	4299      	cmp	r1, r3
 8015ea8:	d06a      	beq.n	8015f80 <uxr_read_framed_msg+0x308>
 8015eaa:	18e2      	adds	r2, r4, r3
 8015eac:	7890      	ldrb	r0, [r2, #2]
 8015eae:	287d      	cmp	r0, #125	@ 0x7d
 8015eb0:	f000 8100 	beq.w	80160b4 <uxr_read_framed_msg+0x43c>
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	212a      	movs	r1, #42	@ 0x2a
 8015eb8:	287e      	cmp	r0, #126	@ 0x7e
 8015eba:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015ebe:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015ec2:	fba5 c202 	umull	ip, r2, r5, r2
 8015ec6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015eca:	fb01 3312 	mls	r3, r1, r2, r3
 8015ece:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015ed2:	d055      	beq.n	8015f80 <uxr_read_framed_msg+0x308>
 8015ed4:	2302      	movs	r3, #2
 8015ed6:	7023      	strb	r3, [r4, #0]
 8015ed8:	e6df      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015eda:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8015ede:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8015ee2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015ee6:	1c5a      	adds	r2, r3, #1
 8015ee8:	459c      	cmp	ip, r3
 8015eea:	eb04 0103 	add.w	r1, r4, r3
 8015eee:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015ef2:	f43f af04 	beq.w	8015cfe <uxr_read_framed_msg+0x86>
 8015ef6:	fba5 0303 	umull	r0, r3, r5, r3
 8015efa:	7889      	ldrb	r1, [r1, #2]
 8015efc:	089b      	lsrs	r3, r3, #2
 8015efe:	297e      	cmp	r1, #126	@ 0x7e
 8015f00:	fb0e 2313 	mls	r3, lr, r3, r2
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015f0a:	d1ec      	bne.n	8015ee6 <uxr_read_framed_msg+0x26e>
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	7023      	strb	r3, [r4, #0]
 8015f10:	e6c3      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015f12:	1c50      	adds	r0, r2, #1
 8015f14:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015f18:	3202      	adds	r2, #2
 8015f1a:	0841      	lsrs	r1, r0, #1
 8015f1c:	fba5 c101 	umull	ip, r1, r5, r1
 8015f20:	0889      	lsrs	r1, r1, #2
 8015f22:	fb0b 0111 	mls	r1, fp, r1, r0
 8015f26:	1860      	adds	r0, r4, r1
 8015f28:	b2c9      	uxtb	r1, r1
 8015f2a:	458a      	cmp	sl, r1
 8015f2c:	f43f af42 	beq.w	8015db4 <uxr_read_framed_msg+0x13c>
 8015f30:	0851      	lsrs	r1, r2, #1
 8015f32:	7880      	ldrb	r0, [r0, #2]
 8015f34:	fba5 a101 	umull	sl, r1, r5, r1
 8015f38:	287e      	cmp	r0, #126	@ 0x7e
 8015f3a:	f080 0c20 	eor.w	ip, r0, #32
 8015f3e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015f42:	fb0b 2211 	mls	r2, fp, r1, r2
 8015f46:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015f4a:	f47f af14 	bne.w	8015d76 <uxr_read_framed_msg+0xfe>
 8015f4e:	459e      	cmp	lr, r3
 8015f50:	f43f af33 	beq.w	8015dba <uxr_read_framed_msg+0x142>
 8015f54:	2301      	movs	r3, #1
 8015f56:	7023      	strb	r3, [r4, #0]
 8015f58:	e69f      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015f5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f5c:	9300      	str	r3, [sp, #0]
 8015f5e:	2301      	movs	r3, #1
 8015f60:	9301      	str	r3, [sp, #4]
 8015f62:	464a      	mov	r2, r9
 8015f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f66:	4641      	mov	r1, r8
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f7ff fdf1 	bl	8015b50 <uxr_framing_read_transport>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	f43f aec5 	beq.w	8015cfe <uxr_read_framed_msg+0x86>
 8015f74:	7823      	ldrb	r3, [r4, #0]
 8015f76:	e690      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f7a:	9300      	str	r3, [sp, #0]
 8015f7c:	2302      	movs	r3, #2
 8015f7e:	e7ef      	b.n	8015f60 <uxr_read_framed_msg+0x2e8>
 8015f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f82:	464a      	mov	r2, r9
 8015f84:	4641      	mov	r1, r8
 8015f86:	4620      	mov	r0, r4
 8015f88:	9300      	str	r3, [sp, #0]
 8015f8a:	2304      	movs	r3, #4
 8015f8c:	9301      	str	r3, [sp, #4]
 8015f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f90:	f7ff fdde 	bl	8015b50 <uxr_framing_read_transport>
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d1ed      	bne.n	8015f74 <uxr_read_framed_msg+0x2fc>
 8015f98:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015f9c:	2b7e      	cmp	r3, #126	@ 0x7e
 8015f9e:	d0e9      	beq.n	8015f74 <uxr_read_framed_msg+0x2fc>
 8015fa0:	e6ad      	b.n	8015cfe <uxr_read_framed_msg+0x86>
 8015fa2:	bf00      	nop
 8015fa4:	30c30c31 	.word	0x30c30c31
 8015fa8:	080189b8 	.word	0x080189b8
 8015fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fae:	9300      	str	r3, [sp, #0]
 8015fb0:	2305      	movs	r3, #5
 8015fb2:	9301      	str	r3, [sp, #4]
 8015fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fb6:	f7ff fdcb 	bl	8015b50 <uxr_framing_read_transport>
 8015fba:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015fbe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	f43f ae9b 	beq.w	8015cfe <uxr_read_framed_msg+0x86>
 8015fc8:	e664      	b.n	8015c94 <uxr_read_framed_msg+0x1c>
 8015fca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	2303      	movs	r3, #3
 8015fd0:	e7c6      	b.n	8015f60 <uxr_read_framed_msg+0x2e8>
 8015fd2:	2305      	movs	r3, #5
 8015fd4:	7023      	strb	r3, [r4, #0]
 8015fd6:	e660      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8015fd8:	f43f aeef 	beq.w	8015dba <uxr_read_framed_msg+0x142>
 8015fdc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015fe0:	d094      	beq.n	8015f0c <uxr_read_framed_msg+0x294>
 8015fe2:	ebae 0303 	sub.w	r3, lr, r3
 8015fe6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015fe8:	3302      	adds	r3, #2
 8015fea:	9200      	str	r2, [sp, #0]
 8015fec:	e7b8      	b.n	8015f60 <uxr_read_framed_msg+0x2e8>
 8015fee:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015ff2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015ff4:	7013      	strb	r3, [r2, #0]
 8015ff6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8015ff8:	b003      	add	sp, #12
 8015ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ffe:	1c59      	adds	r1, r3, #1
 8016000:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016004:	084a      	lsrs	r2, r1, #1
 8016006:	fba5 e202 	umull	lr, r2, r5, r2
 801600a:	0892      	lsrs	r2, r2, #2
 801600c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016010:	b2d1      	uxtb	r1, r2
 8016012:	4288      	cmp	r0, r1
 8016014:	d0b0      	beq.n	8015f78 <uxr_read_framed_msg+0x300>
 8016016:	3302      	adds	r3, #2
 8016018:	4422      	add	r2, r4
 801601a:	7891      	ldrb	r1, [r2, #2]
 801601c:	085a      	lsrs	r2, r3, #1
 801601e:	fba5 0202 	umull	r0, r2, r5, r2
 8016022:	297e      	cmp	r1, #126	@ 0x7e
 8016024:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016028:	fb0c 3312 	mls	r3, ip, r2, r3
 801602c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016030:	f000 80a1 	beq.w	8016176 <uxr_read_framed_msg+0x4fe>
 8016034:	f081 0120 	eor.w	r1, r1, #32
 8016038:	e680      	b.n	8015d3c <uxr_read_framed_msg+0xc4>
 801603a:	f103 0c01 	add.w	ip, r3, #1
 801603e:	202a      	movs	r0, #42	@ 0x2a
 8016040:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016044:	fba5 e202 	umull	lr, r2, r5, r2
 8016048:	0892      	lsrs	r2, r2, #2
 801604a:	fb00 c212 	mls	r2, r0, r2, ip
 801604e:	fa5f fc82 	uxtb.w	ip, r2
 8016052:	4561      	cmp	r1, ip
 8016054:	d081      	beq.n	8015f5a <uxr_read_framed_msg+0x2e2>
 8016056:	3302      	adds	r3, #2
 8016058:	4422      	add	r2, r4
 801605a:	0859      	lsrs	r1, r3, #1
 801605c:	7892      	ldrb	r2, [r2, #2]
 801605e:	fba5 c101 	umull	ip, r1, r5, r1
 8016062:	2a7e      	cmp	r2, #126	@ 0x7e
 8016064:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016068:	fb00 3311 	mls	r3, r0, r1, r3
 801606c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016070:	f000 8091 	beq.w	8016196 <uxr_read_framed_msg+0x51e>
 8016074:	f082 0220 	eor.w	r2, r2, #32
 8016078:	e636      	b.n	8015ce8 <uxr_read_framed_msg+0x70>
 801607a:	1c51      	adds	r1, r2, #1
 801607c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016080:	084b      	lsrs	r3, r1, #1
 8016082:	fba5 e303 	umull	lr, r3, r5, r3
 8016086:	089b      	lsrs	r3, r3, #2
 8016088:	fb0c 1313 	mls	r3, ip, r3, r1
 801608c:	b2d9      	uxtb	r1, r3
 801608e:	4288      	cmp	r0, r1
 8016090:	d09b      	beq.n	8015fca <uxr_read_framed_msg+0x352>
 8016092:	3202      	adds	r2, #2
 8016094:	4423      	add	r3, r4
 8016096:	0850      	lsrs	r0, r2, #1
 8016098:	789b      	ldrb	r3, [r3, #2]
 801609a:	fba5 1000 	umull	r1, r0, r5, r0
 801609e:	2b7e      	cmp	r3, #126	@ 0x7e
 80160a0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80160a4:	fb0c 2210 	mls	r2, ip, r0, r2
 80160a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80160ac:	d077      	beq.n	801619e <uxr_read_framed_msg+0x526>
 80160ae:	f083 0120 	eor.w	r1, r3, #32
 80160b2:	e6ea      	b.n	8015e8a <uxr_read_framed_msg+0x212>
 80160b4:	f103 0c01 	add.w	ip, r3, #1
 80160b8:	202a      	movs	r0, #42	@ 0x2a
 80160ba:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80160be:	fba5 e202 	umull	lr, r2, r5, r2
 80160c2:	0892      	lsrs	r2, r2, #2
 80160c4:	fb00 c212 	mls	r2, r0, r2, ip
 80160c8:	fa5f fc82 	uxtb.w	ip, r2
 80160cc:	4561      	cmp	r1, ip
 80160ce:	f43f af57 	beq.w	8015f80 <uxr_read_framed_msg+0x308>
 80160d2:	3302      	adds	r3, #2
 80160d4:	4422      	add	r2, r4
 80160d6:	7891      	ldrb	r1, [r2, #2]
 80160d8:	085a      	lsrs	r2, r3, #1
 80160da:	fba5 c202 	umull	ip, r2, r5, r2
 80160de:	297e      	cmp	r1, #126	@ 0x7e
 80160e0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80160e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80160e8:	fb00 3312 	mls	r3, r0, r2, r3
 80160ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80160f0:	f43f af46 	beq.w	8015f80 <uxr_read_framed_msg+0x308>
 80160f4:	f081 0120 	eor.w	r1, r1, #32
 80160f8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80160fc:	e6ea      	b.n	8015ed4 <uxr_read_framed_msg+0x25c>
 80160fe:	1c59      	adds	r1, r3, #1
 8016100:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016104:	084a      	lsrs	r2, r1, #1
 8016106:	fba5 e202 	umull	lr, r2, r5, r2
 801610a:	0892      	lsrs	r2, r2, #2
 801610c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016110:	b2d1      	uxtb	r1, r2
 8016112:	4288      	cmp	r0, r1
 8016114:	f43f af21 	beq.w	8015f5a <uxr_read_framed_msg+0x2e2>
 8016118:	3302      	adds	r3, #2
 801611a:	4422      	add	r2, r4
 801611c:	7891      	ldrb	r1, [r2, #2]
 801611e:	085a      	lsrs	r2, r3, #1
 8016120:	fba5 0202 	umull	r0, r2, r5, r2
 8016124:	297e      	cmp	r1, #126	@ 0x7e
 8016126:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801612a:	fb0c 3312 	mls	r3, ip, r2, r3
 801612e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8016132:	d030      	beq.n	8016196 <uxr_read_framed_msg+0x51e>
 8016134:	f081 0120 	eor.w	r1, r1, #32
 8016138:	e65d      	b.n	8015df6 <uxr_read_framed_msg+0x17e>
 801613a:	1c59      	adds	r1, r3, #1
 801613c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016140:	084a      	lsrs	r2, r1, #1
 8016142:	fba5 e202 	umull	lr, r2, r5, r2
 8016146:	0892      	lsrs	r2, r2, #2
 8016148:	fb0c 1212 	mls	r2, ip, r2, r1
 801614c:	b2d1      	uxtb	r1, r2
 801614e:	4288      	cmp	r0, r1
 8016150:	f43f af12 	beq.w	8015f78 <uxr_read_framed_msg+0x300>
 8016154:	3302      	adds	r3, #2
 8016156:	4422      	add	r2, r4
 8016158:	7891      	ldrb	r1, [r2, #2]
 801615a:	085a      	lsrs	r2, r3, #1
 801615c:	fba5 0202 	umull	r0, r2, r5, r2
 8016160:	297e      	cmp	r1, #126	@ 0x7e
 8016162:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016166:	fb0c 3312 	mls	r3, ip, r2, r3
 801616a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801616e:	d002      	beq.n	8016176 <uxr_read_framed_msg+0x4fe>
 8016170:	f081 0120 	eor.w	r1, r1, #32
 8016174:	e66a      	b.n	8015e4c <uxr_read_framed_msg+0x1d4>
 8016176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	2302      	movs	r3, #2
 801617c:	9301      	str	r3, [sp, #4]
 801617e:	464a      	mov	r2, r9
 8016180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016182:	4641      	mov	r1, r8
 8016184:	4620      	mov	r0, r4
 8016186:	f7ff fce3 	bl	8015b50 <uxr_framing_read_transport>
 801618a:	2800      	cmp	r0, #0
 801618c:	f47f aef2 	bne.w	8015f74 <uxr_read_framed_msg+0x2fc>
 8016190:	2301      	movs	r3, #1
 8016192:	7023      	strb	r3, [r4, #0]
 8016194:	e581      	b.n	8015c9a <uxr_read_framed_msg+0x22>
 8016196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	2301      	movs	r3, #1
 801619c:	e7ee      	b.n	801617c <uxr_read_framed_msg+0x504>
 801619e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	2303      	movs	r3, #3
 80161a4:	e7ea      	b.n	801617c <uxr_read_framed_msg+0x504>
 80161a6:	bf00      	nop

080161a8 <rcl_get_default_domain_id>:
 80161a8:	b530      	push	{r4, r5, lr}
 80161aa:	2300      	movs	r3, #0
 80161ac:	b083      	sub	sp, #12
 80161ae:	9300      	str	r3, [sp, #0]
 80161b0:	b1d0      	cbz	r0, 80161e8 <rcl_get_default_domain_id+0x40>
 80161b2:	4604      	mov	r4, r0
 80161b4:	4669      	mov	r1, sp
 80161b6:	4815      	ldr	r0, [pc, #84]	@ (801620c <rcl_get_default_domain_id+0x64>)
 80161b8:	f7f7 ffe0 	bl	800e17c <rcutils_get_env>
 80161bc:	4602      	mov	r2, r0
 80161be:	b110      	cbz	r0, 80161c6 <rcl_get_default_domain_id+0x1e>
 80161c0:	2001      	movs	r0, #1
 80161c2:	b003      	add	sp, #12
 80161c4:	bd30      	pop	{r4, r5, pc}
 80161c6:	9b00      	ldr	r3, [sp, #0]
 80161c8:	b18b      	cbz	r3, 80161ee <rcl_get_default_domain_id+0x46>
 80161ca:	7818      	ldrb	r0, [r3, #0]
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d0f8      	beq.n	80161c2 <rcl_get_default_domain_id+0x1a>
 80161d0:	a901      	add	r1, sp, #4
 80161d2:	4618      	mov	r0, r3
 80161d4:	9201      	str	r2, [sp, #4]
 80161d6:	f000 fd71 	bl	8016cbc <strtoul>
 80161da:	4605      	mov	r5, r0
 80161dc:	b150      	cbz	r0, 80161f4 <rcl_get_default_domain_id+0x4c>
 80161de:	1c43      	adds	r3, r0, #1
 80161e0:	d00d      	beq.n	80161fe <rcl_get_default_domain_id+0x56>
 80161e2:	2000      	movs	r0, #0
 80161e4:	6025      	str	r5, [r4, #0]
 80161e6:	e7ec      	b.n	80161c2 <rcl_get_default_domain_id+0x1a>
 80161e8:	200b      	movs	r0, #11
 80161ea:	b003      	add	sp, #12
 80161ec:	bd30      	pop	{r4, r5, pc}
 80161ee:	4618      	mov	r0, r3
 80161f0:	b003      	add	sp, #12
 80161f2:	bd30      	pop	{r4, r5, pc}
 80161f4:	9b01      	ldr	r3, [sp, #4]
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d0f2      	beq.n	80161e2 <rcl_get_default_domain_id+0x3a>
 80161fc:	e7e0      	b.n	80161c0 <rcl_get_default_domain_id+0x18>
 80161fe:	f001 f88d 	bl	801731c <__errno>
 8016202:	6803      	ldr	r3, [r0, #0]
 8016204:	2b22      	cmp	r3, #34	@ 0x22
 8016206:	d1ec      	bne.n	80161e2 <rcl_get_default_domain_id+0x3a>
 8016208:	e7da      	b.n	80161c0 <rcl_get_default_domain_id+0x18>
 801620a:	bf00      	nop
 801620c:	08018bb8 	.word	0x08018bb8

08016210 <rcl_expand_topic_name>:
 8016210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016214:	b08d      	sub	sp, #52	@ 0x34
 8016216:	4698      	mov	r8, r3
 8016218:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801621a:	9207      	str	r2, [sp, #28]
 801621c:	2b00      	cmp	r3, #0
 801621e:	bf18      	it	ne
 8016220:	f1b8 0f00 	cmpne.w	r8, #0
 8016224:	bf0c      	ite	eq
 8016226:	2301      	moveq	r3, #1
 8016228:	2300      	movne	r3, #0
 801622a:	2a00      	cmp	r2, #0
 801622c:	bf08      	it	eq
 801622e:	f043 0301 	orreq.w	r3, r3, #1
 8016232:	2900      	cmp	r1, #0
 8016234:	bf08      	it	eq
 8016236:	f043 0301 	orreq.w	r3, r3, #1
 801623a:	2b00      	cmp	r3, #0
 801623c:	d13d      	bne.n	80162ba <rcl_expand_topic_name+0xaa>
 801623e:	fab0 f280 	clz	r2, r0
 8016242:	4604      	mov	r4, r0
 8016244:	0952      	lsrs	r2, r2, #5
 8016246:	2800      	cmp	r0, #0
 8016248:	d037      	beq.n	80162ba <rcl_expand_topic_name+0xaa>
 801624a:	460f      	mov	r7, r1
 801624c:	a90b      	add	r1, sp, #44	@ 0x2c
 801624e:	f000 f945 	bl	80164dc <rcl_validate_topic_name>
 8016252:	4605      	mov	r5, r0
 8016254:	bb68      	cbnz	r0, 80162b2 <rcl_expand_topic_name+0xa2>
 8016256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016258:	2b00      	cmp	r3, #0
 801625a:	d137      	bne.n	80162cc <rcl_expand_topic_name+0xbc>
 801625c:	4602      	mov	r2, r0
 801625e:	a90b      	add	r1, sp, #44	@ 0x2c
 8016260:	4638      	mov	r0, r7
 8016262:	f7f8 f9c3 	bl	800e5ec <rmw_validate_node_name>
 8016266:	bb68      	cbnz	r0, 80162c4 <rcl_expand_topic_name+0xb4>
 8016268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801626a:	2b00      	cmp	r3, #0
 801626c:	d133      	bne.n	80162d6 <rcl_expand_topic_name+0xc6>
 801626e:	462a      	mov	r2, r5
 8016270:	a90b      	add	r1, sp, #44	@ 0x2c
 8016272:	9807      	ldr	r0, [sp, #28]
 8016274:	f7f8 f99c 	bl	800e5b0 <rmw_validate_namespace>
 8016278:	bb20      	cbnz	r0, 80162c4 <rcl_expand_topic_name+0xb4>
 801627a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801627c:	2d00      	cmp	r5, #0
 801627e:	f040 80a2 	bne.w	80163c6 <rcl_expand_topic_name+0x1b6>
 8016282:	217b      	movs	r1, #123	@ 0x7b
 8016284:	4620      	mov	r0, r4
 8016286:	f000 ffbd 	bl	8017204 <strchr>
 801628a:	7823      	ldrb	r3, [r4, #0]
 801628c:	4681      	mov	r9, r0
 801628e:	bb20      	cbnz	r0, 80162da <rcl_expand_topic_name+0xca>
 8016290:	2b2f      	cmp	r3, #47	@ 0x2f
 8016292:	d122      	bne.n	80162da <rcl_expand_topic_name+0xca>
 8016294:	ab19      	add	r3, sp, #100	@ 0x64
 8016296:	e893 0003 	ldmia.w	r3, {r0, r1}
 801629a:	ab16      	add	r3, sp, #88	@ 0x58
 801629c:	e88d 0003 	stmia.w	sp, {r0, r1}
 80162a0:	4620      	mov	r0, r4
 80162a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80162a4:	f7f8 f8ee 	bl	800e484 <rcutils_strdup>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80162ac:	bf08      	it	eq
 80162ae:	250a      	moveq	r5, #10
 80162b0:	6018      	str	r0, [r3, #0]
 80162b2:	4628      	mov	r0, r5
 80162b4:	b00d      	add	sp, #52	@ 0x34
 80162b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ba:	250b      	movs	r5, #11
 80162bc:	4628      	mov	r0, r5
 80162be:	b00d      	add	sp, #52	@ 0x34
 80162c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c4:	f7fc f81a 	bl	80122fc <rcl_convert_rmw_ret_to_rcl_ret>
 80162c8:	4605      	mov	r5, r0
 80162ca:	e7f2      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 80162cc:	2567      	movs	r5, #103	@ 0x67
 80162ce:	4628      	mov	r0, r5
 80162d0:	b00d      	add	sp, #52	@ 0x34
 80162d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162d6:	25c9      	movs	r5, #201	@ 0xc9
 80162d8:	e7eb      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 80162da:	2b7e      	cmp	r3, #126	@ 0x7e
 80162dc:	d075      	beq.n	80163ca <rcl_expand_topic_name+0x1ba>
 80162de:	f1b9 0f00 	cmp.w	r9, #0
 80162e2:	f000 80c2 	beq.w	801646a <rcl_expand_topic_name+0x25a>
 80162e6:	2300      	movs	r3, #0
 80162e8:	46a2      	mov	sl, r4
 80162ea:	461e      	mov	r6, r3
 80162ec:	9508      	str	r5, [sp, #32]
 80162ee:	4655      	mov	r5, sl
 80162f0:	9409      	str	r4, [sp, #36]	@ 0x24
 80162f2:	46b2      	mov	sl, r6
 80162f4:	464c      	mov	r4, r9
 80162f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80162fa:	2c00      	cmp	r4, #0
 80162fc:	f000 80ae 	beq.w	801645c <rcl_expand_topic_name+0x24c>
 8016300:	217d      	movs	r1, #125	@ 0x7d
 8016302:	4628      	mov	r0, r5
 8016304:	f000 ff7e 	bl	8017204 <strchr>
 8016308:	eba0 0904 	sub.w	r9, r0, r4
 801630c:	4621      	mov	r1, r4
 801630e:	4869      	ldr	r0, [pc, #420]	@ (80164b4 <rcl_expand_topic_name+0x2a4>)
 8016310:	f109 0601 	add.w	r6, r9, #1
 8016314:	4632      	mov	r2, r6
 8016316:	f000 ff82 	bl	801721e <strncmp>
 801631a:	2800      	cmp	r0, #0
 801631c:	d051      	beq.n	80163c2 <rcl_expand_topic_name+0x1b2>
 801631e:	4632      	mov	r2, r6
 8016320:	4621      	mov	r1, r4
 8016322:	4865      	ldr	r0, [pc, #404]	@ (80164b8 <rcl_expand_topic_name+0x2a8>)
 8016324:	f000 ff7b 	bl	801721e <strncmp>
 8016328:	b128      	cbz	r0, 8016336 <rcl_expand_topic_name+0x126>
 801632a:	4632      	mov	r2, r6
 801632c:	4621      	mov	r1, r4
 801632e:	4863      	ldr	r0, [pc, #396]	@ (80164bc <rcl_expand_topic_name+0x2ac>)
 8016330:	f000 ff75 	bl	801721e <strncmp>
 8016334:	bb38      	cbnz	r0, 8016386 <rcl_expand_topic_name+0x176>
 8016336:	46d9      	mov	r9, fp
 8016338:	ab18      	add	r3, sp, #96	@ 0x60
 801633a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801633e:	ab16      	add	r3, sp, #88	@ 0x58
 8016340:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016344:	4620      	mov	r0, r4
 8016346:	4631      	mov	r1, r6
 8016348:	cb0c      	ldmia	r3, {r2, r3}
 801634a:	f7f8 f8bd 	bl	800e4c8 <rcutils_strndup>
 801634e:	4604      	mov	r4, r0
 8016350:	2800      	cmp	r0, #0
 8016352:	f000 80a3 	beq.w	801649c <rcl_expand_topic_name+0x28c>
 8016356:	464a      	mov	r2, r9
 8016358:	4628      	mov	r0, r5
 801635a:	ab16      	add	r3, sp, #88	@ 0x58
 801635c:	4621      	mov	r1, r4
 801635e:	f7f7 ff91 	bl	800e284 <rcutils_repl_str>
 8016362:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016364:	4605      	mov	r5, r0
 8016366:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016368:	4620      	mov	r0, r4
 801636a:	4798      	blx	r3
 801636c:	4650      	mov	r0, sl
 801636e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016372:	4798      	blx	r3
 8016374:	2d00      	cmp	r5, #0
 8016376:	d06c      	beq.n	8016452 <rcl_expand_topic_name+0x242>
 8016378:	217b      	movs	r1, #123	@ 0x7b
 801637a:	4628      	mov	r0, r5
 801637c:	f000 ff42 	bl	8017204 <strchr>
 8016380:	46aa      	mov	sl, r5
 8016382:	4604      	mov	r4, r0
 8016384:	e7b9      	b.n	80162fa <rcl_expand_topic_name+0xea>
 8016386:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801638a:	1c61      	adds	r1, r4, #1
 801638c:	4640      	mov	r0, r8
 801638e:	f7fc ff2f 	bl	80131f0 <rcutils_string_map_getn>
 8016392:	4681      	mov	r9, r0
 8016394:	2800      	cmp	r0, #0
 8016396:	d1cf      	bne.n	8016338 <rcl_expand_topic_name+0x128>
 8016398:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801639a:	aa18      	add	r2, sp, #96	@ 0x60
 801639c:	2569      	movs	r5, #105	@ 0x69
 801639e:	6018      	str	r0, [r3, #0]
 80163a0:	ab16      	add	r3, sp, #88	@ 0x58
 80163a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80163a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80163a8:	4631      	mov	r1, r6
 80163aa:	4620      	mov	r0, r4
 80163ac:	cb0c      	ldmia	r3, {r2, r3}
 80163ae:	f7f8 f88b 	bl	800e4c8 <rcutils_strndup>
 80163b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80163b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80163b6:	4798      	blx	r3
 80163b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80163ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80163bc:	4650      	mov	r0, sl
 80163be:	4798      	blx	r3
 80163c0:	e777      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 80163c2:	46b9      	mov	r9, r7
 80163c4:	e7b8      	b.n	8016338 <rcl_expand_topic_name+0x128>
 80163c6:	25ca      	movs	r5, #202	@ 0xca
 80163c8:	e773      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 80163ca:	9e07      	ldr	r6, [sp, #28]
 80163cc:	4630      	mov	r0, r6
 80163ce:	f7e9 ff41 	bl	8000254 <strlen>
 80163d2:	4a3b      	ldr	r2, [pc, #236]	@ (80164c0 <rcl_expand_topic_name+0x2b0>)
 80163d4:	4b3b      	ldr	r3, [pc, #236]	@ (80164c4 <rcl_expand_topic_name+0x2b4>)
 80163d6:	9603      	str	r6, [sp, #12]
 80163d8:	2801      	cmp	r0, #1
 80163da:	bf18      	it	ne
 80163dc:	4613      	movne	r3, r2
 80163de:	9704      	str	r7, [sp, #16]
 80163e0:	9302      	str	r3, [sp, #8]
 80163e2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80163e4:	9300      	str	r3, [sp, #0]
 80163e6:	1c63      	adds	r3, r4, #1
 80163e8:	9305      	str	r3, [sp, #20]
 80163ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163ee:	9301      	str	r3, [sp, #4]
 80163f0:	ab16      	add	r3, sp, #88	@ 0x58
 80163f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80163f4:	f7f7 ff0c 	bl	800e210 <rcutils_format_string_limit>
 80163f8:	4606      	mov	r6, r0
 80163fa:	b350      	cbz	r0, 8016452 <rcl_expand_topic_name+0x242>
 80163fc:	f1b9 0f00 	cmp.w	r9, #0
 8016400:	d005      	beq.n	801640e <rcl_expand_topic_name+0x1fe>
 8016402:	217b      	movs	r1, #123	@ 0x7b
 8016404:	46b2      	mov	sl, r6
 8016406:	f000 fefd 	bl	8017204 <strchr>
 801640a:	4681      	mov	r9, r0
 801640c:	e76e      	b.n	80162ec <rcl_expand_topic_name+0xdc>
 801640e:	7833      	ldrb	r3, [r6, #0]
 8016410:	2b2f      	cmp	r3, #47	@ 0x2f
 8016412:	d01b      	beq.n	801644c <rcl_expand_topic_name+0x23c>
 8016414:	9c07      	ldr	r4, [sp, #28]
 8016416:	4620      	mov	r0, r4
 8016418:	f7e9 ff1c 	bl	8000254 <strlen>
 801641c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016420:	4a29      	ldr	r2, [pc, #164]	@ (80164c8 <rcl_expand_topic_name+0x2b8>)
 8016422:	9301      	str	r3, [sp, #4]
 8016424:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016426:	9604      	str	r6, [sp, #16]
 8016428:	9300      	str	r3, [sp, #0]
 801642a:	4b28      	ldr	r3, [pc, #160]	@ (80164cc <rcl_expand_topic_name+0x2bc>)
 801642c:	9403      	str	r4, [sp, #12]
 801642e:	2801      	cmp	r0, #1
 8016430:	bf18      	it	ne
 8016432:	4613      	movne	r3, r2
 8016434:	9302      	str	r3, [sp, #8]
 8016436:	ab16      	add	r3, sp, #88	@ 0x58
 8016438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801643a:	f7f7 fee9 	bl	800e210 <rcutils_format_string_limit>
 801643e:	4603      	mov	r3, r0
 8016440:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016442:	4630      	mov	r0, r6
 8016444:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016446:	461e      	mov	r6, r3
 8016448:	4790      	blx	r2
 801644a:	b116      	cbz	r6, 8016452 <rcl_expand_topic_name+0x242>
 801644c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801644e:	601e      	str	r6, [r3, #0]
 8016450:	e72f      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 8016452:	2300      	movs	r3, #0
 8016454:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016456:	250a      	movs	r5, #10
 8016458:	6013      	str	r3, [r2, #0]
 801645a:	e72a      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 801645c:	4653      	mov	r3, sl
 801645e:	4656      	mov	r6, sl
 8016460:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1d2      	bne.n	801640e <rcl_expand_topic_name+0x1fe>
 8016468:	7823      	ldrb	r3, [r4, #0]
 801646a:	2b2f      	cmp	r3, #47	@ 0x2f
 801646c:	d01e      	beq.n	80164ac <rcl_expand_topic_name+0x29c>
 801646e:	9e07      	ldr	r6, [sp, #28]
 8016470:	4630      	mov	r0, r6
 8016472:	f7e9 feef 	bl	8000254 <strlen>
 8016476:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016478:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801647c:	9603      	str	r6, [sp, #12]
 801647e:	9404      	str	r4, [sp, #16]
 8016480:	e9cd 2300 	strd	r2, r3, [sp]
 8016484:	4a10      	ldr	r2, [pc, #64]	@ (80164c8 <rcl_expand_topic_name+0x2b8>)
 8016486:	4b11      	ldr	r3, [pc, #68]	@ (80164cc <rcl_expand_topic_name+0x2bc>)
 8016488:	2801      	cmp	r0, #1
 801648a:	bf18      	it	ne
 801648c:	4613      	movne	r3, r2
 801648e:	9302      	str	r3, [sp, #8]
 8016490:	ab16      	add	r3, sp, #88	@ 0x58
 8016492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016494:	f7f7 febc 	bl	800e210 <rcutils_format_string_limit>
 8016498:	4606      	mov	r6, r0
 801649a:	e7d6      	b.n	801644a <rcl_expand_topic_name+0x23a>
 801649c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80164a0:	4650      	mov	r0, sl
 80164a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80164a4:	6014      	str	r4, [r2, #0]
 80164a6:	250a      	movs	r5, #10
 80164a8:	4798      	blx	r3
 80164aa:	e702      	b.n	80162b2 <rcl_expand_topic_name+0xa2>
 80164ac:	2300      	movs	r3, #0
 80164ae:	461e      	mov	r6, r3
 80164b0:	e7cc      	b.n	801644c <rcl_expand_topic_name+0x23c>
 80164b2:	bf00      	nop
 80164b4:	08018bd0 	.word	0x08018bd0
 80164b8:	08018bd8 	.word	0x08018bd8
 80164bc:	08018be0 	.word	0x08018be0
 80164c0:	08018bc8 	.word	0x08018bc8
 80164c4:	08018628 	.word	0x08018628
 80164c8:	080181dc 	.word	0x080181dc
 80164cc:	080181d4 	.word	0x080181d4

080164d0 <rcl_get_default_topic_name_substitutions>:
 80164d0:	2800      	cmp	r0, #0
 80164d2:	bf0c      	ite	eq
 80164d4:	200b      	moveq	r0, #11
 80164d6:	2000      	movne	r0, #0
 80164d8:	4770      	bx	lr
 80164da:	bf00      	nop

080164dc <rcl_validate_topic_name>:
 80164dc:	2800      	cmp	r0, #0
 80164de:	f000 8089 	beq.w	80165f4 <rcl_validate_topic_name+0x118>
 80164e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164e6:	460e      	mov	r6, r1
 80164e8:	2900      	cmp	r1, #0
 80164ea:	f000 8085 	beq.w	80165f8 <rcl_validate_topic_name+0x11c>
 80164ee:	4604      	mov	r4, r0
 80164f0:	4617      	mov	r7, r2
 80164f2:	f7e9 feaf 	bl	8000254 <strlen>
 80164f6:	b1b0      	cbz	r0, 8016526 <rcl_validate_topic_name+0x4a>
 80164f8:	f894 e000 	ldrb.w	lr, [r4]
 80164fc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8016660 <rcl_validate_topic_name+0x184>
 8016500:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8016504:	f013 0304 	ands.w	r3, r3, #4
 8016508:	d139      	bne.n	801657e <rcl_validate_topic_name+0xa2>
 801650a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801650e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8016512:	2a2f      	cmp	r2, #47	@ 0x2f
 8016514:	d10f      	bne.n	8016536 <rcl_validate_topic_name+0x5a>
 8016516:	2202      	movs	r2, #2
 8016518:	6032      	str	r2, [r6, #0]
 801651a:	b3a7      	cbz	r7, 8016586 <rcl_validate_topic_name+0xaa>
 801651c:	4618      	mov	r0, r3
 801651e:	f8c7 8000 	str.w	r8, [r7]
 8016522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016526:	2301      	movs	r3, #1
 8016528:	6033      	str	r3, [r6, #0]
 801652a:	b367      	cbz	r7, 8016586 <rcl_validate_topic_name+0xaa>
 801652c:	2300      	movs	r3, #0
 801652e:	4618      	mov	r0, r3
 8016530:	603b      	str	r3, [r7, #0]
 8016532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016536:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801653a:	461d      	mov	r5, r3
 801653c:	4619      	mov	r1, r3
 801653e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016542:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8016546:	f1b9 0f09 	cmp.w	r9, #9
 801654a:	d91f      	bls.n	801658c <rcl_validate_topic_name+0xb0>
 801654c:	f022 0920 	bic.w	r9, r2, #32
 8016550:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 8016554:	f1b9 0f19 	cmp.w	r9, #25
 8016558:	d918      	bls.n	801658c <rcl_validate_topic_name+0xb0>
 801655a:	2a5f      	cmp	r2, #95	@ 0x5f
 801655c:	d024      	beq.n	80165a8 <rcl_validate_topic_name+0xcc>
 801655e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016560:	d058      	beq.n	8016614 <rcl_validate_topic_name+0x138>
 8016562:	2a7e      	cmp	r2, #126	@ 0x7e
 8016564:	d04a      	beq.n	80165fc <rcl_validate_topic_name+0x120>
 8016566:	2a7b      	cmp	r2, #123	@ 0x7b
 8016568:	d05b      	beq.n	8016622 <rcl_validate_topic_name+0x146>
 801656a:	2a7d      	cmp	r2, #125	@ 0x7d
 801656c:	d169      	bne.n	8016642 <rcl_validate_topic_name+0x166>
 801656e:	2d00      	cmp	r5, #0
 8016570:	d15c      	bne.n	801662c <rcl_validate_topic_name+0x150>
 8016572:	2305      	movs	r3, #5
 8016574:	6033      	str	r3, [r6, #0]
 8016576:	b137      	cbz	r7, 8016586 <rcl_validate_topic_name+0xaa>
 8016578:	2000      	movs	r0, #0
 801657a:	6039      	str	r1, [r7, #0]
 801657c:	e7d9      	b.n	8016532 <rcl_validate_topic_name+0x56>
 801657e:	2304      	movs	r3, #4
 8016580:	6033      	str	r3, [r6, #0]
 8016582:	2f00      	cmp	r7, #0
 8016584:	d1d2      	bne.n	801652c <rcl_validate_topic_name+0x50>
 8016586:	2000      	movs	r0, #0
 8016588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801658c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016590:	0752      	lsls	r2, r2, #29
 8016592:	d509      	bpl.n	80165a8 <rcl_validate_topic_name+0xcc>
 8016594:	2900      	cmp	r1, #0
 8016596:	bf0c      	ite	eq
 8016598:	2200      	moveq	r2, #0
 801659a:	f005 0201 	andne.w	r2, r5, #1
 801659e:	b11a      	cbz	r2, 80165a8 <rcl_validate_topic_name+0xcc>
 80165a0:	1e4d      	subs	r5, r1, #1
 80165a2:	429d      	cmp	r5, r3
 80165a4:	d031      	beq.n	801660a <rcl_validate_topic_name+0x12e>
 80165a6:	4615      	mov	r5, r2
 80165a8:	3101      	adds	r1, #1
 80165aa:	4288      	cmp	r0, r1
 80165ac:	d1c7      	bne.n	801653e <rcl_validate_topic_name+0x62>
 80165ae:	2d00      	cmp	r5, #0
 80165b0:	d142      	bne.n	8016638 <rcl_validate_topic_name+0x15c>
 80165b2:	4628      	mov	r0, r5
 80165b4:	2301      	movs	r3, #1
 80165b6:	e00c      	b.n	80165d2 <rcl_validate_topic_name+0xf6>
 80165b8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80165bc:	d101      	bne.n	80165c2 <rcl_validate_topic_name+0xe6>
 80165be:	2801      	cmp	r0, #1
 80165c0:	d047      	beq.n	8016652 <rcl_validate_topic_name+0x176>
 80165c2:	1c5a      	adds	r2, r3, #1
 80165c4:	428b      	cmp	r3, r1
 80165c6:	f100 0001 	add.w	r0, r0, #1
 80165ca:	f104 0401 	add.w	r4, r4, #1
 80165ce:	4613      	mov	r3, r2
 80165d0:	d22e      	bcs.n	8016630 <rcl_validate_topic_name+0x154>
 80165d2:	4580      	cmp	r8, r0
 80165d4:	d0f5      	beq.n	80165c2 <rcl_validate_topic_name+0xe6>
 80165d6:	7822      	ldrb	r2, [r4, #0]
 80165d8:	2a2f      	cmp	r2, #47	@ 0x2f
 80165da:	d1ed      	bne.n	80165b8 <rcl_validate_topic_name+0xdc>
 80165dc:	7862      	ldrb	r2, [r4, #1]
 80165de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80165e2:	0752      	lsls	r2, r2, #29
 80165e4:	d5ed      	bpl.n	80165c2 <rcl_validate_topic_name+0xe6>
 80165e6:	2204      	movs	r2, #4
 80165e8:	6032      	str	r2, [r6, #0]
 80165ea:	2f00      	cmp	r7, #0
 80165ec:	d0cb      	beq.n	8016586 <rcl_validate_topic_name+0xaa>
 80165ee:	2000      	movs	r0, #0
 80165f0:	603b      	str	r3, [r7, #0]
 80165f2:	e79e      	b.n	8016532 <rcl_validate_topic_name+0x56>
 80165f4:	200b      	movs	r0, #11
 80165f6:	4770      	bx	lr
 80165f8:	200b      	movs	r0, #11
 80165fa:	e79a      	b.n	8016532 <rcl_validate_topic_name+0x56>
 80165fc:	2900      	cmp	r1, #0
 80165fe:	d0d3      	beq.n	80165a8 <rcl_validate_topic_name+0xcc>
 8016600:	2306      	movs	r3, #6
 8016602:	6033      	str	r3, [r6, #0]
 8016604:	2f00      	cmp	r7, #0
 8016606:	d1b7      	bne.n	8016578 <rcl_validate_topic_name+0x9c>
 8016608:	e7bd      	b.n	8016586 <rcl_validate_topic_name+0xaa>
 801660a:	2309      	movs	r3, #9
 801660c:	6033      	str	r3, [r6, #0]
 801660e:	2f00      	cmp	r7, #0
 8016610:	d1b2      	bne.n	8016578 <rcl_validate_topic_name+0x9c>
 8016612:	e7b8      	b.n	8016586 <rcl_validate_topic_name+0xaa>
 8016614:	2d00      	cmp	r5, #0
 8016616:	d0c7      	beq.n	80165a8 <rcl_validate_topic_name+0xcc>
 8016618:	2308      	movs	r3, #8
 801661a:	6033      	str	r3, [r6, #0]
 801661c:	2f00      	cmp	r7, #0
 801661e:	d1ab      	bne.n	8016578 <rcl_validate_topic_name+0x9c>
 8016620:	e7b1      	b.n	8016586 <rcl_validate_topic_name+0xaa>
 8016622:	2d00      	cmp	r5, #0
 8016624:	d1f8      	bne.n	8016618 <rcl_validate_topic_name+0x13c>
 8016626:	460b      	mov	r3, r1
 8016628:	2501      	movs	r5, #1
 801662a:	e7bd      	b.n	80165a8 <rcl_validate_topic_name+0xcc>
 801662c:	2500      	movs	r5, #0
 801662e:	e7bb      	b.n	80165a8 <rcl_validate_topic_name+0xcc>
 8016630:	2300      	movs	r3, #0
 8016632:	4618      	mov	r0, r3
 8016634:	6033      	str	r3, [r6, #0]
 8016636:	e77c      	b.n	8016532 <rcl_validate_topic_name+0x56>
 8016638:	2205      	movs	r2, #5
 801663a:	6032      	str	r2, [r6, #0]
 801663c:	2f00      	cmp	r7, #0
 801663e:	d1d6      	bne.n	80165ee <rcl_validate_topic_name+0x112>
 8016640:	e7a1      	b.n	8016586 <rcl_validate_topic_name+0xaa>
 8016642:	2d00      	cmp	r5, #0
 8016644:	bf14      	ite	ne
 8016646:	2308      	movne	r3, #8
 8016648:	2303      	moveq	r3, #3
 801664a:	6033      	str	r3, [r6, #0]
 801664c:	2f00      	cmp	r7, #0
 801664e:	d193      	bne.n	8016578 <rcl_validate_topic_name+0x9c>
 8016650:	e799      	b.n	8016586 <rcl_validate_topic_name+0xaa>
 8016652:	2307      	movs	r3, #7
 8016654:	6033      	str	r3, [r6, #0]
 8016656:	2f00      	cmp	r7, #0
 8016658:	d095      	beq.n	8016586 <rcl_validate_topic_name+0xaa>
 801665a:	2301      	movs	r3, #1
 801665c:	e7c7      	b.n	80165ee <rcl_validate_topic_name+0x112>
 801665e:	bf00      	nop
 8016660:	08018c5c 	.word	0x08018c5c

08016664 <on_status>:
 8016664:	b082      	sub	sp, #8
 8016666:	b002      	add	sp, #8
 8016668:	4770      	bx	lr
 801666a:	bf00      	nop

0801666c <on_topic>:
 801666c:	4a23      	ldr	r2, [pc, #140]	@ (80166fc <on_topic+0x90>)
 801666e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016672:	6812      	ldr	r2, [r2, #0]
 8016674:	b094      	sub	sp, #80	@ 0x50
 8016676:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016678:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801667c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801667e:	9312      	str	r3, [sp, #72]	@ 0x48
 8016680:	b3c2      	cbz	r2, 80166f4 <on_topic+0x88>
 8016682:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016686:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801668a:	e001      	b.n	8016690 <on_topic+0x24>
 801668c:	6852      	ldr	r2, [r2, #4]
 801668e:	b38a      	cbz	r2, 80166f4 <on_topic+0x88>
 8016690:	6894      	ldr	r4, [r2, #8]
 8016692:	8aa3      	ldrh	r3, [r4, #20]
 8016694:	428b      	cmp	r3, r1
 8016696:	d1f9      	bne.n	801668c <on_topic+0x20>
 8016698:	7da3      	ldrb	r3, [r4, #22]
 801669a:	4283      	cmp	r3, r0
 801669c:	d1f6      	bne.n	801668c <on_topic+0x20>
 801669e:	2248      	movs	r2, #72	@ 0x48
 80166a0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80166a4:	4668      	mov	r0, sp
 80166a6:	f000 fe6e 	bl	8017386 <memcpy>
 80166aa:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80166ae:	4620      	mov	r0, r4
 80166b0:	cb0c      	ldmia	r3, {r2, r3}
 80166b2:	f7f8 fd5f 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 80166b6:	4607      	mov	r7, r0
 80166b8:	b1e0      	cbz	r0, 80166f4 <on_topic+0x88>
 80166ba:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80166be:	462a      	mov	r2, r5
 80166c0:	4630      	mov	r0, r6
 80166c2:	f108 0110 	add.w	r1, r8, #16
 80166c6:	f7fd fb5b 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80166ca:	b930      	cbnz	r0, 80166da <on_topic+0x6e>
 80166cc:	4639      	mov	r1, r7
 80166ce:	480c      	ldr	r0, [pc, #48]	@ (8016700 <on_topic+0x94>)
 80166d0:	b014      	add	sp, #80	@ 0x50
 80166d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166d6:	f7fc bebf 	b.w	8013458 <put_memory>
 80166da:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80166de:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80166e2:	f7fd fa31 	bl	8013b48 <rmw_uros_epoch_nanos>
 80166e6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80166ea:	2305      	movs	r3, #5
 80166ec:	e942 0102 	strd	r0, r1, [r2, #-8]
 80166f0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80166f4:	b014      	add	sp, #80	@ 0x50
 80166f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fa:	bf00      	nop
 80166fc:	200124a4 	.word	0x200124a4
 8016700:	20012494 	.word	0x20012494

08016704 <on_request>:
 8016704:	4824      	ldr	r0, [pc, #144]	@ (8016798 <on_request+0x94>)
 8016706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801670a:	6800      	ldr	r0, [r0, #0]
 801670c:	b094      	sub	sp, #80	@ 0x50
 801670e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016710:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8016714:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016716:	2800      	cmp	r0, #0
 8016718:	d03b      	beq.n	8016792 <on_request+0x8e>
 801671a:	461d      	mov	r5, r3
 801671c:	e001      	b.n	8016722 <on_request+0x1e>
 801671e:	6840      	ldr	r0, [r0, #4]
 8016720:	b3b8      	cbz	r0, 8016792 <on_request+0x8e>
 8016722:	6884      	ldr	r4, [r0, #8]
 8016724:	8b21      	ldrh	r1, [r4, #24]
 8016726:	4291      	cmp	r1, r2
 8016728:	d1f9      	bne.n	801671e <on_request+0x1a>
 801672a:	2248      	movs	r2, #72	@ 0x48
 801672c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016730:	4668      	mov	r0, sp
 8016732:	f000 fe28 	bl	8017386 <memcpy>
 8016736:	f104 0320 	add.w	r3, r4, #32
 801673a:	4620      	mov	r0, r4
 801673c:	cb0c      	ldmia	r3, {r2, r3}
 801673e:	f7f8 fd19 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016742:	4680      	mov	r8, r0
 8016744:	b328      	cbz	r0, 8016792 <on_request+0x8e>
 8016746:	4630      	mov	r0, r6
 8016748:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801674c:	463a      	mov	r2, r7
 801674e:	f106 0110 	add.w	r1, r6, #16
 8016752:	f7fd fb15 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 8016756:	b930      	cbnz	r0, 8016766 <on_request+0x62>
 8016758:	4641      	mov	r1, r8
 801675a:	4810      	ldr	r0, [pc, #64]	@ (801679c <on_request+0x98>)
 801675c:	b014      	add	sp, #80	@ 0x50
 801675e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016762:	f7fc be79 	b.w	8013458 <put_memory>
 8016766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016768:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801676c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8016770:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8016774:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016778:	e895 0003 	ldmia.w	r5, {r0, r1}
 801677c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016780:	f7fd f9e2 	bl	8013b48 <rmw_uros_epoch_nanos>
 8016784:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 8016788:	2303      	movs	r3, #3
 801678a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801678e:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8016792:	b014      	add	sp, #80	@ 0x50
 8016794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016798:	20012474 	.word	0x20012474
 801679c:	20012494 	.word	0x20012494

080167a0 <on_reply>:
 80167a0:	4822      	ldr	r0, [pc, #136]	@ (801682c <on_reply+0x8c>)
 80167a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167a6:	6800      	ldr	r0, [r0, #0]
 80167a8:	b094      	sub	sp, #80	@ 0x50
 80167aa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80167ac:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80167b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80167b2:	b3b8      	cbz	r0, 8016824 <on_reply+0x84>
 80167b4:	461d      	mov	r5, r3
 80167b6:	e001      	b.n	80167bc <on_reply+0x1c>
 80167b8:	6840      	ldr	r0, [r0, #4]
 80167ba:	b398      	cbz	r0, 8016824 <on_reply+0x84>
 80167bc:	6884      	ldr	r4, [r0, #8]
 80167be:	8b21      	ldrh	r1, [r4, #24]
 80167c0:	4291      	cmp	r1, r2
 80167c2:	d1f9      	bne.n	80167b8 <on_reply+0x18>
 80167c4:	2248      	movs	r2, #72	@ 0x48
 80167c6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80167ca:	4668      	mov	r0, sp
 80167cc:	f000 fddb 	bl	8017386 <memcpy>
 80167d0:	f104 0320 	add.w	r3, r4, #32
 80167d4:	4620      	mov	r0, r4
 80167d6:	cb0c      	ldmia	r3, {r2, r3}
 80167d8:	f7f8 fccc 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 80167dc:	4680      	mov	r8, r0
 80167de:	b308      	cbz	r0, 8016824 <on_reply+0x84>
 80167e0:	4630      	mov	r0, r6
 80167e2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80167e6:	463a      	mov	r2, r7
 80167e8:	f106 0110 	add.w	r1, r6, #16
 80167ec:	f7fd fac8 	bl	8013d80 <ucdr_deserialize_array_uint8_t>
 80167f0:	b930      	cbnz	r0, 8016800 <on_reply+0x60>
 80167f2:	4641      	mov	r1, r8
 80167f4:	480e      	ldr	r0, [pc, #56]	@ (8016830 <on_reply+0x90>)
 80167f6:	b014      	add	sp, #80	@ 0x50
 80167f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	f7fc be2c 	b.w	8013458 <put_memory>
 8016800:	2200      	movs	r2, #0
 8016802:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8016806:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801680a:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801680e:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8016812:	f7fd f999 	bl	8013b48 <rmw_uros_epoch_nanos>
 8016816:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801681a:	2304      	movs	r3, #4
 801681c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016820:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8016824:	b014      	add	sp, #80	@ 0x50
 8016826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801682a:	bf00      	nop
 801682c:	2000db84 	.word	0x2000db84
 8016830:	20012494 	.word	0x20012494

08016834 <calloc>:
 8016834:	4b02      	ldr	r3, [pc, #8]	@ (8016840 <calloc+0xc>)
 8016836:	460a      	mov	r2, r1
 8016838:	4601      	mov	r1, r0
 801683a:	6818      	ldr	r0, [r3, #0]
 801683c:	f000 b802 	b.w	8016844 <_calloc_r>
 8016840:	200001c0 	.word	0x200001c0

08016844 <_calloc_r>:
 8016844:	b570      	push	{r4, r5, r6, lr}
 8016846:	fba1 5402 	umull	r5, r4, r1, r2
 801684a:	b93c      	cbnz	r4, 801685c <_calloc_r+0x18>
 801684c:	4629      	mov	r1, r5
 801684e:	f000 f899 	bl	8016984 <_malloc_r>
 8016852:	4606      	mov	r6, r0
 8016854:	b928      	cbnz	r0, 8016862 <_calloc_r+0x1e>
 8016856:	2600      	movs	r6, #0
 8016858:	4630      	mov	r0, r6
 801685a:	bd70      	pop	{r4, r5, r6, pc}
 801685c:	220c      	movs	r2, #12
 801685e:	6002      	str	r2, [r0, #0]
 8016860:	e7f9      	b.n	8016856 <_calloc_r+0x12>
 8016862:	462a      	mov	r2, r5
 8016864:	4621      	mov	r1, r4
 8016866:	f000 fcc5 	bl	80171f4 <memset>
 801686a:	e7f5      	b.n	8016858 <_calloc_r+0x14>

0801686c <exit>:
 801686c:	b508      	push	{r3, lr}
 801686e:	4b06      	ldr	r3, [pc, #24]	@ (8016888 <exit+0x1c>)
 8016870:	4604      	mov	r4, r0
 8016872:	b113      	cbz	r3, 801687a <exit+0xe>
 8016874:	2100      	movs	r1, #0
 8016876:	f3af 8000 	nop.w
 801687a:	4b04      	ldr	r3, [pc, #16]	@ (801688c <exit+0x20>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	b103      	cbz	r3, 8016882 <exit+0x16>
 8016880:	4798      	blx	r3
 8016882:	4620      	mov	r0, r4
 8016884:	f7ea ff00 	bl	8001688 <_exit>
 8016888:	00000000 	.word	0x00000000
 801688c:	200126ec 	.word	0x200126ec

08016890 <getenv>:
 8016890:	b507      	push	{r0, r1, r2, lr}
 8016892:	4b04      	ldr	r3, [pc, #16]	@ (80168a4 <getenv+0x14>)
 8016894:	4601      	mov	r1, r0
 8016896:	aa01      	add	r2, sp, #4
 8016898:	6818      	ldr	r0, [r3, #0]
 801689a:	f000 f805 	bl	80168a8 <_findenv_r>
 801689e:	b003      	add	sp, #12
 80168a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80168a4:	200001c0 	.word	0x200001c0

080168a8 <_findenv_r>:
 80168a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ac:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801691c <_findenv_r+0x74>
 80168b0:	4606      	mov	r6, r0
 80168b2:	4689      	mov	r9, r1
 80168b4:	4617      	mov	r7, r2
 80168b6:	f000 fd93 	bl	80173e0 <__env_lock>
 80168ba:	f8da 4000 	ldr.w	r4, [sl]
 80168be:	b134      	cbz	r4, 80168ce <_findenv_r+0x26>
 80168c0:	464b      	mov	r3, r9
 80168c2:	4698      	mov	r8, r3
 80168c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168c8:	b13a      	cbz	r2, 80168da <_findenv_r+0x32>
 80168ca:	2a3d      	cmp	r2, #61	@ 0x3d
 80168cc:	d1f9      	bne.n	80168c2 <_findenv_r+0x1a>
 80168ce:	4630      	mov	r0, r6
 80168d0:	f000 fd8c 	bl	80173ec <__env_unlock>
 80168d4:	2000      	movs	r0, #0
 80168d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168da:	eba8 0809 	sub.w	r8, r8, r9
 80168de:	46a3      	mov	fp, r4
 80168e0:	f854 0b04 	ldr.w	r0, [r4], #4
 80168e4:	2800      	cmp	r0, #0
 80168e6:	d0f2      	beq.n	80168ce <_findenv_r+0x26>
 80168e8:	4642      	mov	r2, r8
 80168ea:	4649      	mov	r1, r9
 80168ec:	f000 fc97 	bl	801721e <strncmp>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d1f4      	bne.n	80168de <_findenv_r+0x36>
 80168f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80168f8:	eb03 0508 	add.w	r5, r3, r8
 80168fc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016900:	2b3d      	cmp	r3, #61	@ 0x3d
 8016902:	d1ec      	bne.n	80168de <_findenv_r+0x36>
 8016904:	f8da 3000 	ldr.w	r3, [sl]
 8016908:	ebab 0303 	sub.w	r3, fp, r3
 801690c:	109b      	asrs	r3, r3, #2
 801690e:	4630      	mov	r0, r6
 8016910:	603b      	str	r3, [r7, #0]
 8016912:	f000 fd6b 	bl	80173ec <__env_unlock>
 8016916:	1c68      	adds	r0, r5, #1
 8016918:	e7dd      	b.n	80168d6 <_findenv_r+0x2e>
 801691a:	bf00      	nop
 801691c:	20000000 	.word	0x20000000

08016920 <malloc>:
 8016920:	4b02      	ldr	r3, [pc, #8]	@ (801692c <malloc+0xc>)
 8016922:	4601      	mov	r1, r0
 8016924:	6818      	ldr	r0, [r3, #0]
 8016926:	f000 b82d 	b.w	8016984 <_malloc_r>
 801692a:	bf00      	nop
 801692c:	200001c0 	.word	0x200001c0

08016930 <free>:
 8016930:	4b02      	ldr	r3, [pc, #8]	@ (801693c <free+0xc>)
 8016932:	4601      	mov	r1, r0
 8016934:	6818      	ldr	r0, [r3, #0]
 8016936:	f000 bd5f 	b.w	80173f8 <_free_r>
 801693a:	bf00      	nop
 801693c:	200001c0 	.word	0x200001c0

08016940 <sbrk_aligned>:
 8016940:	b570      	push	{r4, r5, r6, lr}
 8016942:	4e0f      	ldr	r6, [pc, #60]	@ (8016980 <sbrk_aligned+0x40>)
 8016944:	460c      	mov	r4, r1
 8016946:	6831      	ldr	r1, [r6, #0]
 8016948:	4605      	mov	r5, r0
 801694a:	b911      	cbnz	r1, 8016952 <sbrk_aligned+0x12>
 801694c:	f000 fcc4 	bl	80172d8 <_sbrk_r>
 8016950:	6030      	str	r0, [r6, #0]
 8016952:	4621      	mov	r1, r4
 8016954:	4628      	mov	r0, r5
 8016956:	f000 fcbf 	bl	80172d8 <_sbrk_r>
 801695a:	1c43      	adds	r3, r0, #1
 801695c:	d103      	bne.n	8016966 <sbrk_aligned+0x26>
 801695e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016962:	4620      	mov	r0, r4
 8016964:	bd70      	pop	{r4, r5, r6, pc}
 8016966:	1cc4      	adds	r4, r0, #3
 8016968:	f024 0403 	bic.w	r4, r4, #3
 801696c:	42a0      	cmp	r0, r4
 801696e:	d0f8      	beq.n	8016962 <sbrk_aligned+0x22>
 8016970:	1a21      	subs	r1, r4, r0
 8016972:	4628      	mov	r0, r5
 8016974:	f000 fcb0 	bl	80172d8 <_sbrk_r>
 8016978:	3001      	adds	r0, #1
 801697a:	d1f2      	bne.n	8016962 <sbrk_aligned+0x22>
 801697c:	e7ef      	b.n	801695e <sbrk_aligned+0x1e>
 801697e:	bf00      	nop
 8016980:	200125ac 	.word	0x200125ac

08016984 <_malloc_r>:
 8016984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016988:	1ccd      	adds	r5, r1, #3
 801698a:	f025 0503 	bic.w	r5, r5, #3
 801698e:	3508      	adds	r5, #8
 8016990:	2d0c      	cmp	r5, #12
 8016992:	bf38      	it	cc
 8016994:	250c      	movcc	r5, #12
 8016996:	2d00      	cmp	r5, #0
 8016998:	4606      	mov	r6, r0
 801699a:	db01      	blt.n	80169a0 <_malloc_r+0x1c>
 801699c:	42a9      	cmp	r1, r5
 801699e:	d904      	bls.n	80169aa <_malloc_r+0x26>
 80169a0:	230c      	movs	r3, #12
 80169a2:	6033      	str	r3, [r6, #0]
 80169a4:	2000      	movs	r0, #0
 80169a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016a80 <_malloc_r+0xfc>
 80169ae:	f000 f869 	bl	8016a84 <__malloc_lock>
 80169b2:	f8d8 3000 	ldr.w	r3, [r8]
 80169b6:	461c      	mov	r4, r3
 80169b8:	bb44      	cbnz	r4, 8016a0c <_malloc_r+0x88>
 80169ba:	4629      	mov	r1, r5
 80169bc:	4630      	mov	r0, r6
 80169be:	f7ff ffbf 	bl	8016940 <sbrk_aligned>
 80169c2:	1c43      	adds	r3, r0, #1
 80169c4:	4604      	mov	r4, r0
 80169c6:	d158      	bne.n	8016a7a <_malloc_r+0xf6>
 80169c8:	f8d8 4000 	ldr.w	r4, [r8]
 80169cc:	4627      	mov	r7, r4
 80169ce:	2f00      	cmp	r7, #0
 80169d0:	d143      	bne.n	8016a5a <_malloc_r+0xd6>
 80169d2:	2c00      	cmp	r4, #0
 80169d4:	d04b      	beq.n	8016a6e <_malloc_r+0xea>
 80169d6:	6823      	ldr	r3, [r4, #0]
 80169d8:	4639      	mov	r1, r7
 80169da:	4630      	mov	r0, r6
 80169dc:	eb04 0903 	add.w	r9, r4, r3
 80169e0:	f000 fc7a 	bl	80172d8 <_sbrk_r>
 80169e4:	4581      	cmp	r9, r0
 80169e6:	d142      	bne.n	8016a6e <_malloc_r+0xea>
 80169e8:	6821      	ldr	r1, [r4, #0]
 80169ea:	1a6d      	subs	r5, r5, r1
 80169ec:	4629      	mov	r1, r5
 80169ee:	4630      	mov	r0, r6
 80169f0:	f7ff ffa6 	bl	8016940 <sbrk_aligned>
 80169f4:	3001      	adds	r0, #1
 80169f6:	d03a      	beq.n	8016a6e <_malloc_r+0xea>
 80169f8:	6823      	ldr	r3, [r4, #0]
 80169fa:	442b      	add	r3, r5
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016a02:	685a      	ldr	r2, [r3, #4]
 8016a04:	bb62      	cbnz	r2, 8016a60 <_malloc_r+0xdc>
 8016a06:	f8c8 7000 	str.w	r7, [r8]
 8016a0a:	e00f      	b.n	8016a2c <_malloc_r+0xa8>
 8016a0c:	6822      	ldr	r2, [r4, #0]
 8016a0e:	1b52      	subs	r2, r2, r5
 8016a10:	d420      	bmi.n	8016a54 <_malloc_r+0xd0>
 8016a12:	2a0b      	cmp	r2, #11
 8016a14:	d917      	bls.n	8016a46 <_malloc_r+0xc2>
 8016a16:	1961      	adds	r1, r4, r5
 8016a18:	42a3      	cmp	r3, r4
 8016a1a:	6025      	str	r5, [r4, #0]
 8016a1c:	bf18      	it	ne
 8016a1e:	6059      	strne	r1, [r3, #4]
 8016a20:	6863      	ldr	r3, [r4, #4]
 8016a22:	bf08      	it	eq
 8016a24:	f8c8 1000 	streq.w	r1, [r8]
 8016a28:	5162      	str	r2, [r4, r5]
 8016a2a:	604b      	str	r3, [r1, #4]
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	f000 f82f 	bl	8016a90 <__malloc_unlock>
 8016a32:	f104 000b 	add.w	r0, r4, #11
 8016a36:	1d23      	adds	r3, r4, #4
 8016a38:	f020 0007 	bic.w	r0, r0, #7
 8016a3c:	1ac2      	subs	r2, r0, r3
 8016a3e:	bf1c      	itt	ne
 8016a40:	1a1b      	subne	r3, r3, r0
 8016a42:	50a3      	strne	r3, [r4, r2]
 8016a44:	e7af      	b.n	80169a6 <_malloc_r+0x22>
 8016a46:	6862      	ldr	r2, [r4, #4]
 8016a48:	42a3      	cmp	r3, r4
 8016a4a:	bf0c      	ite	eq
 8016a4c:	f8c8 2000 	streq.w	r2, [r8]
 8016a50:	605a      	strne	r2, [r3, #4]
 8016a52:	e7eb      	b.n	8016a2c <_malloc_r+0xa8>
 8016a54:	4623      	mov	r3, r4
 8016a56:	6864      	ldr	r4, [r4, #4]
 8016a58:	e7ae      	b.n	80169b8 <_malloc_r+0x34>
 8016a5a:	463c      	mov	r4, r7
 8016a5c:	687f      	ldr	r7, [r7, #4]
 8016a5e:	e7b6      	b.n	80169ce <_malloc_r+0x4a>
 8016a60:	461a      	mov	r2, r3
 8016a62:	685b      	ldr	r3, [r3, #4]
 8016a64:	42a3      	cmp	r3, r4
 8016a66:	d1fb      	bne.n	8016a60 <_malloc_r+0xdc>
 8016a68:	2300      	movs	r3, #0
 8016a6a:	6053      	str	r3, [r2, #4]
 8016a6c:	e7de      	b.n	8016a2c <_malloc_r+0xa8>
 8016a6e:	230c      	movs	r3, #12
 8016a70:	6033      	str	r3, [r6, #0]
 8016a72:	4630      	mov	r0, r6
 8016a74:	f000 f80c 	bl	8016a90 <__malloc_unlock>
 8016a78:	e794      	b.n	80169a4 <_malloc_r+0x20>
 8016a7a:	6005      	str	r5, [r0, #0]
 8016a7c:	e7d6      	b.n	8016a2c <_malloc_r+0xa8>
 8016a7e:	bf00      	nop
 8016a80:	200125b0 	.word	0x200125b0

08016a84 <__malloc_lock>:
 8016a84:	4801      	ldr	r0, [pc, #4]	@ (8016a8c <__malloc_lock+0x8>)
 8016a86:	f000 bc74 	b.w	8017372 <__retarget_lock_acquire_recursive>
 8016a8a:	bf00      	nop
 8016a8c:	200126f5 	.word	0x200126f5

08016a90 <__malloc_unlock>:
 8016a90:	4801      	ldr	r0, [pc, #4]	@ (8016a98 <__malloc_unlock+0x8>)
 8016a92:	f000 bc6f 	b.w	8017374 <__retarget_lock_release_recursive>
 8016a96:	bf00      	nop
 8016a98:	200126f5 	.word	0x200126f5

08016a9c <srand>:
 8016a9c:	b538      	push	{r3, r4, r5, lr}
 8016a9e:	4b10      	ldr	r3, [pc, #64]	@ (8016ae0 <srand+0x44>)
 8016aa0:	681d      	ldr	r5, [r3, #0]
 8016aa2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	b9b3      	cbnz	r3, 8016ad6 <srand+0x3a>
 8016aa8:	2018      	movs	r0, #24
 8016aaa:	f7ff ff39 	bl	8016920 <malloc>
 8016aae:	4602      	mov	r2, r0
 8016ab0:	6328      	str	r0, [r5, #48]	@ 0x30
 8016ab2:	b920      	cbnz	r0, 8016abe <srand+0x22>
 8016ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8016ae4 <srand+0x48>)
 8016ab6:	480c      	ldr	r0, [pc, #48]	@ (8016ae8 <srand+0x4c>)
 8016ab8:	2146      	movs	r1, #70	@ 0x46
 8016aba:	f000 fc73 	bl	80173a4 <__assert_func>
 8016abe:	490b      	ldr	r1, [pc, #44]	@ (8016aec <srand+0x50>)
 8016ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8016af0 <srand+0x54>)
 8016ac2:	e9c0 1300 	strd	r1, r3, [r0]
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8016af4 <srand+0x58>)
 8016ac8:	6083      	str	r3, [r0, #8]
 8016aca:	230b      	movs	r3, #11
 8016acc:	8183      	strh	r3, [r0, #12]
 8016ace:	2100      	movs	r1, #0
 8016ad0:	2001      	movs	r0, #1
 8016ad2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016ad6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ad8:	2200      	movs	r2, #0
 8016ada:	611c      	str	r4, [r3, #16]
 8016adc:	615a      	str	r2, [r3, #20]
 8016ade:	bd38      	pop	{r3, r4, r5, pc}
 8016ae0:	200001c0 	.word	0x200001c0
 8016ae4:	08018bec 	.word	0x08018bec
 8016ae8:	08018c03 	.word	0x08018c03
 8016aec:	abcd330e 	.word	0xabcd330e
 8016af0:	e66d1234 	.word	0xe66d1234
 8016af4:	0005deec 	.word	0x0005deec

08016af8 <rand>:
 8016af8:	4b16      	ldr	r3, [pc, #88]	@ (8016b54 <rand+0x5c>)
 8016afa:	b510      	push	{r4, lr}
 8016afc:	681c      	ldr	r4, [r3, #0]
 8016afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b00:	b9b3      	cbnz	r3, 8016b30 <rand+0x38>
 8016b02:	2018      	movs	r0, #24
 8016b04:	f7ff ff0c 	bl	8016920 <malloc>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	6320      	str	r0, [r4, #48]	@ 0x30
 8016b0c:	b920      	cbnz	r0, 8016b18 <rand+0x20>
 8016b0e:	4b12      	ldr	r3, [pc, #72]	@ (8016b58 <rand+0x60>)
 8016b10:	4812      	ldr	r0, [pc, #72]	@ (8016b5c <rand+0x64>)
 8016b12:	2152      	movs	r1, #82	@ 0x52
 8016b14:	f000 fc46 	bl	80173a4 <__assert_func>
 8016b18:	4911      	ldr	r1, [pc, #68]	@ (8016b60 <rand+0x68>)
 8016b1a:	4b12      	ldr	r3, [pc, #72]	@ (8016b64 <rand+0x6c>)
 8016b1c:	e9c0 1300 	strd	r1, r3, [r0]
 8016b20:	4b11      	ldr	r3, [pc, #68]	@ (8016b68 <rand+0x70>)
 8016b22:	6083      	str	r3, [r0, #8]
 8016b24:	230b      	movs	r3, #11
 8016b26:	8183      	strh	r3, [r0, #12]
 8016b28:	2100      	movs	r1, #0
 8016b2a:	2001      	movs	r0, #1
 8016b2c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b32:	480e      	ldr	r0, [pc, #56]	@ (8016b6c <rand+0x74>)
 8016b34:	690b      	ldr	r3, [r1, #16]
 8016b36:	694c      	ldr	r4, [r1, #20]
 8016b38:	4a0d      	ldr	r2, [pc, #52]	@ (8016b70 <rand+0x78>)
 8016b3a:	4358      	muls	r0, r3
 8016b3c:	fb02 0004 	mla	r0, r2, r4, r0
 8016b40:	fba3 3202 	umull	r3, r2, r3, r2
 8016b44:	3301      	adds	r3, #1
 8016b46:	eb40 0002 	adc.w	r0, r0, r2
 8016b4a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b4e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b52:	bd10      	pop	{r4, pc}
 8016b54:	200001c0 	.word	0x200001c0
 8016b58:	08018bec 	.word	0x08018bec
 8016b5c:	08018c03 	.word	0x08018c03
 8016b60:	abcd330e 	.word	0xabcd330e
 8016b64:	e66d1234 	.word	0xe66d1234
 8016b68:	0005deec 	.word	0x0005deec
 8016b6c:	5851f42d 	.word	0x5851f42d
 8016b70:	4c957f2d 	.word	0x4c957f2d

08016b74 <realloc>:
 8016b74:	4b02      	ldr	r3, [pc, #8]	@ (8016b80 <realloc+0xc>)
 8016b76:	460a      	mov	r2, r1
 8016b78:	4601      	mov	r1, r0
 8016b7a:	6818      	ldr	r0, [r3, #0]
 8016b7c:	f000 b802 	b.w	8016b84 <_realloc_r>
 8016b80:	200001c0 	.word	0x200001c0

08016b84 <_realloc_r>:
 8016b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b88:	4680      	mov	r8, r0
 8016b8a:	4615      	mov	r5, r2
 8016b8c:	460c      	mov	r4, r1
 8016b8e:	b921      	cbnz	r1, 8016b9a <_realloc_r+0x16>
 8016b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b94:	4611      	mov	r1, r2
 8016b96:	f7ff bef5 	b.w	8016984 <_malloc_r>
 8016b9a:	b92a      	cbnz	r2, 8016ba8 <_realloc_r+0x24>
 8016b9c:	f000 fc2c 	bl	80173f8 <_free_r>
 8016ba0:	2400      	movs	r4, #0
 8016ba2:	4620      	mov	r0, r4
 8016ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba8:	f000 fc70 	bl	801748c <_malloc_usable_size_r>
 8016bac:	4285      	cmp	r5, r0
 8016bae:	4606      	mov	r6, r0
 8016bb0:	d802      	bhi.n	8016bb8 <_realloc_r+0x34>
 8016bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016bb6:	d8f4      	bhi.n	8016ba2 <_realloc_r+0x1e>
 8016bb8:	4629      	mov	r1, r5
 8016bba:	4640      	mov	r0, r8
 8016bbc:	f7ff fee2 	bl	8016984 <_malloc_r>
 8016bc0:	4607      	mov	r7, r0
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	d0ec      	beq.n	8016ba0 <_realloc_r+0x1c>
 8016bc6:	42b5      	cmp	r5, r6
 8016bc8:	462a      	mov	r2, r5
 8016bca:	4621      	mov	r1, r4
 8016bcc:	bf28      	it	cs
 8016bce:	4632      	movcs	r2, r6
 8016bd0:	f000 fbd9 	bl	8017386 <memcpy>
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	f000 fc0e 	bl	80173f8 <_free_r>
 8016bdc:	463c      	mov	r4, r7
 8016bde:	e7e0      	b.n	8016ba2 <_realloc_r+0x1e>

08016be0 <_strtoul_l.constprop.0>:
 8016be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016be4:	4e34      	ldr	r6, [pc, #208]	@ (8016cb8 <_strtoul_l.constprop.0+0xd8>)
 8016be6:	4686      	mov	lr, r0
 8016be8:	460d      	mov	r5, r1
 8016bea:	4628      	mov	r0, r5
 8016bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bf0:	5d37      	ldrb	r7, [r6, r4]
 8016bf2:	f017 0708 	ands.w	r7, r7, #8
 8016bf6:	d1f8      	bne.n	8016bea <_strtoul_l.constprop.0+0xa>
 8016bf8:	2c2d      	cmp	r4, #45	@ 0x2d
 8016bfa:	d12f      	bne.n	8016c5c <_strtoul_l.constprop.0+0x7c>
 8016bfc:	782c      	ldrb	r4, [r5, #0]
 8016bfe:	2701      	movs	r7, #1
 8016c00:	1c85      	adds	r5, r0, #2
 8016c02:	f033 0010 	bics.w	r0, r3, #16
 8016c06:	d109      	bne.n	8016c1c <_strtoul_l.constprop.0+0x3c>
 8016c08:	2c30      	cmp	r4, #48	@ 0x30
 8016c0a:	d12c      	bne.n	8016c66 <_strtoul_l.constprop.0+0x86>
 8016c0c:	7828      	ldrb	r0, [r5, #0]
 8016c0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016c12:	2858      	cmp	r0, #88	@ 0x58
 8016c14:	d127      	bne.n	8016c66 <_strtoul_l.constprop.0+0x86>
 8016c16:	786c      	ldrb	r4, [r5, #1]
 8016c18:	2310      	movs	r3, #16
 8016c1a:	3502      	adds	r5, #2
 8016c1c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016c20:	2600      	movs	r6, #0
 8016c22:	fbb8 f8f3 	udiv	r8, r8, r3
 8016c26:	fb03 f908 	mul.w	r9, r3, r8
 8016c2a:	ea6f 0909 	mvn.w	r9, r9
 8016c2e:	4630      	mov	r0, r6
 8016c30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c34:	f1bc 0f09 	cmp.w	ip, #9
 8016c38:	d81c      	bhi.n	8016c74 <_strtoul_l.constprop.0+0x94>
 8016c3a:	4664      	mov	r4, ip
 8016c3c:	42a3      	cmp	r3, r4
 8016c3e:	dd2a      	ble.n	8016c96 <_strtoul_l.constprop.0+0xb6>
 8016c40:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016c44:	d007      	beq.n	8016c56 <_strtoul_l.constprop.0+0x76>
 8016c46:	4580      	cmp	r8, r0
 8016c48:	d322      	bcc.n	8016c90 <_strtoul_l.constprop.0+0xb0>
 8016c4a:	d101      	bne.n	8016c50 <_strtoul_l.constprop.0+0x70>
 8016c4c:	45a1      	cmp	r9, r4
 8016c4e:	db1f      	blt.n	8016c90 <_strtoul_l.constprop.0+0xb0>
 8016c50:	fb00 4003 	mla	r0, r0, r3, r4
 8016c54:	2601      	movs	r6, #1
 8016c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c5a:	e7e9      	b.n	8016c30 <_strtoul_l.constprop.0+0x50>
 8016c5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c5e:	bf04      	itt	eq
 8016c60:	782c      	ldrbeq	r4, [r5, #0]
 8016c62:	1c85      	addeq	r5, r0, #2
 8016c64:	e7cd      	b.n	8016c02 <_strtoul_l.constprop.0+0x22>
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d1d8      	bne.n	8016c1c <_strtoul_l.constprop.0+0x3c>
 8016c6a:	2c30      	cmp	r4, #48	@ 0x30
 8016c6c:	bf0c      	ite	eq
 8016c6e:	2308      	moveq	r3, #8
 8016c70:	230a      	movne	r3, #10
 8016c72:	e7d3      	b.n	8016c1c <_strtoul_l.constprop.0+0x3c>
 8016c74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016c78:	f1bc 0f19 	cmp.w	ip, #25
 8016c7c:	d801      	bhi.n	8016c82 <_strtoul_l.constprop.0+0xa2>
 8016c7e:	3c37      	subs	r4, #55	@ 0x37
 8016c80:	e7dc      	b.n	8016c3c <_strtoul_l.constprop.0+0x5c>
 8016c82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016c86:	f1bc 0f19 	cmp.w	ip, #25
 8016c8a:	d804      	bhi.n	8016c96 <_strtoul_l.constprop.0+0xb6>
 8016c8c:	3c57      	subs	r4, #87	@ 0x57
 8016c8e:	e7d5      	b.n	8016c3c <_strtoul_l.constprop.0+0x5c>
 8016c90:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016c94:	e7df      	b.n	8016c56 <_strtoul_l.constprop.0+0x76>
 8016c96:	1c73      	adds	r3, r6, #1
 8016c98:	d106      	bne.n	8016ca8 <_strtoul_l.constprop.0+0xc8>
 8016c9a:	2322      	movs	r3, #34	@ 0x22
 8016c9c:	f8ce 3000 	str.w	r3, [lr]
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	b932      	cbnz	r2, 8016cb2 <_strtoul_l.constprop.0+0xd2>
 8016ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ca8:	b107      	cbz	r7, 8016cac <_strtoul_l.constprop.0+0xcc>
 8016caa:	4240      	negs	r0, r0
 8016cac:	2a00      	cmp	r2, #0
 8016cae:	d0f9      	beq.n	8016ca4 <_strtoul_l.constprop.0+0xc4>
 8016cb0:	b106      	cbz	r6, 8016cb4 <_strtoul_l.constprop.0+0xd4>
 8016cb2:	1e69      	subs	r1, r5, #1
 8016cb4:	6011      	str	r1, [r2, #0]
 8016cb6:	e7f5      	b.n	8016ca4 <_strtoul_l.constprop.0+0xc4>
 8016cb8:	08018c5c 	.word	0x08018c5c

08016cbc <strtoul>:
 8016cbc:	4613      	mov	r3, r2
 8016cbe:	460a      	mov	r2, r1
 8016cc0:	4601      	mov	r1, r0
 8016cc2:	4802      	ldr	r0, [pc, #8]	@ (8016ccc <strtoul+0x10>)
 8016cc4:	6800      	ldr	r0, [r0, #0]
 8016cc6:	f7ff bf8b 	b.w	8016be0 <_strtoul_l.constprop.0>
 8016cca:	bf00      	nop
 8016ccc:	200001c0 	.word	0x200001c0

08016cd0 <std>:
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	b510      	push	{r4, lr}
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8016cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cde:	6083      	str	r3, [r0, #8]
 8016ce0:	8181      	strh	r1, [r0, #12]
 8016ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ce4:	81c2      	strh	r2, [r0, #14]
 8016ce6:	6183      	str	r3, [r0, #24]
 8016ce8:	4619      	mov	r1, r3
 8016cea:	2208      	movs	r2, #8
 8016cec:	305c      	adds	r0, #92	@ 0x5c
 8016cee:	f000 fa81 	bl	80171f4 <memset>
 8016cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d28 <std+0x58>)
 8016cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d2c <std+0x5c>)
 8016cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8016d30 <std+0x60>)
 8016cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8016d34 <std+0x64>)
 8016d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8016d02:	4b0d      	ldr	r3, [pc, #52]	@ (8016d38 <std+0x68>)
 8016d04:	6224      	str	r4, [r4, #32]
 8016d06:	429c      	cmp	r4, r3
 8016d08:	d006      	beq.n	8016d18 <std+0x48>
 8016d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016d0e:	4294      	cmp	r4, r2
 8016d10:	d002      	beq.n	8016d18 <std+0x48>
 8016d12:	33d0      	adds	r3, #208	@ 0xd0
 8016d14:	429c      	cmp	r4, r3
 8016d16:	d105      	bne.n	8016d24 <std+0x54>
 8016d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d20:	f000 bb26 	b.w	8017370 <__retarget_lock_init_recursive>
 8016d24:	bd10      	pop	{r4, pc}
 8016d26:	bf00      	nop
 8016d28:	08016fd5 	.word	0x08016fd5
 8016d2c:	08016ff7 	.word	0x08016ff7
 8016d30:	0801702f 	.word	0x0801702f
 8016d34:	08017053 	.word	0x08017053
 8016d38:	200125b4 	.word	0x200125b4

08016d3c <stdio_exit_handler>:
 8016d3c:	4a02      	ldr	r2, [pc, #8]	@ (8016d48 <stdio_exit_handler+0xc>)
 8016d3e:	4903      	ldr	r1, [pc, #12]	@ (8016d4c <stdio_exit_handler+0x10>)
 8016d40:	4803      	ldr	r0, [pc, #12]	@ (8016d50 <stdio_exit_handler+0x14>)
 8016d42:	f000 b869 	b.w	8016e18 <_fwalk_sglue>
 8016d46:	bf00      	nop
 8016d48:	200001b4 	.word	0x200001b4
 8016d4c:	08017df5 	.word	0x08017df5
 8016d50:	200001c4 	.word	0x200001c4

08016d54 <cleanup_stdio>:
 8016d54:	6841      	ldr	r1, [r0, #4]
 8016d56:	4b0c      	ldr	r3, [pc, #48]	@ (8016d88 <cleanup_stdio+0x34>)
 8016d58:	4299      	cmp	r1, r3
 8016d5a:	b510      	push	{r4, lr}
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	d001      	beq.n	8016d64 <cleanup_stdio+0x10>
 8016d60:	f001 f848 	bl	8017df4 <_fflush_r>
 8016d64:	68a1      	ldr	r1, [r4, #8]
 8016d66:	4b09      	ldr	r3, [pc, #36]	@ (8016d8c <cleanup_stdio+0x38>)
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	d002      	beq.n	8016d72 <cleanup_stdio+0x1e>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	f001 f841 	bl	8017df4 <_fflush_r>
 8016d72:	68e1      	ldr	r1, [r4, #12]
 8016d74:	4b06      	ldr	r3, [pc, #24]	@ (8016d90 <cleanup_stdio+0x3c>)
 8016d76:	4299      	cmp	r1, r3
 8016d78:	d004      	beq.n	8016d84 <cleanup_stdio+0x30>
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d80:	f001 b838 	b.w	8017df4 <_fflush_r>
 8016d84:	bd10      	pop	{r4, pc}
 8016d86:	bf00      	nop
 8016d88:	200125b4 	.word	0x200125b4
 8016d8c:	2001261c 	.word	0x2001261c
 8016d90:	20012684 	.word	0x20012684

08016d94 <global_stdio_init.part.0>:
 8016d94:	b510      	push	{r4, lr}
 8016d96:	4b0b      	ldr	r3, [pc, #44]	@ (8016dc4 <global_stdio_init.part.0+0x30>)
 8016d98:	4c0b      	ldr	r4, [pc, #44]	@ (8016dc8 <global_stdio_init.part.0+0x34>)
 8016d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8016dcc <global_stdio_init.part.0+0x38>)
 8016d9c:	601a      	str	r2, [r3, #0]
 8016d9e:	4620      	mov	r0, r4
 8016da0:	2200      	movs	r2, #0
 8016da2:	2104      	movs	r1, #4
 8016da4:	f7ff ff94 	bl	8016cd0 <std>
 8016da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016dac:	2201      	movs	r2, #1
 8016dae:	2109      	movs	r1, #9
 8016db0:	f7ff ff8e 	bl	8016cd0 <std>
 8016db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016db8:	2202      	movs	r2, #2
 8016dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dbe:	2112      	movs	r1, #18
 8016dc0:	f7ff bf86 	b.w	8016cd0 <std>
 8016dc4:	200126ec 	.word	0x200126ec
 8016dc8:	200125b4 	.word	0x200125b4
 8016dcc:	08016d3d 	.word	0x08016d3d

08016dd0 <__sfp_lock_acquire>:
 8016dd0:	4801      	ldr	r0, [pc, #4]	@ (8016dd8 <__sfp_lock_acquire+0x8>)
 8016dd2:	f000 bace 	b.w	8017372 <__retarget_lock_acquire_recursive>
 8016dd6:	bf00      	nop
 8016dd8:	200126f6 	.word	0x200126f6

08016ddc <__sfp_lock_release>:
 8016ddc:	4801      	ldr	r0, [pc, #4]	@ (8016de4 <__sfp_lock_release+0x8>)
 8016dde:	f000 bac9 	b.w	8017374 <__retarget_lock_release_recursive>
 8016de2:	bf00      	nop
 8016de4:	200126f6 	.word	0x200126f6

08016de8 <__sinit>:
 8016de8:	b510      	push	{r4, lr}
 8016dea:	4604      	mov	r4, r0
 8016dec:	f7ff fff0 	bl	8016dd0 <__sfp_lock_acquire>
 8016df0:	6a23      	ldr	r3, [r4, #32]
 8016df2:	b11b      	cbz	r3, 8016dfc <__sinit+0x14>
 8016df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016df8:	f7ff bff0 	b.w	8016ddc <__sfp_lock_release>
 8016dfc:	4b04      	ldr	r3, [pc, #16]	@ (8016e10 <__sinit+0x28>)
 8016dfe:	6223      	str	r3, [r4, #32]
 8016e00:	4b04      	ldr	r3, [pc, #16]	@ (8016e14 <__sinit+0x2c>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d1f5      	bne.n	8016df4 <__sinit+0xc>
 8016e08:	f7ff ffc4 	bl	8016d94 <global_stdio_init.part.0>
 8016e0c:	e7f2      	b.n	8016df4 <__sinit+0xc>
 8016e0e:	bf00      	nop
 8016e10:	08016d55 	.word	0x08016d55
 8016e14:	200126ec 	.word	0x200126ec

08016e18 <_fwalk_sglue>:
 8016e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e1c:	4607      	mov	r7, r0
 8016e1e:	4688      	mov	r8, r1
 8016e20:	4614      	mov	r4, r2
 8016e22:	2600      	movs	r6, #0
 8016e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e28:	f1b9 0901 	subs.w	r9, r9, #1
 8016e2c:	d505      	bpl.n	8016e3a <_fwalk_sglue+0x22>
 8016e2e:	6824      	ldr	r4, [r4, #0]
 8016e30:	2c00      	cmp	r4, #0
 8016e32:	d1f7      	bne.n	8016e24 <_fwalk_sglue+0xc>
 8016e34:	4630      	mov	r0, r6
 8016e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e3a:	89ab      	ldrh	r3, [r5, #12]
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	d907      	bls.n	8016e50 <_fwalk_sglue+0x38>
 8016e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e44:	3301      	adds	r3, #1
 8016e46:	d003      	beq.n	8016e50 <_fwalk_sglue+0x38>
 8016e48:	4629      	mov	r1, r5
 8016e4a:	4638      	mov	r0, r7
 8016e4c:	47c0      	blx	r8
 8016e4e:	4306      	orrs	r6, r0
 8016e50:	3568      	adds	r5, #104	@ 0x68
 8016e52:	e7e9      	b.n	8016e28 <_fwalk_sglue+0x10>

08016e54 <_fwrite_r>:
 8016e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e58:	9c08      	ldr	r4, [sp, #32]
 8016e5a:	468a      	mov	sl, r1
 8016e5c:	4690      	mov	r8, r2
 8016e5e:	fb02 f903 	mul.w	r9, r2, r3
 8016e62:	4606      	mov	r6, r0
 8016e64:	b118      	cbz	r0, 8016e6e <_fwrite_r+0x1a>
 8016e66:	6a03      	ldr	r3, [r0, #32]
 8016e68:	b90b      	cbnz	r3, 8016e6e <_fwrite_r+0x1a>
 8016e6a:	f7ff ffbd 	bl	8016de8 <__sinit>
 8016e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016e70:	07dd      	lsls	r5, r3, #31
 8016e72:	d405      	bmi.n	8016e80 <_fwrite_r+0x2c>
 8016e74:	89a3      	ldrh	r3, [r4, #12]
 8016e76:	0598      	lsls	r0, r3, #22
 8016e78:	d402      	bmi.n	8016e80 <_fwrite_r+0x2c>
 8016e7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016e7c:	f000 fa79 	bl	8017372 <__retarget_lock_acquire_recursive>
 8016e80:	89a3      	ldrh	r3, [r4, #12]
 8016e82:	0719      	lsls	r1, r3, #28
 8016e84:	d516      	bpl.n	8016eb4 <_fwrite_r+0x60>
 8016e86:	6923      	ldr	r3, [r4, #16]
 8016e88:	b1a3      	cbz	r3, 8016eb4 <_fwrite_r+0x60>
 8016e8a:	2500      	movs	r5, #0
 8016e8c:	454d      	cmp	r5, r9
 8016e8e:	d01f      	beq.n	8016ed0 <_fwrite_r+0x7c>
 8016e90:	68a7      	ldr	r7, [r4, #8]
 8016e92:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8016e96:	3f01      	subs	r7, #1
 8016e98:	2f00      	cmp	r7, #0
 8016e9a:	60a7      	str	r7, [r4, #8]
 8016e9c:	da04      	bge.n	8016ea8 <_fwrite_r+0x54>
 8016e9e:	69a3      	ldr	r3, [r4, #24]
 8016ea0:	429f      	cmp	r7, r3
 8016ea2:	db0f      	blt.n	8016ec4 <_fwrite_r+0x70>
 8016ea4:	290a      	cmp	r1, #10
 8016ea6:	d00d      	beq.n	8016ec4 <_fwrite_r+0x70>
 8016ea8:	6823      	ldr	r3, [r4, #0]
 8016eaa:	1c5a      	adds	r2, r3, #1
 8016eac:	6022      	str	r2, [r4, #0]
 8016eae:	7019      	strb	r1, [r3, #0]
 8016eb0:	3501      	adds	r5, #1
 8016eb2:	e7eb      	b.n	8016e8c <_fwrite_r+0x38>
 8016eb4:	4621      	mov	r1, r4
 8016eb6:	4630      	mov	r0, r6
 8016eb8:	f000 f946 	bl	8017148 <__swsetup_r>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d0e4      	beq.n	8016e8a <_fwrite_r+0x36>
 8016ec0:	2500      	movs	r5, #0
 8016ec2:	e005      	b.n	8016ed0 <_fwrite_r+0x7c>
 8016ec4:	4622      	mov	r2, r4
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	f000 f900 	bl	80170cc <__swbuf_r>
 8016ecc:	3001      	adds	r0, #1
 8016ece:	d1ef      	bne.n	8016eb0 <_fwrite_r+0x5c>
 8016ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ed2:	07da      	lsls	r2, r3, #31
 8016ed4:	d405      	bmi.n	8016ee2 <_fwrite_r+0x8e>
 8016ed6:	89a3      	ldrh	r3, [r4, #12]
 8016ed8:	059b      	lsls	r3, r3, #22
 8016eda:	d402      	bmi.n	8016ee2 <_fwrite_r+0x8e>
 8016edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ede:	f000 fa49 	bl	8017374 <__retarget_lock_release_recursive>
 8016ee2:	fbb5 f0f8 	udiv	r0, r5, r8
 8016ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016eec <fwrite>:
 8016eec:	b507      	push	{r0, r1, r2, lr}
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	460a      	mov	r2, r1
 8016ef4:	4601      	mov	r1, r0
 8016ef6:	4803      	ldr	r0, [pc, #12]	@ (8016f04 <fwrite+0x18>)
 8016ef8:	6800      	ldr	r0, [r0, #0]
 8016efa:	f7ff ffab 	bl	8016e54 <_fwrite_r>
 8016efe:	b003      	add	sp, #12
 8016f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f04:	200001c0 	.word	0x200001c0

08016f08 <iprintf>:
 8016f08:	b40f      	push	{r0, r1, r2, r3}
 8016f0a:	b507      	push	{r0, r1, r2, lr}
 8016f0c:	4906      	ldr	r1, [pc, #24]	@ (8016f28 <iprintf+0x20>)
 8016f0e:	ab04      	add	r3, sp, #16
 8016f10:	6808      	ldr	r0, [r1, #0]
 8016f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f16:	6881      	ldr	r1, [r0, #8]
 8016f18:	9301      	str	r3, [sp, #4]
 8016f1a:	f000 fc41 	bl	80177a0 <_vfiprintf_r>
 8016f1e:	b003      	add	sp, #12
 8016f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f24:	b004      	add	sp, #16
 8016f26:	4770      	bx	lr
 8016f28:	200001c0 	.word	0x200001c0

08016f2c <sniprintf>:
 8016f2c:	b40c      	push	{r2, r3}
 8016f2e:	b530      	push	{r4, r5, lr}
 8016f30:	4b17      	ldr	r3, [pc, #92]	@ (8016f90 <sniprintf+0x64>)
 8016f32:	1e0c      	subs	r4, r1, #0
 8016f34:	681d      	ldr	r5, [r3, #0]
 8016f36:	b09d      	sub	sp, #116	@ 0x74
 8016f38:	da08      	bge.n	8016f4c <sniprintf+0x20>
 8016f3a:	238b      	movs	r3, #139	@ 0x8b
 8016f3c:	602b      	str	r3, [r5, #0]
 8016f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f42:	b01d      	add	sp, #116	@ 0x74
 8016f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f48:	b002      	add	sp, #8
 8016f4a:	4770      	bx	lr
 8016f4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016f54:	bf14      	ite	ne
 8016f56:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016f5a:	4623      	moveq	r3, r4
 8016f5c:	9304      	str	r3, [sp, #16]
 8016f5e:	9307      	str	r3, [sp, #28]
 8016f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f64:	9002      	str	r0, [sp, #8]
 8016f66:	9006      	str	r0, [sp, #24]
 8016f68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016f6e:	ab21      	add	r3, sp, #132	@ 0x84
 8016f70:	a902      	add	r1, sp, #8
 8016f72:	4628      	mov	r0, r5
 8016f74:	9301      	str	r3, [sp, #4]
 8016f76:	f000 faed 	bl	8017554 <_svfiprintf_r>
 8016f7a:	1c43      	adds	r3, r0, #1
 8016f7c:	bfbc      	itt	lt
 8016f7e:	238b      	movlt	r3, #139	@ 0x8b
 8016f80:	602b      	strlt	r3, [r5, #0]
 8016f82:	2c00      	cmp	r4, #0
 8016f84:	d0dd      	beq.n	8016f42 <sniprintf+0x16>
 8016f86:	9b02      	ldr	r3, [sp, #8]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	701a      	strb	r2, [r3, #0]
 8016f8c:	e7d9      	b.n	8016f42 <sniprintf+0x16>
 8016f8e:	bf00      	nop
 8016f90:	200001c0 	.word	0x200001c0

08016f94 <siprintf>:
 8016f94:	b40e      	push	{r1, r2, r3}
 8016f96:	b500      	push	{lr}
 8016f98:	b09c      	sub	sp, #112	@ 0x70
 8016f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f9c:	9002      	str	r0, [sp, #8]
 8016f9e:	9006      	str	r0, [sp, #24]
 8016fa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016fa4:	4809      	ldr	r0, [pc, #36]	@ (8016fcc <siprintf+0x38>)
 8016fa6:	9107      	str	r1, [sp, #28]
 8016fa8:	9104      	str	r1, [sp, #16]
 8016faa:	4909      	ldr	r1, [pc, #36]	@ (8016fd0 <siprintf+0x3c>)
 8016fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fb0:	9105      	str	r1, [sp, #20]
 8016fb2:	6800      	ldr	r0, [r0, #0]
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	a902      	add	r1, sp, #8
 8016fb8:	f000 facc 	bl	8017554 <_svfiprintf_r>
 8016fbc:	9b02      	ldr	r3, [sp, #8]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	701a      	strb	r2, [r3, #0]
 8016fc2:	b01c      	add	sp, #112	@ 0x70
 8016fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fc8:	b003      	add	sp, #12
 8016fca:	4770      	bx	lr
 8016fcc:	200001c0 	.word	0x200001c0
 8016fd0:	ffff0208 	.word	0xffff0208

08016fd4 <__sread>:
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	460c      	mov	r4, r1
 8016fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fdc:	f000 f96a 	bl	80172b4 <_read_r>
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	bfab      	itete	ge
 8016fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8016fe8:	181b      	addge	r3, r3, r0
 8016fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016fee:	bfac      	ite	ge
 8016ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ff2:	81a3      	strhlt	r3, [r4, #12]
 8016ff4:	bd10      	pop	{r4, pc}

08016ff6 <__swrite>:
 8016ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffa:	461f      	mov	r7, r3
 8016ffc:	898b      	ldrh	r3, [r1, #12]
 8016ffe:	05db      	lsls	r3, r3, #23
 8017000:	4605      	mov	r5, r0
 8017002:	460c      	mov	r4, r1
 8017004:	4616      	mov	r6, r2
 8017006:	d505      	bpl.n	8017014 <__swrite+0x1e>
 8017008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801700c:	2302      	movs	r3, #2
 801700e:	2200      	movs	r2, #0
 8017010:	f000 f93e 	bl	8017290 <_lseek_r>
 8017014:	89a3      	ldrh	r3, [r4, #12]
 8017016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801701a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	4632      	mov	r2, r6
 8017022:	463b      	mov	r3, r7
 8017024:	4628      	mov	r0, r5
 8017026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801702a:	f000 b965 	b.w	80172f8 <_write_r>

0801702e <__sseek>:
 801702e:	b510      	push	{r4, lr}
 8017030:	460c      	mov	r4, r1
 8017032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017036:	f000 f92b 	bl	8017290 <_lseek_r>
 801703a:	1c43      	adds	r3, r0, #1
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	bf15      	itete	ne
 8017040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801704a:	81a3      	strheq	r3, [r4, #12]
 801704c:	bf18      	it	ne
 801704e:	81a3      	strhne	r3, [r4, #12]
 8017050:	bd10      	pop	{r4, pc}

08017052 <__sclose>:
 8017052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017056:	f000 b90b 	b.w	8017270 <_close_r>

0801705a <_vsniprintf_r>:
 801705a:	b530      	push	{r4, r5, lr}
 801705c:	4614      	mov	r4, r2
 801705e:	2c00      	cmp	r4, #0
 8017060:	b09b      	sub	sp, #108	@ 0x6c
 8017062:	4605      	mov	r5, r0
 8017064:	461a      	mov	r2, r3
 8017066:	da05      	bge.n	8017074 <_vsniprintf_r+0x1a>
 8017068:	238b      	movs	r3, #139	@ 0x8b
 801706a:	6003      	str	r3, [r0, #0]
 801706c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017070:	b01b      	add	sp, #108	@ 0x6c
 8017072:	bd30      	pop	{r4, r5, pc}
 8017074:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017078:	f8ad 300c 	strh.w	r3, [sp, #12]
 801707c:	bf14      	ite	ne
 801707e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017082:	4623      	moveq	r3, r4
 8017084:	9302      	str	r3, [sp, #8]
 8017086:	9305      	str	r3, [sp, #20]
 8017088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801708c:	9100      	str	r1, [sp, #0]
 801708e:	9104      	str	r1, [sp, #16]
 8017090:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017094:	4669      	mov	r1, sp
 8017096:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017098:	f000 fa5c 	bl	8017554 <_svfiprintf_r>
 801709c:	1c43      	adds	r3, r0, #1
 801709e:	bfbc      	itt	lt
 80170a0:	238b      	movlt	r3, #139	@ 0x8b
 80170a2:	602b      	strlt	r3, [r5, #0]
 80170a4:	2c00      	cmp	r4, #0
 80170a6:	d0e3      	beq.n	8017070 <_vsniprintf_r+0x16>
 80170a8:	9b00      	ldr	r3, [sp, #0]
 80170aa:	2200      	movs	r2, #0
 80170ac:	701a      	strb	r2, [r3, #0]
 80170ae:	e7df      	b.n	8017070 <_vsniprintf_r+0x16>

080170b0 <vsniprintf>:
 80170b0:	b507      	push	{r0, r1, r2, lr}
 80170b2:	9300      	str	r3, [sp, #0]
 80170b4:	4613      	mov	r3, r2
 80170b6:	460a      	mov	r2, r1
 80170b8:	4601      	mov	r1, r0
 80170ba:	4803      	ldr	r0, [pc, #12]	@ (80170c8 <vsniprintf+0x18>)
 80170bc:	6800      	ldr	r0, [r0, #0]
 80170be:	f7ff ffcc 	bl	801705a <_vsniprintf_r>
 80170c2:	b003      	add	sp, #12
 80170c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80170c8:	200001c0 	.word	0x200001c0

080170cc <__swbuf_r>:
 80170cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ce:	460e      	mov	r6, r1
 80170d0:	4614      	mov	r4, r2
 80170d2:	4605      	mov	r5, r0
 80170d4:	b118      	cbz	r0, 80170de <__swbuf_r+0x12>
 80170d6:	6a03      	ldr	r3, [r0, #32]
 80170d8:	b90b      	cbnz	r3, 80170de <__swbuf_r+0x12>
 80170da:	f7ff fe85 	bl	8016de8 <__sinit>
 80170de:	69a3      	ldr	r3, [r4, #24]
 80170e0:	60a3      	str	r3, [r4, #8]
 80170e2:	89a3      	ldrh	r3, [r4, #12]
 80170e4:	071a      	lsls	r2, r3, #28
 80170e6:	d501      	bpl.n	80170ec <__swbuf_r+0x20>
 80170e8:	6923      	ldr	r3, [r4, #16]
 80170ea:	b943      	cbnz	r3, 80170fe <__swbuf_r+0x32>
 80170ec:	4621      	mov	r1, r4
 80170ee:	4628      	mov	r0, r5
 80170f0:	f000 f82a 	bl	8017148 <__swsetup_r>
 80170f4:	b118      	cbz	r0, 80170fe <__swbuf_r+0x32>
 80170f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80170fa:	4638      	mov	r0, r7
 80170fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170fe:	6823      	ldr	r3, [r4, #0]
 8017100:	6922      	ldr	r2, [r4, #16]
 8017102:	1a98      	subs	r0, r3, r2
 8017104:	6963      	ldr	r3, [r4, #20]
 8017106:	b2f6      	uxtb	r6, r6
 8017108:	4283      	cmp	r3, r0
 801710a:	4637      	mov	r7, r6
 801710c:	dc05      	bgt.n	801711a <__swbuf_r+0x4e>
 801710e:	4621      	mov	r1, r4
 8017110:	4628      	mov	r0, r5
 8017112:	f000 fe6f 	bl	8017df4 <_fflush_r>
 8017116:	2800      	cmp	r0, #0
 8017118:	d1ed      	bne.n	80170f6 <__swbuf_r+0x2a>
 801711a:	68a3      	ldr	r3, [r4, #8]
 801711c:	3b01      	subs	r3, #1
 801711e:	60a3      	str	r3, [r4, #8]
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	1c5a      	adds	r2, r3, #1
 8017124:	6022      	str	r2, [r4, #0]
 8017126:	701e      	strb	r6, [r3, #0]
 8017128:	6962      	ldr	r2, [r4, #20]
 801712a:	1c43      	adds	r3, r0, #1
 801712c:	429a      	cmp	r2, r3
 801712e:	d004      	beq.n	801713a <__swbuf_r+0x6e>
 8017130:	89a3      	ldrh	r3, [r4, #12]
 8017132:	07db      	lsls	r3, r3, #31
 8017134:	d5e1      	bpl.n	80170fa <__swbuf_r+0x2e>
 8017136:	2e0a      	cmp	r6, #10
 8017138:	d1df      	bne.n	80170fa <__swbuf_r+0x2e>
 801713a:	4621      	mov	r1, r4
 801713c:	4628      	mov	r0, r5
 801713e:	f000 fe59 	bl	8017df4 <_fflush_r>
 8017142:	2800      	cmp	r0, #0
 8017144:	d0d9      	beq.n	80170fa <__swbuf_r+0x2e>
 8017146:	e7d6      	b.n	80170f6 <__swbuf_r+0x2a>

08017148 <__swsetup_r>:
 8017148:	b538      	push	{r3, r4, r5, lr}
 801714a:	4b29      	ldr	r3, [pc, #164]	@ (80171f0 <__swsetup_r+0xa8>)
 801714c:	4605      	mov	r5, r0
 801714e:	6818      	ldr	r0, [r3, #0]
 8017150:	460c      	mov	r4, r1
 8017152:	b118      	cbz	r0, 801715c <__swsetup_r+0x14>
 8017154:	6a03      	ldr	r3, [r0, #32]
 8017156:	b90b      	cbnz	r3, 801715c <__swsetup_r+0x14>
 8017158:	f7ff fe46 	bl	8016de8 <__sinit>
 801715c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017160:	0719      	lsls	r1, r3, #28
 8017162:	d422      	bmi.n	80171aa <__swsetup_r+0x62>
 8017164:	06da      	lsls	r2, r3, #27
 8017166:	d407      	bmi.n	8017178 <__swsetup_r+0x30>
 8017168:	2209      	movs	r2, #9
 801716a:	602a      	str	r2, [r5, #0]
 801716c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017170:	81a3      	strh	r3, [r4, #12]
 8017172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017176:	e033      	b.n	80171e0 <__swsetup_r+0x98>
 8017178:	0758      	lsls	r0, r3, #29
 801717a:	d512      	bpl.n	80171a2 <__swsetup_r+0x5a>
 801717c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801717e:	b141      	cbz	r1, 8017192 <__swsetup_r+0x4a>
 8017180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017184:	4299      	cmp	r1, r3
 8017186:	d002      	beq.n	801718e <__swsetup_r+0x46>
 8017188:	4628      	mov	r0, r5
 801718a:	f000 f935 	bl	80173f8 <_free_r>
 801718e:	2300      	movs	r3, #0
 8017190:	6363      	str	r3, [r4, #52]	@ 0x34
 8017192:	89a3      	ldrh	r3, [r4, #12]
 8017194:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017198:	81a3      	strh	r3, [r4, #12]
 801719a:	2300      	movs	r3, #0
 801719c:	6063      	str	r3, [r4, #4]
 801719e:	6923      	ldr	r3, [r4, #16]
 80171a0:	6023      	str	r3, [r4, #0]
 80171a2:	89a3      	ldrh	r3, [r4, #12]
 80171a4:	f043 0308 	orr.w	r3, r3, #8
 80171a8:	81a3      	strh	r3, [r4, #12]
 80171aa:	6923      	ldr	r3, [r4, #16]
 80171ac:	b94b      	cbnz	r3, 80171c2 <__swsetup_r+0x7a>
 80171ae:	89a3      	ldrh	r3, [r4, #12]
 80171b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80171b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80171b8:	d003      	beq.n	80171c2 <__swsetup_r+0x7a>
 80171ba:	4621      	mov	r1, r4
 80171bc:	4628      	mov	r0, r5
 80171be:	f000 fe79 	bl	8017eb4 <__smakebuf_r>
 80171c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171c6:	f013 0201 	ands.w	r2, r3, #1
 80171ca:	d00a      	beq.n	80171e2 <__swsetup_r+0x9a>
 80171cc:	2200      	movs	r2, #0
 80171ce:	60a2      	str	r2, [r4, #8]
 80171d0:	6962      	ldr	r2, [r4, #20]
 80171d2:	4252      	negs	r2, r2
 80171d4:	61a2      	str	r2, [r4, #24]
 80171d6:	6922      	ldr	r2, [r4, #16]
 80171d8:	b942      	cbnz	r2, 80171ec <__swsetup_r+0xa4>
 80171da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80171de:	d1c5      	bne.n	801716c <__swsetup_r+0x24>
 80171e0:	bd38      	pop	{r3, r4, r5, pc}
 80171e2:	0799      	lsls	r1, r3, #30
 80171e4:	bf58      	it	pl
 80171e6:	6962      	ldrpl	r2, [r4, #20]
 80171e8:	60a2      	str	r2, [r4, #8]
 80171ea:	e7f4      	b.n	80171d6 <__swsetup_r+0x8e>
 80171ec:	2000      	movs	r0, #0
 80171ee:	e7f7      	b.n	80171e0 <__swsetup_r+0x98>
 80171f0:	200001c0 	.word	0x200001c0

080171f4 <memset>:
 80171f4:	4402      	add	r2, r0
 80171f6:	4603      	mov	r3, r0
 80171f8:	4293      	cmp	r3, r2
 80171fa:	d100      	bne.n	80171fe <memset+0xa>
 80171fc:	4770      	bx	lr
 80171fe:	f803 1b01 	strb.w	r1, [r3], #1
 8017202:	e7f9      	b.n	80171f8 <memset+0x4>

08017204 <strchr>:
 8017204:	b2c9      	uxtb	r1, r1
 8017206:	4603      	mov	r3, r0
 8017208:	4618      	mov	r0, r3
 801720a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801720e:	b112      	cbz	r2, 8017216 <strchr+0x12>
 8017210:	428a      	cmp	r2, r1
 8017212:	d1f9      	bne.n	8017208 <strchr+0x4>
 8017214:	4770      	bx	lr
 8017216:	2900      	cmp	r1, #0
 8017218:	bf18      	it	ne
 801721a:	2000      	movne	r0, #0
 801721c:	4770      	bx	lr

0801721e <strncmp>:
 801721e:	b510      	push	{r4, lr}
 8017220:	b16a      	cbz	r2, 801723e <strncmp+0x20>
 8017222:	3901      	subs	r1, #1
 8017224:	1884      	adds	r4, r0, r2
 8017226:	f810 2b01 	ldrb.w	r2, [r0], #1
 801722a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801722e:	429a      	cmp	r2, r3
 8017230:	d103      	bne.n	801723a <strncmp+0x1c>
 8017232:	42a0      	cmp	r0, r4
 8017234:	d001      	beq.n	801723a <strncmp+0x1c>
 8017236:	2a00      	cmp	r2, #0
 8017238:	d1f5      	bne.n	8017226 <strncmp+0x8>
 801723a:	1ad0      	subs	r0, r2, r3
 801723c:	bd10      	pop	{r4, pc}
 801723e:	4610      	mov	r0, r2
 8017240:	e7fc      	b.n	801723c <strncmp+0x1e>

08017242 <strstr>:
 8017242:	780a      	ldrb	r2, [r1, #0]
 8017244:	b570      	push	{r4, r5, r6, lr}
 8017246:	b96a      	cbnz	r2, 8017264 <strstr+0x22>
 8017248:	bd70      	pop	{r4, r5, r6, pc}
 801724a:	429a      	cmp	r2, r3
 801724c:	d109      	bne.n	8017262 <strstr+0x20>
 801724e:	460c      	mov	r4, r1
 8017250:	4605      	mov	r5, r0
 8017252:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017256:	2b00      	cmp	r3, #0
 8017258:	d0f6      	beq.n	8017248 <strstr+0x6>
 801725a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801725e:	429e      	cmp	r6, r3
 8017260:	d0f7      	beq.n	8017252 <strstr+0x10>
 8017262:	3001      	adds	r0, #1
 8017264:	7803      	ldrb	r3, [r0, #0]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1ef      	bne.n	801724a <strstr+0x8>
 801726a:	4618      	mov	r0, r3
 801726c:	e7ec      	b.n	8017248 <strstr+0x6>
	...

08017270 <_close_r>:
 8017270:	b538      	push	{r3, r4, r5, lr}
 8017272:	4d06      	ldr	r5, [pc, #24]	@ (801728c <_close_r+0x1c>)
 8017274:	2300      	movs	r3, #0
 8017276:	4604      	mov	r4, r0
 8017278:	4608      	mov	r0, r1
 801727a:	602b      	str	r3, [r5, #0]
 801727c:	f7ea fa48 	bl	8001710 <_close>
 8017280:	1c43      	adds	r3, r0, #1
 8017282:	d102      	bne.n	801728a <_close_r+0x1a>
 8017284:	682b      	ldr	r3, [r5, #0]
 8017286:	b103      	cbz	r3, 801728a <_close_r+0x1a>
 8017288:	6023      	str	r3, [r4, #0]
 801728a:	bd38      	pop	{r3, r4, r5, pc}
 801728c:	200126f0 	.word	0x200126f0

08017290 <_lseek_r>:
 8017290:	b538      	push	{r3, r4, r5, lr}
 8017292:	4d07      	ldr	r5, [pc, #28]	@ (80172b0 <_lseek_r+0x20>)
 8017294:	4604      	mov	r4, r0
 8017296:	4608      	mov	r0, r1
 8017298:	4611      	mov	r1, r2
 801729a:	2200      	movs	r2, #0
 801729c:	602a      	str	r2, [r5, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	f7ea fa5d 	bl	800175e <_lseek>
 80172a4:	1c43      	adds	r3, r0, #1
 80172a6:	d102      	bne.n	80172ae <_lseek_r+0x1e>
 80172a8:	682b      	ldr	r3, [r5, #0]
 80172aa:	b103      	cbz	r3, 80172ae <_lseek_r+0x1e>
 80172ac:	6023      	str	r3, [r4, #0]
 80172ae:	bd38      	pop	{r3, r4, r5, pc}
 80172b0:	200126f0 	.word	0x200126f0

080172b4 <_read_r>:
 80172b4:	b538      	push	{r3, r4, r5, lr}
 80172b6:	4d07      	ldr	r5, [pc, #28]	@ (80172d4 <_read_r+0x20>)
 80172b8:	4604      	mov	r4, r0
 80172ba:	4608      	mov	r0, r1
 80172bc:	4611      	mov	r1, r2
 80172be:	2200      	movs	r2, #0
 80172c0:	602a      	str	r2, [r5, #0]
 80172c2:	461a      	mov	r2, r3
 80172c4:	f7ea f9eb 	bl	800169e <_read>
 80172c8:	1c43      	adds	r3, r0, #1
 80172ca:	d102      	bne.n	80172d2 <_read_r+0x1e>
 80172cc:	682b      	ldr	r3, [r5, #0]
 80172ce:	b103      	cbz	r3, 80172d2 <_read_r+0x1e>
 80172d0:	6023      	str	r3, [r4, #0]
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	200126f0 	.word	0x200126f0

080172d8 <_sbrk_r>:
 80172d8:	b538      	push	{r3, r4, r5, lr}
 80172da:	4d06      	ldr	r5, [pc, #24]	@ (80172f4 <_sbrk_r+0x1c>)
 80172dc:	2300      	movs	r3, #0
 80172de:	4604      	mov	r4, r0
 80172e0:	4608      	mov	r0, r1
 80172e2:	602b      	str	r3, [r5, #0]
 80172e4:	f7ea fa48 	bl	8001778 <_sbrk>
 80172e8:	1c43      	adds	r3, r0, #1
 80172ea:	d102      	bne.n	80172f2 <_sbrk_r+0x1a>
 80172ec:	682b      	ldr	r3, [r5, #0]
 80172ee:	b103      	cbz	r3, 80172f2 <_sbrk_r+0x1a>
 80172f0:	6023      	str	r3, [r4, #0]
 80172f2:	bd38      	pop	{r3, r4, r5, pc}
 80172f4:	200126f0 	.word	0x200126f0

080172f8 <_write_r>:
 80172f8:	b538      	push	{r3, r4, r5, lr}
 80172fa:	4d07      	ldr	r5, [pc, #28]	@ (8017318 <_write_r+0x20>)
 80172fc:	4604      	mov	r4, r0
 80172fe:	4608      	mov	r0, r1
 8017300:	4611      	mov	r1, r2
 8017302:	2200      	movs	r2, #0
 8017304:	602a      	str	r2, [r5, #0]
 8017306:	461a      	mov	r2, r3
 8017308:	f7ea f9e6 	bl	80016d8 <_write>
 801730c:	1c43      	adds	r3, r0, #1
 801730e:	d102      	bne.n	8017316 <_write_r+0x1e>
 8017310:	682b      	ldr	r3, [r5, #0]
 8017312:	b103      	cbz	r3, 8017316 <_write_r+0x1e>
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	bd38      	pop	{r3, r4, r5, pc}
 8017318:	200126f0 	.word	0x200126f0

0801731c <__errno>:
 801731c:	4b01      	ldr	r3, [pc, #4]	@ (8017324 <__errno+0x8>)
 801731e:	6818      	ldr	r0, [r3, #0]
 8017320:	4770      	bx	lr
 8017322:	bf00      	nop
 8017324:	200001c0 	.word	0x200001c0

08017328 <__libc_init_array>:
 8017328:	b570      	push	{r4, r5, r6, lr}
 801732a:	4d0d      	ldr	r5, [pc, #52]	@ (8017360 <__libc_init_array+0x38>)
 801732c:	4c0d      	ldr	r4, [pc, #52]	@ (8017364 <__libc_init_array+0x3c>)
 801732e:	1b64      	subs	r4, r4, r5
 8017330:	10a4      	asrs	r4, r4, #2
 8017332:	2600      	movs	r6, #0
 8017334:	42a6      	cmp	r6, r4
 8017336:	d109      	bne.n	801734c <__libc_init_array+0x24>
 8017338:	4d0b      	ldr	r5, [pc, #44]	@ (8017368 <__libc_init_array+0x40>)
 801733a:	4c0c      	ldr	r4, [pc, #48]	@ (801736c <__libc_init_array+0x44>)
 801733c:	f000 fe7e 	bl	801803c <_init>
 8017340:	1b64      	subs	r4, r4, r5
 8017342:	10a4      	asrs	r4, r4, #2
 8017344:	2600      	movs	r6, #0
 8017346:	42a6      	cmp	r6, r4
 8017348:	d105      	bne.n	8017356 <__libc_init_array+0x2e>
 801734a:	bd70      	pop	{r4, r5, r6, pc}
 801734c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017350:	4798      	blx	r3
 8017352:	3601      	adds	r6, #1
 8017354:	e7ee      	b.n	8017334 <__libc_init_array+0xc>
 8017356:	f855 3b04 	ldr.w	r3, [r5], #4
 801735a:	4798      	blx	r3
 801735c:	3601      	adds	r6, #1
 801735e:	e7f2      	b.n	8017346 <__libc_init_array+0x1e>
 8017360:	08018dd4 	.word	0x08018dd4
 8017364:	08018dd4 	.word	0x08018dd4
 8017368:	08018dd4 	.word	0x08018dd4
 801736c:	08018ddc 	.word	0x08018ddc

08017370 <__retarget_lock_init_recursive>:
 8017370:	4770      	bx	lr

08017372 <__retarget_lock_acquire_recursive>:
 8017372:	4770      	bx	lr

08017374 <__retarget_lock_release_recursive>:
 8017374:	4770      	bx	lr

08017376 <strcpy>:
 8017376:	4603      	mov	r3, r0
 8017378:	f811 2b01 	ldrb.w	r2, [r1], #1
 801737c:	f803 2b01 	strb.w	r2, [r3], #1
 8017380:	2a00      	cmp	r2, #0
 8017382:	d1f9      	bne.n	8017378 <strcpy+0x2>
 8017384:	4770      	bx	lr

08017386 <memcpy>:
 8017386:	440a      	add	r2, r1
 8017388:	4291      	cmp	r1, r2
 801738a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801738e:	d100      	bne.n	8017392 <memcpy+0xc>
 8017390:	4770      	bx	lr
 8017392:	b510      	push	{r4, lr}
 8017394:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017398:	f803 4f01 	strb.w	r4, [r3, #1]!
 801739c:	4291      	cmp	r1, r2
 801739e:	d1f9      	bne.n	8017394 <memcpy+0xe>
 80173a0:	bd10      	pop	{r4, pc}
	...

080173a4 <__assert_func>:
 80173a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173a6:	4614      	mov	r4, r2
 80173a8:	461a      	mov	r2, r3
 80173aa:	4b09      	ldr	r3, [pc, #36]	@ (80173d0 <__assert_func+0x2c>)
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	4605      	mov	r5, r0
 80173b0:	68d8      	ldr	r0, [r3, #12]
 80173b2:	b954      	cbnz	r4, 80173ca <__assert_func+0x26>
 80173b4:	4b07      	ldr	r3, [pc, #28]	@ (80173d4 <__assert_func+0x30>)
 80173b6:	461c      	mov	r4, r3
 80173b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173bc:	9100      	str	r1, [sp, #0]
 80173be:	462b      	mov	r3, r5
 80173c0:	4905      	ldr	r1, [pc, #20]	@ (80173d8 <__assert_func+0x34>)
 80173c2:	f000 fd3f 	bl	8017e44 <fiprintf>
 80173c6:	f000 fded 	bl	8017fa4 <abort>
 80173ca:	4b04      	ldr	r3, [pc, #16]	@ (80173dc <__assert_func+0x38>)
 80173cc:	e7f4      	b.n	80173b8 <__assert_func+0x14>
 80173ce:	bf00      	nop
 80173d0:	200001c0 	.word	0x200001c0
 80173d4:	08018d97 	.word	0x08018d97
 80173d8:	08018d69 	.word	0x08018d69
 80173dc:	08018d5c 	.word	0x08018d5c

080173e0 <__env_lock>:
 80173e0:	4801      	ldr	r0, [pc, #4]	@ (80173e8 <__env_lock+0x8>)
 80173e2:	f7ff bfc6 	b.w	8017372 <__retarget_lock_acquire_recursive>
 80173e6:	bf00      	nop
 80173e8:	200126f4 	.word	0x200126f4

080173ec <__env_unlock>:
 80173ec:	4801      	ldr	r0, [pc, #4]	@ (80173f4 <__env_unlock+0x8>)
 80173ee:	f7ff bfc1 	b.w	8017374 <__retarget_lock_release_recursive>
 80173f2:	bf00      	nop
 80173f4:	200126f4 	.word	0x200126f4

080173f8 <_free_r>:
 80173f8:	b538      	push	{r3, r4, r5, lr}
 80173fa:	4605      	mov	r5, r0
 80173fc:	2900      	cmp	r1, #0
 80173fe:	d041      	beq.n	8017484 <_free_r+0x8c>
 8017400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017404:	1f0c      	subs	r4, r1, #4
 8017406:	2b00      	cmp	r3, #0
 8017408:	bfb8      	it	lt
 801740a:	18e4      	addlt	r4, r4, r3
 801740c:	f7ff fb3a 	bl	8016a84 <__malloc_lock>
 8017410:	4a1d      	ldr	r2, [pc, #116]	@ (8017488 <_free_r+0x90>)
 8017412:	6813      	ldr	r3, [r2, #0]
 8017414:	b933      	cbnz	r3, 8017424 <_free_r+0x2c>
 8017416:	6063      	str	r3, [r4, #4]
 8017418:	6014      	str	r4, [r2, #0]
 801741a:	4628      	mov	r0, r5
 801741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017420:	f7ff bb36 	b.w	8016a90 <__malloc_unlock>
 8017424:	42a3      	cmp	r3, r4
 8017426:	d908      	bls.n	801743a <_free_r+0x42>
 8017428:	6820      	ldr	r0, [r4, #0]
 801742a:	1821      	adds	r1, r4, r0
 801742c:	428b      	cmp	r3, r1
 801742e:	bf01      	itttt	eq
 8017430:	6819      	ldreq	r1, [r3, #0]
 8017432:	685b      	ldreq	r3, [r3, #4]
 8017434:	1809      	addeq	r1, r1, r0
 8017436:	6021      	streq	r1, [r4, #0]
 8017438:	e7ed      	b.n	8017416 <_free_r+0x1e>
 801743a:	461a      	mov	r2, r3
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	b10b      	cbz	r3, 8017444 <_free_r+0x4c>
 8017440:	42a3      	cmp	r3, r4
 8017442:	d9fa      	bls.n	801743a <_free_r+0x42>
 8017444:	6811      	ldr	r1, [r2, #0]
 8017446:	1850      	adds	r0, r2, r1
 8017448:	42a0      	cmp	r0, r4
 801744a:	d10b      	bne.n	8017464 <_free_r+0x6c>
 801744c:	6820      	ldr	r0, [r4, #0]
 801744e:	4401      	add	r1, r0
 8017450:	1850      	adds	r0, r2, r1
 8017452:	4283      	cmp	r3, r0
 8017454:	6011      	str	r1, [r2, #0]
 8017456:	d1e0      	bne.n	801741a <_free_r+0x22>
 8017458:	6818      	ldr	r0, [r3, #0]
 801745a:	685b      	ldr	r3, [r3, #4]
 801745c:	6053      	str	r3, [r2, #4]
 801745e:	4408      	add	r0, r1
 8017460:	6010      	str	r0, [r2, #0]
 8017462:	e7da      	b.n	801741a <_free_r+0x22>
 8017464:	d902      	bls.n	801746c <_free_r+0x74>
 8017466:	230c      	movs	r3, #12
 8017468:	602b      	str	r3, [r5, #0]
 801746a:	e7d6      	b.n	801741a <_free_r+0x22>
 801746c:	6820      	ldr	r0, [r4, #0]
 801746e:	1821      	adds	r1, r4, r0
 8017470:	428b      	cmp	r3, r1
 8017472:	bf04      	itt	eq
 8017474:	6819      	ldreq	r1, [r3, #0]
 8017476:	685b      	ldreq	r3, [r3, #4]
 8017478:	6063      	str	r3, [r4, #4]
 801747a:	bf04      	itt	eq
 801747c:	1809      	addeq	r1, r1, r0
 801747e:	6021      	streq	r1, [r4, #0]
 8017480:	6054      	str	r4, [r2, #4]
 8017482:	e7ca      	b.n	801741a <_free_r+0x22>
 8017484:	bd38      	pop	{r3, r4, r5, pc}
 8017486:	bf00      	nop
 8017488:	200125b0 	.word	0x200125b0

0801748c <_malloc_usable_size_r>:
 801748c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017490:	1f18      	subs	r0, r3, #4
 8017492:	2b00      	cmp	r3, #0
 8017494:	bfbc      	itt	lt
 8017496:	580b      	ldrlt	r3, [r1, r0]
 8017498:	18c0      	addlt	r0, r0, r3
 801749a:	4770      	bx	lr

0801749c <__ssputs_r>:
 801749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174a0:	688e      	ldr	r6, [r1, #8]
 80174a2:	461f      	mov	r7, r3
 80174a4:	42be      	cmp	r6, r7
 80174a6:	680b      	ldr	r3, [r1, #0]
 80174a8:	4682      	mov	sl, r0
 80174aa:	460c      	mov	r4, r1
 80174ac:	4690      	mov	r8, r2
 80174ae:	d82d      	bhi.n	801750c <__ssputs_r+0x70>
 80174b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80174b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80174b8:	d026      	beq.n	8017508 <__ssputs_r+0x6c>
 80174ba:	6965      	ldr	r5, [r4, #20]
 80174bc:	6909      	ldr	r1, [r1, #16]
 80174be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80174c2:	eba3 0901 	sub.w	r9, r3, r1
 80174c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80174ca:	1c7b      	adds	r3, r7, #1
 80174cc:	444b      	add	r3, r9
 80174ce:	106d      	asrs	r5, r5, #1
 80174d0:	429d      	cmp	r5, r3
 80174d2:	bf38      	it	cc
 80174d4:	461d      	movcc	r5, r3
 80174d6:	0553      	lsls	r3, r2, #21
 80174d8:	d527      	bpl.n	801752a <__ssputs_r+0x8e>
 80174da:	4629      	mov	r1, r5
 80174dc:	f7ff fa52 	bl	8016984 <_malloc_r>
 80174e0:	4606      	mov	r6, r0
 80174e2:	b360      	cbz	r0, 801753e <__ssputs_r+0xa2>
 80174e4:	6921      	ldr	r1, [r4, #16]
 80174e6:	464a      	mov	r2, r9
 80174e8:	f7ff ff4d 	bl	8017386 <memcpy>
 80174ec:	89a3      	ldrh	r3, [r4, #12]
 80174ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80174f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80174f6:	81a3      	strh	r3, [r4, #12]
 80174f8:	6126      	str	r6, [r4, #16]
 80174fa:	6165      	str	r5, [r4, #20]
 80174fc:	444e      	add	r6, r9
 80174fe:	eba5 0509 	sub.w	r5, r5, r9
 8017502:	6026      	str	r6, [r4, #0]
 8017504:	60a5      	str	r5, [r4, #8]
 8017506:	463e      	mov	r6, r7
 8017508:	42be      	cmp	r6, r7
 801750a:	d900      	bls.n	801750e <__ssputs_r+0x72>
 801750c:	463e      	mov	r6, r7
 801750e:	6820      	ldr	r0, [r4, #0]
 8017510:	4632      	mov	r2, r6
 8017512:	4641      	mov	r1, r8
 8017514:	f000 fd0a 	bl	8017f2c <memmove>
 8017518:	68a3      	ldr	r3, [r4, #8]
 801751a:	1b9b      	subs	r3, r3, r6
 801751c:	60a3      	str	r3, [r4, #8]
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	4433      	add	r3, r6
 8017522:	6023      	str	r3, [r4, #0]
 8017524:	2000      	movs	r0, #0
 8017526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801752a:	462a      	mov	r2, r5
 801752c:	f7ff fb2a 	bl	8016b84 <_realloc_r>
 8017530:	4606      	mov	r6, r0
 8017532:	2800      	cmp	r0, #0
 8017534:	d1e0      	bne.n	80174f8 <__ssputs_r+0x5c>
 8017536:	6921      	ldr	r1, [r4, #16]
 8017538:	4650      	mov	r0, sl
 801753a:	f7ff ff5d 	bl	80173f8 <_free_r>
 801753e:	230c      	movs	r3, #12
 8017540:	f8ca 3000 	str.w	r3, [sl]
 8017544:	89a3      	ldrh	r3, [r4, #12]
 8017546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801754a:	81a3      	strh	r3, [r4, #12]
 801754c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017550:	e7e9      	b.n	8017526 <__ssputs_r+0x8a>
	...

08017554 <_svfiprintf_r>:
 8017554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017558:	4698      	mov	r8, r3
 801755a:	898b      	ldrh	r3, [r1, #12]
 801755c:	061b      	lsls	r3, r3, #24
 801755e:	b09d      	sub	sp, #116	@ 0x74
 8017560:	4607      	mov	r7, r0
 8017562:	460d      	mov	r5, r1
 8017564:	4614      	mov	r4, r2
 8017566:	d510      	bpl.n	801758a <_svfiprintf_r+0x36>
 8017568:	690b      	ldr	r3, [r1, #16]
 801756a:	b973      	cbnz	r3, 801758a <_svfiprintf_r+0x36>
 801756c:	2140      	movs	r1, #64	@ 0x40
 801756e:	f7ff fa09 	bl	8016984 <_malloc_r>
 8017572:	6028      	str	r0, [r5, #0]
 8017574:	6128      	str	r0, [r5, #16]
 8017576:	b930      	cbnz	r0, 8017586 <_svfiprintf_r+0x32>
 8017578:	230c      	movs	r3, #12
 801757a:	603b      	str	r3, [r7, #0]
 801757c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017580:	b01d      	add	sp, #116	@ 0x74
 8017582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017586:	2340      	movs	r3, #64	@ 0x40
 8017588:	616b      	str	r3, [r5, #20]
 801758a:	2300      	movs	r3, #0
 801758c:	9309      	str	r3, [sp, #36]	@ 0x24
 801758e:	2320      	movs	r3, #32
 8017590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017594:	f8cd 800c 	str.w	r8, [sp, #12]
 8017598:	2330      	movs	r3, #48	@ 0x30
 801759a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017738 <_svfiprintf_r+0x1e4>
 801759e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80175a2:	f04f 0901 	mov.w	r9, #1
 80175a6:	4623      	mov	r3, r4
 80175a8:	469a      	mov	sl, r3
 80175aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175ae:	b10a      	cbz	r2, 80175b4 <_svfiprintf_r+0x60>
 80175b0:	2a25      	cmp	r2, #37	@ 0x25
 80175b2:	d1f9      	bne.n	80175a8 <_svfiprintf_r+0x54>
 80175b4:	ebba 0b04 	subs.w	fp, sl, r4
 80175b8:	d00b      	beq.n	80175d2 <_svfiprintf_r+0x7e>
 80175ba:	465b      	mov	r3, fp
 80175bc:	4622      	mov	r2, r4
 80175be:	4629      	mov	r1, r5
 80175c0:	4638      	mov	r0, r7
 80175c2:	f7ff ff6b 	bl	801749c <__ssputs_r>
 80175c6:	3001      	adds	r0, #1
 80175c8:	f000 80a7 	beq.w	801771a <_svfiprintf_r+0x1c6>
 80175cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175ce:	445a      	add	r2, fp
 80175d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80175d2:	f89a 3000 	ldrb.w	r3, [sl]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	f000 809f 	beq.w	801771a <_svfiprintf_r+0x1c6>
 80175dc:	2300      	movs	r3, #0
 80175de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80175e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175e6:	f10a 0a01 	add.w	sl, sl, #1
 80175ea:	9304      	str	r3, [sp, #16]
 80175ec:	9307      	str	r3, [sp, #28]
 80175ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80175f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80175f4:	4654      	mov	r4, sl
 80175f6:	2205      	movs	r2, #5
 80175f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175fc:	484e      	ldr	r0, [pc, #312]	@ (8017738 <_svfiprintf_r+0x1e4>)
 80175fe:	f7e8 fe37 	bl	8000270 <memchr>
 8017602:	9a04      	ldr	r2, [sp, #16]
 8017604:	b9d8      	cbnz	r0, 801763e <_svfiprintf_r+0xea>
 8017606:	06d0      	lsls	r0, r2, #27
 8017608:	bf44      	itt	mi
 801760a:	2320      	movmi	r3, #32
 801760c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017610:	0711      	lsls	r1, r2, #28
 8017612:	bf44      	itt	mi
 8017614:	232b      	movmi	r3, #43	@ 0x2b
 8017616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801761a:	f89a 3000 	ldrb.w	r3, [sl]
 801761e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017620:	d015      	beq.n	801764e <_svfiprintf_r+0xfa>
 8017622:	9a07      	ldr	r2, [sp, #28]
 8017624:	4654      	mov	r4, sl
 8017626:	2000      	movs	r0, #0
 8017628:	f04f 0c0a 	mov.w	ip, #10
 801762c:	4621      	mov	r1, r4
 801762e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017632:	3b30      	subs	r3, #48	@ 0x30
 8017634:	2b09      	cmp	r3, #9
 8017636:	d94b      	bls.n	80176d0 <_svfiprintf_r+0x17c>
 8017638:	b1b0      	cbz	r0, 8017668 <_svfiprintf_r+0x114>
 801763a:	9207      	str	r2, [sp, #28]
 801763c:	e014      	b.n	8017668 <_svfiprintf_r+0x114>
 801763e:	eba0 0308 	sub.w	r3, r0, r8
 8017642:	fa09 f303 	lsl.w	r3, r9, r3
 8017646:	4313      	orrs	r3, r2
 8017648:	9304      	str	r3, [sp, #16]
 801764a:	46a2      	mov	sl, r4
 801764c:	e7d2      	b.n	80175f4 <_svfiprintf_r+0xa0>
 801764e:	9b03      	ldr	r3, [sp, #12]
 8017650:	1d19      	adds	r1, r3, #4
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	9103      	str	r1, [sp, #12]
 8017656:	2b00      	cmp	r3, #0
 8017658:	bfbb      	ittet	lt
 801765a:	425b      	neglt	r3, r3
 801765c:	f042 0202 	orrlt.w	r2, r2, #2
 8017660:	9307      	strge	r3, [sp, #28]
 8017662:	9307      	strlt	r3, [sp, #28]
 8017664:	bfb8      	it	lt
 8017666:	9204      	strlt	r2, [sp, #16]
 8017668:	7823      	ldrb	r3, [r4, #0]
 801766a:	2b2e      	cmp	r3, #46	@ 0x2e
 801766c:	d10a      	bne.n	8017684 <_svfiprintf_r+0x130>
 801766e:	7863      	ldrb	r3, [r4, #1]
 8017670:	2b2a      	cmp	r3, #42	@ 0x2a
 8017672:	d132      	bne.n	80176da <_svfiprintf_r+0x186>
 8017674:	9b03      	ldr	r3, [sp, #12]
 8017676:	1d1a      	adds	r2, r3, #4
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	9203      	str	r2, [sp, #12]
 801767c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017680:	3402      	adds	r4, #2
 8017682:	9305      	str	r3, [sp, #20]
 8017684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017748 <_svfiprintf_r+0x1f4>
 8017688:	7821      	ldrb	r1, [r4, #0]
 801768a:	2203      	movs	r2, #3
 801768c:	4650      	mov	r0, sl
 801768e:	f7e8 fdef 	bl	8000270 <memchr>
 8017692:	b138      	cbz	r0, 80176a4 <_svfiprintf_r+0x150>
 8017694:	9b04      	ldr	r3, [sp, #16]
 8017696:	eba0 000a 	sub.w	r0, r0, sl
 801769a:	2240      	movs	r2, #64	@ 0x40
 801769c:	4082      	lsls	r2, r0
 801769e:	4313      	orrs	r3, r2
 80176a0:	3401      	adds	r4, #1
 80176a2:	9304      	str	r3, [sp, #16]
 80176a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176a8:	4824      	ldr	r0, [pc, #144]	@ (801773c <_svfiprintf_r+0x1e8>)
 80176aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80176ae:	2206      	movs	r2, #6
 80176b0:	f7e8 fdde 	bl	8000270 <memchr>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	d036      	beq.n	8017726 <_svfiprintf_r+0x1d2>
 80176b8:	4b21      	ldr	r3, [pc, #132]	@ (8017740 <_svfiprintf_r+0x1ec>)
 80176ba:	bb1b      	cbnz	r3, 8017704 <_svfiprintf_r+0x1b0>
 80176bc:	9b03      	ldr	r3, [sp, #12]
 80176be:	3307      	adds	r3, #7
 80176c0:	f023 0307 	bic.w	r3, r3, #7
 80176c4:	3308      	adds	r3, #8
 80176c6:	9303      	str	r3, [sp, #12]
 80176c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176ca:	4433      	add	r3, r6
 80176cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80176ce:	e76a      	b.n	80175a6 <_svfiprintf_r+0x52>
 80176d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80176d4:	460c      	mov	r4, r1
 80176d6:	2001      	movs	r0, #1
 80176d8:	e7a8      	b.n	801762c <_svfiprintf_r+0xd8>
 80176da:	2300      	movs	r3, #0
 80176dc:	3401      	adds	r4, #1
 80176de:	9305      	str	r3, [sp, #20]
 80176e0:	4619      	mov	r1, r3
 80176e2:	f04f 0c0a 	mov.w	ip, #10
 80176e6:	4620      	mov	r0, r4
 80176e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176ec:	3a30      	subs	r2, #48	@ 0x30
 80176ee:	2a09      	cmp	r2, #9
 80176f0:	d903      	bls.n	80176fa <_svfiprintf_r+0x1a6>
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d0c6      	beq.n	8017684 <_svfiprintf_r+0x130>
 80176f6:	9105      	str	r1, [sp, #20]
 80176f8:	e7c4      	b.n	8017684 <_svfiprintf_r+0x130>
 80176fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80176fe:	4604      	mov	r4, r0
 8017700:	2301      	movs	r3, #1
 8017702:	e7f0      	b.n	80176e6 <_svfiprintf_r+0x192>
 8017704:	ab03      	add	r3, sp, #12
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	462a      	mov	r2, r5
 801770a:	4b0e      	ldr	r3, [pc, #56]	@ (8017744 <_svfiprintf_r+0x1f0>)
 801770c:	a904      	add	r1, sp, #16
 801770e:	4638      	mov	r0, r7
 8017710:	f3af 8000 	nop.w
 8017714:	1c42      	adds	r2, r0, #1
 8017716:	4606      	mov	r6, r0
 8017718:	d1d6      	bne.n	80176c8 <_svfiprintf_r+0x174>
 801771a:	89ab      	ldrh	r3, [r5, #12]
 801771c:	065b      	lsls	r3, r3, #25
 801771e:	f53f af2d 	bmi.w	801757c <_svfiprintf_r+0x28>
 8017722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017724:	e72c      	b.n	8017580 <_svfiprintf_r+0x2c>
 8017726:	ab03      	add	r3, sp, #12
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	462a      	mov	r2, r5
 801772c:	4b05      	ldr	r3, [pc, #20]	@ (8017744 <_svfiprintf_r+0x1f0>)
 801772e:	a904      	add	r1, sp, #16
 8017730:	4638      	mov	r0, r7
 8017732:	f000 f9bb 	bl	8017aac <_printf_i>
 8017736:	e7ed      	b.n	8017714 <_svfiprintf_r+0x1c0>
 8017738:	08018d98 	.word	0x08018d98
 801773c:	08018da2 	.word	0x08018da2
 8017740:	00000000 	.word	0x00000000
 8017744:	0801749d 	.word	0x0801749d
 8017748:	08018d9e 	.word	0x08018d9e

0801774c <__sfputc_r>:
 801774c:	6893      	ldr	r3, [r2, #8]
 801774e:	3b01      	subs	r3, #1
 8017750:	2b00      	cmp	r3, #0
 8017752:	b410      	push	{r4}
 8017754:	6093      	str	r3, [r2, #8]
 8017756:	da08      	bge.n	801776a <__sfputc_r+0x1e>
 8017758:	6994      	ldr	r4, [r2, #24]
 801775a:	42a3      	cmp	r3, r4
 801775c:	db01      	blt.n	8017762 <__sfputc_r+0x16>
 801775e:	290a      	cmp	r1, #10
 8017760:	d103      	bne.n	801776a <__sfputc_r+0x1e>
 8017762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017766:	f7ff bcb1 	b.w	80170cc <__swbuf_r>
 801776a:	6813      	ldr	r3, [r2, #0]
 801776c:	1c58      	adds	r0, r3, #1
 801776e:	6010      	str	r0, [r2, #0]
 8017770:	7019      	strb	r1, [r3, #0]
 8017772:	4608      	mov	r0, r1
 8017774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017778:	4770      	bx	lr

0801777a <__sfputs_r>:
 801777a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801777c:	4606      	mov	r6, r0
 801777e:	460f      	mov	r7, r1
 8017780:	4614      	mov	r4, r2
 8017782:	18d5      	adds	r5, r2, r3
 8017784:	42ac      	cmp	r4, r5
 8017786:	d101      	bne.n	801778c <__sfputs_r+0x12>
 8017788:	2000      	movs	r0, #0
 801778a:	e007      	b.n	801779c <__sfputs_r+0x22>
 801778c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017790:	463a      	mov	r2, r7
 8017792:	4630      	mov	r0, r6
 8017794:	f7ff ffda 	bl	801774c <__sfputc_r>
 8017798:	1c43      	adds	r3, r0, #1
 801779a:	d1f3      	bne.n	8017784 <__sfputs_r+0xa>
 801779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177a0 <_vfiprintf_r>:
 80177a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a4:	460d      	mov	r5, r1
 80177a6:	b09d      	sub	sp, #116	@ 0x74
 80177a8:	4614      	mov	r4, r2
 80177aa:	4698      	mov	r8, r3
 80177ac:	4606      	mov	r6, r0
 80177ae:	b118      	cbz	r0, 80177b8 <_vfiprintf_r+0x18>
 80177b0:	6a03      	ldr	r3, [r0, #32]
 80177b2:	b90b      	cbnz	r3, 80177b8 <_vfiprintf_r+0x18>
 80177b4:	f7ff fb18 	bl	8016de8 <__sinit>
 80177b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177ba:	07d9      	lsls	r1, r3, #31
 80177bc:	d405      	bmi.n	80177ca <_vfiprintf_r+0x2a>
 80177be:	89ab      	ldrh	r3, [r5, #12]
 80177c0:	059a      	lsls	r2, r3, #22
 80177c2:	d402      	bmi.n	80177ca <_vfiprintf_r+0x2a>
 80177c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177c6:	f7ff fdd4 	bl	8017372 <__retarget_lock_acquire_recursive>
 80177ca:	89ab      	ldrh	r3, [r5, #12]
 80177cc:	071b      	lsls	r3, r3, #28
 80177ce:	d501      	bpl.n	80177d4 <_vfiprintf_r+0x34>
 80177d0:	692b      	ldr	r3, [r5, #16]
 80177d2:	b99b      	cbnz	r3, 80177fc <_vfiprintf_r+0x5c>
 80177d4:	4629      	mov	r1, r5
 80177d6:	4630      	mov	r0, r6
 80177d8:	f7ff fcb6 	bl	8017148 <__swsetup_r>
 80177dc:	b170      	cbz	r0, 80177fc <_vfiprintf_r+0x5c>
 80177de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80177e0:	07dc      	lsls	r4, r3, #31
 80177e2:	d504      	bpl.n	80177ee <_vfiprintf_r+0x4e>
 80177e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177e8:	b01d      	add	sp, #116	@ 0x74
 80177ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ee:	89ab      	ldrh	r3, [r5, #12]
 80177f0:	0598      	lsls	r0, r3, #22
 80177f2:	d4f7      	bmi.n	80177e4 <_vfiprintf_r+0x44>
 80177f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177f6:	f7ff fdbd 	bl	8017374 <__retarget_lock_release_recursive>
 80177fa:	e7f3      	b.n	80177e4 <_vfiprintf_r+0x44>
 80177fc:	2300      	movs	r3, #0
 80177fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8017800:	2320      	movs	r3, #32
 8017802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017806:	f8cd 800c 	str.w	r8, [sp, #12]
 801780a:	2330      	movs	r3, #48	@ 0x30
 801780c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80179bc <_vfiprintf_r+0x21c>
 8017810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017814:	f04f 0901 	mov.w	r9, #1
 8017818:	4623      	mov	r3, r4
 801781a:	469a      	mov	sl, r3
 801781c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017820:	b10a      	cbz	r2, 8017826 <_vfiprintf_r+0x86>
 8017822:	2a25      	cmp	r2, #37	@ 0x25
 8017824:	d1f9      	bne.n	801781a <_vfiprintf_r+0x7a>
 8017826:	ebba 0b04 	subs.w	fp, sl, r4
 801782a:	d00b      	beq.n	8017844 <_vfiprintf_r+0xa4>
 801782c:	465b      	mov	r3, fp
 801782e:	4622      	mov	r2, r4
 8017830:	4629      	mov	r1, r5
 8017832:	4630      	mov	r0, r6
 8017834:	f7ff ffa1 	bl	801777a <__sfputs_r>
 8017838:	3001      	adds	r0, #1
 801783a:	f000 80a7 	beq.w	801798c <_vfiprintf_r+0x1ec>
 801783e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017840:	445a      	add	r2, fp
 8017842:	9209      	str	r2, [sp, #36]	@ 0x24
 8017844:	f89a 3000 	ldrb.w	r3, [sl]
 8017848:	2b00      	cmp	r3, #0
 801784a:	f000 809f 	beq.w	801798c <_vfiprintf_r+0x1ec>
 801784e:	2300      	movs	r3, #0
 8017850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017858:	f10a 0a01 	add.w	sl, sl, #1
 801785c:	9304      	str	r3, [sp, #16]
 801785e:	9307      	str	r3, [sp, #28]
 8017860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017864:	931a      	str	r3, [sp, #104]	@ 0x68
 8017866:	4654      	mov	r4, sl
 8017868:	2205      	movs	r2, #5
 801786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801786e:	4853      	ldr	r0, [pc, #332]	@ (80179bc <_vfiprintf_r+0x21c>)
 8017870:	f7e8 fcfe 	bl	8000270 <memchr>
 8017874:	9a04      	ldr	r2, [sp, #16]
 8017876:	b9d8      	cbnz	r0, 80178b0 <_vfiprintf_r+0x110>
 8017878:	06d1      	lsls	r1, r2, #27
 801787a:	bf44      	itt	mi
 801787c:	2320      	movmi	r3, #32
 801787e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017882:	0713      	lsls	r3, r2, #28
 8017884:	bf44      	itt	mi
 8017886:	232b      	movmi	r3, #43	@ 0x2b
 8017888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801788c:	f89a 3000 	ldrb.w	r3, [sl]
 8017890:	2b2a      	cmp	r3, #42	@ 0x2a
 8017892:	d015      	beq.n	80178c0 <_vfiprintf_r+0x120>
 8017894:	9a07      	ldr	r2, [sp, #28]
 8017896:	4654      	mov	r4, sl
 8017898:	2000      	movs	r0, #0
 801789a:	f04f 0c0a 	mov.w	ip, #10
 801789e:	4621      	mov	r1, r4
 80178a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178a4:	3b30      	subs	r3, #48	@ 0x30
 80178a6:	2b09      	cmp	r3, #9
 80178a8:	d94b      	bls.n	8017942 <_vfiprintf_r+0x1a2>
 80178aa:	b1b0      	cbz	r0, 80178da <_vfiprintf_r+0x13a>
 80178ac:	9207      	str	r2, [sp, #28]
 80178ae:	e014      	b.n	80178da <_vfiprintf_r+0x13a>
 80178b0:	eba0 0308 	sub.w	r3, r0, r8
 80178b4:	fa09 f303 	lsl.w	r3, r9, r3
 80178b8:	4313      	orrs	r3, r2
 80178ba:	9304      	str	r3, [sp, #16]
 80178bc:	46a2      	mov	sl, r4
 80178be:	e7d2      	b.n	8017866 <_vfiprintf_r+0xc6>
 80178c0:	9b03      	ldr	r3, [sp, #12]
 80178c2:	1d19      	adds	r1, r3, #4
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	9103      	str	r1, [sp, #12]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	bfbb      	ittet	lt
 80178cc:	425b      	neglt	r3, r3
 80178ce:	f042 0202 	orrlt.w	r2, r2, #2
 80178d2:	9307      	strge	r3, [sp, #28]
 80178d4:	9307      	strlt	r3, [sp, #28]
 80178d6:	bfb8      	it	lt
 80178d8:	9204      	strlt	r2, [sp, #16]
 80178da:	7823      	ldrb	r3, [r4, #0]
 80178dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80178de:	d10a      	bne.n	80178f6 <_vfiprintf_r+0x156>
 80178e0:	7863      	ldrb	r3, [r4, #1]
 80178e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80178e4:	d132      	bne.n	801794c <_vfiprintf_r+0x1ac>
 80178e6:	9b03      	ldr	r3, [sp, #12]
 80178e8:	1d1a      	adds	r2, r3, #4
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	9203      	str	r2, [sp, #12]
 80178ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80178f2:	3402      	adds	r4, #2
 80178f4:	9305      	str	r3, [sp, #20]
 80178f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80179cc <_vfiprintf_r+0x22c>
 80178fa:	7821      	ldrb	r1, [r4, #0]
 80178fc:	2203      	movs	r2, #3
 80178fe:	4650      	mov	r0, sl
 8017900:	f7e8 fcb6 	bl	8000270 <memchr>
 8017904:	b138      	cbz	r0, 8017916 <_vfiprintf_r+0x176>
 8017906:	9b04      	ldr	r3, [sp, #16]
 8017908:	eba0 000a 	sub.w	r0, r0, sl
 801790c:	2240      	movs	r2, #64	@ 0x40
 801790e:	4082      	lsls	r2, r0
 8017910:	4313      	orrs	r3, r2
 8017912:	3401      	adds	r4, #1
 8017914:	9304      	str	r3, [sp, #16]
 8017916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801791a:	4829      	ldr	r0, [pc, #164]	@ (80179c0 <_vfiprintf_r+0x220>)
 801791c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017920:	2206      	movs	r2, #6
 8017922:	f7e8 fca5 	bl	8000270 <memchr>
 8017926:	2800      	cmp	r0, #0
 8017928:	d03f      	beq.n	80179aa <_vfiprintf_r+0x20a>
 801792a:	4b26      	ldr	r3, [pc, #152]	@ (80179c4 <_vfiprintf_r+0x224>)
 801792c:	bb1b      	cbnz	r3, 8017976 <_vfiprintf_r+0x1d6>
 801792e:	9b03      	ldr	r3, [sp, #12]
 8017930:	3307      	adds	r3, #7
 8017932:	f023 0307 	bic.w	r3, r3, #7
 8017936:	3308      	adds	r3, #8
 8017938:	9303      	str	r3, [sp, #12]
 801793a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801793c:	443b      	add	r3, r7
 801793e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017940:	e76a      	b.n	8017818 <_vfiprintf_r+0x78>
 8017942:	fb0c 3202 	mla	r2, ip, r2, r3
 8017946:	460c      	mov	r4, r1
 8017948:	2001      	movs	r0, #1
 801794a:	e7a8      	b.n	801789e <_vfiprintf_r+0xfe>
 801794c:	2300      	movs	r3, #0
 801794e:	3401      	adds	r4, #1
 8017950:	9305      	str	r3, [sp, #20]
 8017952:	4619      	mov	r1, r3
 8017954:	f04f 0c0a 	mov.w	ip, #10
 8017958:	4620      	mov	r0, r4
 801795a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801795e:	3a30      	subs	r2, #48	@ 0x30
 8017960:	2a09      	cmp	r2, #9
 8017962:	d903      	bls.n	801796c <_vfiprintf_r+0x1cc>
 8017964:	2b00      	cmp	r3, #0
 8017966:	d0c6      	beq.n	80178f6 <_vfiprintf_r+0x156>
 8017968:	9105      	str	r1, [sp, #20]
 801796a:	e7c4      	b.n	80178f6 <_vfiprintf_r+0x156>
 801796c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017970:	4604      	mov	r4, r0
 8017972:	2301      	movs	r3, #1
 8017974:	e7f0      	b.n	8017958 <_vfiprintf_r+0x1b8>
 8017976:	ab03      	add	r3, sp, #12
 8017978:	9300      	str	r3, [sp, #0]
 801797a:	462a      	mov	r2, r5
 801797c:	4b12      	ldr	r3, [pc, #72]	@ (80179c8 <_vfiprintf_r+0x228>)
 801797e:	a904      	add	r1, sp, #16
 8017980:	4630      	mov	r0, r6
 8017982:	f3af 8000 	nop.w
 8017986:	4607      	mov	r7, r0
 8017988:	1c78      	adds	r0, r7, #1
 801798a:	d1d6      	bne.n	801793a <_vfiprintf_r+0x19a>
 801798c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801798e:	07d9      	lsls	r1, r3, #31
 8017990:	d405      	bmi.n	801799e <_vfiprintf_r+0x1fe>
 8017992:	89ab      	ldrh	r3, [r5, #12]
 8017994:	059a      	lsls	r2, r3, #22
 8017996:	d402      	bmi.n	801799e <_vfiprintf_r+0x1fe>
 8017998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801799a:	f7ff fceb 	bl	8017374 <__retarget_lock_release_recursive>
 801799e:	89ab      	ldrh	r3, [r5, #12]
 80179a0:	065b      	lsls	r3, r3, #25
 80179a2:	f53f af1f 	bmi.w	80177e4 <_vfiprintf_r+0x44>
 80179a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179a8:	e71e      	b.n	80177e8 <_vfiprintf_r+0x48>
 80179aa:	ab03      	add	r3, sp, #12
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	462a      	mov	r2, r5
 80179b0:	4b05      	ldr	r3, [pc, #20]	@ (80179c8 <_vfiprintf_r+0x228>)
 80179b2:	a904      	add	r1, sp, #16
 80179b4:	4630      	mov	r0, r6
 80179b6:	f000 f879 	bl	8017aac <_printf_i>
 80179ba:	e7e4      	b.n	8017986 <_vfiprintf_r+0x1e6>
 80179bc:	08018d98 	.word	0x08018d98
 80179c0:	08018da2 	.word	0x08018da2
 80179c4:	00000000 	.word	0x00000000
 80179c8:	0801777b 	.word	0x0801777b
 80179cc:	08018d9e 	.word	0x08018d9e

080179d0 <_printf_common>:
 80179d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d4:	4616      	mov	r6, r2
 80179d6:	4698      	mov	r8, r3
 80179d8:	688a      	ldr	r2, [r1, #8]
 80179da:	690b      	ldr	r3, [r1, #16]
 80179dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80179e0:	4293      	cmp	r3, r2
 80179e2:	bfb8      	it	lt
 80179e4:	4613      	movlt	r3, r2
 80179e6:	6033      	str	r3, [r6, #0]
 80179e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80179ec:	4607      	mov	r7, r0
 80179ee:	460c      	mov	r4, r1
 80179f0:	b10a      	cbz	r2, 80179f6 <_printf_common+0x26>
 80179f2:	3301      	adds	r3, #1
 80179f4:	6033      	str	r3, [r6, #0]
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	0699      	lsls	r1, r3, #26
 80179fa:	bf42      	ittt	mi
 80179fc:	6833      	ldrmi	r3, [r6, #0]
 80179fe:	3302      	addmi	r3, #2
 8017a00:	6033      	strmi	r3, [r6, #0]
 8017a02:	6825      	ldr	r5, [r4, #0]
 8017a04:	f015 0506 	ands.w	r5, r5, #6
 8017a08:	d106      	bne.n	8017a18 <_printf_common+0x48>
 8017a0a:	f104 0a19 	add.w	sl, r4, #25
 8017a0e:	68e3      	ldr	r3, [r4, #12]
 8017a10:	6832      	ldr	r2, [r6, #0]
 8017a12:	1a9b      	subs	r3, r3, r2
 8017a14:	42ab      	cmp	r3, r5
 8017a16:	dc26      	bgt.n	8017a66 <_printf_common+0x96>
 8017a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017a1c:	6822      	ldr	r2, [r4, #0]
 8017a1e:	3b00      	subs	r3, #0
 8017a20:	bf18      	it	ne
 8017a22:	2301      	movne	r3, #1
 8017a24:	0692      	lsls	r2, r2, #26
 8017a26:	d42b      	bmi.n	8017a80 <_printf_common+0xb0>
 8017a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017a2c:	4641      	mov	r1, r8
 8017a2e:	4638      	mov	r0, r7
 8017a30:	47c8      	blx	r9
 8017a32:	3001      	adds	r0, #1
 8017a34:	d01e      	beq.n	8017a74 <_printf_common+0xa4>
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	6922      	ldr	r2, [r4, #16]
 8017a3a:	f003 0306 	and.w	r3, r3, #6
 8017a3e:	2b04      	cmp	r3, #4
 8017a40:	bf02      	ittt	eq
 8017a42:	68e5      	ldreq	r5, [r4, #12]
 8017a44:	6833      	ldreq	r3, [r6, #0]
 8017a46:	1aed      	subeq	r5, r5, r3
 8017a48:	68a3      	ldr	r3, [r4, #8]
 8017a4a:	bf0c      	ite	eq
 8017a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a50:	2500      	movne	r5, #0
 8017a52:	4293      	cmp	r3, r2
 8017a54:	bfc4      	itt	gt
 8017a56:	1a9b      	subgt	r3, r3, r2
 8017a58:	18ed      	addgt	r5, r5, r3
 8017a5a:	2600      	movs	r6, #0
 8017a5c:	341a      	adds	r4, #26
 8017a5e:	42b5      	cmp	r5, r6
 8017a60:	d11a      	bne.n	8017a98 <_printf_common+0xc8>
 8017a62:	2000      	movs	r0, #0
 8017a64:	e008      	b.n	8017a78 <_printf_common+0xa8>
 8017a66:	2301      	movs	r3, #1
 8017a68:	4652      	mov	r2, sl
 8017a6a:	4641      	mov	r1, r8
 8017a6c:	4638      	mov	r0, r7
 8017a6e:	47c8      	blx	r9
 8017a70:	3001      	adds	r0, #1
 8017a72:	d103      	bne.n	8017a7c <_printf_common+0xac>
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7c:	3501      	adds	r5, #1
 8017a7e:	e7c6      	b.n	8017a0e <_printf_common+0x3e>
 8017a80:	18e1      	adds	r1, r4, r3
 8017a82:	1c5a      	adds	r2, r3, #1
 8017a84:	2030      	movs	r0, #48	@ 0x30
 8017a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a8a:	4422      	add	r2, r4
 8017a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017a94:	3302      	adds	r3, #2
 8017a96:	e7c7      	b.n	8017a28 <_printf_common+0x58>
 8017a98:	2301      	movs	r3, #1
 8017a9a:	4622      	mov	r2, r4
 8017a9c:	4641      	mov	r1, r8
 8017a9e:	4638      	mov	r0, r7
 8017aa0:	47c8      	blx	r9
 8017aa2:	3001      	adds	r0, #1
 8017aa4:	d0e6      	beq.n	8017a74 <_printf_common+0xa4>
 8017aa6:	3601      	adds	r6, #1
 8017aa8:	e7d9      	b.n	8017a5e <_printf_common+0x8e>
	...

08017aac <_printf_i>:
 8017aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab0:	7e0f      	ldrb	r7, [r1, #24]
 8017ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017ab4:	2f78      	cmp	r7, #120	@ 0x78
 8017ab6:	4691      	mov	r9, r2
 8017ab8:	4680      	mov	r8, r0
 8017aba:	460c      	mov	r4, r1
 8017abc:	469a      	mov	sl, r3
 8017abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ac2:	d807      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ac4:	2f62      	cmp	r7, #98	@ 0x62
 8017ac6:	d80a      	bhi.n	8017ade <_printf_i+0x32>
 8017ac8:	2f00      	cmp	r7, #0
 8017aca:	f000 80d2 	beq.w	8017c72 <_printf_i+0x1c6>
 8017ace:	2f58      	cmp	r7, #88	@ 0x58
 8017ad0:	f000 80b9 	beq.w	8017c46 <_printf_i+0x19a>
 8017ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017adc:	e03a      	b.n	8017b54 <_printf_i+0xa8>
 8017ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017ae2:	2b15      	cmp	r3, #21
 8017ae4:	d8f6      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8017aec <_printf_i+0x40>)
 8017ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017aec:	08017b45 	.word	0x08017b45
 8017af0:	08017b59 	.word	0x08017b59
 8017af4:	08017ad5 	.word	0x08017ad5
 8017af8:	08017ad5 	.word	0x08017ad5
 8017afc:	08017ad5 	.word	0x08017ad5
 8017b00:	08017ad5 	.word	0x08017ad5
 8017b04:	08017b59 	.word	0x08017b59
 8017b08:	08017ad5 	.word	0x08017ad5
 8017b0c:	08017ad5 	.word	0x08017ad5
 8017b10:	08017ad5 	.word	0x08017ad5
 8017b14:	08017ad5 	.word	0x08017ad5
 8017b18:	08017c59 	.word	0x08017c59
 8017b1c:	08017b83 	.word	0x08017b83
 8017b20:	08017c13 	.word	0x08017c13
 8017b24:	08017ad5 	.word	0x08017ad5
 8017b28:	08017ad5 	.word	0x08017ad5
 8017b2c:	08017c7b 	.word	0x08017c7b
 8017b30:	08017ad5 	.word	0x08017ad5
 8017b34:	08017b83 	.word	0x08017b83
 8017b38:	08017ad5 	.word	0x08017ad5
 8017b3c:	08017ad5 	.word	0x08017ad5
 8017b40:	08017c1b 	.word	0x08017c1b
 8017b44:	6833      	ldr	r3, [r6, #0]
 8017b46:	1d1a      	adds	r2, r3, #4
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	6032      	str	r2, [r6, #0]
 8017b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017b54:	2301      	movs	r3, #1
 8017b56:	e09d      	b.n	8017c94 <_printf_i+0x1e8>
 8017b58:	6833      	ldr	r3, [r6, #0]
 8017b5a:	6820      	ldr	r0, [r4, #0]
 8017b5c:	1d19      	adds	r1, r3, #4
 8017b5e:	6031      	str	r1, [r6, #0]
 8017b60:	0606      	lsls	r6, r0, #24
 8017b62:	d501      	bpl.n	8017b68 <_printf_i+0xbc>
 8017b64:	681d      	ldr	r5, [r3, #0]
 8017b66:	e003      	b.n	8017b70 <_printf_i+0xc4>
 8017b68:	0645      	lsls	r5, r0, #25
 8017b6a:	d5fb      	bpl.n	8017b64 <_printf_i+0xb8>
 8017b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017b70:	2d00      	cmp	r5, #0
 8017b72:	da03      	bge.n	8017b7c <_printf_i+0xd0>
 8017b74:	232d      	movs	r3, #45	@ 0x2d
 8017b76:	426d      	negs	r5, r5
 8017b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b7c:	4859      	ldr	r0, [pc, #356]	@ (8017ce4 <_printf_i+0x238>)
 8017b7e:	230a      	movs	r3, #10
 8017b80:	e011      	b.n	8017ba6 <_printf_i+0xfa>
 8017b82:	6821      	ldr	r1, [r4, #0]
 8017b84:	6833      	ldr	r3, [r6, #0]
 8017b86:	0608      	lsls	r0, r1, #24
 8017b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8017b8c:	d402      	bmi.n	8017b94 <_printf_i+0xe8>
 8017b8e:	0649      	lsls	r1, r1, #25
 8017b90:	bf48      	it	mi
 8017b92:	b2ad      	uxthmi	r5, r5
 8017b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8017b96:	4853      	ldr	r0, [pc, #332]	@ (8017ce4 <_printf_i+0x238>)
 8017b98:	6033      	str	r3, [r6, #0]
 8017b9a:	bf14      	ite	ne
 8017b9c:	230a      	movne	r3, #10
 8017b9e:	2308      	moveq	r3, #8
 8017ba0:	2100      	movs	r1, #0
 8017ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017ba6:	6866      	ldr	r6, [r4, #4]
 8017ba8:	60a6      	str	r6, [r4, #8]
 8017baa:	2e00      	cmp	r6, #0
 8017bac:	bfa2      	ittt	ge
 8017bae:	6821      	ldrge	r1, [r4, #0]
 8017bb0:	f021 0104 	bicge.w	r1, r1, #4
 8017bb4:	6021      	strge	r1, [r4, #0]
 8017bb6:	b90d      	cbnz	r5, 8017bbc <_printf_i+0x110>
 8017bb8:	2e00      	cmp	r6, #0
 8017bba:	d04b      	beq.n	8017c54 <_printf_i+0x1a8>
 8017bbc:	4616      	mov	r6, r2
 8017bbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8017bc2:	fb03 5711 	mls	r7, r3, r1, r5
 8017bc6:	5dc7      	ldrb	r7, [r0, r7]
 8017bc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017bcc:	462f      	mov	r7, r5
 8017bce:	42bb      	cmp	r3, r7
 8017bd0:	460d      	mov	r5, r1
 8017bd2:	d9f4      	bls.n	8017bbe <_printf_i+0x112>
 8017bd4:	2b08      	cmp	r3, #8
 8017bd6:	d10b      	bne.n	8017bf0 <_printf_i+0x144>
 8017bd8:	6823      	ldr	r3, [r4, #0]
 8017bda:	07df      	lsls	r7, r3, #31
 8017bdc:	d508      	bpl.n	8017bf0 <_printf_i+0x144>
 8017bde:	6923      	ldr	r3, [r4, #16]
 8017be0:	6861      	ldr	r1, [r4, #4]
 8017be2:	4299      	cmp	r1, r3
 8017be4:	bfde      	ittt	le
 8017be6:	2330      	movle	r3, #48	@ 0x30
 8017be8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017bec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017bf0:	1b92      	subs	r2, r2, r6
 8017bf2:	6122      	str	r2, [r4, #16]
 8017bf4:	f8cd a000 	str.w	sl, [sp]
 8017bf8:	464b      	mov	r3, r9
 8017bfa:	aa03      	add	r2, sp, #12
 8017bfc:	4621      	mov	r1, r4
 8017bfe:	4640      	mov	r0, r8
 8017c00:	f7ff fee6 	bl	80179d0 <_printf_common>
 8017c04:	3001      	adds	r0, #1
 8017c06:	d14a      	bne.n	8017c9e <_printf_i+0x1f2>
 8017c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c0c:	b004      	add	sp, #16
 8017c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c12:	6823      	ldr	r3, [r4, #0]
 8017c14:	f043 0320 	orr.w	r3, r3, #32
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	4833      	ldr	r0, [pc, #204]	@ (8017ce8 <_printf_i+0x23c>)
 8017c1c:	2778      	movs	r7, #120	@ 0x78
 8017c1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017c22:	6823      	ldr	r3, [r4, #0]
 8017c24:	6831      	ldr	r1, [r6, #0]
 8017c26:	061f      	lsls	r7, r3, #24
 8017c28:	f851 5b04 	ldr.w	r5, [r1], #4
 8017c2c:	d402      	bmi.n	8017c34 <_printf_i+0x188>
 8017c2e:	065f      	lsls	r7, r3, #25
 8017c30:	bf48      	it	mi
 8017c32:	b2ad      	uxthmi	r5, r5
 8017c34:	6031      	str	r1, [r6, #0]
 8017c36:	07d9      	lsls	r1, r3, #31
 8017c38:	bf44      	itt	mi
 8017c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8017c3e:	6023      	strmi	r3, [r4, #0]
 8017c40:	b11d      	cbz	r5, 8017c4a <_printf_i+0x19e>
 8017c42:	2310      	movs	r3, #16
 8017c44:	e7ac      	b.n	8017ba0 <_printf_i+0xf4>
 8017c46:	4827      	ldr	r0, [pc, #156]	@ (8017ce4 <_printf_i+0x238>)
 8017c48:	e7e9      	b.n	8017c1e <_printf_i+0x172>
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	f023 0320 	bic.w	r3, r3, #32
 8017c50:	6023      	str	r3, [r4, #0]
 8017c52:	e7f6      	b.n	8017c42 <_printf_i+0x196>
 8017c54:	4616      	mov	r6, r2
 8017c56:	e7bd      	b.n	8017bd4 <_printf_i+0x128>
 8017c58:	6833      	ldr	r3, [r6, #0]
 8017c5a:	6825      	ldr	r5, [r4, #0]
 8017c5c:	6961      	ldr	r1, [r4, #20]
 8017c5e:	1d18      	adds	r0, r3, #4
 8017c60:	6030      	str	r0, [r6, #0]
 8017c62:	062e      	lsls	r6, r5, #24
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	d501      	bpl.n	8017c6c <_printf_i+0x1c0>
 8017c68:	6019      	str	r1, [r3, #0]
 8017c6a:	e002      	b.n	8017c72 <_printf_i+0x1c6>
 8017c6c:	0668      	lsls	r0, r5, #25
 8017c6e:	d5fb      	bpl.n	8017c68 <_printf_i+0x1bc>
 8017c70:	8019      	strh	r1, [r3, #0]
 8017c72:	2300      	movs	r3, #0
 8017c74:	6123      	str	r3, [r4, #16]
 8017c76:	4616      	mov	r6, r2
 8017c78:	e7bc      	b.n	8017bf4 <_printf_i+0x148>
 8017c7a:	6833      	ldr	r3, [r6, #0]
 8017c7c:	1d1a      	adds	r2, r3, #4
 8017c7e:	6032      	str	r2, [r6, #0]
 8017c80:	681e      	ldr	r6, [r3, #0]
 8017c82:	6862      	ldr	r2, [r4, #4]
 8017c84:	2100      	movs	r1, #0
 8017c86:	4630      	mov	r0, r6
 8017c88:	f7e8 faf2 	bl	8000270 <memchr>
 8017c8c:	b108      	cbz	r0, 8017c92 <_printf_i+0x1e6>
 8017c8e:	1b80      	subs	r0, r0, r6
 8017c90:	6060      	str	r0, [r4, #4]
 8017c92:	6863      	ldr	r3, [r4, #4]
 8017c94:	6123      	str	r3, [r4, #16]
 8017c96:	2300      	movs	r3, #0
 8017c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c9c:	e7aa      	b.n	8017bf4 <_printf_i+0x148>
 8017c9e:	6923      	ldr	r3, [r4, #16]
 8017ca0:	4632      	mov	r2, r6
 8017ca2:	4649      	mov	r1, r9
 8017ca4:	4640      	mov	r0, r8
 8017ca6:	47d0      	blx	sl
 8017ca8:	3001      	adds	r0, #1
 8017caa:	d0ad      	beq.n	8017c08 <_printf_i+0x15c>
 8017cac:	6823      	ldr	r3, [r4, #0]
 8017cae:	079b      	lsls	r3, r3, #30
 8017cb0:	d413      	bmi.n	8017cda <_printf_i+0x22e>
 8017cb2:	68e0      	ldr	r0, [r4, #12]
 8017cb4:	9b03      	ldr	r3, [sp, #12]
 8017cb6:	4298      	cmp	r0, r3
 8017cb8:	bfb8      	it	lt
 8017cba:	4618      	movlt	r0, r3
 8017cbc:	e7a6      	b.n	8017c0c <_printf_i+0x160>
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	4632      	mov	r2, r6
 8017cc2:	4649      	mov	r1, r9
 8017cc4:	4640      	mov	r0, r8
 8017cc6:	47d0      	blx	sl
 8017cc8:	3001      	adds	r0, #1
 8017cca:	d09d      	beq.n	8017c08 <_printf_i+0x15c>
 8017ccc:	3501      	adds	r5, #1
 8017cce:	68e3      	ldr	r3, [r4, #12]
 8017cd0:	9903      	ldr	r1, [sp, #12]
 8017cd2:	1a5b      	subs	r3, r3, r1
 8017cd4:	42ab      	cmp	r3, r5
 8017cd6:	dcf2      	bgt.n	8017cbe <_printf_i+0x212>
 8017cd8:	e7eb      	b.n	8017cb2 <_printf_i+0x206>
 8017cda:	2500      	movs	r5, #0
 8017cdc:	f104 0619 	add.w	r6, r4, #25
 8017ce0:	e7f5      	b.n	8017cce <_printf_i+0x222>
 8017ce2:	bf00      	nop
 8017ce4:	08018da9 	.word	0x08018da9
 8017ce8:	08018dba 	.word	0x08018dba

08017cec <__sflush_r>:
 8017cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf4:	0716      	lsls	r6, r2, #28
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	460c      	mov	r4, r1
 8017cfa:	d454      	bmi.n	8017da6 <__sflush_r+0xba>
 8017cfc:	684b      	ldr	r3, [r1, #4]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	dc02      	bgt.n	8017d08 <__sflush_r+0x1c>
 8017d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	dd48      	ble.n	8017d9a <__sflush_r+0xae>
 8017d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d0a:	2e00      	cmp	r6, #0
 8017d0c:	d045      	beq.n	8017d9a <__sflush_r+0xae>
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017d14:	682f      	ldr	r7, [r5, #0]
 8017d16:	6a21      	ldr	r1, [r4, #32]
 8017d18:	602b      	str	r3, [r5, #0]
 8017d1a:	d030      	beq.n	8017d7e <__sflush_r+0x92>
 8017d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017d1e:	89a3      	ldrh	r3, [r4, #12]
 8017d20:	0759      	lsls	r1, r3, #29
 8017d22:	d505      	bpl.n	8017d30 <__sflush_r+0x44>
 8017d24:	6863      	ldr	r3, [r4, #4]
 8017d26:	1ad2      	subs	r2, r2, r3
 8017d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017d2a:	b10b      	cbz	r3, 8017d30 <__sflush_r+0x44>
 8017d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017d2e:	1ad2      	subs	r2, r2, r3
 8017d30:	2300      	movs	r3, #0
 8017d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017d34:	6a21      	ldr	r1, [r4, #32]
 8017d36:	4628      	mov	r0, r5
 8017d38:	47b0      	blx	r6
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	89a3      	ldrh	r3, [r4, #12]
 8017d3e:	d106      	bne.n	8017d4e <__sflush_r+0x62>
 8017d40:	6829      	ldr	r1, [r5, #0]
 8017d42:	291d      	cmp	r1, #29
 8017d44:	d82b      	bhi.n	8017d9e <__sflush_r+0xb2>
 8017d46:	4a2a      	ldr	r2, [pc, #168]	@ (8017df0 <__sflush_r+0x104>)
 8017d48:	410a      	asrs	r2, r1
 8017d4a:	07d6      	lsls	r6, r2, #31
 8017d4c:	d427      	bmi.n	8017d9e <__sflush_r+0xb2>
 8017d4e:	2200      	movs	r2, #0
 8017d50:	6062      	str	r2, [r4, #4]
 8017d52:	04d9      	lsls	r1, r3, #19
 8017d54:	6922      	ldr	r2, [r4, #16]
 8017d56:	6022      	str	r2, [r4, #0]
 8017d58:	d504      	bpl.n	8017d64 <__sflush_r+0x78>
 8017d5a:	1c42      	adds	r2, r0, #1
 8017d5c:	d101      	bne.n	8017d62 <__sflush_r+0x76>
 8017d5e:	682b      	ldr	r3, [r5, #0]
 8017d60:	b903      	cbnz	r3, 8017d64 <__sflush_r+0x78>
 8017d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8017d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d66:	602f      	str	r7, [r5, #0]
 8017d68:	b1b9      	cbz	r1, 8017d9a <__sflush_r+0xae>
 8017d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d6e:	4299      	cmp	r1, r3
 8017d70:	d002      	beq.n	8017d78 <__sflush_r+0x8c>
 8017d72:	4628      	mov	r0, r5
 8017d74:	f7ff fb40 	bl	80173f8 <_free_r>
 8017d78:	2300      	movs	r3, #0
 8017d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d7c:	e00d      	b.n	8017d9a <__sflush_r+0xae>
 8017d7e:	2301      	movs	r3, #1
 8017d80:	4628      	mov	r0, r5
 8017d82:	47b0      	blx	r6
 8017d84:	4602      	mov	r2, r0
 8017d86:	1c50      	adds	r0, r2, #1
 8017d88:	d1c9      	bne.n	8017d1e <__sflush_r+0x32>
 8017d8a:	682b      	ldr	r3, [r5, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d0c6      	beq.n	8017d1e <__sflush_r+0x32>
 8017d90:	2b1d      	cmp	r3, #29
 8017d92:	d001      	beq.n	8017d98 <__sflush_r+0xac>
 8017d94:	2b16      	cmp	r3, #22
 8017d96:	d11e      	bne.n	8017dd6 <__sflush_r+0xea>
 8017d98:	602f      	str	r7, [r5, #0]
 8017d9a:	2000      	movs	r0, #0
 8017d9c:	e022      	b.n	8017de4 <__sflush_r+0xf8>
 8017d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017da2:	b21b      	sxth	r3, r3
 8017da4:	e01b      	b.n	8017dde <__sflush_r+0xf2>
 8017da6:	690f      	ldr	r7, [r1, #16]
 8017da8:	2f00      	cmp	r7, #0
 8017daa:	d0f6      	beq.n	8017d9a <__sflush_r+0xae>
 8017dac:	0793      	lsls	r3, r2, #30
 8017dae:	680e      	ldr	r6, [r1, #0]
 8017db0:	bf08      	it	eq
 8017db2:	694b      	ldreq	r3, [r1, #20]
 8017db4:	600f      	str	r7, [r1, #0]
 8017db6:	bf18      	it	ne
 8017db8:	2300      	movne	r3, #0
 8017dba:	eba6 0807 	sub.w	r8, r6, r7
 8017dbe:	608b      	str	r3, [r1, #8]
 8017dc0:	f1b8 0f00 	cmp.w	r8, #0
 8017dc4:	dde9      	ble.n	8017d9a <__sflush_r+0xae>
 8017dc6:	6a21      	ldr	r1, [r4, #32]
 8017dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017dca:	4643      	mov	r3, r8
 8017dcc:	463a      	mov	r2, r7
 8017dce:	4628      	mov	r0, r5
 8017dd0:	47b0      	blx	r6
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	dc08      	bgt.n	8017de8 <__sflush_r+0xfc>
 8017dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dde:	81a3      	strh	r3, [r4, #12]
 8017de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017de8:	4407      	add	r7, r0
 8017dea:	eba8 0800 	sub.w	r8, r8, r0
 8017dee:	e7e7      	b.n	8017dc0 <__sflush_r+0xd4>
 8017df0:	dfbffffe 	.word	0xdfbffffe

08017df4 <_fflush_r>:
 8017df4:	b538      	push	{r3, r4, r5, lr}
 8017df6:	690b      	ldr	r3, [r1, #16]
 8017df8:	4605      	mov	r5, r0
 8017dfa:	460c      	mov	r4, r1
 8017dfc:	b913      	cbnz	r3, 8017e04 <_fflush_r+0x10>
 8017dfe:	2500      	movs	r5, #0
 8017e00:	4628      	mov	r0, r5
 8017e02:	bd38      	pop	{r3, r4, r5, pc}
 8017e04:	b118      	cbz	r0, 8017e0e <_fflush_r+0x1a>
 8017e06:	6a03      	ldr	r3, [r0, #32]
 8017e08:	b90b      	cbnz	r3, 8017e0e <_fflush_r+0x1a>
 8017e0a:	f7fe ffed 	bl	8016de8 <__sinit>
 8017e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d0f3      	beq.n	8017dfe <_fflush_r+0xa>
 8017e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017e18:	07d0      	lsls	r0, r2, #31
 8017e1a:	d404      	bmi.n	8017e26 <_fflush_r+0x32>
 8017e1c:	0599      	lsls	r1, r3, #22
 8017e1e:	d402      	bmi.n	8017e26 <_fflush_r+0x32>
 8017e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e22:	f7ff faa6 	bl	8017372 <__retarget_lock_acquire_recursive>
 8017e26:	4628      	mov	r0, r5
 8017e28:	4621      	mov	r1, r4
 8017e2a:	f7ff ff5f 	bl	8017cec <__sflush_r>
 8017e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017e30:	07da      	lsls	r2, r3, #31
 8017e32:	4605      	mov	r5, r0
 8017e34:	d4e4      	bmi.n	8017e00 <_fflush_r+0xc>
 8017e36:	89a3      	ldrh	r3, [r4, #12]
 8017e38:	059b      	lsls	r3, r3, #22
 8017e3a:	d4e1      	bmi.n	8017e00 <_fflush_r+0xc>
 8017e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e3e:	f7ff fa99 	bl	8017374 <__retarget_lock_release_recursive>
 8017e42:	e7dd      	b.n	8017e00 <_fflush_r+0xc>

08017e44 <fiprintf>:
 8017e44:	b40e      	push	{r1, r2, r3}
 8017e46:	b503      	push	{r0, r1, lr}
 8017e48:	4601      	mov	r1, r0
 8017e4a:	ab03      	add	r3, sp, #12
 8017e4c:	4805      	ldr	r0, [pc, #20]	@ (8017e64 <fiprintf+0x20>)
 8017e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e52:	6800      	ldr	r0, [r0, #0]
 8017e54:	9301      	str	r3, [sp, #4]
 8017e56:	f7ff fca3 	bl	80177a0 <_vfiprintf_r>
 8017e5a:	b002      	add	sp, #8
 8017e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e60:	b003      	add	sp, #12
 8017e62:	4770      	bx	lr
 8017e64:	200001c0 	.word	0x200001c0

08017e68 <__swhatbuf_r>:
 8017e68:	b570      	push	{r4, r5, r6, lr}
 8017e6a:	460c      	mov	r4, r1
 8017e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e70:	2900      	cmp	r1, #0
 8017e72:	b096      	sub	sp, #88	@ 0x58
 8017e74:	4615      	mov	r5, r2
 8017e76:	461e      	mov	r6, r3
 8017e78:	da0d      	bge.n	8017e96 <__swhatbuf_r+0x2e>
 8017e7a:	89a3      	ldrh	r3, [r4, #12]
 8017e7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017e80:	f04f 0100 	mov.w	r1, #0
 8017e84:	bf14      	ite	ne
 8017e86:	2340      	movne	r3, #64	@ 0x40
 8017e88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	6031      	str	r1, [r6, #0]
 8017e90:	602b      	str	r3, [r5, #0]
 8017e92:	b016      	add	sp, #88	@ 0x58
 8017e94:	bd70      	pop	{r4, r5, r6, pc}
 8017e96:	466a      	mov	r2, sp
 8017e98:	f000 f862 	bl	8017f60 <_fstat_r>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	dbec      	blt.n	8017e7a <__swhatbuf_r+0x12>
 8017ea0:	9901      	ldr	r1, [sp, #4]
 8017ea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017ea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017eaa:	4259      	negs	r1, r3
 8017eac:	4159      	adcs	r1, r3
 8017eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017eb2:	e7eb      	b.n	8017e8c <__swhatbuf_r+0x24>

08017eb4 <__smakebuf_r>:
 8017eb4:	898b      	ldrh	r3, [r1, #12]
 8017eb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017eb8:	079d      	lsls	r5, r3, #30
 8017eba:	4606      	mov	r6, r0
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	d507      	bpl.n	8017ed0 <__smakebuf_r+0x1c>
 8017ec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017ec4:	6023      	str	r3, [r4, #0]
 8017ec6:	6123      	str	r3, [r4, #16]
 8017ec8:	2301      	movs	r3, #1
 8017eca:	6163      	str	r3, [r4, #20]
 8017ecc:	b003      	add	sp, #12
 8017ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ed0:	ab01      	add	r3, sp, #4
 8017ed2:	466a      	mov	r2, sp
 8017ed4:	f7ff ffc8 	bl	8017e68 <__swhatbuf_r>
 8017ed8:	9f00      	ldr	r7, [sp, #0]
 8017eda:	4605      	mov	r5, r0
 8017edc:	4639      	mov	r1, r7
 8017ede:	4630      	mov	r0, r6
 8017ee0:	f7fe fd50 	bl	8016984 <_malloc_r>
 8017ee4:	b948      	cbnz	r0, 8017efa <__smakebuf_r+0x46>
 8017ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017eea:	059a      	lsls	r2, r3, #22
 8017eec:	d4ee      	bmi.n	8017ecc <__smakebuf_r+0x18>
 8017eee:	f023 0303 	bic.w	r3, r3, #3
 8017ef2:	f043 0302 	orr.w	r3, r3, #2
 8017ef6:	81a3      	strh	r3, [r4, #12]
 8017ef8:	e7e2      	b.n	8017ec0 <__smakebuf_r+0xc>
 8017efa:	89a3      	ldrh	r3, [r4, #12]
 8017efc:	6020      	str	r0, [r4, #0]
 8017efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f02:	81a3      	strh	r3, [r4, #12]
 8017f04:	9b01      	ldr	r3, [sp, #4]
 8017f06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017f0a:	b15b      	cbz	r3, 8017f24 <__smakebuf_r+0x70>
 8017f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f10:	4630      	mov	r0, r6
 8017f12:	f000 f837 	bl	8017f84 <_isatty_r>
 8017f16:	b128      	cbz	r0, 8017f24 <__smakebuf_r+0x70>
 8017f18:	89a3      	ldrh	r3, [r4, #12]
 8017f1a:	f023 0303 	bic.w	r3, r3, #3
 8017f1e:	f043 0301 	orr.w	r3, r3, #1
 8017f22:	81a3      	strh	r3, [r4, #12]
 8017f24:	89a3      	ldrh	r3, [r4, #12]
 8017f26:	431d      	orrs	r5, r3
 8017f28:	81a5      	strh	r5, [r4, #12]
 8017f2a:	e7cf      	b.n	8017ecc <__smakebuf_r+0x18>

08017f2c <memmove>:
 8017f2c:	4288      	cmp	r0, r1
 8017f2e:	b510      	push	{r4, lr}
 8017f30:	eb01 0402 	add.w	r4, r1, r2
 8017f34:	d902      	bls.n	8017f3c <memmove+0x10>
 8017f36:	4284      	cmp	r4, r0
 8017f38:	4623      	mov	r3, r4
 8017f3a:	d807      	bhi.n	8017f4c <memmove+0x20>
 8017f3c:	1e43      	subs	r3, r0, #1
 8017f3e:	42a1      	cmp	r1, r4
 8017f40:	d008      	beq.n	8017f54 <memmove+0x28>
 8017f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017f4a:	e7f8      	b.n	8017f3e <memmove+0x12>
 8017f4c:	4402      	add	r2, r0
 8017f4e:	4601      	mov	r1, r0
 8017f50:	428a      	cmp	r2, r1
 8017f52:	d100      	bne.n	8017f56 <memmove+0x2a>
 8017f54:	bd10      	pop	{r4, pc}
 8017f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017f5e:	e7f7      	b.n	8017f50 <memmove+0x24>

08017f60 <_fstat_r>:
 8017f60:	b538      	push	{r3, r4, r5, lr}
 8017f62:	4d07      	ldr	r5, [pc, #28]	@ (8017f80 <_fstat_r+0x20>)
 8017f64:	2300      	movs	r3, #0
 8017f66:	4604      	mov	r4, r0
 8017f68:	4608      	mov	r0, r1
 8017f6a:	4611      	mov	r1, r2
 8017f6c:	602b      	str	r3, [r5, #0]
 8017f6e:	f7e9 fbdb 	bl	8001728 <_fstat>
 8017f72:	1c43      	adds	r3, r0, #1
 8017f74:	d102      	bne.n	8017f7c <_fstat_r+0x1c>
 8017f76:	682b      	ldr	r3, [r5, #0]
 8017f78:	b103      	cbz	r3, 8017f7c <_fstat_r+0x1c>
 8017f7a:	6023      	str	r3, [r4, #0]
 8017f7c:	bd38      	pop	{r3, r4, r5, pc}
 8017f7e:	bf00      	nop
 8017f80:	200126f0 	.word	0x200126f0

08017f84 <_isatty_r>:
 8017f84:	b538      	push	{r3, r4, r5, lr}
 8017f86:	4d06      	ldr	r5, [pc, #24]	@ (8017fa0 <_isatty_r+0x1c>)
 8017f88:	2300      	movs	r3, #0
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	4608      	mov	r0, r1
 8017f8e:	602b      	str	r3, [r5, #0]
 8017f90:	f7e9 fbda 	bl	8001748 <_isatty>
 8017f94:	1c43      	adds	r3, r0, #1
 8017f96:	d102      	bne.n	8017f9e <_isatty_r+0x1a>
 8017f98:	682b      	ldr	r3, [r5, #0]
 8017f9a:	b103      	cbz	r3, 8017f9e <_isatty_r+0x1a>
 8017f9c:	6023      	str	r3, [r4, #0]
 8017f9e:	bd38      	pop	{r3, r4, r5, pc}
 8017fa0:	200126f0 	.word	0x200126f0

08017fa4 <abort>:
 8017fa4:	b508      	push	{r3, lr}
 8017fa6:	2006      	movs	r0, #6
 8017fa8:	f000 f82c 	bl	8018004 <raise>
 8017fac:	2001      	movs	r0, #1
 8017fae:	f7e9 fb6b 	bl	8001688 <_exit>

08017fb2 <_raise_r>:
 8017fb2:	291f      	cmp	r1, #31
 8017fb4:	b538      	push	{r3, r4, r5, lr}
 8017fb6:	4605      	mov	r5, r0
 8017fb8:	460c      	mov	r4, r1
 8017fba:	d904      	bls.n	8017fc6 <_raise_r+0x14>
 8017fbc:	2316      	movs	r3, #22
 8017fbe:	6003      	str	r3, [r0, #0]
 8017fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017fc4:	bd38      	pop	{r3, r4, r5, pc}
 8017fc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017fc8:	b112      	cbz	r2, 8017fd0 <_raise_r+0x1e>
 8017fca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017fce:	b94b      	cbnz	r3, 8017fe4 <_raise_r+0x32>
 8017fd0:	4628      	mov	r0, r5
 8017fd2:	f000 f831 	bl	8018038 <_getpid_r>
 8017fd6:	4622      	mov	r2, r4
 8017fd8:	4601      	mov	r1, r0
 8017fda:	4628      	mov	r0, r5
 8017fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fe0:	f000 b818 	b.w	8018014 <_kill_r>
 8017fe4:	2b01      	cmp	r3, #1
 8017fe6:	d00a      	beq.n	8017ffe <_raise_r+0x4c>
 8017fe8:	1c59      	adds	r1, r3, #1
 8017fea:	d103      	bne.n	8017ff4 <_raise_r+0x42>
 8017fec:	2316      	movs	r3, #22
 8017fee:	6003      	str	r3, [r0, #0]
 8017ff0:	2001      	movs	r0, #1
 8017ff2:	e7e7      	b.n	8017fc4 <_raise_r+0x12>
 8017ff4:	2100      	movs	r1, #0
 8017ff6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017ffa:	4620      	mov	r0, r4
 8017ffc:	4798      	blx	r3
 8017ffe:	2000      	movs	r0, #0
 8018000:	e7e0      	b.n	8017fc4 <_raise_r+0x12>
	...

08018004 <raise>:
 8018004:	4b02      	ldr	r3, [pc, #8]	@ (8018010 <raise+0xc>)
 8018006:	4601      	mov	r1, r0
 8018008:	6818      	ldr	r0, [r3, #0]
 801800a:	f7ff bfd2 	b.w	8017fb2 <_raise_r>
 801800e:	bf00      	nop
 8018010:	200001c0 	.word	0x200001c0

08018014 <_kill_r>:
 8018014:	b538      	push	{r3, r4, r5, lr}
 8018016:	4d07      	ldr	r5, [pc, #28]	@ (8018034 <_kill_r+0x20>)
 8018018:	2300      	movs	r3, #0
 801801a:	4604      	mov	r4, r0
 801801c:	4608      	mov	r0, r1
 801801e:	4611      	mov	r1, r2
 8018020:	602b      	str	r3, [r5, #0]
 8018022:	f7e9 fb21 	bl	8001668 <_kill>
 8018026:	1c43      	adds	r3, r0, #1
 8018028:	d102      	bne.n	8018030 <_kill_r+0x1c>
 801802a:	682b      	ldr	r3, [r5, #0]
 801802c:	b103      	cbz	r3, 8018030 <_kill_r+0x1c>
 801802e:	6023      	str	r3, [r4, #0]
 8018030:	bd38      	pop	{r3, r4, r5, pc}
 8018032:	bf00      	nop
 8018034:	200126f0 	.word	0x200126f0

08018038 <_getpid_r>:
 8018038:	f7e9 bb0e 	b.w	8001658 <_getpid>

0801803c <_init>:
 801803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801803e:	bf00      	nop
 8018040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018042:	bc08      	pop	{r3}
 8018044:	469e      	mov	lr, r3
 8018046:	4770      	bx	lr

08018048 <_fini>:
 8018048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801804a:	bf00      	nop
 801804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801804e:	bc08      	pop	{r3}
 8018050:	469e      	mov	lr, r3
 8018052:	4770      	bx	lr
